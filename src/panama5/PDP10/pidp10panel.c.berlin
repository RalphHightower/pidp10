// PiDP-10 front panel driver.
//
// 20231008 OV october 2023 board

#include <stdio.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h> // extra
#include <time.h>				//Needed for nanosleep
#include <pthread.h>			//Needed for pthread
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <inttypes.h>
typedef uint64_t uint64;
#include "pidp10panel.h"

// the interface variables shared with other threads
volatile u_int32_t gpio_switchstatus[5] ; // bitfields: 5 rows of up to 18 switches
volatile u_int32_t gpio_ledstatus[8] ;	// bitfields: 7 ledrows of up to 18 LEDs


// for multiplexing, sleep time between row switches in ns (but excl. overhead!)
long intervl = 50000;	//	300000;		// light each row of leds this long


#define BLOCK_SIZE 		(4*1024)
// IO Acces
struct bcm2835_peripheral {
    unsigned long addr_p;
    int mem_fd;
    void *map;
    volatile unsigned int *addr;
};
struct bcm2835_peripheral gpio; // needs initialisation
static unsigned bcm_host_get_peripheral_address(void); // find Pi's gpio base address
static unsigned get_dt_ranges(const char *filename, unsigned offset);
void short_wait(void);

// GPIO setup macros.
// In early versions INP_GPIO(x) was used always before OUT_GPIO(x),
// this is disabled now by INO_GPIO(g)
#define INO_GPIO(g) //INP_GPIO(g) // Use this before OUT_GPIO
#define INP_GPIO(g)   *(gpio.addr + ((g)/10)) &= ~(7<<(((g)%10)*3))
#define OUT_GPIO(g)   *(gpio.addr + ((g)/10)) |=  (1<<(((g)%10)*3))
#define SET_GPIO_ALT(g,a) *(gpio.addr + (((g)/10))) |= (((a)<=3?(a) + 4:(a)==4?3:2)<<(((g)%10)*3))
#define GPIO_SET  *(gpio.addr + 7)  // sets   bits which are 1 ignores bits which are 0
#define GPIO_CLR  *(gpio.addr + 10) // clears bits which are 1 ignores bits which are 0
#define GPIO_READ(g)  *(gpio.addr + 13) &= (1<<(g))
#define GPIO_PULL *(gpio.addr + 37) // pull up/pull down
#define GPIO_PULLCLK0 *(gpio.addr + 38) // pull up/pull down clock
// Pi 4 update, 
/* https://github.com/RPi-Distro/raspi-gpio/blob/master/raspi-gpio.c */	
/* 2711 has a different mechanism for pin pull-up/down/enable  */
#define GPPUPPDN0                57        /* Pin pull-up/down for pins 15:0  */
#define GPPUPPDN1                58        /* Pin pull-up/down for pins 31:16 */
#define GPPUPPDN2                59        /* Pin pull-up/down for pins 47:32 */
#define GPPUPPDN3                60        /* Pin pull-up/down for pins 57:48 */




// GPIO pin definitions
//		7 ledrows each provide power to a block of 18 LEDs (when set to output high)
//		when GPIO 22 is set to output LOW, 
//              - the 74hc238 decodes these 3 address lines into one of the 7 blocks of LEDs on the board
//		- to light up a LED, set its column GPIO pin LOW. To keep it dark, set that GPIO pin HIGH
//		when GPIO 22 is set to output HIGH,
//		- the 74hc138 decods these 3 address lines into one of the 5 blocks of switches on the board 
//		- the column pins needs to be set to input-with-pullup-high to read switches

u_int8_t xrows[3] = { 4, 17, 27 };
u_int8_t xIO = 22;			// GPIO 22: 0=drive LEDs, 1=read switches (or, 0=select 74hc238, 1=select 74hc138)
u_int8_t cols[18] = { 21,20,16,12,7,8,25,24,23,  18,10,9,11,5,6,13,19,26 };



// helper functions: 1 -- gpio
//
// map GPIO into virtual memory space ------------------------
int map_peripheral(struct bcm2835_peripheral *p)
{
	if ((p->mem_fd = open("/dev/mem", O_RDWR | O_SYNC)) < 0) {
		printf("Failed to open /dev/mem, try checking permissions.\n");
		return -1;
	}
	p->map = mmap(
	NULL, BLOCK_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, p->mem_fd, // File descriptor to physical memory virtual file '/dev/mem'
			p->addr_p); // Address in physical map that we want this memory block to expose
	if (p->map == MAP_FAILED) {
		perror("mmap");
		return -1;
	}
	p->addr = (volatile unsigned int *) p->map;
	return 0;
}

void unmap_peripheral(struct bcm2835_peripheral *p)
{
	munmap(p->map, BLOCK_SIZE);
	close(p->mem_fd);
}

static unsigned bcm_host_get_peripheral_address(void) // find Pi's gpio base address
{
// Pi 4 fix: https://github.com/raspberrypi/userland/blob/master/host_applications/linux/libs/bcm_host/bcm_host.c
   unsigned address = get_dt_ranges("/proc/device-tree/soc/ranges", 4);
   if (address == 0)
      address = get_dt_ranges("/proc/device-tree/soc/ranges", 8);
   return address == ~0 ? 0x20000000 : address;

}

static unsigned get_dt_ranges(const char *filename, unsigned offset)
{
	unsigned address = ~0;
	FILE *fp = fopen(filename, "rb");
	if (fp) {
		unsigned char buf[4];
		fseek(fp, offset, SEEK_SET);
		if (fread(buf, 1, sizeof buf, fp) == sizeof buf)
			address = buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3] << 0;
		fclose(fp);
	}
	return address;
}


void short_wait(void) // creates pause required in between clocked GPIO settings changes
{
	fflush(stdout); //
	usleep(1); // suggested as alternative for asm which c99 does not accept
}



// helper functions: 2 -- parallel threads for GPIO mux and LED brightness averaging
//
void *blink(void *ptr); // the real-time GPIO multiplexing process to start up
void *gpiopattern_update_leds(void *ptr); // the averaging thread
void gpio_mux_thread_start(void);

pthread_t blink_thread;
int blink_thread_terminate = 0;

void gpio_mux_thread_start()
{
    int res;
    res = pthread_create(&blink_thread, NULL, blink, &blink_thread_terminate);
    if (res) {
        fprintf(stderr, "Error creating gpio_mux thread, return code %d\n", res);
        exit(EXIT_FAILURE);
    }
    printf("Created blink_thread\n");
    sleep(2); // allow 2 sec for multiplex to start
}



// A - the multiplexing thread 'blink'
//
void *blink(void *ptr)
{
	int	*terminate = (int *)ptr;
	int	col, row, i, k, switchscan, tmp;
	int	p,phase = 0;
#define PHASE_CNT 100
volatile u_int32_t gpio_ledbuffer[8][PHASE_CNT] ;	// bitfields: 7 ledrows of up to 18 LEDs

	// set thread to real time priority -----------------
	struct sched_param sp;
	sp.sched_priority = 98; // maybe 99, 32, 31?
	if (pthread_setschedparam(pthread_self(), SCHED_FIFO, &sp))
		fprintf(stderr, "warning: failed to set RT priority\n");
		
	// Find gpio address (different for Pi 1,2 and 4) ----------
	gpio.addr_p = bcm_host_get_peripheral_address() + +0x200000;
	if (gpio.addr_p == 0x20200000) 		printf("*** RPi Plus detected\n");
	else if (gpio.addr_p == 0x3f000000) printf("*** RPi 2/3/Z detected\n");
	else if (gpio.addr_p == 0xfe200000) printf("*** RPi 4 detected\n");

	// map GPIO into virtual memory space ------------------------
	if (map_peripheral(&gpio) == -1) {
		printf("Failed to map the physical GPIO registers into the virtual memory space.\n");
		return (void *) -1;
	}

	// initialise GPIO
	// - xIO pin: output L
	OUT_GPIO(xIO);
	GPIO_CLR = 1 << xIO;
	// - row address pins: output L
	for (row = 0; row < 3; row++) {
		OUT_GPIO(xrows[row]);
		GPIO_CLR = 1 << xrows[row];
	}
	// - columns: input
	for (col = 0; col < 18; col++) { // Define ledrows as input
		INP_GPIO(cols[col]);
	}

	// initialise GPIO pullups. Different for Pi 4 and older Pi's
	if (gpio.addr_p==0xfe200000)
	{
		//printf("Configuring pullups for Pi 4\r\n");
		/* https://github.com/RPi-Distro/raspi-gpio/blob/master/raspi-gpio.c */	
		/* 2711 has a different mechanism for pin pull-up/down/enable  */
		int gpiox;
		int pullreg;
		int pullshift;
		unsigned int pullbits;
		unsigned int pull;

		// GPIO column pins
		for (i=0;i<18;i++)
		{
			gpiox = cols[i];
			pullreg = GPPUPPDN0 + (gpiox>>4);
			pullshift = (gpiox & 0xf) << 1;
			pull = 1;	// pullup

			pullbits = *(gpio.addr + pullreg);
			//printf("col %d pullreg %d pullshift %x pull %d -- pullbits %x --> ", gpiox, pullreg, pullshift, pull, pullbits);
			pullbits &= ~(3 << pullshift);
			pullbits |= (pull << pullshift);
			*(gpio.addr + pullreg) = pullbits;
			//printf("%x == %x --- %xl\r\n", pullbits, *(&gpio.addr_p + pullreg), gpio.addr_p + pullreg);
		}
	}
	else 	// configure pullups for older Pis
	{
		// BCM2835 ARM Peripherals PDF p 101 & elinux.org/RPi_Low-level_peripherals#Internal_Pull-Ups_.26_Pull-Downs
		GPIO_PULL = 2; // pull-up
		short_wait(); // must wait 150 cycles
		GPIO_PULLCLK0 = 0x0c003ff0; // selects GPIO pins 4..13 and 26,27

		short_wait();
		GPIO_PULL = 0; // reset GPPUD register
		short_wait();
		GPIO_PULLCLK0 = 0; // remove clock
		short_wait(); // probably unnecessary
	}
	// --------------------------------------------------

	// printf("\nPiDP-10 FP on\n");
	// start the actual multiplexing
		
	while (*terminate == 0)
	{
		// LIGHT THE LEDS	
		// ---- set cols to 18 bits of output -----
		for (i = 0; i < 18; i++) 
		{
			INO_GPIO(cols[i]); //
			OUT_GPIO(cols[i]); // Define cols as output
		}
		// --- set xIO to L, to enable the 74HC238 used for the LED rows (and disable 74HC138 for switches)
		GPIO_CLR = 1 << xIO;

		for (row=0; row<7; row++)	// 7 rows of LEDS get lit sequentially, multiplexing!
		{
// do work for next phase: put snapshot of ledstatus from simulator in the ringbuffer ledbuffer
// could be moved into phase loop for faster capture of simulator signals
if (++phase==PHASE_CNT)
	phase=0;
for(i=0;i<7;i++)
gpio_ledbuffer[i][phase]=gpio_ledstatus[i];

for (p=0;p<PHASE_CNT;p++)
{
			// Toggle 18 columns for this ledrow (which LEDs should be on (CLR = on))
			for (k = 0; k < 18; k++) {
				if ((gpio_ledbuffer[row][p] & (1 << k)) == 0)
					GPIO_SET = 1 << cols[k];
				else
					GPIO_CLR = 1 << cols[k];
			}

			// ----- set ledrow pin to high (switch on the power) -----
if (p==0)	// only need to do this for the first phase
{
			for(i=0; i<3;i++)
			{
				if((row & (1<<i)) == 0)
					GPIO_CLR = 1 << xrows[i];
				else	
					GPIO_SET = 1 << xrows[i];
			}
}
			// ----- now wait a while with LEDs burning -----
			nanosleep((struct timespec[]) {	{	0, intervl/PHASE_CNT}}, NULL);

			// set address to ledrow 7, which does not exist. This is to avoid ghosting
			// (because we're going to set the columns for the next row and no LEDs should react till done)

if (p==PHASE_CNT-1)
			for(i=0; i<3;i++)
				GPIO_SET = 1 << xrows[i];
}		
		}
		// READ THE SWITCHES
		
		// ---- set cols to 18 bits of input -----
		for (i = 0; i < 18; i++) 
			INP_GPIO(cols[i]); // Define cols as input
		// --- set xIO to H, to enable the 74HC138 used for the switch rows 
		//     (and disable 74HC238 for LEDs)
		GPIO_SET = 1 << xIO;

		for (row=0; row<5; row++)		// there are 5 rows of 18 switches each
		{
			// ----- select row from address (for this row, output 0V to overrule built-in pull-up 
			//       from column input pin -----
			for(i=0; i<3;i++)
			{
				if((row & (1<<i)) == 0)
					GPIO_CLR = 1 << xrows[i];
				else	
					GPIO_SET = 1 << xrows[i];
			}

			nanosleep((struct timespec[]) { { 0, intervl / 10}}, NULL); 
			//nanosleep((struct timespec[]) { { 0, intervl / 100}}, NULL); 
			//// probably unnecessary long wait, maybe put above this loop also

			// ----- read switches (request MCP23017 gpio values) -----
		
			switchscan = 0;
			for (i = 0; i < 18; i++) // 12 switches in each row
			{
				tmp = GPIO_READ(cols[i]);
				if (tmp != 0)
					switchscan += 1 << i;
			}
			gpio_switchstatus[row] = switchscan;

		}
		// done with reading the switches, so start the next cycle of lighting up LEDs
	}
	
	// received terminate signal, close down
}

/*
// test main function for debugging standalone
int main(void)
{
	time_t start, end;
	double elapsed;  // seconds
	int i,democounter,print;
	
	printf("Start\n");
	
	// start up multiplexing thread
	gpio_mux_thread_start();

	printf("Run for X seconds\n");
	start = time(NULL);
	int terminate = 1;
	while (1)	//(terminate) 
	{
		for (i=0; i<7; i++)
		{
			//gpio_ledstatus[i] = (u_int32_t) rand();
			gpio_ledstatus[i] = (u_int32_t) democounter++;
		}
		
		for (i=0; i<5; i++)
		{
			if (gpio_switchstatus[i]!=262143)
			{
				printf("%d-%d | ", i, gpio_switchstatus[i]);
				print=1;
			}
		}
		if (print)
		{
			printf("\n");
			print=0;
		}

		end = time(NULL);
		elapsed = difftime(end, start);
//		if (elapsed >= 60.0 ) // 60 seconds
//			terminate = 0;
//		else  // No need to sleep when 90.0 seconds elapsed.
		usleep(90);
	}
	

	printf("Terminate threads\n");
	blink_thread_terminate=1;
	
	sleep (2);	// allow threads to close down
	printf("Done\n");
	return 0;
}
*/

// should include kx10defs.h, but for overview temporarily here:
typedef u_int64_t uint64;
typedef u_int64_t t_addr;

#define __STDC_FORMAT_MACROS
#include <inttypes.h>

// global variables in kx10cpu.c, snooped at here
extern t_addr  PC;                                   /* Program counter */
extern uint32_t  IR;                                   /* Instruction register */
extern uint32_t  AC;                                   /* Operand accumulator */
extern t_addr  AB;                                   /* Memory address buffer */
extern uint64  AR;                                   /* Primary work register */
//extern uint64	MB;					/* Memory buffer *** maybe unnecessary *** */


// ==== functions to read out address and data switches
extern uint64  SW;                                   /* Switch register */
uint64 getPIDPSwitchRegister()
{
	uint64 x = ~gpio_switchstatus[0] & 0777777;
	return (x << 18) | (~gpio_switchstatus[1] & 0777777);
}

uint64 getPIDPAdressSwitches()
{
	return ~gpio_switchstatus[2] & 0777777;
}
// ===================



//void printBits(size_t const size, void const * const ptr);
u_int16_t getSWITCH(uint8_t row);
void injectCMD(char *pidpCMD);
void pidpCMD(char *cptr);

// string that contains a simh command to be injected into simh command line
char cmdBuffer[255];
// can be called to inject a command in simh command line.
// it will be picked up in scp.c's read_line() function, see code there
void injectCMD(char *pidpCMD)
{
	strcpy(cmdBuffer, pidpCMD);
	//printf("injected %s\r\n", cmdBuffer);
}
// used after command injection to forget command (and not inject it again)
void pidpCMD(char *cptr)
{
	strcpy (cptr, cmdBuffer);
	cmdBuffer[0]='\0';	// cmd is now sent to simh, done
	//printf("cptr is now %s\r\n", cptr);
}

// ====================================================================================
// functions to deal with reading the switches on the PIDP 
// ====================================================================================
// let simh access one of the 5 rows (of 16 switches each) on PIDP panel:
u_int16_t getSWITCH(uint8_t row)
{
	return ~gpio_switchstatus[row];
}

void dumpREG(void)
{
	printf("PC %llo   IR %llo   AC %llo  AB %llo   AR %llo \r\n", PC, IR, AC, AB, AR);
}



// ====================================================================================
// functions to update all the LEDs on the front panel from CPU registers in kx10_cpu.c
// ====================================================================================
// to avoid interference with multiplexing thread, update LEDs in temp buffer first
static u_int16_t temp_ledstatus[8] = { 0x00 };

void updatePC(int PC)
{
	PC &= 0777777;
	gpio_ledstatus[4] = PC;
}

void updateIR(int IR)
{
	IR &= 0777777;
	gpio_ledstatus[3] = IR;
}

void updateAB(int AB)
{
	AB &= 0777777;
	gpio_ledstatus[2] = AB;
}

void updateMI(uint64 data)
{
	data &= 0777777777777ULL;
	gpio_ledstatus[0] = data & 0777777;
	gpio_ledstatus[1] = data >> 18;
}

void updateMI_PROG(int data)
{
	data &= 1;
        gpio_ledstatus[6] &= ~(1 << 16);
	gpio_ledstatus[6] = data << 16;
}

void updateMI_MEM(int data)
{
	data &= 1;
        gpio_ledstatus[6] &= ~(1 << 17);
	gpio_ledstatus[6] = data << 17;
}

void updateIOB_PIR(int data)
{
	data &= 0177;
	gpio_ledstatus[5] &= ~(0177 << 7);
	gpio_ledstatus[5] |= data << 7;
}

void updatePIP(int data)
{
	data &= 0177;
	gpio_ledstatus[6] &= ~(0177 << 7);
	gpio_ledstatus[6] |= data << 7;
}

void updatePIR(int data)
{
	data &= 0177;
	gpio_ledstatus[6] &= 0177;
	gpio_ledstatus[6] |= data;
}

void updatePIE(int data)
{
	data &= 0177;
	gpio_ledstatus[5] &= 0177;
	gpio_ledstatus[5] |= data;
}

void updateRUN(int data)
{
	data &= 1;
	gpio_ledstatus[6] &= ~(1 << 14);
	gpio_ledstatus[6] |= data << 14;
}

void updatePION(int data)
{
	data &= 1;
	gpio_ledstatus[6] &= ~(1 << 15);
	gpio_ledstatus[6] |= data << 15;
}

void updatePOWER(int data)
{
	data &= 1;
	gpio_ledstatus[6] &= ~(1 << 16);
	gpio_ledstatus[6] |= data << 16;
}

void updatePSTOP(int data)
{
	data &= 1;
	gpio_ledstatus[5] &= ~(1 << 14);
	gpio_ledstatus[5] |= data << 14;
}

void updateUSER(int data)
{
	data &= 1;
	gpio_ledstatus[5] &= ~(1 << 15);
	gpio_ledstatus[5] |= data << 15;
}

void updateMSTOP(int data)
{
	data &= 1;
	gpio_ledstatus[5] &= ~(1 << 16);
	gpio_ledstatus[5] |= data << 16;
}
