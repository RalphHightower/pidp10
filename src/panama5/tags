!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AB	PDP10/kx10_cpu.c	/^t_addr  AB;                                   \/* Memory address buffer *\/$/;"	v
ABS	PDP10/kx10_dt.c	256;"	d	file:
ABS	PDP10/pdp6_dtc.c	231;"	d	file:
ABS	display/display.c	812;"	d	file:
ABS	display/imlac.c	50;"	d	file:
ABS	display/tt2500.c	51;"	d	file:
ABS	display/vt11.c	216;"	d	file:
ABSVECTOR	display/vt11.c	/^            BSVECT, CIRCLE, ABSVECTOR   \/* VS60 only *\/$/;"	e	enum:gmode	file:
AC	PDP10/kx10_cpu.c	/^uint32  AC;                                   \/* Operand accumulator *\/$/;"	v
ACK	PDP10/ka10_auxcpu.c	38;"	d	file:
ACK	PDP10/ka10_ten11.c	57;"	d	file:
ACK	PDP10/pdp6_slave.c	39;"	d	file:
ACKFLG	PDP10/kl10_fe.c	334;"	d	file:
ACKFLG	PDP10/ks10_lp.c	108;"	d	file:
ACR	PDP10/kx10_dc.c	64;"	d	file:
ACTIVATE_API	sim_defs.h	/^typedef t_stat (*ACTIVATE_API)(UNIT *unit, int32 interval);$/;"	t
AC_XPCW	PDP10/kx10_defs.h	247;"	d
AD	PDP10/kx10_cpu.c	/^uint64  AD;                                   \/* Address Data *\/$/;"	v
ADDCARRY	slirp/cksum.c	44;"	d	file:
ADDR	PDP10/ka10_ai.c	155;"	d	file:
ADDR_PAR	PDP10/kx10_defs.h	215;"	d
ADE	PDP10/pdp6_dsk.c	70;"	d	file:
ADRFLT	PDP10/kx10_defs.h	270;"	d
ADRFLT	PDP10/kx10_defs.h	279;"	d
ADT	PDP10/pdp6_dsk.c	81;"	d	file:
ADX	PDP10/kx10_cpu.c	/^uint64  ADX;                                  \/* Extension to AD *\/$/;"	v
AF_INET6	sim_sock.c	437;"	d	file:
AIO_ACTIVATE	sim_defs.h	1245;"	d
AIO_ACTIVATE	sim_defs.h	1283;"	d
AIO_ACTIVATE	sim_defs.h	1328;"	d
AIO_CALL	sim_disk.c	200;"	d	file:
AIO_CALL	sim_disk.c	330;"	d	file:
AIO_CALL	sim_tape.c	178;"	d	file:
AIO_CALL	sim_tape.c	374;"	d	file:
AIO_CALLSETUP	sim_disk.c	195;"	d	file:
AIO_CALLSETUP	sim_disk.c	329;"	d	file:
AIO_CALLSETUP	sim_tape.c	171;"	d	file:
AIO_CALLSETUP	sim_tape.c	371;"	d	file:
AIO_CANCEL	sim_defs.h	1167;"	d
AIO_CANCEL	sim_defs.h	1176;"	d
AIO_CANCEL	sim_defs.h	1339;"	d
AIO_CHECK_EVENT	sim_defs.h	1314;"	d
AIO_CHECK_EVENT	sim_defs.h	1330;"	d
AIO_CLEANUP	sim_defs.h	1223;"	d
AIO_CLEANUP	sim_defs.h	1269;"	d
AIO_CLEANUP	sim_defs.h	1335;"	d
AIO_EVENT_BEGIN	sim_defs.h	1178;"	d
AIO_EVENT_BEGIN	sim_defs.h	1336;"	d
AIO_EVENT_COMPLETE	sim_defs.h	1181;"	d
AIO_EVENT_COMPLETE	sim_defs.h	1337;"	d
AIO_ILOCK	sim_defs.h	1240;"	d
AIO_ILOCK	sim_defs.h	1278;"	d
AIO_INIT	sim_defs.h	1215;"	d
AIO_INIT	sim_defs.h	1255;"	d
AIO_INIT	sim_defs.h	1331;"	d
AIO_IS_ACTIVE	sim_defs.h	1165;"	d
AIO_IS_ACTIVE	sim_defs.h	1338;"	d
AIO_IUNLOCK	sim_defs.h	1241;"	d
AIO_IUNLOCK	sim_defs.h	1279;"	d
AIO_LOCK	sim_defs.h	1161;"	d
AIO_LOCK	sim_defs.h	1333;"	d
AIO_MAIN_THREAD	sim_defs.h	1160;"	d
AIO_MAIN_THREAD	sim_defs.h	1332;"	d
AIO_QUEUE_CHECK	sim_defs.h	1140;"	d
AIO_QUEUE_MODE	sim_defs.h	1214;"	d
AIO_QUEUE_MODE	sim_defs.h	1254;"	d
AIO_QUEUE_MODE	sim_defs.h	1326;"	d
AIO_QUEUE_SET	sim_defs.h	1243;"	d
AIO_QUEUE_SET	sim_defs.h	1281;"	d
AIO_QUEUE_VAL	sim_defs.h	1242;"	d
AIO_QUEUE_VAL	sim_defs.h	1280;"	d
AIO_SET_INTERRUPT_LATENCY	sim_defs.h	1319;"	d
AIO_SET_INTERRUPT_LATENCY	sim_defs.h	1340;"	d
AIO_TLS	sim_defs.h	1128;"	d
AIO_TLS	sim_defs.h	1130;"	d
AIO_TLS	sim_defs.h	1132;"	d
AIO_TLS	sim_defs.h	1134;"	d
AIO_TLS	sim_defs.h	1138;"	d
AIO_TLS	sim_defs.h	1341;"	d
AIO_UNLOCK	sim_defs.h	1163;"	d
AIO_UNLOCK	sim_defs.h	1334;"	d
AIO_UPDATE_QUEUE	sim_defs.h	1244;"	d
AIO_UPDATE_QUEUE	sim_defs.h	1282;"	d
AIO_UPDATE_QUEUE	sim_defs.h	1327;"	d
AIO_VALIDATE	sim_defs.h	1308;"	d
AIO_VALIDATE	sim_defs.h	1329;"	d
AI_DEVNUM	PDP10/ka10_ai.c	56;"	d	file:
AI_NAME	PDP10/ka10_ai.c	57;"	d	file:
AI_NUMERICHOST	sim_sock.h	102;"	d
ALM	PDP10/pdp6_dsk.c	71;"	d	file:
ALS	PDP10/pdp6_dsk.c	83;"	d	file:
ALT	PDP10/ka10_stk.c	79;"	d	file:
AMASK	PDP10/kx10_defs.h	331;"	d
AMASK	PDP10/kx10_defs.h	341;"	d
AMPLITUDE	sim_video.c	/^const int AMPLITUDE = 20000;$/;"	v
AOB	PDP10/kx10_cpu.c	724;"	d	file:
AOB	PDP10/kx10_cpu.c	727;"	d	file:
AOB	PDP10/kx10_sys.c	497;"	d	file:
API_MASK	PDP10/kx10_defs.h	346;"	d
APOINT	display/vtmacs.h	236;"	d
APOINT3	display/vtmacs.h	239;"	d
APP_CLASS	display/win32.c	56;"	d	file:
APP_MENU	display/win32.c	57;"	d	file:
AR	PDP10/kx10_cpu.c	/^uint64  AR;                                   \/* Primary work register *\/$/;"	v
ARC	display/vtmacs.h	277;"	d
ARC3	display/vtmacs.h	282;"	d
ARPOP_REPLY	slirp/slirp.h	171;"	d
ARPOP_REQUEST	slirp/slirp.h	170;"	d
ARP_DONT_AGE	PDP10/kx10_imp.c	307;"	d	file:
ARP_HWTYPE_ETH	PDP10/kl10_nia.c	286;"	d	file:
ARP_HWTYPE_ETH	PDP10/kx10_imp.c	286;"	d	file:
ARP_REPLY	PDP10/kl10_nia.c	285;"	d	file:
ARP_REPLY	PDP10/kx10_imp.c	285;"	d	file:
ARP_REQUEST	PDP10/kl10_nia.c	284;"	d	file:
ARP_REQUEST	PDP10/kx10_imp.c	284;"	d	file:
ARP_TABLE_SIZE	slirp/slirp.h	197;"	d
ARRAYLEN	display/carbon.c	23;"	d	file:
ARRAY_SIZE	slirp_glue/qemu/osdep.h	136;"	d
ARX	PDP10/kx10_cpu.c	/^uint64  ARX;                                  \/* Extension to AR *\/$/;"	v
AR_FULL	PDP10/kx10_rh.c	109;"	d	file:
ASC_INVCDB	sim_scsi.c	76;"	d	file:
ASC_INVCOM	sim_scsi.c	75;"	d	file:
ASC_NOMEDIA	sim_scsi.c	77;"	d	file:
ASC_OK	sim_scsi.c	74;"	d	file:
ASR	display/type340.c	/^    ty340word ASR;              \/* Address Save Register *\/$/;"	m	struct:type340	file:
ASSURE	sim_defs.h	1100;"	d
AS_U0	PDP10/kx10_rp.c	119;"	d	file:
AS_U0	PDP10/kx10_rs.c	105;"	d	file:
AS_U0	PDP10/kx10_tu.c	117;"	d	file:
ATTN	PDP10/ka10_pmp.c	233;"	d	file:
ATTN	PDP10/kx10_dp.c	105;"	d	file:
ATTN_EN	PDP10/kx10_rh.c	130;"	d	file:
AUXCPURANGE	PDP10/kx10_cpu.c	338;"	d	file:
AUXCPU_DEVNUM	PDP10/ka10_auxcpu.c	47;"	d	file:
AUXCPU_MEM_CYCLE	PDP10/ka10_auxcpu.c	44;"	d	file:
AUXCPU_POLL	PDP10/ka10_auxcpu.c	49;"	d	file:
AVECT	display/vtmacs.h	291;"	d
AVECT3	display/vtmacs.h	294;"	d
AWS_REC	sim_tape.h	86;"	d
AWS_TMK	sim_tape.h	85;"	d
AccessFormat	sim_disk.c	/^    uint8       AccessFormat;           \/* 1 - SIMH, 2 - RAW *\/$/;"	m	struct:simh_disk_footer	file:
ArpTable	slirp/slirp.h	/^typedef struct ArpTable {$/;"	s
ArpTable	slirp/slirp.h	/^} ArpTable;$/;"	t	typeref:struct:ArpTable
ArrayName	sim_BuildROMs.c	/^    const char *BinaryName;             const char *IncludeFileName; size_t expected_size; unsigned int checksum;  const char *ArrayName;            const char *Comments;} ROMs[] = {$/;"	m	struct:ROM_File_Descriptor	file:
B22_FLAG	PDP10/kx10_dp.c	79;"	d	file:
B22_FLAG	PDP10/kx10_mt.c	97;"	d	file:
B22_FLAG	PDP10/kx10_rc.c	65;"	d	file:
B22_FLAG	PDP10/kx10_rh.c	104;"	d	file:
BAD_TAPE	PDP10/kx10_mt.c	81;"	d	file:
BAT	sim_disk.c	/^    uint32 *BAT;$/;"	m	struct:VHD_IOData	file:
BBN	PDP10/kx10_defs.h	76;"	d
BBN_ACC	PDP10/kx10_defs.h	372;"	d
BBN_EXEC	PDP10/kx10_defs.h	377;"	d
BBN_MERGE	PDP10/kx10_defs.h	380;"	d
BBN_PAGE	PDP10/kx10_defs.h	368;"	d
BBN_PN	PDP10/kx10_defs.h	371;"	d
BBN_READ	PDP10/kx10_defs.h	379;"	d
BBN_SPT	PDP10/kx10_defs.h	370;"	d
BBN_TRP	PDP10/kx10_defs.h	374;"	d
BBN_TRP1	PDP10/kx10_defs.h	373;"	d
BBN_TRPMOD	PDP10/kx10_defs.h	375;"	d
BBN_TRPPG	PDP10/kx10_defs.h	369;"	d
BBN_TRPUSR	PDP10/kx10_defs.h	376;"	d
BBN_WRITE	PDP10/kx10_defs.h	378;"	d
BDL	PDP10/ks10_kmc.c	/^typedef struct buffer_list BDL;$/;"	t	typeref:struct:buffer_list	file:
BDL_EOM	PDP10/ks10_kmc.c	222;"	d	file:
BDL_LDS	PDP10/ks10_kmc.c	218;"	d	file:
BDL_RSY	PDP10/ks10_kmc.c	219;"	d	file:
BDL_SOM	PDP10/ks10_kmc.c	223;"	d	file:
BDL_S_XAD	PDP10/ks10_kmc.c	221;"	d	file:
BDL_XAD	PDP10/ks10_kmc.c	220;"	d	file:
BEACON	PDP10/kx10_dpy.c	806;"	d	file:
BELL_CHAR	sim_console.c	3658;"	d	file:
BELL_INTERVAL_MS	sim_console.c	3659;"	d	file:
BINRDATA	sim_defs.h	1027;"	d
BINRDATA	sim_defs.h	939;"	d
BINRDATAD	sim_defs.h	1029;"	d
BINRDATAD	sim_defs.h	941;"	d
BINRDATADF	sim_defs.h	1031;"	d
BINRDATADF	sim_defs.h	943;"	d
BIN_FLG	PDP10/kx10_pt.c	44;"	d	file:
BIT	sim_defs.h	1079;"	d
BIT	sim_defs.h	991;"	d
BIT1	PDP10/kx10_defs.h	183;"	d
BIT10	PDP10/kx10_defs.h	192;"	d
BIT10_35	PDP10/kx10_defs.h	193;"	d
BIT12	PDP10/kx10_defs.h	194;"	d
BIT17	PDP10/kx10_defs.h	195;"	d
BIT2	PDP10/kx10_defs.h	184;"	d
BIT3	PDP10/kx10_defs.h	185;"	d
BIT4	PDP10/kx10_defs.h	186;"	d
BIT5	PDP10/kx10_defs.h	187;"	d
BIT6	PDP10/kx10_defs.h	188;"	d
BIT7	PDP10/kx10_defs.h	189;"	d
BIT8	PDP10/kx10_defs.h	190;"	d
BIT9	PDP10/kx10_defs.h	191;"	d
BITF	sim_defs.h	1081;"	d
BITF	sim_defs.h	993;"	d
BITFFMT	sim_defs.h	1083;"	d
BITFFMT	sim_defs.h	995;"	d
BITFIELD	sim_defs.h	/^struct BITFIELD {$/;"	s
BITFIELD	sim_defs.h	/^typedef struct BITFIELD BITFIELD;$/;"	t	typeref:struct:BITFIELD
BITFNAM	sim_defs.h	1084;"	d
BITFNAM	sim_defs.h	996;"	d
BITMAP_IS_SET	sim_disk.c	6594;"	d	file:
BITMASK	display/type340.c	81;"	d	file:
BITMASK	display/vt11.c	120;"	d	file:
BITNC	sim_defs.h	1080;"	d
BITNC	sim_defs.h	992;"	d
BITNCF	sim_defs.h	1082;"	d
BITNCF	sim_defs.h	994;"	d
BITSAMPLE	sim_console.c	/^struct BITSAMPLE {$/;"	s	file:
BITSAMPLE	sim_console.c	/^typedef struct BITSAMPLE BITSAMPLE;$/;"	t	typeref:struct:BITSAMPLE	file:
BITSAMPLE_REG	sim_console.c	/^struct BITSAMPLE_REG {$/;"	s	file:
BITSAMPLE_REG	sim_console.c	/^typedef struct BITSAMPLE_REG BITSAMPLE_REG;$/;"	t	typeref:struct:BITSAMPLE_REG	file:
BKSL	PDP10/ka10_stk.c	73;"	d	file:
BLINK_COUNT	display/vt11.c	582;"	d	file:
BLOCKETTE_SZ	sim_disk.c	1610;"	d	file:
BLOCK_SIZE	PDP10/pidp10panel.c	48;"	d	file:
BLVECT	display/vtmacs.h	262;"	d
BL_OFF	display/vtmacs.h	155;"	d
BL_ON	display/vtmacs.h	156;"	d
BL_SAME	display/vtmacs.h	154;"	d
BMASK1	PDP10/kx10_cpu.c	11823;"	d	file:
BMASK2	PDP10/kx10_cpu.c	11824;"	d	file:
BMASK3	PDP10/kx10_cpu.c	11825;"	d	file:
BMASK4	PDP10/kx10_cpu.c	11826;"	d	file:
BOOST	display/display.c	1046;"	d	file:
BOOTPClient	slirp/bootp.h	/^} BOOTPClient;$/;"	t	typeref:struct:__anon41
BOOTP_CLIENT	slirp/bootp.h	6;"	d
BOOTP_REPLY	slirp/bootp.h	9;"	d
BOOTP_REQUEST	slirp/bootp.h	8;"	d
BOOTP_SERVER	slirp/bootp.h	5;"	d
BOOTP_VENDOR_LEN	slirp/bootp.h	94;"	d
BOOT_ADDR	PDP10/ks10_cty.c	41;"	d	file:
BOOT_DRIVE	PDP10/ks10_cty.c	42;"	d	file:
BOOT_SW	PDP10/ks10_cty.c	48;"	d	file:
BOT_FLAG	PDP10/kx10_mt.c	89;"	d	file:
BOT_FLAG	PDP10/pdp6_mtc.c	101;"	d	file:
BPF_CONST_STRING	sim_ether.h	146;"	d
BPI_COUNT	sim_tape.c	130;"	d	file:
BPOS	PDP10/kx10_mt.c	122;"	d	file:
BPOS	PDP10/pdp6_mtc.c	150;"	d	file:
BR	PDP10/kx10_cpu.c	/^uint64  BR;                                   \/* Secondary operand *\/$/;"	v
BRDATA	sim_defs.h	1048;"	d
BRDATA	sim_defs.h	960;"	d
BRDATAD	sim_defs.h	1050;"	d
BRDATAD	sim_defs.h	962;"	d
BRDATADF	sim_defs.h	1052;"	d
BRDATADF	sim_defs.h	964;"	d
BRK	PDP10/ks10_dz.c	83;"	d	file:
BRKTAB	sim_defs.h	/^struct BRKTAB {$/;"	s
BRKTAB	sim_defs.h	/^typedef struct BRKTAB BRKTAB;$/;"	t	typeref:struct:BRKTAB
BRKTYPE	sim_defs.h	817;"	d
BRKTYPTAB	sim_defs.h	/^struct BRKTYPTAB {$/;"	s
BRKTYPTAB	sim_defs.h	/^typedef struct BRKTYPTAB BRKTYPTAB;$/;"	t	typeref:struct:BRKTYPTAB
BRK_TYP_DYN_ALL	sim_defs.h	802;"	d
BRK_TYP_DYN_STEPOVER	sim_defs.h	800;"	d
BRK_TYP_DYN_USR	sim_defs.h	801;"	d
BRK_TYP_MAX	sim_defs.h	804;"	d
BRK_TYP_TEMP	sim_defs.h	803;"	d
BRK_TYP_USR_TYPES	sim_defs.h	799;"	d
BRX	PDP10/kx10_cpu.c	/^uint64  BRX;                                  \/* Extension to BR *\/$/;"	v
BS	PDP10/ka10_stk.c	78;"	d	file:
BSVECT	display/vt11.c	/^            BSVECT, CIRCLE, ABSVECTOR   \/* VS60 only *\/$/;"	e	enum:gmode	file:
BSVECT	display/vtmacs.h	273;"	d
BSY	PDP10/ka10_pmp.c	236;"	d	file:
BUFFSIZE	PDP10/kx10_mt.c	52;"	d	file:
BUFFSIZE	PDP10/pdp6_mtc.c	51;"	d	file:
BUFF_CHNEND	PDP10/ka10_pmp.c	308;"	d	file:
BUFF_DIRTY	PDP10/ka10_pmp.c	307;"	d	file:
BUFF_EMPTY	PDP10/ka10_pmp.c	306;"	d	file:
BUF_EMPTY	PDP10/kx10_dp.c	33;"	d	file:
BUF_EMPTY	PDP10/kx10_mt.c	46;"	d	file:
BUF_EMPTY	PDP10/kx10_rp.c	32;"	d	file:
BUF_EMPTY	PDP10/kx10_rs.c	31;"	d	file:
BUF_EMPTY	PDP10/kx10_tu.c	36;"	d	file:
BUF_EMPTY	PDP10/pdp6_mtc.c	46;"	d	file:
BUF_SZ	sim_tape.c	1729;"	d	file:
BUSY	PDP10/kx10_defs.h	348;"	d
BUSY_FLG	PDP10/kx10_lp.c	54;"	d	file:
BUSY_FLG	PDP10/kx10_pt.c	43;"	d	file:
BUT0	PDP10/kx10_dpy.c	589;"	d	file:
BUT1	PDP10/kx10_dpy.c	590;"	d	file:
BUT2	PDP10/kx10_dpy.c	591;"	d	file:
BUT3	PDP10/kx10_dpy.c	592;"	d	file:
BYF5	PDP10/kx10_cpu.c	/^int     BYF5;                                 \/* Flag for second half of LDB\/DPB instruction *\/$/;"	v
BYTE	PDP10/kx10_defs.h	574;"	d
BYTE_MODE	PDP10/ka10_pmp.c	289;"	d	file:
BYTI	PDP10/kx10_defs.h	287;"	d
BinaryName	sim_BuildROMs.c	/^    const char *BinaryName;             const char *IncludeFileName; size_t expected_size; unsigned int checksum;  const char *ArrayName;            const char *Comments;} ROMs[] = {$/;"	m	struct:ROM_File_Descriptor	file:
BlockSize	sim_disk.c	/^    uint32 BlockSize;$/;"	m	struct:_VHD_DynamicDiskHeader	file:
BufferIsZeros	sim_disk.c	/^BufferIsZeros(void *Buffer, size_t BufferSize)$/;"	f	file:
ByteCount	scp.c	/^    t_offset ByteCount;$/;"	m	struct:__anon4	file:
C1	PDP10/kx10_defs.h	176;"	d
C128	PDP10/kx10_lp.c	58;"	d	file:
C1TAB	sim_defs.h	/^struct C1TAB {$/;"	s
C1TAB	sim_defs.h	/^typedef struct C1TAB C1TAB;$/;"	t	typeref:struct:C1TAB
C96	PDP10/kx10_lp.c	57;"	d	file:
CACHE_DIR	PDP10/kx10_defs.h	216;"	d
CACHE_ENB	PDP10/ks10_cty.c	52;"	d	file:
CALCOMP_CYLINDERS	PDP10/ka10_ai.c	43;"	d	file:
CALCOMP_SIZE	PDP10/ka10_ai.c	46;"	d	file:
CANT_USE_MACRO_VA_ARGS	scp.h	260;"	d
CARD_EOF	sim_card.c	87;"	d	file:
CARD_ERR	sim_card.c	88;"	d	file:
CARD_IN_PUNCH	PDP10/kx10_cp.c	70;"	d	file:
CARD_IN_READ	PDP10/kx10_cr.c	70;"	d	file:
CARD_RDY	PDP10/kx10_cr.c	82;"	d	file:
CAUSE_PI	PDP10/kx10_dc.c	69;"	d	file:
CBOV_CLR	PDP10/kx10_rh.c	132;"	d	file:
CBRT	PDP10/ka10_iii.c	93;"	d	file:
CBRT_V	PDP10/ka10_iii.c	97;"	d	file:
CBUFSIZE	sim_defs.h	345;"	d
CBUFSIZE	sim_defs.h	347;"	d
CBUFSIZE	sim_sock.h	110;"	d
CB_FULL	PDP10/kx10_rh.c	108;"	d	file:
CCM	PDP10/kx10_defs.h	233;"	d
CCW	PDP10/kx10_dpy.c	572;"	d	file:
CCW_COMP	PDP10/kx10_defs.h	349;"	d
CCW_COMP_1	PDP10/kx10_defs.h	353;"	d
CCW_COMP_1	PDP10/kx10_rh.c	95;"	d	file:
CCW_PRTY	PDP10/kx10_dp.c	78;"	d	file:
CCYL	PDP10/kx10_rp.c	151;"	d	file:
CC_CHAN_ACT	PDP10/kx10_rh.c	106;"	d	file:
CC_CHAN_PLS	PDP10/kx10_rh.c	105;"	d	file:
CC_INH	PDP10/kx10_rh.c	107;"	d	file:
CDSE_EMPTY	sim_card.h	108;"	d
CDSE_EOF	sim_card.h	107;"	d
CDSE_ERROR	sim_card.h	109;"	d
CDSE_OK	sim_card.h	106;"	d
CELL_ERROR	PDP10/kx10_cr.c	73;"	d	file:
CFLAGS	Makefile	/^CFLAGS = $(DEBUG) -std=gnu99 -U__STRICT_ANSI__ -finline-functions -fgcse-after-reload -fpredictive-commoning -fipa-cp-clone -fno-unsafe-loop-optimizations -fno-strict-overflow -DSIM_GIT_COMMIT_ID=c0050dc0588ec7d2a3f5ab41bc0079f069290143 -DSIM_GIT_COMMIT_TIME=2018-02-06T15:01:30+0100  -DSIM_COMPILER="GCC Version: 11.2.0" -DSIM_BUILD_TOOL=simh-makefile -D_GNU_SOURCE -DUSE_READER_THREAD -DSIM_ASYNCH_IO  -DHAVE_PCRE_H -DHAVE_SEMAPHORE -DHAVE_SYS_IOCTL -DHAVE_LINUX_CDROM -DSIM_HAVE_DLOPEN=so -DHAVE_UTIME -DHAVE_LIBPNG -DHAVE_ZLIB -DHAVE_GLOB -DHAVE_SHM_OPEN -DKA=1 -DUSE_INT64 -DUSE_SIM_CARD -DHAVE_PCAP_NETWORK -DBPF_CONST_STRING -DUSE_SHARED -DHAVE_VDE_NETWORK -DHAVE_TAP_NETWORK -DHAVE_SLIRP_NETWORK -DUSE_SIMH_SLIRP_DEBUG -DUSE_DISPLAY -DHAVE_LIBSDL -DUSE_SIM_VIDEO $/;"	m
CHAN_ERR	PDP10/kx10_mt.c	78;"	d	file:
CHAR	PDP10/ka10_dkb.c	44;"	d	file:
CHAR	display/type340.c	/^enum mode { PARAM=0, POINT, SLAVE, CHAR, VECTOR, VCONT, INCR, SUBR };$/;"	e	enum:mode	file:
CHAR	display/type340cmd.h	33;"	d
CHAR	display/vt11.c	/^enum gmode { CHAR=0, SVECTOR, LVECTOR, POINT, GRAPHX, GRAPHY, RELPOINT, \/* all *\/$/;"	e	enum:gmode	file:
CHAR	display/vtmacs.h	207;"	d
CHAR_COUNT	PDP10/kx10_mt.c	92;"	d	file:
CHAR_LEN	PDP10/ks10_dz.c	66;"	d	file:
CHA_ERR	PDP10/ka10_pmp.c	220;"	d	file:
CHL	PDP10/kx10_pt.c	39;"	d	file:
CHNERR	PDP10/kl10_nia.c	91;"	d	file:
CHN_CLR	PDP10/kx10_rh.c	138;"	d	file:
CHN_END	PDP10/ka10_pmp.c	237;"	d	file:
CHN_PRTY	PDP10/kx10_dp.c	76;"	d	file:
CHN_RESET	PDP10/ka10_pmp.c	281;"	d	file:
CHR	PDP10/kx10_pt.c	38;"	d	file:
CHRCR	display/type340cmd.h	126;"	d
CHRESC	display/type340cmd.h	122;"	d
CHRLC	display/type340cmd.h	124;"	d
CHRLF	display/type340cmd.h	125;"	d
CHRSP	display/type340cmd.h	127;"	d
CHRUC	display/type340cmd.h	123;"	d
CHUDP_HEADER	PDP10/ka10_ch10.c	82;"	d	file:
CHUDP_HEADER	PDP10/ks10_ch11.c	68;"	d	file:
CH_BS	display/type340.c	112;"	d	file:
CH_CR	display/type340.c	106;"	d	file:
CH_D	display/type340.c	111;"	d	file:
CH_DEVNUM	PDP10/ka10_ch10.c	39;"	d	file:
CH_ESC	display/type340.c	109;"	d	file:
CH_LC	display/type340.c	108;"	d	file:
CH_LF	display/type340.c	105;"	d	file:
CH_NSPC	display/type340.c	110;"	d	file:
CH_PAR_C	PDP10/kx10_rc.c	77;"	d	file:
CH_PAR_D	PDP10/kx10_rc.c	76;"	d	file:
CH_SUB	display/type340.c	113;"	d	file:
CH_SUP	display/type340.c	114;"	d	file:
CH_UC	display/type340.c	107;"	d	file:
CIRCLE	display/vt11.c	/^            BSVECT, CIRCLE, ABSVECTOR   \/* VS60 only *\/$/;"	e	enum:gmode	file:
CL	PDP10/kx10_dp.c	100;"	d	file:
CLEAR_MASK	PDP10/ka10_ai.c	96;"	d	file:
CLIPXMAX	display/vt11.c	627;"	d	file:
CLIPXMAX	display/vt11.c	631;"	d	file:
CLIPYMAX	display/vt11.c	621;"	d	file:
CLK_ADD_ONE	PDP10/kx10_dk.c	51;"	d	file:
CLK_BIT	PDP10/ka10_iii.c	60;"	d	file:
CLK_CLR_EN	PDP10/kx10_dk.c	47;"	d	file:
CLK_CLR_FLG	PDP10/kx10_dk.c	44;"	d	file:
CLK_CLR_OVF	PDP10/kx10_dk.c	45;"	d	file:
CLK_CLR_PI	PDP10/kx10_dk.c	49;"	d	file:
CLK_EN	PDP10/kx10_dk.c	58;"	d	file:
CLK_EXT	PDP10/kx10_dk.c	60;"	d	file:
CLK_FLG	PDP10/kx10_dk.c	56;"	d	file:
CLK_GEN_CLR	PDP10/kx10_dk.c	50;"	d	file:
CLK_INIT	sim_timer.c	184;"	d	file:
CLK_IRQ	PDP10/ka10_pclk.c	37;"	d	file:
CLK_IRQ	PDP10/ka10_pd.c	47;"	d	file:
CLK_OVF	PDP10/kx10_dk.c	57;"	d	file:
CLK_PI	PDP10/kx10_dk.c	59;"	d	file:
CLK_REG	PDP10/kx10_dk.c	38;"	d	file:
CLK_SET_EN	PDP10/kx10_dk.c	46;"	d	file:
CLK_SET_FLG	PDP10/kx10_dk.c	52;"	d	file:
CLK_SET_OVF	PDP10/kx10_dk.c	53;"	d	file:
CLK_SET_PI	PDP10/kx10_dk.c	48;"	d	file:
CLK_STOP	PDP10/ka10_iii.c	58;"	d	file:
CLK_TIM	PDP10/kx10_dk.c	40;"	d	file:
CLK_TPS	sim_timer.c	183;"	d	file:
CLOCK_REALTIME	sim_frontpanel.c	70;"	d	file:
CLOCK_REALTIME	sim_frontpanel.c	93;"	d	file:
CLOCK_REALTIME	sim_timer.h	54;"	d
CLOCK_REALTIME	slirp_glue/glib_qemu_stubs.c	189;"	d	file:
CLR	PDP10/ks10_dz.c	44;"	d	file:
CLR	PDP10/pdp6_dsk.c	61;"	d	file:
CLRMSK	PDP10/kx10_dp.c	81;"	d	file:
CLRMSK2	PDP10/kx10_dp.c	82;"	d	file:
CLR_BUF	PDP10/kx10_dp.c	34;"	d	file:
CLR_BUF	PDP10/kx10_mt.c	47;"	d	file:
CLR_BUF	PDP10/kx10_rp.c	33;"	d	file:
CLR_BUF	PDP10/kx10_rs.c	32;"	d	file:
CLR_BUF	PDP10/kx10_tu.c	37;"	d	file:
CLR_BUF	PDP10/pdp6_mtc.c	47;"	d	file:
CLR_DATA_MISS	PDP10/kx10_cr.c	56;"	d	file:
CLR_DATA_REQ	PDP10/kx10_cp.c	52;"	d	file:
CLR_DATCH	PDP10/ka10_pmp.c	272;"	d	file:
CLR_DRDY	PDP10/kx10_cr.c	52;"	d	file:
CLR_END_CARD	PDP10/kx10_cp.c	54;"	d	file:
CLR_END_CARD	PDP10/kx10_cr.c	53;"	d	file:
CLR_EOF	PDP10/kx10_cr.c	54;"	d	file:
CLR_ERROR	PDP10/kx10_cp.c	57;"	d	file:
CLR_IRQ	PDP10/ka10_pmp.c	273;"	d	file:
CLR_LPT	PDP10/kx10_lp.c	56;"	d	file:
CLR_MUX	PDP10/ka10_pmp.c	271;"	d	file:
CLR_PUNCH	PDP10/kx10_cp.c	62;"	d	file:
CLR_READER	PDP10/kx10_cr.c	60;"	d	file:
CLR_SCN	PDP10/kx10_dc.c	52;"	d	file:
CLR_UEND	PDP10/ka10_pmp.c	270;"	d	file:
CL_GREEN	display/vtmacs.h	59;"	d
CL_ORANGE	display/vtmacs.h	61;"	d
CL_RED	display/vtmacs.h	62;"	d
CL_SAME	display/vtmacs.h	58;"	d
CL_YELLOW	display/vtmacs.h	60;"	d
CM	PDP10/kx10_defs.h	232;"	d
CMASK	PDP10/kx10_defs.h	174;"	d
CMD	PDP10/ka10_pmp.c	85;"	d	file:
CMD	PDP10/kx10_dt.c	176;"	d	file:
CMD	PDP10/kx10_rs.c	47;"	d	file:
CMD	PDP10/kx10_tu.c	43;"	d	file:
CMD	PDP10/pdp6_dsk.c	57;"	d	file:
CMD	PDP10/pdp6_dtc.c	157;"	d	file:
CMDCH_ON	PDP10/ka10_pmp.c	287;"	d	file:
CMD_BASEIN	PDP10/ks10_kmc.c	166;"	d	file:
CMD_BUFFIN	PDP10/ks10_kmc.c	164;"	d	file:
CMD_BUFFOUT	PDP10/ks10_kmc.c	167;"	d	file:
CMD_CLR	PDP10/ka10_pmp.c	277;"	d	file:
CMD_CTRLIN	PDP10/ks10_kmc.c	165;"	d	file:
CMD_CTRLOUT	PDP10/ks10_kmc.c	168;"	d	file:
CMD_EMP	PDP10/ka10_pmp.c	265;"	d	file:
CMD_ERASE	sim_scsi.c	50;"	d	file:
CMD_FUL	PDP10/ka10_pmp.c	266;"	d	file:
CMD_FULL	PDP10/pdp6_mtc.c	86;"	d	file:
CMD_HOLD	PDP10/ka10_pmp.c	278;"	d	file:
CMD_HOLD	PDP10/pdp6_mtc.c	133;"	d	file:
CMD_INQUIRY	sim_scsi.c	34;"	d	file:
CMD_LD	PDP10/ka10_pmp.c	260;"	d	file:
CMD_LOADUNLOAD	sim_scsi.c	42;"	d	file:
CMD_MASK	PDP10/ka10_pmp.c	284;"	d	file:
CMD_MASK	PDP10/kx10_dp.c	56;"	d	file:
CMD_MASK	PDP10/pdp6_mtc.c	87;"	d	file:
CMD_MODESEL10	sim_scsi.c	38;"	d	file:
CMD_MODESEL6	sim_scsi.c	37;"	d	file:
CMD_MODESENSE10	sim_scsi.c	40;"	d	file:
CMD_MODESENSE6	sim_scsi.c	39;"	d	file:
CMD_OPT_DFT	scp.h	73;"	d
CMD_OPT_OF	scp.h	71;"	d
CMD_OPT_SCH	scp.h	72;"	d
CMD_OPT_SW	scp.h	70;"	d
CMD_PREVALLOW	sim_scsi.c	43;"	d	file:
CMD_RDBLKLIM	sim_scsi.c	36;"	d	file:
CMD_RDCAP	sim_scsi.c	44;"	d	file:
CMD_RDLONG	sim_scsi.c	47;"	d	file:
CMD_READ10	sim_scsi.c	46;"	d	file:
CMD_READ6	sim_scsi.c	45;"	d	file:
CMD_RELEASE	sim_scsi.c	52;"	d	file:
CMD_REQSENSE	sim_scsi.c	35;"	d	file:
CMD_RESERVE	sim_scsi.c	51;"	d	file:
CMD_REWIND	sim_scsi.c	53;"	d	file:
CMD_SNDDIAG	sim_scsi.c	54;"	d	file:
CMD_SPACE	sim_scsi.c	55;"	d	file:
CMD_STARTSTOP	sim_scsi.c	41;"	d	file:
CMD_TESTRDY	sim_scsi.c	33;"	d	file:
CMD_WANTSTR	sim_console.c	329;"	d	file:
CMD_WRFMARK	sim_scsi.c	56;"	d	file:
CMD_WRITE10	sim_scsi.c	49;"	d	file:
CMD_WRITE6	sim_scsi.c	48;"	d	file:
CME	PDP10/pdp6_dsk.c	68;"	d	file:
CMP	PDP10/kx10_mt.c	63;"	d	file:
CMP	PDP10/pdp6_mtc.c	70;"	d	file:
CMP_1	PDP10/pdp6_mtc.c	71;"	d	file:
CMP_NOEOR	PDP10/kx10_mt.c	64;"	d	file:
CMS	PDP10/pdp6_dsk.c	84;"	d	file:
CNT	PDP10/kl10_dn.c	201;"	d	file:
CNT	PDP10/kl10_fe.c	222;"	d	file:
CNTRL	PDP10/kx10_mt.c	120;"	d	file:
CNTRL	PDP10/pdp6_mtc.c	147;"	d	file:
CNTRL_M_RH	PDP10/kx10_defs.h	427;"	d
CNTRL_RH	PDP10/kx10_defs.h	429;"	d
CNTRL_V_RH	PDP10/kx10_defs.h	426;"	d
CNT_BYT	PDP10/ka10_pmp.c	288;"	d	file:
CN_0	display/vtmacs.h	106;"	d
CN_1	display/vtmacs.h	107;"	d
CO	PDP10/ks10_dz.c	79;"	d	file:
COL	PDP10/kl10_fe.c	326;"	d	file:
COL	PDP10/kx10_cp.c	81;"	d	file:
COL	PDP10/kx10_cr.c	79;"	d	file:
COL	PDP10/kx10_lp.c	39;"	d	file:
COLOR_HALF_LIFE	display/display.c	1003;"	d	file:
COMPILER_H	slirp_glue/qemu/compiler.h	4;"	d
CONFIG_HOST_H	slirp_glue/config-host.h	2;"	d
CONFIG_IOVEC	slirp_glue/config-host.h	34;"	d
CONI	PDP10/kx10_defs.h	313;"	d
CONI_INT_DONE	PDP10/kx10_dpy.c	170;"	d	file:
CONI_INT_HE	PDP10/kx10_dpy.c	168;"	d	file:
CONI_INT_LP	PDP10/kx10_dpy.c	167;"	d	file:
CONI_INT_SI	PDP10/kx10_dpy.c	169;"	d	file:
CONI_INT_SPEC	PDP10/kx10_dpy.c	165;"	d	file:
CONI_INT_VE	PDP10/kx10_dpy.c	166;"	d	file:
CONI_MASK	PDP10/kx10_dpy.c	163;"	d	file:
CONI_TIMEOUT	PDP10/kx10_imp.c	178;"	d	file:
CONN_CANFRCV	slirp/slirp.c	266;"	d	file:
CONN_CANFSEND	slirp/slirp.c	265;"	d	file:
CONO	PDP10/kx10_defs.h	314;"	d
CONO_BLUE	PDP10/kx10_dpy.c	560;"	d	file:
CONO_GREEN	PDP10/kx10_dpy.c	562;"	d	file:
CONO_INIT	PDP10/kx10_dpy.c	172;"	d	file:
CONO_KNIGHT	PDP10/kx10_dpy.c	565;"	d	file:
CONO_MASK	PDP10/kx10_dpy.c	162;"	d	file:
CONO_RANDOM	PDP10/kx10_dpy.c	563;"	d	file:
CONO_RED	PDP10/kx10_dpy.c	564;"	d	file:
CONO_RESUME	PDP10/kx10_dpy.c	171;"	d	file:
CONO_SPCWAR	PDP10/kx10_dpy.c	561;"	d	file:
CONST	sim_defs.h	195;"	d
CONT	PDP10/ka10_iii.c	47;"	d	file:
CONTROL	PDP10/kx10_dp.c	55;"	d	file:
CONTROL_MODE	display/vt11.c	520;"	d	file:
CONT_BIT	PDP10/ka10_iii.c	64;"	d	file:
CONT_MOT	PDP10/pdp6_mtc.c	105;"	d	file:
CONT_RESET	PDP10/kx10_rh.c	133;"	d	file:
CONX_DC	PDP10/kx10_dpy.c	174;"	d	file:
CONX_DC_SHIFT	PDP10/kx10_dpy.c	177;"	d	file:
CONX_SC	PDP10/kx10_dpy.c	173;"	d	file:
CONX_SC_SHIFT	PDP10/kx10_dpy.c	176;"	d	file:
CON_IRQ	PDP10/kx10_defs.h	223;"	d
COPY_CTX	scp.c	/^    } COPY_CTX;$/;"	t	typeref:struct:__anon7	file:
CORE_DUMP	PDP10/kx10_mt.c	107;"	d	file:
COR_MEM	PDP10/kx10_defs.h	225;"	d
CPE_STOP	PDP10/kx10_rc.c	54;"	d	file:
CPOS	PDP10/kx10_mt.c	121;"	d	file:
CPOS	PDP10/kx10_tu.c	159;"	d	file:
CPOS	PDP10/pdp6_mtc.c	149;"	d	file:
CP_DEVNUM	PDP10/kx10_cp.c	39;"	d	file:
CQ	PDP10/ks10_kmc.c	/^typedef struct cqueue CQ;$/;"	t	typeref:struct:cqueue	file:
CQUEUE_MAX	PDP10/ks10_kmc.c	405;"	d	file:
CR	PDP10/ka10_stk.c	72;"	d	file:
CRAM_PAR_ENB	PDP10/ks10_cty.c	54;"	d	file:
CRC	PDP10/ka10_ch10.c	55;"	d	file:
CRQ	PDP10/kx10_dc.c	65;"	d	file:
CRY0	PDP10/kx10_defs.h	296;"	d
CRY1	PDP10/kx10_defs.h	295;"	d
CR_DEVNUM	PDP10/kx10_cr.c	39;"	d	file:
CR_DRE	PDP10/kx10_rh.c	93;"	d	file:
CR_DRIVE	PDP10/kx10_rh.c	154;"	d	file:
CR_DXES	PDP10/kx10_rh.c	156;"	d	file:
CR_FUNC	PDP10/kx10_rh.c	159;"	d	file:
CR_GEN_EVD	PDP10/kx10_rh.c	155;"	d	file:
CR_GO	PDP10/kx10_rh.c	160;"	d	file:
CR_INAD	PDP10/kx10_rh.c	157;"	d	file:
CR_MAINT_MODE	PDP10/kx10_rh.c	153;"	d	file:
CR_REG	PDP10/kx10_rh.c	151;"	d	file:
CR_WTEVM	PDP10/kx10_rh.c	158;"	d	file:
CS1_DHOLD	PDP10/ks10_lp.c	61;"	d	file:
CS1_DONE	PDP10/ks10_lp.c	58;"	d	file:
CS1_DVA	PDP10/kx10_rh.c	36;"	d	file:
CS1_DVA	PDP10/kx10_rp.c	73;"	d	file:
CS1_DVA	PDP10/kx10_rs.c	63;"	d	file:
CS1_DVA	PDP10/kx10_tu.c	65;"	d	file:
CS1_DVON	PDP10/ks10_lp.c	63;"	d	file:
CS1_ECLR	PDP10/ks10_lp.c	60;"	d	file:
CS1_ERR	PDP10/ks10_lp.c	66;"	d	file:
CS1_FNC	PDP10/kx10_rp.c	53;"	d	file:
CS1_FNC	PDP10/kx10_rs.c	54;"	d	file:
CS1_FNC	PDP10/kx10_tu.c	49;"	d	file:
CS1_GO	PDP10/ks10_lp.c	48;"	d	file:
CS1_GO	PDP10/kx10_rh.c	28;"	d	file:
CS1_GO	PDP10/kx10_rp.c	50;"	d	file:
CS1_GO	PDP10/kx10_rs.c	51;"	d	file:
CS1_GO	PDP10/kx10_tu.c	46;"	d	file:
CS1_IE	PDP10/ks10_lp.c	57;"	d	file:
CS1_IE	PDP10/kx10_rh.c	32;"	d	file:
CS1_INIT	PDP10/ks10_lp.c	59;"	d	file:
CS1_MCPE	PDP10/kx10_rh.c	37;"	d	file:
CS1_MOD	PDP10/ks10_lp.c	67;"	d	file:
CS1_M_FNC	PDP10/ks10_lp.c	51;"	d	file:
CS1_M_FNC	PDP10/kx10_rh.c	30;"	d	file:
CS1_M_FNC	PDP10/kx10_rp.c	52;"	d	file:
CS1_M_FNC	PDP10/kx10_rs.c	53;"	d	file:
CS1_M_FNC	PDP10/kx10_tu.c	48;"	d	file:
CS1_ONL	PDP10/ks10_lp.c	62;"	d	file:
CS1_PAR	PDP10/ks10_lp.c	49;"	d	file:
CS1_PSEL	PDP10/kx10_rh.c	35;"	d	file:
CS1_PZERO	PDP10/ks10_lp.c	65;"	d	file:
CS1_RDY	PDP10/kx10_rh.c	33;"	d	file:
CS1_RDY	PDP10/kx10_rp.c	72;"	d	file:
CS1_SC	PDP10/kx10_rh.c	39;"	d	file:
CS1_SC	PDP10/kx10_rp.c	74;"	d	file:
CS1_SC	PDP10/kx10_tu.c	67;"	d	file:
CS1_TRE	PDP10/kx10_rh.c	38;"	d	file:
CS1_TRE	PDP10/kx10_tu.c	66;"	d	file:
CS1_UBA	PDP10/ks10_lp.c	56;"	d	file:
CS1_UBA	PDP10/kx10_rh.c	34;"	d	file:
CS1_UND	PDP10/ks10_lp.c	64;"	d	file:
CS1_V_FNC	PDP10/ks10_lp.c	50;"	d	file:
CS1_V_FNC	PDP10/kx10_rh.c	29;"	d	file:
CS1_V_FNC	PDP10/kx10_rp.c	51;"	d	file:
CS1_V_FNC	PDP10/kx10_rs.c	52;"	d	file:
CS1_V_FNC	PDP10/kx10_tu.c	47;"	d	file:
CS2_CLR	PDP10/kx10_rh.c	46;"	d	file:
CS2_DLT	PDP10/kx10_rh.c	56;"	d	file:
CS2_DTE	PDP10/ks10_lp.c	71;"	d	file:
CS2_DVOF	PDP10/ks10_lp.c	76;"	d	file:
CS2_ECLR	PDP10/ks10_lp.c	84;"	d	file:
CS2_ERR	PDP10/ks10_lp.c	85;"	d	file:
CS2_GOE	PDP10/ks10_lp.c	70;"	d	file:
CS2_IR	PDP10/kx10_rh.c	47;"	d	file:
CS2_LA180	PDP10/ks10_lp.c	82;"	d	file:
CS2_LPE	PDP10/ks10_lp.c	75;"	d	file:
CS2_MDPE	PDP10/kx10_rh.c	49;"	d	file:
CS2_MPE	PDP10/ks10_lp.c	74;"	d	file:
CS2_MTE	PDP10/ks10_lp.c	72;"	d	file:
CS2_MXF	PDP10/kx10_rh.c	50;"	d	file:
CS2_M_UNIT	PDP10/kx10_rh.c	42;"	d	file:
CS2_NED	PDP10/kx10_rh.c	53;"	d	file:
CS2_NEM	PDP10/kx10_rh.c	52;"	d	file:
CS2_NRDY	PDP10/ks10_lp.c	81;"	d	file:
CS2_OFFL	PDP10/ks10_lp.c	77;"	d	file:
CS2_OR	PDP10/kx10_rh.c	48;"	d	file:
CS2_OVFU	PDP10/ks10_lp.c	79;"	d	file:
CS2_PAT	PDP10/kx10_rh.c	45;"	d	file:
CS2_PBIT	PDP10/ks10_lp.c	80;"	d	file:
CS2_PE	PDP10/kx10_rh.c	54;"	d	file:
CS2_PGE	PDP10/kx10_rh.c	51;"	d	file:
CS2_RPE	PDP10/ks10_lp.c	73;"	d	file:
CS2_TEST	PDP10/ks10_lp.c	78;"	d	file:
CS2_UAI	PDP10/kx10_rh.c	44;"	d	file:
CS2_UNIT	PDP10/kx10_rh.c	43;"	d	file:
CS2_VLD	PDP10/ks10_lp.c	83;"	d	file:
CS2_V_UNIT	PDP10/kx10_rh.c	41;"	d	file:
CS2_WCE	PDP10/kx10_rh.c	55;"	d	file:
CSCALE	display/vt11.c	213;"	d	file:
CSHIFT	PDP10/kx10_defs.h	333;"	d
CSHIFT	PDP10/kx10_defs.h	343;"	d
CSIZE	PDP10/ka10_iii.c	94;"	d	file:
CSIZE_V	PDP10/ka10_iii.c	98;"	d	file:
CSI_CHAR	sim_console.c	3661;"	d	file:
CSR_BB	PDP10/kx10_imp.c	77;"	d	file:
CSR_BSY	PDP10/ks10_ch11.c	42;"	d	file:
CSR_ELB	PDP10/kx10_imp.c	76;"	d	file:
CSR_EOM	PDP10/kx10_imp.c	69;"	d	file:
CSR_ERR	PDP10/ks10_ch11.c	53;"	d	file:
CSR_ERR	PDP10/kx10_imp.c	61;"	d	file:
CSR_GO	PDP10/kx10_imp.c	54;"	d	file:
CSR_HR	PDP10/kx10_imp.c	68;"	d	file:
CSR_HRC	PDP10/kx10_imp.c	64;"	d	file:
CSR_IBF	PDP10/kx10_imp.c	66;"	d	file:
CSR_IE	PDP10/kx10_imp.c	57;"	d	file:
CSR_INR	PDP10/kx10_imp.c	67;"	d	file:
CSR_LOS	PDP10/ks10_ch11.c	51;"	d	file:
CSR_LUP	PDP10/ks10_ch11.c	43;"	d	file:
CSR_MRE	PDP10/kx10_imp.c	59;"	d	file:
CSR_NXM	PDP10/kx10_imp.c	60;"	d	file:
CSR_OBE	PDP10/kx10_imp.c	78;"	d	file:
CSR_RCL	PDP10/ks10_ch11.c	45;"	d	file:
CSR_RDN	PDP10/ks10_ch11.c	54;"	d	file:
CSR_RDY	PDP10/kx10_imp.c	58;"	d	file:
CSR_REN	PDP10/ks10_ch11.c	46;"	d	file:
CSR_RST	PDP10/ks10_ch11.c	52;"	d	file:
CSR_RST	PDP10/kx10_imp.c	55;"	d	file:
CSR_SE	PDP10/kx10_imp.c	65;"	d	file:
CSR_SPY	PDP10/ks10_ch11.c	44;"	d	file:
CSR_TAB	PDP10/ks10_ch11.c	48;"	d	file:
CSR_TCL	PDP10/ks10_ch11.c	50;"	d	file:
CSR_TDN	PDP10/ks10_ch11.c	49;"	d	file:
CSR_TEN	PDP10/ks10_ch11.c	47;"	d	file:
CSR_UBA	PDP10/kx10_imp.c	56;"	d	file:
CSR_WC0	PDP10/kx10_imp.c	79;"	d	file:
CS_CHANGE	display/vtmacs.h	97;"	d
CS_SAME	display/vtmacs.h	96;"	d
CTAB	sim_defs.h	/^struct CTAB {$/;"	s
CTAB	sim_defs.h	/^typedef struct CTAB CTAB;$/;"	t	typeref:struct:CTAB
CTL_END	PDP10/ka10_pmp.c	235;"	d	file:
CTL_FBIT	PDP10/ka10_iii.c	77;"	d	file:
CTRL	PDP10/ka10_dkb.c	48;"	d	file:
CTRL	PDP10/ka10_stk.c	42;"	d	file:
CTS	PDP10/kx10_dc.c	60;"	d	file:
CTX	PDP10/ka10_ch10.c	52;"	d	file:
CTY_CHAR	PDP10/ks10_cty.c	60;"	d	file:
CTY_DEVNUM	PDP10/kx10_cty.c	52;"	d	file:
CTY_IN	PDP10/ks10_cty.c	37;"	d	file:
CTY_OUT	PDP10/ks10_cty.c	38;"	d	file:
CTY_SWITCH	PDP10/kx10_defs.h	316;"	d
CURSOR	display/sim_ws.c	/^    } CURSOR;$/;"	t	typeref:struct:cursor	file:
CUR_CYL	PDP10/kx10_dp.c	50;"	d	file:
CUR_CYL	PDP10/kx10_rc.c	44;"	d	file:
CUR_CYL	PDP10/pdp6_dsk.c	44;"	d	file:
CW	PDP10/kx10_dpy.c	573;"	d	file:
CW_PAR_ERR	PDP10/kx10_mt.c	96;"	d	file:
CXR_CDPE	PDP10/kx10_rh.c	101;"	d	file:
CXR_CHAN_ER	PDP10/kx10_rh.c	96;"	d	file:
CXR_CWPE	PDP10/kx10_rh.c	100;"	d	file:
CXR_DBPE	PDP10/kx10_rh.c	98;"	d	file:
CXR_EXC	PDP10/kx10_rh.c	97;"	d	file:
CXR_ILC	PDP10/kx10_rh.c	92;"	d	file:
CXR_ILFC	PDP10/kx10_rh.c	103;"	d	file:
CXR_NXM	PDP10/kx10_rh.c	99;"	d	file:
CXR_PS_FAIL	PDP10/kx10_rh.c	91;"	d	file:
CXR_SD_RAE	PDP10/kx10_rh.c	102;"	d	file:
CYCLE	PDP10/ka10_iii.c	42;"	d	file:
CYL	PDP10/kx10_dp.c	91;"	d	file:
CYL256	PDP10/kx10_dp.c	89;"	d	file:
CYLINDER_REAL_SIZE	PDP10/ka10_ai.c	54;"	d	file:
CYLINDER_SIZE	PDP10/ka10_ai.c	44;"	d	file:
CalculateVhdFooterChecksum	sim_disk.c	/^CalculateVhdFooterChecksum(void *data,$/;"	f	file:
CharDriverState	slirp_glue/qemu/typedefs.h	/^typedef struct CharDriverState CharDriverState;$/;"	t	typeref:struct:CharDriverState
Checksum	sim_disk.c	/^    uint32      Checksum;               \/* CRC32 of the prior 508 bytes *\/$/;"	m	struct:simh_disk_footer	file:
Checksum	sim_disk.c	/^    uint32 Checksum;$/;"	m	struct:_VHD_DynamicDiskHeader	file:
Checksum	sim_disk.c	/^    uint32 Checksum;$/;"	m	struct:_VHD_Footer	file:
Comments	sim_BuildROMs.c	/^    const char *BinaryName;             const char *IncludeFileName; size_t expected_size; unsigned int checksum;  const char *ArrayName;            const char *Comments;} ROMs[] = {$/;"	m	struct:ROM_File_Descriptor	file:
CompactDomain	slirp/dnssearch.c	/^} CompactDomain;$/;"	t	typeref:struct:compact_domain	file:
ControlHandler	sim_console.c	/^ControlHandler(DWORD dwCtrlType)$/;"	f	file:
Cookie	sim_disk.c	/^    char Cookie[8];$/;"	m	struct:_VHD_DynamicDiskHeader	file:
Cookie	sim_disk.c	/^    char Cookie[8];$/;"	m	struct:_VHD_Footer	file:
CreateDifferencingVirtualDisk	sim_disk.c	/^CreateDifferencingVirtualDisk(const char *szVHDPath,$/;"	f	file:
CreateVirtualDisk	sim_disk.c	/^CreateVirtualDisk(const char *szVHDPath,$/;"	f	file:
CreatingSimulator	sim_disk.c	/^    uint8       CreatingSimulator[64];  \/* name of simulator *\/$/;"	m	struct:simh_disk_footer	file:
CreatingSimulator	sim_disk.c	/^    uint8 CreatingSimulator[64];$/;"	m	struct:_VHD_Footer	file:
CreationTime	sim_disk.c	/^    uint8       CreationTime[28];       \/* Result of ctime() *\/$/;"	m	struct:simh_disk_footer	file:
CreatorApplication	sim_disk.c	/^    char CreatorApplication[4];$/;"	m	struct:_VHD_Footer	file:
CreatorHostOS	sim_disk.c	/^    uint8 CreatorHostOS[4];$/;"	m	struct:_VHD_Footer	file:
CreatorVersion	sim_disk.c	/^    uint32 CreatorVersion;$/;"	m	struct:_VHD_Footer	file:
CurrentSize	sim_disk.c	/^    uint64 CurrentSize;$/;"	m	struct:_VHD_Footer	file:
D	PDP10/pdp6_dcs.c	90;"	d	file:
D	PDP10/pdp6_dcs.c	92;"	d	file:
D	PDP10/pdp6_dct.c	58;"	d	file:
D	PDP10/pdp6_dct.c	60;"	d	file:
D	PDP10/pdp6_dsk.c	146;"	d	file:
D	PDP10/pdp6_dsk.c	148;"	d	file:
D	PDP10/pdp6_dtc.c	261;"	d	file:
D	PDP10/pdp6_dtc.c	263;"	d	file:
D	PDP10/pdp6_mtc.c	188;"	d	file:
D	PDP10/pdp6_mtc.c	190;"	d	file:
D11_FILSIZ	PDP10/kx10_dt.c	119;"	d	file:
D11_FILSIZ	PDP10/pdp6_dtc.c	121;"	d	file:
D18_BSIZE	PDP10/kx10_dt.c	114;"	d	file:
D18_BSIZE	PDP10/pdp6_dtc.c	116;"	d	file:
D18_CAPAC	PDP10/kx10_dt.c	118;"	d	file:
D18_CAPAC	PDP10/pdp6_dtc.c	120;"	d	file:
D18_FWDEZ	PDP10/kx10_dt.c	117;"	d	file:
D18_FWDEZ	PDP10/pdp6_dtc.c	119;"	d	file:
D18_LPERB	PDP10/kx10_dt.c	116;"	d	file:
D18_LPERB	PDP10/pdp6_dtc.c	118;"	d	file:
D18_TSIZE	PDP10/kx10_dt.c	115;"	d	file:
D18_TSIZE	PDP10/pdp6_dtc.c	117;"	d	file:
D18_WSIZE	PDP10/kx10_dt.c	113;"	d	file:
D18_WSIZE	PDP10/pdp6_dtc.c	115;"	d	file:
D8_BSIZE	PDP10/kx10_dt.c	124;"	d	file:
D8_BSIZE	PDP10/pdp6_dtc.c	126;"	d	file:
D8_CAPAC	PDP10/kx10_dt.c	128;"	d	file:
D8_CAPAC	PDP10/pdp6_dtc.c	130;"	d	file:
D8_FILSIZ	PDP10/kx10_dt.c	131;"	d	file:
D8_FILSIZ	PDP10/pdp6_dtc.c	133;"	d	file:
D8_FWDEZ	PDP10/kx10_dt.c	127;"	d	file:
D8_FWDEZ	PDP10/pdp6_dtc.c	129;"	d	file:
D8_LPERB	PDP10/kx10_dt.c	126;"	d	file:
D8_LPERB	PDP10/pdp6_dtc.c	128;"	d	file:
D8_NBSIZE	PDP10/kx10_dt.c	130;"	d	file:
D8_NBSIZE	PDP10/pdp6_dtc.c	132;"	d	file:
D8_TSIZE	PDP10/kx10_dt.c	125;"	d	file:
D8_TSIZE	PDP10/pdp6_dtc.c	127;"	d	file:
D8_WSIZE	PDP10/kx10_dt.c	123;"	d	file:
D8_WSIZE	PDP10/pdp6_dtc.c	125;"	d	file:
DA	PDP10/kx10_rs.c	107;"	d	file:
DAC	display/type340.c	/^    ty340word DAC;              \/* Display Address Counter *\/$/;"	m	struct:type340	file:
DALU	PDP10/ka10_ai.c	120;"	d	file:
DASSGN	PDP10/ka10_ai.c	63;"	d	file:
DATA	PDP10/ka10_dkb.c	51;"	d	file:
DATA	PDP10/kx10_cr.c	80;"	d	file:
DATA	PDP10/kx10_cty.c	55;"	d	file:
DATA	PDP10/kx10_dc.c	54;"	d	file:
DATA	PDP10/pdp6_dcs.c	53;"	d	file:
DATAI	PDP10/kx10_defs.h	311;"	d
DATAO	PDP10/kx10_defs.h	312;"	d
DATAO_LK	PDP10/ka10_iii.c	63;"	d	file:
DATAPTR	PDP10/ka10_pmp.c	195;"	d	file:
DATAPTR	PDP10/kx10_dp.c	51;"	d	file:
DATAPTR	PDP10/kx10_rc.c	45;"	d	file:
DATAPTR	PDP10/kx10_rp.c	164;"	d	file:
DATAPTR	PDP10/kx10_rs.c	127;"	d	file:
DATAPTR	PDP10/kx10_tu.c	160;"	d	file:
DATAPTR	PDP10/pdp6_dsk.c	45;"	d	file:
DATA_FLG	PDP10/ka10_iii.c	80;"	d	file:
DATA_LATE	PDP10/kx10_mt.c	82;"	d	file:
DATA_MISS	PDP10/kx10_cr.c	66;"	d	file:
DATA_MODE	display/vt11.c	521;"	d	file:
DATA_PARITY	PDP10/kx10_mt.c	94;"	d	file:
DATA_PIA	PDP10/kx10_mt.c	99;"	d	file:
DATA_RDY	PDP10/kx10_cr.c	62;"	d	file:
DATA_REQ	PDP10/kx10_cp.c	66;"	d	file:
DATA_REQUEST	PDP10/kx10_mt.c	74;"	d	file:
DATCH_ON	PDP10/ka10_pmp.c	292;"	d	file:
DATI	PDP10/ka10_auxcpu.c	37;"	d	file:
DATI	PDP10/ka10_ten11.c	56;"	d	file:
DATI	PDP10/pdp6_slave.c	38;"	d	file:
DATO	PDP10/ka10_auxcpu.c	36;"	d	file:
DATO	PDP10/ka10_ten11.c	55;"	d	file:
DATO	PDP10/pdp6_slave.c	37;"	d	file:
DAT_CHAIN	PDP10/ka10_pmp.c	258;"	d	file:
DA_MBZ	PDP10/kx10_rp.c	128;"	d	file:
DA_MBZ	PDP10/kx10_rs.c	115;"	d	file:
DA_M_SC	PDP10/kx10_rp.c	125;"	d	file:
DA_M_SC	PDP10/kx10_rs.c	112;"	d	file:
DA_M_SF	PDP10/kx10_rp.c	127;"	d	file:
DA_M_SF	PDP10/kx10_rs.c	114;"	d	file:
DA_V_SC	PDP10/kx10_rp.c	124;"	d	file:
DA_V_SC	PDP10/kx10_rs.c	111;"	d	file:
DA_V_SF	PDP10/kx10_rp.c	126;"	d	file:
DA_V_SF	PDP10/kx10_rs.c	113;"	d	file:
DBD9	PDP10/kx10_disk.h	34;"	d
DBG_ACK	sim_timer.c	811;"	d	file:
DBG_APP	sim_frontpanel.h	595;"	d
DBG_ASY	PDP10/ks10_dup.c	401;"	d	file:
DBG_ASY	sim_console.c	208;"	d	file:
DBG_CAL	sim_timer.c	808;"	d	file:
DBG_CALL	display/vt11.c	143;"	d	file:
DBG_CALL	slirp/debug.h	11;"	d
DBG_CHK	sim_timer.c	812;"	d	file:
DBG_CMD	PDP10/ka10_auxcpu.c	81;"	d	file:
DBG_CMD	PDP10/ka10_ten11.c	92;"	d	file:
DBG_CMD	sim_console.c	464;"	d	file:
DBG_CON	PDP10/ks10_dup.c	399;"	d	file:
DBG_CON	sim_console.c	209;"	d	file:
DBG_DAT	PDP10/ka10_ch10.c	87;"	d	file:
DBG_DAT	PDP10/ks10_ch11.c	73;"	d	file:
DBG_ERR	PDP10/ka10_ch10.c	89;"	d	file:
DBG_ERR	PDP10/ks10_ch11.c	75;"	d	file:
DBG_ERROR	slirp/debug.h	13;"	d
DBG_EXP	sim_console.c	210;"	d	file:
DBG_GET	sim_timer.c	814;"	d	file:
DBG_IDL	sim_timer.c	804;"	d	file:
DBG_INT	PDP10/ka10_ch10.c	88;"	d	file:
DBG_INT	PDP10/ks10_ch11.c	74;"	d	file:
DBG_INT	PDP10/ks10_dup.c	394;"	d	file:
DBG_INT	sim_timer.c	813;"	d	file:
DBG_MDM	PDP10/ks10_dup.c	398;"	d	file:
DBG_MISC	slirp/debug.h	12;"	d
DBG_MOD	sim_console.c	461;"	d	file:
DBG_MUX	sim_timer.c	806;"	d	file:
DBG_PKT	PDP10/ka10_ch10.c	86;"	d	file:
DBG_PKT	PDP10/ks10_ch11.c	72;"	d	file:
DBG_PKT	PDP10/ks10_dup.c	395;"	d	file:
DBG_QUE	sim_timer.c	805;"	d	file:
DBG_RCV	PDP10/ks10_dup.c	397;"	d	file:
DBG_RCV	sim_console.c	206;"	d	file:
DBG_RCV	sim_frontpanel.h	591;"	d
DBG_REG	PDP10/ka10_ch10.c	85;"	d	file:
DBG_REG	PDP10/ks10_ch11.c	71;"	d	file:
DBG_REG	PDP10/ks10_dup.c	393;"	d	file:
DBG_REP	sim_console.c	462;"	d	file:
DBG_REQ	sim_frontpanel.h	592;"	d
DBG_RET	sim_console.c	207;"	d	file:
DBG_RSP	sim_frontpanel.h	593;"	d
DBG_SAM	sim_console.c	463;"	d	file:
DBG_SND	sim_console.c	211;"	d	file:
DBG_THR	sim_frontpanel.h	594;"	d
DBG_THR	sim_timer.c	810;"	d	file:
DBG_TIK	sim_timer.c	815;"	d	file:
DBG_TIM	sim_timer.c	809;"	d	file:
DBG_TRC	PDP10/ka10_auxcpu.c	80;"	d	file:
DBG_TRC	PDP10/ka10_ch10.c	84;"	d	file:
DBG_TRC	PDP10/ka10_ten11.c	91;"	d	file:
DBG_TRC	PDP10/ks10_ch11.c	70;"	d	file:
DBG_TRC	PDP10/ks10_dup.c	400;"	d	file:
DBG_TRC	sim_console.c	204;"	d	file:
DBG_TRC	sim_timer.c	807;"	d	file:
DBG_XMT	PDP10/ks10_dup.c	396;"	d	file:
DBG_XMT	sim_console.c	205;"	d	file:
DBG_XMT	sim_frontpanel.h	590;"	d
DBPE_CLR	PDP10/kx10_rh.c	140;"	d	file:
DB_AC	PDP10/pdp6_dct.c	42;"	d	file:
DB_MV	PDP10/pdp6_dct.c	43;"	d	file:
DB_RQ	PDP10/pdp6_dct.c	41;"	d	file:
DC10_LINES	PDP10/kx10_dc.c	40;"	d	file:
DC10_MLINES	PDP10/kx10_dc.c	41;"	d	file:
DCATEB	PDP10/ka10_ai.c	83;"	d	file:
DCCATT	PDP10/ka10_ai.c	84;"	d	file:
DCCENB	PDP10/ka10_ai.c	90;"	d	file:
DCCFLG	PDP10/ka10_ai.c	91;"	d	file:
DCCLR	PDP10/ka10_ai.c	79;"	d	file:
DCCOMP	PDP10/ka10_ai.c	116;"	d	file:
DCCPUF	PDP10/ka10_ai.c	92;"	d	file:
DCCSET	PDP10/ka10_ai.c	80;"	d	file:
DCDENB	PDP10/ka10_ai.c	81;"	d	file:
DCE	PDP10/pdp6_dsk.c	67;"	d	file:
DCERR	PDP10/ka10_ai.c	82;"	d	file:
DCIENB	PDP10/ka10_ai.c	86;"	d	file:
DCKSER	PDP10/ka10_ai.c	103;"	d	file:
DCMD	PDP10/ka10_ai.c	114;"	d	file:
DCOPY	PDP10/ka10_ai.c	115;"	d	file:
DCPERR	PDP10/ka10_ai.c	110;"	d	file:
DCSET	PDP10/ka10_ai.c	78;"	d	file:
DCSGL	PDP10/ka10_ai.c	89;"	d	file:
DCSKIP	PDP10/ka10_ai.c	117;"	d	file:
DCSSRQ	PDP10/ka10_ai.c	85;"	d	file:
DCSSTP	PDP10/ka10_ai.c	88;"	d	file:
DCSTAR	PDP10/ka10_ai.c	87;"	d	file:
DCS_DEVNUM	PDP10/pdp6_dcs.c	38;"	d	file:
DCS_LINES	PDP10/pdp6_dcs.c	40;"	d	file:
DCT_DEVNUM	PDP10/pdp6_dct.c	32;"	d	file:
DC_DEVNUM	PDP10/kx10_dc.c	38;"	d	file:
DC_MASK	sim_disk.c	1591;"	d	file:
DC_MBZ	PDP10/kx10_rp.c	147;"	d	file:
DC_M_CY	PDP10/kx10_rp.c	146;"	d	file:
DC_V_CY	PDP10/kx10_rp.c	145;"	d	file:
DDCMP_CRC_SIZE	PDP10/pdp11_ddcmp.h	53;"	d
DDCMP_CTL_ACK	PDP10/pdp11_ddcmp.h	44;"	d
DDCMP_CTL_NAK	PDP10/pdp11_ddcmp.h	45;"	d
DDCMP_CTL_REP	PDP10/pdp11_ddcmp.h	46;"	d
DDCMP_CTL_STACK	PDP10/pdp11_ddcmp.h	48;"	d
DDCMP_CTL_STRT	PDP10/pdp11_ddcmp.h	47;"	d
DDCMP_DBG_PDAT	PDP10/pdp11_ddcmp.h	63;"	d
DDCMP_DBG_PRCV	PDP10/pdp11_ddcmp.h	62;"	d
DDCMP_DBG_PXMT	PDP10/pdp11_ddcmp.h	61;"	d
DDCMP_DEL	PDP10/pdp11_ddcmp.h	39;"	d
DDCMP_DLE	PDP10/pdp11_ddcmp.h	42;"	d
DDCMP_ENQ	PDP10/pdp11_ddcmp.h	41;"	d
DDCMP_FLAG_QSYNC	PDP10/pdp11_ddcmp.h	51;"	d
DDCMP_FLAG_SELECT	PDP10/pdp11_ddcmp.h	50;"	d
DDCMP_HEADER_SIZE	PDP10/pdp11_ddcmp.h	54;"	d
DDCMP_NUM_OFFSET	PDP10/pdp11_ddcmp.h	57;"	d
DDCMP_PACKET_TIMEOUT	PDP10/pdp11_ddcmp.h	59;"	d
DDCMP_RESP_OFFSET	PDP10/pdp11_ddcmp.h	56;"	d
DDCMP_SOH	PDP10/pdp11_ddcmp.h	40;"	d
DDCMP_SYN	PDP10/pdp11_ddcmp.h	38;"	d
DDOBSY	PDP10/ka10_ai.c	108;"	d	file:
DDS	display/type340.c	/^enum jump_type { DJP=2, DJS=3, DDS=1 }; \/* type 347 *\/$/;"	e	enum:jump_type	file:
DDSONL	PDP10/ka10_ai.c	164;"	d	file:
DDSRDO	PDP10/ka10_ai.c	161;"	d	file:
DDSRDY	PDP10/ka10_ai.c	163;"	d	file:
DDSSEL	PDP10/ka10_ai.c	165;"	d	file:
DDSSIC	PDP10/ka10_ai.c	162;"	d	file:
DDSUNS	PDP10/ka10_ai.c	160;"	d	file:
DDSWC	PDP10/ka10_ai.c	159;"	d	file:
DEBTAB	sim_defs.h	/^struct DEBTAB {$/;"	s
DEBTAB	sim_defs.h	/^typedef struct DEBTAB DEBTAB;$/;"	t	typeref:struct:DEBTAB
DEBUG	Makefile	/^DEBUG=-g -O0$/;"	m
DEBUGF	display/ng.c	46;"	d	file:
DEBUGF	display/type340.c	94;"	d	file:
DEBUGF	display/type340.c	96;"	d	file:
DEBUGF	display/vt11.c	149;"	d	file:
DEBUGF	display/vt11.c	151;"	d	file:
DEBUGF	display/vt11.c	158;"	d	file:
DEBUGSW	PDP10/kx10_dpy.c	681;"	d	file:
DEBUG_ARG	slirp/debug.h	24;"	d
DEBUG_ARG	slirp/debug.h	33;"	d
DEBUG_ARG	slirp/debug.h	55;"	d
DEBUG_ARGS	slirp/debug.h	25;"	d
DEBUG_ARGS	slirp/debug.h	34;"	d
DEBUG_ARGS	slirp/debug.h	56;"	d
DEBUG_ARP	PDP10/kl10_nia.c	405;"	d	file:
DEBUG_ARP	PDP10/kx10_imp.c	637;"	d	file:
DEBUG_CALL	slirp/debug.h	23;"	d
DEBUG_CALL	slirp/debug.h	32;"	d
DEBUG_CALL	slirp/debug.h	54;"	d
DEBUG_CARD	sim_card.h	84;"	d
DEBUG_CMD	PDP10/kx10_defs.h	154;"	d
DEBUG_CONI	PDP10/kx10_defs.h	158;"	d
DEBUG_CONO	PDP10/kx10_defs.h	159;"	d
DEBUG_DATA	PDP10/kx10_defs.h	155;"	d
DEBUG_DATAIO	PDP10/kx10_defs.h	160;"	d
DEBUG_DETAIL	PDP10/kx10_defs.h	156;"	d
DEBUG_DHCP	PDP10/kx10_imp.c	635;"	d	file:
DEBUG_ERROR	slirp/debug.h	27;"	d
DEBUG_ERROR	slirp/debug.h	36;"	d
DEBUG_ERROR	slirp/debug.h	58;"	d
DEBUG_ETHER	PDP10/kl10_nia.c	413;"	d	file:
DEBUG_ETHER	PDP10/kx10_imp.c	645;"	d	file:
DEBUG_EXP	PDP10/kx10_defs.h	157;"	d
DEBUG_ICMP	PDP10/kl10_nia.c	411;"	d	file:
DEBUG_ICMP	PDP10/kx10_imp.c	643;"	d	file:
DEBUG_IRQ	PDP10/kx10_defs.h	161;"	d
DEBUG_MISC	slirp/debug.h	26;"	d
DEBUG_MISC	slirp/debug.h	35;"	d
DEBUG_MISC	slirp/debug.h	57;"	d
DEBUG_PRD	sim_defs.h	879;"	d
DEBUG_PRI	sim_defs.h	880;"	d
DEBUG_PRJ	sim_defs.h	881;"	d
DEBUG_PRS	sim_defs.h	878;"	d
DEBUG_TCP	PDP10/kl10_nia.c	407;"	d	file:
DEBUG_TCP	PDP10/kx10_imp.c	639;"	d	file:
DEBUG_TRC	PDP10/pdp6_slave.c	78;"	d	file:
DEBUG_UDP	PDP10/kl10_nia.c	409;"	d	file:
DEBUG_UDP	PDP10/kx10_imp.c	641;"	d	file:
DECK_SIZE	sim_card.c	89;"	d	file:
DECLARE_IOVEC	slirp/slirp_config.h	91;"	d
DECLARE_IOVEC	slirp/slirp_config.h	93;"	d
DEFAULT_BAUD	slirp/slirp.h	299;"	d
DEFAULT_IP_ADDR	slirp_glue/sim_slirp.c	35;"	d	file:
DEFECT	PDP10/kx10_dp.c	106;"	d	file:
DEFMEM	PDP10/kx10_cpu.c	427;"	d	file:
DEFMEM	PDP10/kx10_cpu.c	429;"	d	file:
DEFMEM	PDP10/kx10_cpu.c	431;"	d	file:
DEF_SERIAL	PDP10/kx10_defs.h	356;"	d
DEF_SERIAL	PDP10/kx10_defs.h	360;"	d
DEF_SERIAL	PDP10/kx10_defs.h	364;"	d
DELAY	PDP10/pdp6_dtc.c	223;"	d	file:
DELAY_T_MAX	display/display.c	358;"	d	file:
DELAY_UNIT	display/display.c	281;"	d	file:
DELFLG	PDP10/kl10_fe.c	336;"	d	file:
DELFLG	PDP10/ks10_lp.c	110;"	d	file:
DEL_CTX	scp.c	/^    } DEL_CTX;$/;"	t	typeref:struct:__anon6	file:
DEL_FLG	PDP10/kx10_lp.c	59;"	d	file:
DENS_200	PDP10/kx10_mt.c	101;"	d	file:
DENS_200	PDP10/pdp6_mtc.c	78;"	d	file:
DENS_556	PDP10/kx10_mt.c	102;"	d	file:
DENS_556	PDP10/pdp6_mtc.c	79;"	d	file:
DENS_800	PDP10/kx10_mt.c	103;"	d	file:
DENS_800	PDP10/pdp6_mtc.c	80;"	d	file:
DENS_MSK	PDP10/kx10_mt.c	104;"	d	file:
DENS_MSK	PDP10/pdp6_mtc.c	81;"	d	file:
DEPS	Makefile	/^DEPS = scp.h sim_console.h sim_ether.h sim_imd.h sim_serial.h sim_timer.h scp_help.h sim_defs.h sim_fio.h  sim_rev.h sim_sock.h sim_tmxr.h sim_card.h sim_disk.h sim_frontpanel.h sim_scsi.h sim_tape.h sim_video.h PDP10\/ks10_dup.h PDP10\/kx10_defs.h PDP10\/kx10_disk.h PDP10\/pdp11_ddcmp.h PDP10\/pidp10panel.h slirp\/*.h slirp_glue\/*.h slirp_glue\/qemu\/*.h$/;"	m
DEV	PDP10/pdp6_dct.c	38;"	d	file:
DEV$M_RTM	sim_serial.c	1453;"	d	file:
DEVICE	display/ng.c	43;"	d	file:
DEVICE	display/vt11.c	141;"	d	file:
DEVICE	sim_defs.h	/^struct DEVICE {$/;"	s
DEVICE	sim_defs.h	/^typedef struct DEVICE DEVICE;$/;"	t	typeref:struct:DEVICE
DEVICE	slirp/debug.h	44;"	d
DEVNUM	PDP10/kx10_imp.c	34;"	d	file:
DEV_ADDR	PDP10/ka10_pmp.c	291;"	d	file:
DEV_CARD	sim_defs.h	558;"	d
DEV_DEBUG	sim_defs.h	546;"	d
DEV_DIS	sim_defs.h	543;"	d
DEV_DISABLE	sim_defs.h	544;"	d
DEV_DISK	sim_defs.h	555;"	d
DEV_DISPLAY	sim_defs.h	560;"	d
DEV_DONTAUTO	sim_defs.h	548;"	d
DEV_DYNM	sim_defs.h	545;"	d
DEV_END	PDP10/ka10_pmp.c	238;"	d	file:
DEV_ETHER	sim_defs.h	559;"	d
DEV_FLATHELP	sim_defs.h	549;"	d
DEV_MUX	sim_defs.h	557;"	d
DEV_M_OS	PDP10/kl10_dn.c	43;"	d	file:
DEV_M_OS	PDP10/kl10_fe.c	38;"	d	file:
DEV_M_RH	PDP10/kx10_defs.h	431;"	d
DEV_NET	sim_defs.h	551;"	d
DEV_NOSAVE	sim_defs.h	550;"	d
DEV_RESET	PDP10/ka10_pmp.c	279;"	d	file:
DEV_RFLAGS	sim_defs.h	565;"	d
DEV_SECTORS	sim_defs.h	547;"	d
DEV_S_TYPE	sim_defs.h	534;"	d
DEV_TAPE	sim_defs.h	556;"	d
DEV_TYPE	sim_defs.h	561;"	d
DEV_TYPEMASK	sim_defs.h	554;"	d
DEV_UFMASK	sim_defs.h	564;"	d
DEV_UFMASK_31	sim_defs.h	563;"	d
DEV_V_DEBUG	sim_defs.h	532;"	d
DEV_V_DIS	sim_defs.h	529;"	d
DEV_V_DISABLE	sim_defs.h	530;"	d
DEV_V_DONTAUTO	sim_defs.h	536;"	d
DEV_V_DYNM	sim_defs.h	531;"	d
DEV_V_FLATHELP	sim_defs.h	537;"	d
DEV_V_NOSAVE	sim_defs.h	538;"	d
DEV_V_OS	PDP10/kl10_dn.c	42;"	d	file:
DEV_V_OS	PDP10/kl10_fe.c	37;"	d	file:
DEV_V_RH	PDP10/kx10_defs.h	430;"	d
DEV_V_RSV	sim_defs.h	541;"	d
DEV_V_SECTORS	sim_defs.h	535;"	d
DEV_V_TYPE	sim_defs.h	533;"	d
DEV_V_UF	sim_defs.h	540;"	d
DEV_V_UF_31	sim_defs.h	539;"	d
DEV_WHDR	PDP10/kx10_dp.c	42;"	d	file:
DE_C_EMPTY	sim_disk.c	1980;"	d	file:
DE_C_EOS	sim_disk.c	1982;"	d	file:
DE_C_PERM	sim_disk.c	1981;"	d	file:
DE_C_PRE	sim_disk.c	1978;"	d	file:
DE_C_PROT	sim_disk.c	1984;"	d	file:
DE_C_READ	sim_disk.c	1983;"	d	file:
DE_C_TENT	sim_disk.c	1979;"	d	file:
DFLT_SPEED	PDP10/ks10_kmc.c	108;"	d	file:
DFR	PDP10/pdp6_dsk.c	82;"	d	file:
DFUNSF	PDP10/ka10_ai.c	105;"	d	file:
DF_BFO	PDP10/ks10_kmc.c	320;"	d	file:
DF_BUF	PDP10/ks10_kmc.c	329;"	d	file:
DF_CMD	PDP10/ks10_kmc.c	319;"	d	file:
DF_CTO	PDP10/ks10_kmc.c	321;"	d	file:
DF_ERR	PDP10/ks10_kmc.c	326;"	d	file:
DF_INF	PDP10/ks10_kmc.c	325;"	d	file:
DF_INT	PDP10/ks10_kmc.c	328;"	d	file:
DF_PKT	PDP10/ks10_kmc.c	327;"	d	file:
DF_QUE	PDP10/ks10_kmc.c	322;"	d	file:
DF_RGR	PDP10/ks10_kmc.c	323;"	d	file:
DF_RGW	PDP10/ks10_kmc.c	324;"	d	file:
DHCPACK	slirp/bootp.h	76;"	d
DHCPDISCOVER	slirp/bootp.h	73;"	d
DHCPNAK	slirp/bootp.h	77;"	d
DHCPOFFER	slirp/bootp.h	74;"	d
DHCPREQUEST	slirp/bootp.h	75;"	d
DHCP_ACK	PDP10/kx10_imp.c	334;"	d	file:
DHCP_BOOTREPLY	PDP10/kx10_imp.c	327;"	d	file:
DHCP_BOOTREQUEST	PDP10/kx10_imp.c	326;"	d	file:
DHCP_CHADDR_LEN	PDP10/kx10_imp.c	391;"	d	file:
DHCP_DECLINE	PDP10/kx10_imp.c	333;"	d	file:
DHCP_DISCOVER	PDP10/kx10_imp.c	330;"	d	file:
DHCP_FILE_LEN	PDP10/kx10_imp.c	393;"	d	file:
DHCP_HTYPE_ETH	PDP10/kx10_imp.c	340;"	d	file:
DHCP_INFINITE_LEASE	PDP10/kx10_imp.c	344;"	d	file:
DHCP_INFORM	PDP10/kx10_imp.c	337;"	d	file:
DHCP_MAGIC_COOKIE	PDP10/kx10_imp.c	342;"	d	file:
DHCP_NAK	PDP10/kx10_imp.c	335;"	d	file:
DHCP_OFFER	PDP10/kx10_imp.c	331;"	d	file:
DHCP_OPTION_BOOTFILE	PDP10/kx10_imp.c	383;"	d	file:
DHCP_OPTION_BROADCAST	PDP10/kx10_imp.c	359;"	d	file:
DHCP_OPTION_CLIENT_ID	PDP10/kx10_imp.c	381;"	d	file:
DHCP_OPTION_DNS_SERVER	PDP10/kx10_imp.c	355;"	d	file:
DHCP_OPTION_END	PDP10/kx10_imp.c	362;"	d	file:
DHCP_OPTION_HOSTNAME	PDP10/kx10_imp.c	356;"	d	file:
DHCP_OPTION_IP_TTL	PDP10/kx10_imp.c	357;"	d	file:
DHCP_OPTION_LEASE_TIME	PDP10/kx10_imp.c	366;"	d	file:
DHCP_OPTION_MAX_MSG_SIZE	PDP10/kx10_imp.c	375;"	d	file:
DHCP_OPTION_MAX_MSG_SIZE_LEN	PDP10/kx10_imp.c	376;"	d	file:
DHCP_OPTION_MESSAGE_TYPE	PDP10/kx10_imp.c	369;"	d	file:
DHCP_OPTION_MESSAGE_TYPE_LEN	PDP10/kx10_imp.c	370;"	d	file:
DHCP_OPTION_MTU	PDP10/kx10_imp.c	358;"	d	file:
DHCP_OPTION_NTP	PDP10/kx10_imp.c	361;"	d	file:
DHCP_OPTION_OVERLOAD	PDP10/kx10_imp.c	367;"	d	file:
DHCP_OPTION_PAD	PDP10/kx10_imp.c	352;"	d	file:
DHCP_OPTION_PARAMETER_REQUEST_LIST	PDP10/kx10_imp.c	373;"	d	file:
DHCP_OPTION_REQUESTED_IP	PDP10/kx10_imp.c	365;"	d	file:
DHCP_OPTION_ROUTER	PDP10/kx10_imp.c	354;"	d	file:
DHCP_OPTION_SERVER_ID	PDP10/kx10_imp.c	372;"	d	file:
DHCP_OPTION_SUBNET_MASK	PDP10/kx10_imp.c	353;"	d	file:
DHCP_OPTION_T1	PDP10/kx10_imp.c	378;"	d	file:
DHCP_OPTION_T2	PDP10/kx10_imp.c	379;"	d	file:
DHCP_OPTION_TCP_TTL	PDP10/kx10_imp.c	360;"	d	file:
DHCP_OPTION_TFTP_SERVERNAME	PDP10/kx10_imp.c	382;"	d	file:
DHCP_OPTION_US	PDP10/kx10_imp.c	380;"	d	file:
DHCP_OPT_LEN	slirp/bootp.h	95;"	d
DHCP_OVERLOAD_FILE	PDP10/kx10_imp.c	387;"	d	file:
DHCP_OVERLOAD_NONE	PDP10/kx10_imp.c	386;"	d	file:
DHCP_OVERLOAD_SNAME	PDP10/kx10_imp.c	388;"	d	file:
DHCP_OVERLOAD_SNAME_FILE	PDP10/kx10_imp.c	389;"	d	file:
DHCP_RELEASE	PDP10/kx10_imp.c	336;"	d	file:
DHCP_REQUEST	PDP10/kx10_imp.c	332;"	d	file:
DHCP_SNAME_LEN	PDP10/kx10_imp.c	392;"	d	file:
DHCP_STATE_BACKING_OFF	PDP10/kx10_imp.c	323;"	d	file:
DHCP_STATE_BOUND	PDP10/kx10_imp.c	321;"	d	file:
DHCP_STATE_CHECKING	PDP10/kx10_imp.c	319;"	d	file:
DHCP_STATE_INFORMING	PDP10/kx10_imp.c	318;"	d	file:
DHCP_STATE_INIT	PDP10/kx10_imp.c	313;"	d	file:
DHCP_STATE_OFF	PDP10/kx10_imp.c	311;"	d	file:
DHCP_STATE_PERMANENT	PDP10/kx10_imp.c	320;"	d	file:
DHCP_STATE_REBINDING	PDP10/kx10_imp.c	315;"	d	file:
DHCP_STATE_REBOOTING	PDP10/kx10_imp.c	314;"	d	file:
DHCP_STATE_RELEASING	PDP10/kx10_imp.c	322;"	d	file:
DHCP_STATE_RENEWING	PDP10/kx10_imp.c	316;"	d	file:
DHCP_STATE_REQUESTING	PDP10/kx10_imp.c	312;"	d	file:
DHCP_STATE_SELECTING	PDP10/kx10_imp.c	317;"	d	file:
DHCP_UDP_PORT_CLIENT	PDP10/kx10_imp.c	346;"	d	file:
DHCP_UDP_PORT_SERVER	PDP10/kx10_imp.c	347;"	d	file:
DHLT	PDP10/ka10_ai.c	130;"	d	file:
DH_C_MAXSEG	sim_disk.c	1971;"	d	file:
DIB	PDP10/kx10_defs.h	/^typedef struct pdp_dib DIB;$/;"	t	typeref:struct:pdp_dib
DIB_CBOV	PDP10/kx10_rh.c	90;"	d	file:
DIM	PDP10/ks10_kmc.c	48;"	d	file:
DIPE	PDP10/ka10_ai.c	99;"	d	file:
DIRSIZ	PDP10/kx10_sys.c	650;"	d	file:
DIR_CTX	scp.c	/^    } DIR_CTX;$/;"	t	typeref:struct:__anon4	file:
DIR_ENTRY_CALLBACK	sim_fio.h	/^typedef void (*DIR_ENTRY_CALLBACK)(const char *directory, $/;"	t
DISK_INFO	sim_imd.h	/^} DISK_INFO;$/;"	t	typeref:struct:__anon26
DISK_INFO_CTX	sim_disk.c	/^    } DISK_INFO_CTX;$/;"	t	typeref:struct:__anon21	file:
DISK_PCALLBACK	sim_disk.h	/^typedef void (*DISK_PCALLBACK)(UNIT *unit, t_stat status);$/;"	t
DISK_SEL	PDP10/kx10_rc.c	49;"	d	file:
DISPLAY_INT_MAX	display/display.h	103;"	d
DISPLAY_INT_MIN	display/display.h	104;"	d
DISPLAY_TYPE	display/display.c	65;"	d	file:
DISPLAY_TYPE	display/vt11.h	71;"	d
DIS_END_CARD	PDP10/kx10_cp.c	56;"	d	file:
DIS_EOR	PDP10/pdp6_mtc.c	58;"	d	file:
DIS_III	display/display.h	/^    DIS_III = 111,$/;"	e	enum:display_type
DIS_IMLAC	display/display.h	/^    DIS_IMLAC = 1,$/;"	e	enum:display_type
DIS_NG	display/display.h	/^    DIS_NG = 999,$/;"	e	enum:display_type
DIS_TROUBLE	PDP10/kx10_cp.c	59;"	d	file:
DIS_TT2500	display/display.h	/^    DIS_TT2500 = 2500,$/;"	e	enum:display_type
DIS_TX0	display/display.h	/^    DIS_TX0 = 0,$/;"	e	enum:display_type
DIS_TYPE30	display/display.h	/^    DIS_TYPE30 = 30,$/;"	e	enum:display_type
DIS_TYPE340	display/display.h	/^    DIS_TYPE340 = 340,$/;"	e	enum:display_type
DIS_VR14	display/display.h	/^    DIS_VR14 = 14,$/;"	e	enum:display_type
DIS_VR17	display/display.h	/^    DIS_VR17 = 17,$/;"	e	enum:display_type
DIS_VR20	display/display.h	/^    DIS_VR20 = 20,$/;"	e	enum:display_type
DIS_VR48	display/display.h	/^    DIS_VR48 = 48,$/;"	e	enum:display_type
DIV_ROUND_UP	slirp_glue/qemu/osdep.h	132;"	d
DJMASK	PDP10/ka10_ai.c	134;"	d	file:
DJMP	PDP10/ka10_ai.c	132;"	d	file:
DJMP_ABS	display/vtmacs.h	165;"	d
DJMP_REL	display/vtmacs.h	170;"	d
DJP	display/type340.c	/^enum jump_type { DJP=2, DJS=3, DDS=1 }; \/* type 347 *\/$/;"	e	enum:jump_type	file:
DJS	display/type340.c	/^enum jump_type { DJP=2, DJS=3, DDS=1 }; \/* type 347 *\/$/;"	e	enum:jump_type	file:
DJSR	PDP10/ka10_ai.c	133;"	d	file:
DJSR_ABS	display/vtmacs.h	174;"	d
DJSR_REL	display/vtmacs.h	179;"	d
DKB	sim_disk.c	6740;"	d	file:
DKB_DEVNUM	PDP10/ka10_dkb.c	37;"	d	file:
DKSE_OK	sim_disk.h	66;"	d
DKUF_FMT	sim_disk.h	54;"	d
DKUF_F_AUTO	sim_disk.h	47;"	d
DKUF_F_RAW	sim_disk.h	49;"	d
DKUF_F_STD	sim_disk.h	48;"	d
DKUF_F_VHD	sim_disk.h	50;"	d
DKUF_M_FMT	sim_disk.h	46;"	d
DKUF_NOAUTOSIZE	sim_disk.h	56;"	d
DKUF_V_FMT	sim_disk.h	44;"	d
DKUF_V_NOAUTOSIZE	sim_disk.h	51;"	d
DKUF_V_UF	sim_disk.h	52;"	d
DKUF_WLK	sim_disk.h	53;"	d
DKUF_WRP	sim_disk.h	55;"	d
DKUF_W_FMT	sim_disk.h	45;"	d
DK_ATTN	PDP10/ka10_pmp.c	131;"	d	file:
DK_CYL_DIRTY	PDP10/ka10_pmp.c	128;"	d	file:
DK_DEVNUM	PDP10/kx10_dk.c	36;"	d	file:
DK_DONE	PDP10/ka10_pmp.c	129;"	d	file:
DK_ERASE	PDP10/ka10_pmp.c	116;"	d	file:
DK_F_RAW	sim_disk.h	59;"	d
DK_F_STD	sim_disk.h	58;"	d
DK_F_VHD	sim_disk.h	60;"	d
DK_GET_FMT	sim_disk.h	62;"	d
DK_HIGH	PDP10/ka10_pmp.c	123;"	d	file:
DK_INDEX	PDP10/ka10_pmp.c	121;"	d	file:
DK_INDEX2	PDP10/ka10_pmp.c	130;"	d	file:
DK_MSET	PDP10/ka10_pmp.c	125;"	d	file:
DK_MSK_ALLWRT	PDP10/ka10_pmp.c	136;"	d	file:
DK_MSK_ALLWRU	PDP10/ka10_pmp.c	135;"	d	file:
DK_MSK_INHWR0	PDP10/ka10_pmp.c	133;"	d	file:
DK_MSK_INHWRT	PDP10/ka10_pmp.c	134;"	d	file:
DK_MSK_SK	PDP10/ka10_pmp.c	143;"	d	file:
DK_MSK_SKALLCLY	PDP10/ka10_pmp.c	140;"	d	file:
DK_MSK_SKALLHD	PDP10/ka10_pmp.c	141;"	d	file:
DK_MSK_SKALLSKR	PDP10/ka10_pmp.c	139;"	d	file:
DK_MSK_SKNONE	PDP10/ka10_pmp.c	142;"	d	file:
DK_MSK_WRT	PDP10/ka10_pmp.c	137;"	d	file:
DK_MT	PDP10/ka10_pmp.c	119;"	d	file:
DK_M_HEAD	PDP10/ka10_pmp.c	151;"	d	file:
DK_M_TRACK	PDP10/ka10_pmp.c	149;"	d	file:
DK_NOEQ	PDP10/ka10_pmp.c	122;"	d	file:
DK_NOP	PDP10/ka10_pmp.c	88;"	d	file:
DK_PARAM	PDP10/ka10_pmp.c	124;"	d	file:
DK_POS_AM	PDP10/ka10_pmp.c	187;"	d	file:
DK_POS_CNT	PDP10/ka10_pmp.c	184;"	d	file:
DK_POS_DATA	PDP10/ka10_pmp.c	186;"	d	file:
DK_POS_END	PDP10/ka10_pmp.c	188;"	d	file:
DK_POS_HA	PDP10/ka10_pmp.c	183;"	d	file:
DK_POS_INDEX	PDP10/ka10_pmp.c	182;"	d	file:
DK_POS_KEY	PDP10/ka10_pmp.c	185;"	d	file:
DK_POS_SEEK	PDP10/ka10_pmp.c	189;"	d	file:
DK_RD_CKD	PDP10/ka10_pmp.c	109;"	d	file:
DK_RD_CNT	PDP10/ka10_pmp.c	105;"	d	file:
DK_RD_D	PDP10/ka10_pmp.c	107;"	d	file:
DK_RD_HA	PDP10/ka10_pmp.c	104;"	d	file:
DK_RD_IPL	PDP10/ka10_pmp.c	103;"	d	file:
DK_RD_KD	PDP10/ka10_pmp.c	108;"	d	file:
DK_RD_R0	PDP10/ka10_pmp.c	106;"	d	file:
DK_RD_SECT	PDP10/ka10_pmp.c	117;"	d	file:
DK_RELEASE	PDP10/ka10_pmp.c	89;"	d	file:
DK_RESTORE	PDP10/ka10_pmp.c	90;"	d	file:
DK_SEEK	PDP10/ka10_pmp.c	91;"	d	file:
DK_SEEKCYL	PDP10/ka10_pmp.c	92;"	d	file:
DK_SEEKHD	PDP10/ka10_pmp.c	93;"	d	file:
DK_SETMSK	PDP10/ka10_pmp.c	94;"	d	file:
DK_SETSECT	PDP10/ka10_pmp.c	118;"	d	file:
DK_SHORTSRC	PDP10/ka10_pmp.c	126;"	d	file:
DK_SPACE	PDP10/ka10_pmp.c	95;"	d	file:
DK_SRCH_HAEQ	PDP10/ka10_pmp.c	96;"	d	file:
DK_SRCH_IDEQ	PDP10/ka10_pmp.c	97;"	d	file:
DK_SRCH_IDGE	PDP10/ka10_pmp.c	99;"	d	file:
DK_SRCH_IDGT	PDP10/ka10_pmp.c	98;"	d	file:
DK_SRCH_KYEQ	PDP10/ka10_pmp.c	100;"	d	file:
DK_SRCH_KYGE	PDP10/ka10_pmp.c	102;"	d	file:
DK_SRCH_KYGT	PDP10/ka10_pmp.c	101;"	d	file:
DK_SRCOK	PDP10/ka10_pmp.c	127;"	d	file:
DK_V_HEAD	PDP10/ka10_pmp.c	150;"	d	file:
DK_V_TRACK	PDP10/ka10_pmp.c	148;"	d	file:
DK_WR_CKD	PDP10/ka10_pmp.c	114;"	d	file:
DK_WR_D	PDP10/ka10_pmp.c	112;"	d	file:
DK_WR_HA	PDP10/ka10_pmp.c	110;"	d	file:
DK_WR_KD	PDP10/ka10_pmp.c	113;"	d	file:
DK_WR_R0	PDP10/ka10_pmp.c	111;"	d	file:
DK_WR_SCKD	PDP10/ka10_pmp.c	115;"	d	file:
DLCC	PDP10/ka10_ai.c	151;"	d	file:
DLD9	PDP10/kx10_disk.h	35;"	d
DLDBWC	PDP10/ka10_ai.c	152;"	d	file:
DLO	PDP10/kx10_dc.c	62;"	d	file:
DLSH_BLO	sim_disk.c	1608;"	d	file:
DLSH_CLO	sim_disk.c	1607;"	d	file:
DLSH_ENO	sim_disk.c	1606;"	d	file:
DLT_EN10MB	sim_ether.c	1028;"	d	file:
DL_BAD	sim_disk.c	1599;"	d	file:
DL_BLO	sim_disk.c	1604;"	d	file:
DL_CHE	sim_disk.c	1600;"	d	file:
DL_CLN	sim_disk.c	1601;"	d	file:
DL_CLO	sim_disk.c	1603;"	d	file:
DL_ENO	sim_disk.c	1602;"	d	file:
DL_USE	sim_disk.c	1598;"	d	file:
DMB	sim_disk.c	6739;"	d	file:
DN	display/type340cmd.h	138;"	d
DNOP	display/vtmacs.h	183;"	d
DNXM	PDP10/ka10_ai.c	109;"	d	file:
DOFFL	PDP10/ka10_ai.c	106;"	d	file:
DOHXFR	PDP10/ka10_ai.c	137;"	d	file:
DONE	PDP10/ka10_dkb.c	39;"	d	file:
DONE	PDP10/kx10_dp.c	59;"	d	file:
DONE_FLG	PDP10/kx10_lp.c	53;"	d	file:
DONE_FLG	PDP10/kx10_pt.c	42;"	d	file:
DONT_DO_LARGEFILE	sim_fio.h	47;"	d
DONT_DO_LARGEFILE	sim_fio.h	59;"	d
DONT_DO_VHD_SUPPORT	sim_disk.c	116;"	d	file:
DONT_DO_VHD_SUPPORT	sim_disk.c	4457;"	d	file:
DONT_USE_PCAP_FINDALLDEVS	sim_ether.h	149;"	d
DONT_USE_READER_THREAD	sim_ether.h	87;"	d
DOPR	PDP10/ka10_ai.c	118;"	d	file:
DOP_DONE	sim_disk.c	227;"	d	file:
DOP_IAVL	sim_disk.c	230;"	d	file:
DOP_RSEC	sim_disk.c	228;"	d	file:
DOP_WSEC	sim_disk.c	229;"	d	file:
DOS11_HDR	sim_tape.c	/^    } DOS11_HDR;$/;"	t	typeref:struct:DOS11_HDR	file:
DOS11_HDR	sim_tape.c	/^typedef struct DOS11_HDR {$/;"	s	file:
DOS11_PROT	sim_tape.c	526;"	d	file:
DOT_DASH	display/vt11.c	/^enum linetype { SOLID=0, LONG_DASH, SHORT_DASH, DOT_DASH };$/;"	e	enum:linetype	file:
DOVRRN	PDP10/ka10_ai.c	102;"	d	file:
DO_CFSETSPEED	slirp/slirp_config.h	23;"	d
DO_KEEPALIVE	slirp/slirp_config.h	10;"	d
DPC	display/vt11.c	237;"	d	file:
DPE_STOP	PDP10/kx10_rc.c	53;"	d	file:
DPIRQC	PDP10/ka10_ai.c	64;"	d	file:
DPK_BUSY	PDP10/ka10_dpk.c	41;"	d	file:
DPK_CONI_BITS	PDP10/ka10_dpk.c	46;"	d	file:
DPK_DEVNUM	PDP10/ka10_dpk.c	32;"	d	file:
DPK_FN	PDP10/ka10_dpk.c	49;"	d	file:
DPK_IDONE	PDP10/ka10_dpk.c	38;"	d	file:
DPK_IEN	PDP10/ka10_dpk.c	35;"	d	file:
DPK_ILINE	PDP10/ka10_dpk.c	59;"	d	file:
DPK_IN	PDP10/ka10_dpk.c	42;"	d	file:
DPK_ISPEED_START	PDP10/ka10_dpk.c	57;"	d	file:
DPK_ISPEED_STOP	PDP10/ka10_dpk.c	56;"	d	file:
DPK_ISTART	PDP10/ka10_dpk.c	53;"	d	file:
DPK_ISTOP	PDP10/ka10_dpk.c	52;"	d	file:
DPK_LINES	PDP10/ka10_dpk.c	33;"	d	file:
DPK_MANY	PDP10/ka10_dpk.c	60;"	d	file:
DPK_NAME	PDP10/ka10_dpk.c	31;"	d	file:
DPK_NXM	PDP10/ka10_dpk.c	39;"	d	file:
DPK_ODONE	PDP10/ka10_dpk.c	43;"	d	file:
DPK_OLINE	PDP10/ka10_dpk.c	44;"	d	file:
DPK_OSPEED	PDP10/ka10_dpk.c	55;"	d	file:
DPK_OSTART	PDP10/ka10_dpk.c	51;"	d	file:
DPK_OSTOP	PDP10/ka10_dpk.c	54;"	d	file:
DPK_PAR	PDP10/ka10_dpk.c	40;"	d	file:
DPK_PIA	PDP10/ka10_dpk.c	37;"	d	file:
DPK_RESET	PDP10/ka10_dpk.c	61;"	d	file:
DPK_SET_ODONE	PDP10/ka10_dpk.c	50;"	d	file:
DPK_SPEED	PDP10/ka10_dpk.c	58;"	d	file:
DPOP_NR	display/vtmacs.h	187;"	d
DPOP_R	display/vtmacs.h	191;"	d
DPR	PDP10/kx10_dc.c	66;"	d	file:
DPRINTF	slirp/debug.h	28;"	d
DPRINTF	slirp/debug.h	37;"	d
DPRINTF	slirp/debug.h	59;"	d
DPROT	PDP10/ka10_ai.c	107;"	d	file:
DPY_CYCLE_US	PDP10/kx10_dpy.c	144;"	d	file:
DPY_DEVNUM	PDP10/kx10_dpy.c	122;"	d	file:
DP_DEVNUM	PDP10/kx10_dp.c	37;"	d	file:
DP_PAR_ENB	PDP10/ks10_cty.c	53;"	d	file:
DQ_OFF	display/vtmacs.h	80;"	d
DQ_ON	display/vtmacs.h	81;"	d
DQ_SAME	display/vtmacs.h	79;"	d
DRC	PDP10/ka10_ai.c	121;"	d	file:
DRCC	PDP10/ka10_ai.c	125;"	d	file:
DRCER	PDP10/ka10_ai.c	101;"	d	file:
DRDATA	sim_defs.h	1013;"	d
DRDATA	sim_defs.h	925;"	d
DRDATAD	sim_defs.h	1015;"	d
DRDATAD	sim_defs.h	927;"	d
DRDATADF	sim_defs.h	1017;"	d
DRDATADF	sim_defs.h	929;"	d
DREAD	PDP10/ka10_ai.c	123;"	d	file:
DREADC	PDP10/ka10_ai.c	127;"	d	file:
DRE_CLR	PDP10/kx10_rh.c	135;"	d	file:
DRIVE	PDP10/kx10_dp.c	92;"	d	file:
DRL	PDP10/pdp6_dsk.c	72;"	d	file:
DRLNER	PDP10/ka10_ai.c	100;"	d	file:
DRV_ONLINE	PDP10/kx10_dp.c	115;"	d	file:
DR_EXC_CLR	PDP10/kx10_rh.c	139;"	d	file:
DSCRHD	PDP10/ka10_ai.c	146;"	d	file:
DSCWIM	PDP10/ka10_ai.c	148;"	d	file:
DSDEEB	PDP10/ka10_ai.c	66;"	d	file:
DSDRST	PDP10/ka10_ai.c	119;"	d	file:
DSEEK	PDP10/ka10_ai.c	124;"	d	file:
DSIENB	PDP10/ka10_ai.c	70;"	d	file:
DSK_CYL	PDP10/pdp6_dsk.c	122;"	d	file:
DSK_DES_E	PDP10/kx10_rc.c	71;"	d	file:
DSK_DEVNUM	PDP10/pdp6_dsk.c	32;"	d	file:
DSK_PAR_E	PDP10/kx10_rc.c	75;"	d	file:
DSK_PRTY	PDP10/kx10_dp.c	75;"	d	file:
DSK_SECS	PDP10/pdp6_dsk.c	121;"	d	file:
DSK_SIZE	PDP10/pdp6_dsk.c	123;"	d	file:
DSK_WDS	PDP10/pdp6_dsk.c	120;"	d	file:
DSPC	PDP10/ka10_ai.c	128;"	d	file:
DSPE_STOP	PDP10/kx10_dp.c	87;"	d	file:
DSRCAL	PDP10/ka10_ai.c	147;"	d	file:
DSSACT	PDP10/ka10_ai.c	72;"	d	file:
DSSAEB	PDP10/ka10_ai.c	68;"	d	file:
DSSATT	PDP10/ka10_ai.c	69;"	d	file:
DSSCEB	PDP10/ka10_ai.c	73;"	d	file:
DSSCFL	PDP10/ka10_ai.c	75;"	d	file:
DSSCHF	PDP10/ka10_ai.c	74;"	d	file:
DSSERR	PDP10/ka10_ai.c	67;"	d	file:
DSSRQ	PDP10/ka10_ai.c	65;"	d	file:
DSSRUN	PDP10/ka10_ai.c	71;"	d	file:
DSTATE	PDP10/kx10_dt.c	228;"	d	file:
DSTATE	PDP10/pdp6_dtc.c	201;"	d	file:
DSTOP	display/vtmacs.h	195;"	d
DSWIDX	PDP10/ka10_ai.c	140;"	d	file:
DSWINF	PDP10/ka10_ai.c	142;"	d	file:
DSWNUL	PDP10/ka10_ai.c	144;"	d	file:
DSWSEC	PDP10/ka10_ai.c	141;"	d	file:
DS_ATA	PDP10/kx10_rh.c	191;"	d	file:
DS_ATA	PDP10/kx10_rp.c	90;"	d	file:
DS_ATA	PDP10/kx10_rs.c	78;"	d	file:
DS_ATA	PDP10/kx10_tu.c	89;"	d	file:
DS_BOT	PDP10/kx10_tu.c	75;"	d	file:
DS_DIS	display/vtmacs.h	110;"	d
DS_DPR	PDP10/kx10_rh.c	184;"	d	file:
DS_DPR	PDP10/kx10_rp.c	83;"	d	file:
DS_DPR	PDP10/kx10_rs.c	71;"	d	file:
DS_DPR	PDP10/kx10_tu.c	82;"	d	file:
DS_DRY	PDP10/kx10_rh.c	183;"	d	file:
DS_DRY	PDP10/kx10_rp.c	82;"	d	file:
DS_DRY	PDP10/kx10_rs.c	70;"	d	file:
DS_DRY	PDP10/kx10_tu.c	81;"	d	file:
DS_ENA	display/vtmacs.h	111;"	d
DS_EOT	PDP10/kx10_tu.c	84;"	d	file:
DS_ERR	PDP10/kx10_rh.c	190;"	d	file:
DS_ERR	PDP10/kx10_rp.c	89;"	d	file:
DS_ERR	PDP10/kx10_rs.c	77;"	d	file:
DS_ERR	PDP10/kx10_tu.c	88;"	d	file:
DS_IDB	PDP10/kx10_tu.c	77;"	d	file:
DS_LST	PDP10/kx10_rh.c	186;"	d	file:
DS_LST	PDP10/kx10_rp.c	85;"	d	file:
DS_LST	PDP10/kx10_rs.c	73;"	d	file:
DS_MBZ	PDP10/kx10_rp.c	91;"	d	file:
DS_MBZ	PDP10/kx10_rs.c	79;"	d	file:
DS_MOL	PDP10/kx10_rh.c	188;"	d	file:
DS_MOL	PDP10/kx10_rp.c	87;"	d	file:
DS_MOL	PDP10/kx10_rs.c	75;"	d	file:
DS_MOL	PDP10/kx10_tu.c	86;"	d	file:
DS_OFF	PDP10/kx10_rh.c	181;"	d	file:
DS_OFF	PDP10/kx10_rp.c	80;"	d	file:
DS_PES	PDP10/kx10_tu.c	79;"	d	file:
DS_PGM	PDP10/kx10_rh.c	185;"	d	file:
DS_PGM	PDP10/kx10_rp.c	84;"	d	file:
DS_PGM	PDP10/kx10_rs.c	72;"	d	file:
DS_PGM	PDP10/kx10_tu.c	83;"	d	file:
DS_PIP	PDP10/kx10_rh.c	189;"	d	file:
DS_PIP	PDP10/kx10_rp.c	88;"	d	file:
DS_PIP	PDP10/kx10_rs.c	76;"	d	file:
DS_PIP	PDP10/kx10_tu.c	87;"	d	file:
DS_SAME	display/vtmacs.h	109;"	d
DS_SDWN	PDP10/kx10_tu.c	78;"	d	file:
DS_SLA	PDP10/kx10_tu.c	74;"	d	file:
DS_SSC	PDP10/kx10_tu.c	80;"	d	file:
DS_TM	PDP10/kx10_tu.c	76;"	d	file:
DS_VV	PDP10/kx10_rh.c	182;"	d	file:
DS_VV	PDP10/kx10_rp.c	81;"	d	file:
DS_VV	PDP10/kx10_rs.c	69;"	d	file:
DS_WRL	PDP10/kx10_rh.c	187;"	d	file:
DS_WRL	PDP10/kx10_rp.c	86;"	d	file:
DS_WRL	PDP10/kx10_rs.c	74;"	d	file:
DS_WRL	PDP10/kx10_tu.c	85;"	d	file:
DTB_ACT	PDP10/kx10_dt.c	204;"	d	file:
DTB_ACT	PDP10/pdp6_dtc.c	197;"	d	file:
DTB_BLK	PDP10/kx10_dt.c	206;"	d	file:
DTB_BLKMIS	PDP10/kx10_dt.c	219;"	d	file:
DTB_BLKRD	PDP10/kx10_dt.c	212;"	d	file:
DTB_CHK	PDP10/kx10_dt.c	210;"	d	file:
DTB_DAT	PDP10/kx10_dt.c	208;"	d	file:
DTB_DATREQ	PDP10/kx10_dt.c	226;"	d	file:
DTB_DLY	PDP10/kx10_dt.c	203;"	d	file:
DTB_DLY	PDP10/pdp6_dtc.c	199;"	d	file:
DTB_DONE	PDP10/kx10_dt.c	216;"	d	file:
DTB_DONE	PDP10/pdp6_dtc.c	189;"	d	file:
DTB_END	PDP10/kx10_dt.c	218;"	d	file:
DTB_ENDENB	PDP10/kx10_dt.c	201;"	d	file:
DTB_EOT	PDP10/pdp6_dtc.c	190;"	d	file:
DTB_FIN	PDP10/kx10_dt.c	209;"	d	file:
DTB_FLGREQ	PDP10/kx10_dt.c	225;"	d	file:
DTB_IDL	PDP10/kx10_dt.c	211;"	d	file:
DTB_ILL	PDP10/kx10_dt.c	217;"	d	file:
DTB_ILL	PDP10/pdp6_dtc.c	191;"	d	file:
DTB_ILLENB	PDP10/kx10_dt.c	200;"	d	file:
DTB_INCBLK	PDP10/kx10_dt.c	222;"	d	file:
DTB_INCBLK	PDP10/pdp6_dtc.c	195;"	d	file:
DTB_JOBENB	PDP10/kx10_dt.c	199;"	d	file:
DTB_MIS	PDP10/kx10_dt.c	215;"	d	file:
DTB_MISENB	PDP10/kx10_dt.c	202;"	d	file:
DTB_MRKERR	PDP10/kx10_dt.c	223;"	d	file:
DTB_NULL	PDP10/pdp6_dtc.c	196;"	d	file:
DTB_PAR	PDP10/kx10_dt.c	214;"	d	file:
DTB_PAR	PDP10/pdp6_dtc.c	192;"	d	file:
DTB_PARENB	PDP10/kx10_dt.c	197;"	d	file:
DTB_REQ	PDP10/pdp6_dtc.c	198;"	d	file:
DTB_REV	PDP10/kx10_dt.c	207;"	d	file:
DTB_SELERR	PDP10/kx10_dt.c	224;"	d	file:
DTB_SPD	PDP10/kx10_dt.c	205;"	d	file:
DTB_STOP	PDP10/kx10_dt.c	213;"	d	file:
DTB_TIME	PDP10/pdp6_dtc.c	193;"	d	file:
DTB_TIMENB	PDP10/kx10_dt.c	198;"	d	file:
DTB_WR	PDP10/pdp6_dtc.c	194;"	d	file:
DTB_WRLK	PDP10/kx10_dt.c	220;"	d	file:
DTB_WRMK	PDP10/kx10_dt.c	221;"	d	file:
DTC_ACCL	PDP10/kx10_dt.c	242;"	d	file:
DTC_ACCL	PDP10/pdp6_dtc.c	216;"	d	file:
DTC_BLOCK	PDP10/kx10_dt.c	233;"	d	file:
DTC_BLOCK	PDP10/pdp6_dtc.c	206;"	d	file:
DTC_DATA_PIA	PDP10/kx10_dt.c	156;"	d	file:
DTC_DELAY	PDP10/pdp6_dtc.c	171;"	d	file:
DTC_DESEL	PDP10/kx10_dt.c	169;"	d	file:
DTC_DEVNUM	PDP10/pdp6_dtc.c	94;"	d	file:
DTC_ETF	PDP10/pdp6_dtc.c	176;"	d	file:
DTC_FBLK	PDP10/kx10_dt.c	231;"	d	file:
DTC_FBLK	PDP10/pdp6_dtc.c	204;"	d	file:
DTC_FCHK	PDP10/kx10_dt.c	232;"	d	file:
DTC_FCHK	PDP10/pdp6_dtc.c	205;"	d	file:
DTC_FEND	PDP10/kx10_dt.c	230;"	d	file:
DTC_FEND	PDP10/pdp6_dtc.c	203;"	d	file:
DTC_FLAG_PIA	PDP10/kx10_dt.c	155;"	d	file:
DTC_FLAG_PIA	PDP10/pdp6_dtc.c	158;"	d	file:
DTC_FNC_REV	PDP10/kx10_dt.c	180;"	d	file:
DTC_FNC_REV	PDP10/pdp6_dtc.c	182;"	d	file:
DTC_FNC_START	PDP10/kx10_dt.c	179;"	d	file:
DTC_FNC_START	PDP10/pdp6_dtc.c	181;"	d	file:
DTC_FNC_STOP	PDP10/kx10_dt.c	178;"	d	file:
DTC_FNC_STOP	PDP10/pdp6_dtc.c	180;"	d	file:
DTC_FWDRV	PDP10/kx10_dt.c	173;"	d	file:
DTC_GETFNC	PDP10/kx10_dt.c	192;"	d	file:
DTC_GETFNC	PDP10/pdp6_dtc.c	184;"	d	file:
DTC_GETUNI	PDP10/kx10_dt.c	193;"	d	file:
DTC_GETUNI	PDP10/pdp6_dtc.c	185;"	d	file:
DTC_JDONE	PDP10/pdp6_dtc.c	175;"	d	file:
DTC_MOT	PDP10/kx10_dt.c	239;"	d	file:
DTC_MOT	PDP10/pdp6_dtc.c	212;"	d	file:
DTC_MOTMASK	PDP10/kx10_dt.c	238;"	d	file:
DTC_MOTMASK	PDP10/pdp6_dtc.c	211;"	d	file:
DTC_M_BLK	PDP10/kx10_dt.c	247;"	d	file:
DTC_M_BLK	PDP10/pdp6_dtc.c	221;"	d	file:
DTC_M_FNC	PDP10/kx10_dt.c	158;"	d	file:
DTC_M_FNC	PDP10/pdp6_dtc.c	162;"	d	file:
DTC_M_UNIT	PDP10/kx10_dt.c	168;"	d	file:
DTC_M_UNIT	PDP10/pdp6_dtc.c	160;"	d	file:
DTC_M_WORD	PDP10/kx10_dt.c	245;"	d	file:
DTC_M_WORD	PDP10/pdp6_dtc.c	219;"	d	file:
DTC_NODELAY	PDP10/kx10_dt.c	171;"	d	file:
DTC_NUMDR	PDP10/pdp6_dtc.c	95;"	d	file:
DTC_OVER	PDP10/kx10_rh.c	94;"	d	file:
DTC_RBLK	PDP10/kx10_dt.c	235;"	d	file:
DTC_RBLK	PDP10/pdp6_dtc.c	208;"	d	file:
DTC_RCHK	PDP10/kx10_dt.c	234;"	d	file:
DTC_RCHK	PDP10/pdp6_dtc.c	207;"	d	file:
DTC_REND	PDP10/kx10_dt.c	236;"	d	file:
DTC_REND	PDP10/pdp6_dtc.c	209;"	d	file:
DTC_REV	PDP10/kx10_dt.c	240;"	d	file:
DTC_REV	PDP10/pdp6_dtc.c	213;"	d	file:
DTC_RVDRV	PDP10/kx10_dt.c	172;"	d	file:
DTC_RVDRV	PDP10/pdp6_dtc.c	173;"	d	file:
DTC_SEL	PDP10/kx10_dt.c	170;"	d	file:
DTC_SEL	PDP10/pdp6_dtc.c	177;"	d	file:
DTC_START	PDP10/pdp6_dtc.c	174;"	d	file:
DTC_STOP	PDP10/kx10_dt.c	241;"	d	file:
DTC_STOP	PDP10/pdp6_dtc.c	215;"	d	file:
DTC_STSTOP	PDP10/kx10_dt.c	174;"	d	file:
DTC_TIME	PDP10/pdp6_dtc.c	172;"	d	file:
DTC_V_BLK	PDP10/kx10_dt.c	246;"	d	file:
DTC_V_BLK	PDP10/pdp6_dtc.c	220;"	d	file:
DTC_V_FNC	PDP10/kx10_dt.c	157;"	d	file:
DTC_V_FNC	PDP10/pdp6_dtc.c	161;"	d	file:
DTC_V_UNIT	PDP10/kx10_dt.c	167;"	d	file:
DTC_V_UNIT	PDP10/pdp6_dtc.c	159;"	d	file:
DTC_V_WORD	PDP10/kx10_dt.c	244;"	d	file:
DTC_V_WORD	PDP10/pdp6_dtc.c	218;"	d	file:
DTC_XFR	PDP10/pdp6_dtc.c	214;"	d	file:
DTE_10DB	PDP10/kl10_dn.c	53;"	d	file:
DTE_10DB	PDP10/kl10_fe.c	49;"	d	file:
DTE_10DN	PDP10/kl10_dn.c	56;"	d	file:
DTE_10DN	PDP10/kl10_fe.c	52;"	d	file:
DTE_10ER	PDP10/kl10_dn.c	57;"	d	file:
DTE_10ER	PDP10/kl10_fe.c	53;"	d	file:
DTE_11DB	PDP10/kl10_dn.c	52;"	d	file:
DTE_11DB	PDP10/kl10_fe.c	48;"	d	file:
DTE_11DN	PDP10/kl10_dn.c	55;"	d	file:
DTE_11DN	PDP10/kl10_fe.c	51;"	d	file:
DTE_11ER	PDP10/kl10_dn.c	54;"	d	file:
DTE_11ER	PDP10/kl10_fe.c	50;"	d	file:
DTE_11RELD	PDP10/kl10_dn.c	62;"	d	file:
DTE_11RELD	PDP10/kl10_fe.c	58;"	d	file:
DTE_CO10CL	PDP10/kl10_dn.c	75;"	d	file:
DTE_CO10CL	PDP10/kl10_fe.c	70;"	d	file:
DTE_CO10DB	PDP10/kl10_dn.c	73;"	d	file:
DTE_CO10DB	PDP10/kl10_fe.c	68;"	d	file:
DTE_CO11CL	PDP10/kl10_dn.c	74;"	d	file:
DTE_CO11CL	PDP10/kl10_fe.c	69;"	d	file:
DTE_CO11CR	PDP10/kl10_dn.c	71;"	d	file:
DTE_CO11CR	PDP10/kl10_fe.c	66;"	d	file:
DTE_CO11DB	PDP10/kl10_dn.c	70;"	d	file:
DTE_CO11DB	PDP10/kl10_fe.c	65;"	d	file:
DTE_CO11SR	PDP10/kl10_dn.c	72;"	d	file:
DTE_CO11SR	PDP10/kl10_fe.c	67;"	d	file:
DTE_D11	PDP10/kl10_dn.c	51;"	d	file:
DTE_D11	PDP10/kl10_fe.c	47;"	d	file:
DTE_DEVNUM	PDP10/kl10_dn.c	41;"	d	file:
DTE_DEVNUM	PDP10/kl10_fe.c	36;"	d	file:
DTE_IND	PDP10/kl10_dn.c	65;"	d	file:
DTE_IND	PDP10/kl10_fe.c	61;"	d	file:
DTE_INIT	PDP10/kl10_dn.c	67;"	d	file:
DTE_MON	PDP10/kl10_dn.c	117;"	d	file:
DTE_MON	PDP10/kl10_fe.c	112;"	d	file:
DTE_PIA	PDP10/kl10_dn.c	59;"	d	file:
DTE_PIA	PDP10/kl10_fe.c	55;"	d	file:
DTE_PIE	PDP10/kl10_dn.c	58;"	d	file:
DTE_PIE	PDP10/kl10_fe.c	54;"	d	file:
DTE_PIENB	PDP10/kl10_dn.c	76;"	d	file:
DTE_PIENB	PDP10/kl10_fe.c	71;"	d	file:
DTE_RM	PDP10/kl10_dn.c	50;"	d	file:
DTE_RM	PDP10/kl10_fe.c	46;"	d	file:
DTE_SEC	PDP10/kl10_dn.c	64;"	d	file:
DTE_SEC	PDP10/kl10_fe.c	60;"	d	file:
DTE_SIND	PDP10/kl10_dn.c	66;"	d	file:
DTE_SIND	PDP10/kl10_fe.c	62;"	d	file:
DTE_TO10BC	PDP10/kl10_dn.c	80;"	d	file:
DTE_TO10BC	PDP10/kl10_fe.c	75;"	d	file:
DTE_TO10IB	PDP10/kl10_dn.c	79;"	d	file:
DTE_TO10IB	PDP10/kl10_fe.c	74;"	d	file:
DTE_TO11	PDP10/kl10_dn.c	63;"	d	file:
DTE_TO11	PDP10/kl10_fe.c	59;"	d	file:
DTR	PDP10/ks10_dz.c	75;"	d	file:
DTR_DIS	PDP10/kx10_dc.c	49;"	d	file:
DTR_FLAG	PDP10/ks10_dz.c	99;"	d	file:
DTR_SET	PDP10/kx10_dc.c	51;"	d	file:
DTS_BLK_MISS	PDP10/kx10_dt.c	185;"	d	file:
DTS_DATA_MISS	PDP10/kx10_dt.c	189;"	d	file:
DTS_END_ZONE	PDP10/kx10_dt.c	186;"	d	file:
DTS_FUNC_STOP	PDP10/kx10_dt.c	183;"	d	file:
DTS_ILL_OP	PDP10/kx10_dt.c	187;"	d	file:
DTS_JOB_DONE	PDP10/kx10_dt.c	188;"	d	file:
DTS_LINE	PDP10/kx10_dc.c	45;"	d	file:
DTS_PAR_ERR	PDP10/kx10_dt.c	190;"	d	file:
DTS_STOP_ALL	PDP10/kx10_dt.c	184;"	d	file:
DTU_BSIZE	PDP10/kx10_dt.c	140;"	d	file:
DTU_BSIZE	PDP10/pdp6_dtc.c	142;"	d	file:
DTU_CAPAC	PDP10/kx10_dt.c	144;"	d	file:
DTU_CAPAC	PDP10/pdp6_dtc.c	146;"	d	file:
DTU_FWDEZ	PDP10/kx10_dt.c	143;"	d	file:
DTU_FWDEZ	PDP10/pdp6_dtc.c	145;"	d	file:
DTU_LPERB	PDP10/kx10_dt.c	142;"	d	file:
DTU_LPERB	PDP10/pdp6_dtc.c	144;"	d	file:
DTU_TSIZE	PDP10/kx10_dt.c	141;"	d	file:
DTU_TSIZE	PDP10/pdp6_dtc.c	143;"	d	file:
DTYPE	PDP10/kx10_rp.c	43;"	d	file:
DTYPE	PDP10/kx10_rs.c	42;"	d	file:
DT_BFLIN	PDP10/kx10_dt.c	106;"	d	file:
DT_BFLIN	PDP10/pdp6_dtc.c	108;"	d	file:
DT_BLK2LN	PDP10/kx10_dt.c	149;"	d	file:
DT_BLK2LN	PDP10/pdp6_dtc.c	151;"	d	file:
DT_BLKLN	PDP10/kx10_dt.c	107;"	d	file:
DT_BLKLN	PDP10/pdp6_dtc.c	109;"	d	file:
DT_BLKWD	PDP10/kx10_dt.c	102;"	d	file:
DT_BLKWD	PDP10/pdp6_dtc.c	104;"	d	file:
DT_CAPAC	PDP10/kx10_dt.c	135;"	d	file:
DT_CAPAC	PDP10/pdp6_dtc.c	137;"	d	file:
DT_CSMLN	PDP10/kx10_dt.c	108;"	d	file:
DT_CSMLN	PDP10/pdp6_dtc.c	110;"	d	file:
DT_CSMWD	PDP10/kx10_dt.c	103;"	d	file:
DT_CSMWD	PDP10/pdp6_dtc.c	105;"	d	file:
DT_DEVNUM	PDP10/kx10_dt.c	92;"	d	file:
DT_EZLIN	PDP10/kx10_dt.c	105;"	d	file:
DT_EZLIN	PDP10/pdp6_dtc.c	107;"	d	file:
DT_HTLIN	PDP10/kx10_dt.c	109;"	d	file:
DT_HTLIN	PDP10/pdp6_dtc.c	111;"	d	file:
DT_HTWRD	PDP10/kx10_dt.c	104;"	d	file:
DT_HTWRD	PDP10/pdp6_dtc.c	106;"	d	file:
DT_LIN2BL	PDP10/kx10_dt.c	146;"	d	file:
DT_LIN2BL	PDP10/pdp6_dtc.c	148;"	d	file:
DT_LIN2OF	PDP10/kx10_dt.c	147;"	d	file:
DT_LIN2OF	PDP10/pdp6_dtc.c	149;"	d	file:
DT_LIN2WD	PDP10/kx10_dt.c	148;"	d	file:
DT_LIN2WD	PDP10/pdp6_dtc.c	150;"	d	file:
DT_LPERMC	PDP10/kx10_dt.c	101;"	d	file:
DT_LPERMC	PDP10/pdp6_dtc.c	103;"	d	file:
DT_NUMDR	PDP10/kx10_dt.c	93;"	d	file:
DT_QEZ	PDP10/kx10_dt.c	152;"	d	file:
DT_QEZ	PDP10/pdp6_dtc.c	154;"	d	file:
DT_QFEZ	PDP10/kx10_dt.c	151;"	d	file:
DT_QFEZ	PDP10/pdp6_dtc.c	153;"	d	file:
DT_QREZ	PDP10/kx10_dt.c	150;"	d	file:
DT_QREZ	PDP10/pdp6_dtc.c	152;"	d	file:
DT_WRDTIM	PDP10/kx10_dt.c	258;"	d	file:
DT_WRDTIM	PDP10/pdp6_dtc.c	233;"	d	file:
DT_WSIZE	PDP10/kx10_dt.c	136;"	d	file:
DT_WSIZE	PDP10/pdp6_dtc.c	138;"	d	file:
DUMMY_PPP	slirp/slirp_config.h	52;"	d
DUNENB	PDP10/ka10_ai.c	113;"	d	file:
DUPDPTR	PDP10/ks10_dup.c	443;"	d	file:
DUP_CONNECT_POLL	PDP10/ks10_dup.c	51;"	d	file:
DUP_HLP_ATTACH	PDP10/ks10_dup.c	1479;"	d	file:
DUP_LINES	PDP10/ks10_kmc.c	65;"	d	file:
DUP_WAIT	PDP10/ks10_dup.c	50;"	d	file:
DWPE_STOP	PDP10/kx10_dp.c	85;"	d	file:
DWRITC	PDP10/ka10_ai.c	126;"	d	file:
DWRITE	PDP10/ka10_ai.c	122;"	d	file:
DWTHER	PDP10/ka10_ai.c	104;"	d	file:
DXCT	PDP10/ka10_ai.c	131;"	d	file:
DZ11_LINES	PDP10/ks10_dz.c	39;"	d	file:
Data	sim_ether.c	/^    uint8 Data[1];              \/\/\/< variable-lenght field that contains the information passed to or received $/;"	m	struct:_PACKET_OID_DATA	file:
DataOffset	sim_disk.c	/^    uint64 DataOffset;$/;"	m	struct:_VHD_DynamicDiskHeader	file:
DataOffset	sim_disk.c	/^    uint64 DataOffset;$/;"	m	struct:_VHD_Footer	file:
Debug	sim_frontpanel.c	/^    FILE                    *Debug;$/;"	m	struct:PANEL	file:
DeviceName	sim_disk.c	/^    uint8       DeviceName[16];         \/* Name of the Device when created *\/$/;"	m	struct:simh_disk_footer	file:
DeviceTypes	sim_disk.c	/^    } DeviceTypes[] = {$/;"	v	typeref:struct:_device_type
DirChanges	scp.c	/^    int DirChanges;$/;"	m	struct:__anon4	file:
DirCount	scp.c	/^    int DirCount;$/;"	m	struct:__anon4	file:
DiskGeometry	sim_disk.c	/^    uint32 DiskGeometry;$/;"	m	struct:_VHD_Footer	file:
DiskType	sim_disk.c	/^    uint32 DiskType;$/;"	m	struct:_VHD_Footer	file:
DriveSectorSize	sim_disk.c	/^    uint32 DriveSectorSize;$/;"	m	struct:_VHD_Footer	file:
DriveTransferElementSize	sim_disk.c	/^    uint32 DriveTransferElementSize;$/;"	m	struct:_VHD_Footer	file:
DriveType	sim_disk.c	/^    uint8       DriveType[16];$/;"	m	struct:simh_disk_footer	file:
DriveType	sim_disk.c	/^    uint8 DriveType[16];$/;"	m	struct:_VHD_Footer	file:
Dynamic	sim_disk.c	/^    VHD_DynamicDiskHeader Dynamic;$/;"	m	struct:VHD_IOData	file:
EAI_OVERFLOW	sim_sock.c	196;"	d	file:
EAI_OVERFLOW	sim_sock.c	202;"	d	file:
EAI_OVERFLOW	sim_sock.c	371;"	d	file:
EBSERR	PDP10/kl10_nia.c	94;"	d	file:
ECANCELED	slirp_glue/qemu/osdep.h	105;"	d
ECONNREFUSED	slirp_glue/qemu/sysemu/os-win32.h	42;"	d
EDGE_ENB	PDP10/ka10_iii.c	56;"	d	file:
EDGE_FLG	PDP10/ka10_iii.c	67;"	d	file:
EDGE_MSK	PDP10/ka10_iii.c	71;"	d	file:
EDG_FBIT	PDP10/ka10_iii.c	75;"	d	file:
ED_DIS	display/vtmacs.h	76;"	d
ED_ENA	display/vtmacs.h	77;"	d
ED_SAME	display/vtmacs.h	75;"	d
EES	PDP10/pdp6_dsk.c	52;"	d	file:
EFE	PDP10/pdp6_dsk.c	53;"	d	file:
EFN	sim_console.c	3299;"	d	file:
EFR	PDP10/pdp6_dsk.c	51;"	d	file:
EHOSTUNREACH	slirp_glue/qemu/sysemu/os-win32.h	48;"	d
EINPROGRESS	slirp_glue/qemu/sysemu/os-win32.h	45;"	d
EINPROGRESS	slirp_glue/qemu/sysemu/os-win32.h	54;"	d
EINTR	slirp_glue/qemu/sysemu/os-win32.h	51;"	d
EIS	PDP10/pdp6_dsk.c	50;"	d	file:
EJECT	PDP10/kx10_cp.c	60;"	d	file:
EJECT_FAIL	PDP10/kx10_cp.c	74;"	d	file:
ELEMENTS	display/display.c	85;"	d	file:
EMASK	PDP10/kx10_defs.h	180;"	d
EMEDIUMTYPE	slirp_glue/qemu/osdep.h	108;"	d
EMU_CTL	slirp/misc.h	24;"	d
EMU_FTP	slirp/misc.h	25;"	d
EMU_IDENT	slirp/misc.h	30;"	d
EMU_IRC	slirp/misc.h	27;"	d
EMU_KSH	slirp/misc.h	26;"	d
EMU_NOCONNECT	slirp/misc.h	33;"	d
EMU_NONE	slirp/misc.h	21;"	d
EMU_REALAUDIO	slirp/misc.h	28;"	d
EMU_RLOGIN	slirp/misc.h	29;"	d
EMU_RSH	slirp/misc.h	31;"	d
ENABLE_VIRTUAL_TERMINAL_INPUT	sim_console.c	3469;"	d	file:
ENABLE_VIRTUAL_TERMINAL_PROCESSING	sim_console.c	3472;"	d	file:
ENB_ERF	PDP10/pdp6_mtc.c	112;"	d	file:
ENB_ICE	PDP10/pdp6_mtc.c	110;"	d	file:
ENB_JNU	PDP10/pdp6_mtc.c	111;"	d	file:
ENB_LIE	PDP10/pdp6_mtc.c	114;"	d	file:
ENB_XNE	PDP10/pdp6_mtc.c	113;"	d	file:
END	PDP10/pdp6_dsk.c	60;"	d	file:
ENDBITS	sim_defs.h	1086;"	d
ENDFILE	display/vttest.c	62;"	d	file:
ENDSECT	display/vttest.c	61;"	d	file:
ENDSUB	display/vttest.c	52;"	d	file:
ENDSUP	display/vttest.c	51;"	d	file:
END_CARD	PDP10/kx10_cp.c	68;"	d	file:
END_CARD	PDP10/kx10_cr.c	63;"	d	file:
END_CARD_EN	PDP10/kx10_cp.c	69;"	d	file:
END_CYL	PDP10/kx10_dp.c	73;"	d	file:
END_FILE	PDP10/kx10_cr.c	64;"	d	file:
END_PT	PDP10/pdp6_mtc.c	100;"	d	file:
ENETUNREACH	slirp_glue/qemu/sysemu/os-win32.h	57;"	d
ENOMEDIUM	slirp_glue/qemu/osdep.h	99;"	d
ENOTCONN	slirp_glue/qemu/sysemu/os-win32.h	60;"	d
ENOTSUP	slirp_glue/qemu/osdep.h	102;"	d
EN_END_CARD	PDP10/kx10_cp.c	55;"	d	file:
EN_READY	PDP10/kx10_cr.c	55;"	d	file:
EN_TROUBLE	PDP10/kx10_cp.c	58;"	d	file:
EN_TROUBLE	PDP10/kx10_cr.c	57;"	d	file:
EOFFLG	PDP10/kl10_fe.c	332;"	d	file:
EOFFLG	PDP10/ks10_lp.c	106;"	d	file:
EOF_FLAG	PDP10/kx10_mt.c	86;"	d	file:
EOF_FLAG	PDP10/pdp6_mtc.c	98;"	d	file:
EOR_FLAG	PDP10/pdp6_mtc.c	92;"	d	file:
EOR_MOT_DLY	PDP10/pdp6_mtc.c	135;"	d	file:
EOR_RD_DLY	PDP10/pdp6_mtc.c	125;"	d	file:
EOR_WR_DLY	PDP10/pdp6_mtc.c	126;"	d	file:
EOT_FLAG	PDP10/kx10_mt.c	85;"	d	file:
EOT_FLAG	PDP10/pdp6_mtc.c	102;"	d	file:
EPAR	PDP10/kx10_rc.c	56;"	d	file:
EPROTONOSUPPORT	slirp_glue/qemu/sysemu/os-win32.h	101;"	d
EPT440	PDP10/kx10_defs.h	58;"	d
ER1_AOE	PDP10/kx10_rp.c	105;"	d	file:
ER1_AOE	PDP10/kx10_rs.c	93;"	d	file:
ER1_CPAR	PDP10/kx10_tu.c	97;"	d	file:
ER1_DCK	PDP10/kx10_rp.c	111;"	d	file:
ER1_DCK	PDP10/kx10_rs.c	99;"	d	file:
ER1_DCK	PDP10/kx10_tu.c	109;"	d	file:
ER1_DPAR	PDP10/kx10_tu.c	99;"	d	file:
ER1_DTE	PDP10/kx10_rp.c	108;"	d	file:
ER1_DTE	PDP10/kx10_rs.c	96;"	d	file:
ER1_DTE	PDP10/kx10_tu.c	106;"	d	file:
ER1_ECH	PDP10/kx10_rp.c	102;"	d	file:
ER1_ECH	PDP10/kx10_rs.c	90;"	d	file:
ER1_FCE	PDP10/kx10_tu.c	103;"	d	file:
ER1_FER	PDP10/kx10_rp.c	100;"	d	file:
ER1_FER	PDP10/kx10_rs.c	88;"	d	file:
ER1_FMT	PDP10/kx10_tu.c	98;"	d	file:
ER1_HCE	PDP10/kx10_rp.c	103;"	d	file:
ER1_HCE	PDP10/kx10_rs.c	91;"	d	file:
ER1_HCR	PDP10/kx10_rp.c	104;"	d	file:
ER1_HCR	PDP10/kx10_rs.c	92;"	d	file:
ER1_IAE	PDP10/kx10_rp.c	106;"	d	file:
ER1_IAE	PDP10/kx10_rs.c	94;"	d	file:
ER1_ILF	PDP10/kx10_rh.c	59;"	d	file:
ER1_ILF	PDP10/kx10_rp.c	96;"	d	file:
ER1_ILF	PDP10/kx10_rs.c	84;"	d	file:
ER1_ILF	PDP10/kx10_tu.c	94;"	d	file:
ER1_ILR	PDP10/kx10_rh.c	60;"	d	file:
ER1_ILR	PDP10/kx10_rp.c	97;"	d	file:
ER1_ILR	PDP10/kx10_rs.c	85;"	d	file:
ER1_ILR	PDP10/kx10_tu.c	95;"	d	file:
ER1_INC	PDP10/kx10_tu.c	100;"	d	file:
ER1_ITM	PDP10/kx10_tu.c	104;"	d	file:
ER1_NEF	PDP10/kx10_tu.c	105;"	d	file:
ER1_NSG	PDP10/kx10_tu.c	102;"	d	file:
ER1_OPI	PDP10/kx10_rp.c	109;"	d	file:
ER1_OPI	PDP10/kx10_rs.c	97;"	d	file:
ER1_OPI	PDP10/kx10_tu.c	107;"	d	file:
ER1_PAR	PDP10/kx10_rh.c	62;"	d	file:
ER1_PAR	PDP10/kx10_rp.c	99;"	d	file:
ER1_PAR	PDP10/kx10_rs.c	87;"	d	file:
ER1_PEF	PDP10/kx10_tu.c	101;"	d	file:
ER1_RMR	PDP10/kx10_rh.c	61;"	d	file:
ER1_RMR	PDP10/kx10_rp.c	98;"	d	file:
ER1_RMR	PDP10/kx10_rs.c	86;"	d	file:
ER1_RMR	PDP10/kx10_tu.c	96;"	d	file:
ER1_UNS	PDP10/kx10_rp.c	110;"	d	file:
ER1_UNS	PDP10/kx10_rs.c	98;"	d	file:
ER1_UNS	PDP10/kx10_tu.c	108;"	d	file:
ER1_WCF	PDP10/kx10_rp.c	101;"	d	file:
ER1_WCF	PDP10/kx10_rs.c	89;"	d	file:
ER1_WLE	PDP10/kx10_rp.c	107;"	d	file:
ER1_WLE	PDP10/kx10_rs.c	95;"	d	file:
ERG	PDP10/kx10_mt.c	68;"	d	file:
ERG	PDP10/pdp6_mtc.c	69;"	d	file:
ERR	PDP10/ka10_auxcpu.c	39;"	d	file:
ERR	PDP10/ka10_ten11.c	58;"	d	file:
ERR	PDP10/pdp6_slave.c	40;"	d	file:
ERROR	PDP10/kx10_cp.c	71;"	d	file:
ERROR	sim_defs.h	142;"	d
ERROR	sim_video.c	155;"	d	file:
ERR_FLG	PDP10/kx10_lp.c	55;"	d	file:
ESCAPE_CHAR	sim_console.c	4335;"	d	file:
ESCP	display/type340cmd.h	133;"	d
ESC_CHAR	sim_console.c	3660;"	d	file:
ESC_HOLD_MAX	sim_console.c	3664;"	d	file:
ESC_HOLD_USEC_DELAY	sim_console.c	3663;"	d	file:
ES_NO	display/vtmacs.h	84;"	d
ES_SAME	display/vtmacs.h	83;"	d
ES_YES	display/vtmacs.h	85;"	d
ETHTYPE_ARP	PDP10/kl10_nia.c	203;"	d	file:
ETHTYPE_ARP	PDP10/kx10_imp.c	210;"	d	file:
ETHTYPE_IP	PDP10/kl10_nia.c	204;"	d	file:
ETHTYPE_IP	PDP10/kx10_imp.c	211;"	d	file:
ETH_ALEN	slirp/slirp.h	164;"	d
ETH_API_NAT	sim_ether.h	267;"	d
ETH_API_NONE	sim_ether.h	262;"	d
ETH_API_PCAP	sim_ether.h	263;"	d
ETH_API_TAP	sim_ether.h	264;"	d
ETH_API_UDP	sim_ether.h	266;"	d
ETH_API_VDE	sim_ether.h	265;"	d
ETH_BOOL	sim_ether.h	/^typedef int ETH_BOOL;$/;"	t
ETH_CRC_SIZE	sim_ether.h	167;"	d
ETH_DEV	sim_ether.h	/^typedef struct eth_device  ETH_DEV;$/;"	t	typeref:struct:eth_device
ETH_DEV_DESC_MAX	sim_ether.h	162;"	d
ETH_DEV_NAME_MAX	sim_ether.h	161;"	d
ETH_ERROR_REOPEN_PAUSE	sim_ether.h	294;"	d
ETH_ERROR_REOPEN_THRESHOLD	sim_ether.h	293;"	d
ETH_FILTER_MAX	sim_ether.h	160;"	d
ETH_FRAME_SIZE	sim_ether.h	168;"	d
ETH_HLEN	slirp/slirp.h	165;"	d
ETH_ITEM	sim_ether.h	/^typedef struct eth_item ETH_ITEM;$/;"	t	typeref:struct:eth_item
ETH_ITM_LOOPBACK	sim_ether.h	220;"	d
ETH_ITM_NORMAL	sim_ether.h	221;"	d
ETH_ITM_SETUP	sim_ether.h	219;"	d
ETH_LIST	sim_ether.h	/^typedef struct eth_list ETH_LIST;$/;"	t	typeref:struct:eth_list
ETH_MAC	sim_ether.h	/^typedef unsigned char ETH_MAC[6];$/;"	t
ETH_MAX_DEVICE	sim_ether.h	166;"	d
ETH_MAX_JUMBO_FRAME	sim_ether.h	165;"	d
ETH_MAX_PACKET	sim_ether.h	164;"	d
ETH_MIN_JUMBO_FRAME	sim_ether.h	169;"	d
ETH_MIN_PACKET	sim_ether.h	163;"	d
ETH_MULTIHASH	sim_ether.h	/^typedef unsigned char ETH_MULTIHASH[8];$/;"	t
ETH_PACK	sim_ether.h	/^typedef struct eth_packet  ETH_PACK;$/;"	t	typeref:struct:eth_packet
ETH_PCALLBACK	sim_ether.h	/^typedef void (*ETH_PCALLBACK)(int status);$/;"	t
ETH_PROMISC	sim_ether.h	158;"	d
ETH_P_ARP	slirp/slirp.h	168;"	d
ETH_P_IP	slirp/slirp.h	167;"	d
ETH_QUE	sim_ether.h	/^typedef struct eth_queue ETH_QUE;$/;"	t	typeref:struct:eth_queue
ETH_THROT_DEFAULT_BURST	sim_ether.h	304;"	d
ETH_THROT_DEFAULT_DELAY	sim_ether.h	307;"	d
ETH_THROT_DEFAULT_TIME	sim_ether.h	302;"	d
ETH_THROT_DISABLED_DELAY	sim_ether.h	306;"	d
ETH_TIMEOUT	sim_ether.h	159;"	d
ETH_WRITE_REQUEST	sim_ether.h	/^typedef struct eth_write_request ETH_WRITE_REQUEST;$/;"	t	typeref:struct:eth_write_request
EVENT_BEEP	sim_video.c	325;"	d	file:
EVENT_CLOSE	sim_video.c	317;"	d	file:
EVENT_CURSOR	sim_video.c	318;"	d	file:
EVENT_DRAW	sim_video.c	320;"	d	file:
EVENT_EXIT	sim_video.c	323;"	d	file:
EVENT_OPEN	sim_video.c	322;"	d	file:
EVENT_REDRAW	sim_video.c	316;"	d	file:
EVENT_SCREENSHOT	sim_video.c	324;"	d	file:
EVENT_SHOW	sim_video.c	321;"	d	file:
EVENT_WARP	sim_video.c	319;"	d	file:
EWOULDBLOCK	slirp_glue/qemu/sysemu/os-win32.h	63;"	d
EXE_DIR	PDP10/kx10_sys.c	286;"	d	file:
EXE_END	PDP10/kx10_sys.c	289;"	d	file:
EXE_PDV	PDP10/kx10_sys.c	288;"	d	file:
EXE_VEC	PDP10/kx10_sys.c	287;"	d	file:
EXIT_FAILURE	display/test.c	52;"	d	file:
EXIT_FAILURE	sim_defs.h	130;"	d
EXIT_SUCCESS	sim_defs.h	133;"	d
EXJSYS	PDP10/kx10_defs.h	283;"	d
EXPECT	sim_defs.h	/^struct EXPECT {$/;"	s
EXPECT	sim_defs.h	/^typedef struct EXPECT EXPECT;$/;"	t	typeref:struct:EXPECT
EXPO	PDP10/kx10_defs.h	197;"	d
EXPTAB	sim_defs.h	/^struct EXPTAB {$/;"	s
EXPTAB	sim_defs.h	/^typedef struct EXPTAB EXPTAB;$/;"	t	typeref:struct:EXPTAB
EXP_TYP_CLEARALL	sim_defs.h	829;"	d
EXP_TYP_PERSIST	sim_defs.h	828;"	d
EXP_TYP_REGEX	sim_defs.h	830;"	d
EXP_TYP_REGEX_I	sim_defs.h	831;"	d
EXP_TYP_TIME	sim_defs.h	832;"	d
EX_D	scp.h	58;"	d
EX_E	scp.h	59;"	d
EX_I	scp.h	60;"	d
EX_KEEP_ALV	PDP10/ks10_cty.c	57;"	d	file:
Error	sim_frontpanel.h	/^    Error       \/* Panel simulator is in an error state and should be *\/$/;"	e	enum:__anon23
EventDispatchTarget	display/carbon.c	/^static EventTargetRef           EventDispatchTarget;$/;"	v	file:
ExpandToFullPath	sim_disk.c	/^ExpandToFullPath (const char *szFileSpec,$/;"	f	file:
F	PDP10/ka10_iii.c	48;"	d	file:
FAC	PDP10/kx10_cpu.c	698;"	d	file:
FAC2	PDP10/kx10_cpu.c	699;"	d	file:
FAIL	scp.c	14360;"	d	file:
FALSE	sim_defs.h	183;"	d
FALS_EOR	PDP10/pdp6_mtc.c	85;"	d	file:
FAST	PDP10/kx10_dpy.c	805;"	d	file:
FBR	PDP10/kx10_cpu.c	704;"	d	file:
FCE	PDP10/kx10_cpu.c	695;"	d	file:
FCEPSE	PDP10/kx10_cpu.c	696;"	d	file:
FD_FLAG_WRITELOCK	sim_imd.h	70;"	d
FE	PDP10/kx10_cpu.c	/^int     FE;                                   \/* Exponent *\/$/;"	v
FER	PDP10/pdp6_dsk.c	75;"	d	file:
FF	PDP10/ka10_stk.c	76;"	d	file:
FIELDMASK	display/type340.c	84;"	d	file:
FIELDMASK	display/vt11.c	123;"	d	file:
FILEREF	sim_defs.h	/^struct FILEREF {$/;"	s
FILEREF	sim_defs.h	/^typedef struct FILEREF FILEREF;$/;"	t	typeref:struct:FILEREF
FILESYSTEM_CHECK	sim_disk.c	/^typedef t_offset (*FILESYSTEM_CHECK)(UNIT *uptr, uint32);$/;"	t	file:
FILE_UNSAFE	PDP10/kx10_dp.c	114;"	d	file:
FIND_CMD	scp.c	6470;"	d	file:
FIND_CMD2	scp.c	6471;"	d	file:
FIRE	PDP10/kx10_dpy.c	576;"	d	file:
FLAG	PDP10/kx10_dc.c	55;"	d	file:
FLAGS	PDP10/kx10_cpu.c	/^uint32  FLAGS;                                \/* Flags *\/$/;"	v
FLAG_24	PDP10/kx10_defs.h	229;"	d
FLAG_PIA	PDP10/kx10_mt.c	100;"	d	file:
FLAG_PIA	PDP10/pdp6_mtc.c	57;"	d	file:
FLDATA	sim_defs.h	1034;"	d
FLDATA	sim_defs.h	946;"	d
FLDATAD	sim_defs.h	1036;"	d
FLDATAD	sim_defs.h	948;"	d
FLDATADF	sim_defs.h	1038;"	d
FLDATADF	sim_defs.h	950;"	d
FLG_AINT	PDP10/ks10_kmc.c	446;"	d	file:
FLG_BINT	PDP10/ks10_kmc.c	447;"	d	file:
FLG_INIT	PDP10/ks10_kmc.c	443;"	d	file:
FLG_UCINI	PDP10/ks10_kmc.c	448;"	d	file:
FLIP_SIZE	sim_defs.h	340;"	d
FLIP_SIZE	sim_fio.h	42;"	d
FLTOVR	PDP10/kx10_defs.h	289;"	d
FLTOVR	PDP10/kx10_defs.h	292;"	d
FLTUND	PDP10/kx10_defs.h	262;"	d
FLTUND	PDP10/kx10_defs.h	265;"	d
FM	PDP10/kx10_cpu.c	/^uint64  FM[128];                              \/* Fast memory register *\/$/;"	v
FM	PDP10/kx10_cpu.c	/^uint64  FM[16];                               \/* Fast memory register *\/$/;"	v
FM	PDP10/kx10_cpu.c	/^uint64  FM[64];                               \/* Fast memory register *\/$/;"	v
FMASK	PDP10/kx10_defs.h	173;"	d
FMTASC	PDP10/kx10_sys.c	1171;"	d	file:
FMT_B	PDP10/kx10_sys.c	284;"	d	file:
FMT_D	PDP10/kx10_sys.c	282;"	d	file:
FMT_E	PDP10/kx10_sys.c	281;"	d	file:
FMT_I	PDP10/kx10_sys.c	283;"	d	file:
FMT_R	PDP10/kx10_sys.c	279;"	d	file:
FMT_S	PDP10/kx10_sys.c	280;"	d	file:
FMwrite	scp.c	/^FMwrite (FILE *fout, MFILE *fdata)$/;"	f	file:
FNC_DCLR	PDP10/kx10_rp.c	58;"	d	file:
FNC_DCLR	PDP10/kx10_rs.c	56;"	d	file:
FNC_DCLR	PDP10/kx10_tu.c	53;"	d	file:
FNC_DVU	PDP10/ks10_lp.c	54;"	d	file:
FNC_ERASE	PDP10/kx10_tu.c	55;"	d	file:
FNC_MOVE	PDP10/kx10_dt.c	159;"	d	file:
FNC_MOVE	PDP10/pdp6_dtc.c	163;"	d	file:
FNC_NOP	PDP10/kx10_rp.c	54;"	d	file:
FNC_NOP	PDP10/kx10_rs.c	55;"	d	file:
FNC_NOP	PDP10/kx10_tu.c	50;"	d	file:
FNC_OFFSET	PDP10/kx10_rp.c	60;"	d	file:
FNC_PACK	PDP10/kx10_rp.c	63;"	d	file:
FNC_PRESET	PDP10/kx10_rp.c	62;"	d	file:
FNC_PRESET	PDP10/kx10_rs.c	57;"	d	file:
FNC_PRESET	PDP10/kx10_tu.c	54;"	d	file:
FNC_PRINT	PDP10/ks10_lp.c	52;"	d	file:
FNC_RALL	PDP10/kx10_dt.c	160;"	d	file:
FNC_RALL	PDP10/pdp6_dtc.c	164;"	d	file:
FNC_RAM	PDP10/ks10_lp.c	55;"	d	file:
FNC_READ	PDP10/kx10_dt.c	162;"	d	file:
FNC_READ	PDP10/kx10_rp.c	70;"	d	file:
FNC_READ	PDP10/kx10_rs.c	62;"	d	file:
FNC_READ	PDP10/kx10_tu.c	63;"	d	file:
FNC_READ	PDP10/pdp6_dtc.c	166;"	d	file:
FNC_READH	PDP10/kx10_rp.c	71;"	d	file:
FNC_READREV	PDP10/kx10_tu.c	64;"	d	file:
FNC_RECAL	PDP10/kx10_rp.c	57;"	d	file:
FNC_RELEASE	PDP10/kx10_rp.c	59;"	d	file:
FNC_RETURN	PDP10/kx10_rp.c	61;"	d	file:
FNC_REWIND	PDP10/kx10_tu.c	52;"	d	file:
FNC_SEARCH	PDP10/kx10_rp.c	64;"	d	file:
FNC_SEARCH	PDP10/kx10_rs.c	58;"	d	file:
FNC_SEEK	PDP10/kx10_rp.c	56;"	d	file:
FNC_SPACEB	PDP10/kx10_tu.c	58;"	d	file:
FNC_SPACEF	PDP10/kx10_tu.c	57;"	d	file:
FNC_SRCH	PDP10/kx10_dt.c	161;"	d	file:
FNC_SRCH	PDP10/pdp6_dtc.c	165;"	d	file:
FNC_TEST	PDP10/ks10_lp.c	53;"	d	file:
FNC_UNLOAD	PDP10/kx10_rp.c	55;"	d	file:
FNC_UNLOAD	PDP10/kx10_tu.c	51;"	d	file:
FNC_WALL	PDP10/kx10_dt.c	164;"	d	file:
FNC_WALL	PDP10/pdp6_dtc.c	168;"	d	file:
FNC_WBLK	PDP10/kx10_dt.c	165;"	d	file:
FNC_WBLK	PDP10/pdp6_dtc.c	169;"	d	file:
FNC_WCHK	PDP10/kx10_rp.c	66;"	d	file:
FNC_WCHK	PDP10/kx10_rs.c	60;"	d	file:
FNC_WCHK	PDP10/kx10_tu.c	60;"	d	file:
FNC_WCHKH	PDP10/kx10_rp.c	67;"	d	file:
FNC_WCHKREV	PDP10/kx10_tu.c	61;"	d	file:
FNC_WMRK	PDP10/kx10_dt.c	163;"	d	file:
FNC_WMRK	PDP10/pdp6_dtc.c	167;"	d	file:
FNC_WRIT	PDP10/kx10_dt.c	166;"	d	file:
FNC_WRIT	PDP10/pdp6_dtc.c	170;"	d	file:
FNC_WRITE	PDP10/kx10_rp.c	68;"	d	file:
FNC_WRITE	PDP10/kx10_rs.c	61;"	d	file:
FNC_WRITE	PDP10/kx10_tu.c	62;"	d	file:
FNC_WRITEH	PDP10/kx10_rp.c	69;"	d	file:
FNC_WTM	PDP10/kx10_tu.c	56;"	d	file:
FNC_XFER	PDP10/kx10_rh.c	178;"	d	file:
FNC_XFER	PDP10/kx10_rp.c	65;"	d	file:
FNC_XFER	PDP10/kx10_rs.c	59;"	d	file:
FNC_XFER	PDP10/kx10_tu.c	59;"	d	file:
FOOTER_VERSION	sim_disk.c	104;"	d	file:
FORCE_RELOAD	PDP10/ks10_cty.c	46;"	d	file:
FP1BIT	PDP10/kx10_defs.h	201;"	d
FPFMASK	PDP10/kx10_defs.h	202;"	d
FPHBIT	PDP10/kx10_defs.h	198;"	d
FPMMASK	PDP10/kx10_defs.h	204;"	d
FPNBIT	PDP10/kx10_defs.h	200;"	d
FPRBIT1	PDP10/kx10_defs.h	206;"	d
FPRBIT2	PDP10/kx10_defs.h	205;"	d
FPRMASK	PDP10/kx10_defs.h	203;"	d
FPSBIT	PDP10/kx10_defs.h	199;"	d
FRAME1STOP	display/vttest.c	25;"	d	file:
FRAMER	sim_tmxr.c	/^} FRAMER;$/;"	t	typeref:struct:framer_data	file:
FREQ	PDP10/ks10_dz.c	70;"	d	file:
FRM_ERR	PDP10/ks10_dz.c	60;"	d	file:
FR_CHR_INH	PDP10/pdp6_mtc.c	128;"	d	file:
FULLSCREEN	PDP10/kx10_dpy.c	124;"	d	file:
FULL_BOLT	slirp/slirp_config.h	30;"	d
FUNCTION	PDP10/kx10_mt.c	106;"	d	file:
FUNCTION	PDP10/pdp6_mtc.c	61;"	d	file:
FUNC_FIN	PDP10/pdp6_mtc.c	131;"	d	file:
Features	sim_disk.c	/^    uint32 Features;$/;"	m	struct:_VHD_Footer	file:
Fgetc	scp.c	/^int Fgetc (FILE *f)$/;"	f
File	sim_disk.c	/^    FILE *File;$/;"	m	struct:VHD_IOData	file:
FileCount	scp.c	/^    int FileCount;$/;"	m	struct:__anon4	file:
FileFormatVersion	sim_disk.c	/^    uint32 FileFormatVersion;$/;"	m	struct:_VHD_Footer	file:
Footer	sim_disk.c	/^    VHD_Footer Footer;$/;"	m	struct:VHD_IOData	file:
FooterVersion	sim_disk.c	/^    uint8       FooterVersion;          \/* Initially 0 *\/$/;"	m	struct:simh_disk_footer	file:
Fprintf	scp.c	/^int Fprintf (FILE *f, const char* fmt, ...)$/;"	f
GAINSHIFT	display/display.c	540;"	d	file:
GArray	slirp_glue/glib.h	/^} GArray;$/;"	t	typeref:struct:_GArray
GArrayInternal	slirp_glue/glib_qemu_stubs.c	/^} GArrayInternal;$/;"	t	typeref:struct:__anon44	file:
GB_ID	sim_disk.c	1521;"	d	file:
GCC_FMT_ATTR	scp.h	126;"	d
GCC_FMT_ATTR	scp.h	129;"	d
GCC_FMT_ATTR	sim_frontpanel.c	272;"	d	file:
GCC_FMT_ATTR	sim_frontpanel.c	275;"	d	file:
GCC_FMT_ATTR	slirp_glue/qemu/compiler.h	45;"	d
GCC_FMT_ATTR	slirp_glue/qemu/compiler.h	48;"	d
GCC_FMT_ATTR	slirp_glue/qemu/compiler.h	56;"	d
GETFIELD	display/type340.c	87;"	d	file:
GETFIELD	display/vt11.c	126;"	d	file:
GETL	sim_scsi.c	85;"	d	file:
GETW	sim_scsi.c	89;"	d	file:
GET_AC	PDP10/kx10_defs.h	251;"	d
GET_ADDR	PDP10/kx10_defs.h	254;"	d
GET_CNTRL_RH	PDP10/kx10_defs.h	428;"	d
GET_CY	PDP10/kx10_rp.c	148;"	d	file:
GET_DA	PDP10/kx10_rp.c	149;"	d	file:
GET_DA	PDP10/kx10_rs.c	125;"	d	file:
GET_DEV	PDP10/kx10_defs.h	250;"	d
GET_DTYPE	PDP10/kx10_dp.c	46;"	d	file:
GET_DTYPE	PDP10/kx10_imp.c	41;"	d	file:
GET_DTYPE	PDP10/kx10_rc.c	40;"	d	file:
GET_DTYPE	PDP10/kx10_rp.c	44;"	d	file:
GET_DTYPE	PDP10/kx10_rs.c	43;"	d	file:
GET_DTYPE	PDP10/pdp6_dsk.c	40;"	d	file:
GET_EXPO	PDP10/kx10_cpu.c	721;"	d	file:
GET_FMT	PDP10/kx10_disk.h	29;"	d
GET_FNC	PDP10/kx10_rh.c	31;"	d	file:
GET_FNC	PDP10/kx10_rp.c	75;"	d	file:
GET_FNC	PDP10/kx10_rs.c	64;"	d	file:
GET_FNC	PDP10/kx10_tu.c	68;"	d	file:
GET_OP	PDP10/kx10_defs.h	249;"	d
GET_RADIX	scp.h	299;"	d
GET_SC	PDP10/kx10_rp.c	129;"	d	file:
GET_SC	PDP10/kx10_rs.c	116;"	d	file:
GET_SF	PDP10/kx10_rp.c	130;"	d	file:
GET_SF	PDP10/kx10_rs.c	117;"	d	file:
GET_SWITCHES	scp.h	297;"	d
GET_TYPE	PDP10/ka10_pmp.c	70;"	d	file:
GET_UADDR	PDP10/ka10_pmp.c	77;"	d	file:
GET_XR	PDP10/kx10_defs.h	253;"	d
GIOCondition	slirp_glue/glib.h	/^    } GIOCondition;$/;"	t	typeref:enum:__anon46
GLIB_H	slirp_glue/glib.h	2;"	d
GLIB_SYSDEF_POLLERR	slirp_glue/glib.h	/^    G_IO_ERR    GLIB_SYSDEF_POLLERR,   \/* Error condition. *\/$/;"	e	enum:__anon46
GLIB_SYSDEF_POLLERR	slirp_glue/glib.h	56;"	d
GLIB_SYSDEF_POLLHUP	slirp_glue/glib.h	/^    G_IO_HUP    GLIB_SYSDEF_POLLHUP,   \/* Hung up (the connection has been broken, usually for pipes and sockets). *\/$/;"	e	enum:__anon46
GLIB_SYSDEF_POLLHUP	slirp_glue/glib.h	55;"	d
GLIB_SYSDEF_POLLIN	slirp_glue/glib.h	/^    G_IO_IN     GLIB_SYSDEF_POLLIN,    \/* There is data to read. *\/$/;"	e	enum:__anon46
GLIB_SYSDEF_POLLIN	slirp_glue/glib.h	52;"	d
GLIB_SYSDEF_POLLNVAL	slirp_glue/glib.h	/^    G_IO_NVAL   GLIB_SYSDEF_POLLNVAL   \/* Invalid request. The file descriptor is not open. *\/$/;"	e	enum:__anon46
GLIB_SYSDEF_POLLNVAL	slirp_glue/glib.h	57;"	d
GLIB_SYSDEF_POLLOUT	slirp_glue/glib.h	/^    G_IO_OUT    GLIB_SYSDEF_POLLOUT,   \/* Data can be written (without blocking). *\/$/;"	e	enum:__anon46
GLIB_SYSDEF_POLLOUT	slirp_glue/glib.h	53;"	d
GLIB_SYSDEF_POLLPRI	slirp_glue/glib.h	/^    G_IO_PRI    GLIB_SYSDEF_POLLPRI,   \/* There is urgent data to read. *\/$/;"	e	enum:__anon46
GLIB_SYSDEF_POLLPRI	slirp_glue/glib.h	54;"	d
GLogLevelFlags	slirp_glue/glib.h	/^    } GLogLevelFlags;$/;"	t	typeref:enum:__anon45
GM_APOINT	display/vtmacs.h	132;"	d
GM_ARC	display/vtmacs.h	137;"	d
GM_AVECT	display/vtmacs.h	138;"	d
GM_BSVECT	display/vtmacs.h	136;"	d
GM_CHAR	display/vtmacs.h	129;"	d
GM_GRAPHX	display/vtmacs.h	133;"	d
GM_GRAPHY	display/vtmacs.h	134;"	d
GM_LVECT	display/vtmacs.h	131;"	d
GM_RPOINT	display/vtmacs.h	135;"	d
GM_SVECT	display/vtmacs.h	130;"	d
GPIO_CLR	PDP10/pidp10panel.c	69;"	d	file:
GPIO_PULL	PDP10/pidp10panel.c	71;"	d	file:
GPIO_PULLCLK0	PDP10/pidp10panel.c	72;"	d	file:
GPIO_READ	PDP10/pidp10panel.c	70;"	d	file:
GPIO_SET	PDP10/pidp10panel.c	68;"	d	file:
GPPUPPDN0	PDP10/pidp10panel.c	76;"	d	file:
GPPUPPDN1	PDP10/pidp10panel.c	77;"	d	file:
GPPUPPDN2	PDP10/pidp10panel.c	78;"	d	file:
GPPUPPDN3	PDP10/pidp10panel.c	79;"	d	file:
GPollFD	slirp_glue/glib.h	/^typedef struct GPollFD {$/;"	s
GPollFD	slirp_glue/glib.h	/^} GPollFD;$/;"	t	typeref:struct:GPollFD
GRAPHX	display/vt11.c	/^enum gmode { CHAR=0, SVECTOR, LVECTOR, POINT, GRAPHX, GRAPHY, RELPOINT, \/* all *\/$/;"	e	enum:gmode	file:
GRAPHX	display/vtmacs.h	254;"	d
GRAPHY	display/vt11.c	/^enum gmode { CHAR=0, SVECTOR, LVECTOR, POINT, GRAPHX, GRAPHY, RELPOINT, \/* all *\/$/;"	e	enum:gmode	file:
GRAPHY	display/vtmacs.h	258;"	d
GRDATA	sim_defs.h	1041;"	d
GRDATA	sim_defs.h	953;"	d
GRDATAD	sim_defs.h	1043;"	d
GRDATAD	sim_defs.h	955;"	d
GRDATADF	sim_defs.h	1045;"	d
GRDATADF	sim_defs.h	957;"	d
GREEN	display/vt11.c	/^enum scolor { GREEN=0, YELLOW, ORANGE, RED };$/;"	e	enum:scolor	file:
GSource	slirp_glue/glib.h	/^typedef struct _GSource {int dummy;} GSource;$/;"	t	typeref:struct:_GSource
G_IO_ERR	slirp_glue/glib.h	/^    G_IO_ERR    GLIB_SYSDEF_POLLERR,   \/* Error condition. *\/$/;"	e	enum:__anon46
G_IO_HUP	slirp_glue/glib.h	/^    G_IO_HUP    GLIB_SYSDEF_POLLHUP,   \/* Hung up (the connection has been broken, usually for pipes and sockets). *\/$/;"	e	enum:__anon46
G_IO_IN	slirp_glue/glib.h	/^    G_IO_IN     GLIB_SYSDEF_POLLIN,    \/* There is data to read. *\/$/;"	e	enum:__anon46
G_IO_NVAL	slirp_glue/glib.h	/^    G_IO_NVAL   GLIB_SYSDEF_POLLNVAL   \/* Invalid request. The file descriptor is not open. *\/$/;"	e	enum:__anon46
G_IO_OUT	slirp_glue/glib.h	/^    G_IO_OUT    GLIB_SYSDEF_POLLOUT,   \/* Data can be written (without blocking). *\/$/;"	e	enum:__anon46
G_IO_PRI	slirp_glue/glib.h	/^    G_IO_PRI    GLIB_SYSDEF_POLLPRI,   \/* There is urgent data to read. *\/$/;"	e	enum:__anon46
G_LOG_DOMAIN	slirp_glue/glib.h	69;"	d
G_LOG_FLAG_FATAL	slirp_glue/glib.h	/^    G_LOG_FLAG_FATAL     = 1 << 1,$/;"	e	enum:__anon45
G_LOG_FLAG_RECURSION	slirp_glue/glib.h	/^    G_LOG_FLAG_RECURSION = 1 << 0,$/;"	e	enum:__anon45
G_LOG_LEVEL_CRITICAL	slirp_glue/glib.h	/^    G_LOG_LEVEL_CRITICAL = 1 << 3,$/;"	e	enum:__anon45
G_LOG_LEVEL_DEBUG	slirp_glue/glib.h	/^    G_LOG_LEVEL_DEBUG    = 1 << 7,$/;"	e	enum:__anon45
G_LOG_LEVEL_ERROR	slirp_glue/glib.h	/^    G_LOG_LEVEL_ERROR    = 1 << 2,$/;"	e	enum:__anon45
G_LOG_LEVEL_INFO	slirp_glue/glib.h	/^    G_LOG_LEVEL_INFO     = 1 << 6,$/;"	e	enum:__anon45
G_LOG_LEVEL_MASK	slirp_glue/glib.h	/^    G_LOG_LEVEL_MASK     = ~(G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL)$/;"	e	enum:__anon45
G_LOG_LEVEL_MESSAGE	slirp_glue/glib.h	/^    G_LOG_LEVEL_MESSAGE  = 1 << 5,$/;"	e	enum:__anon45
G_LOG_LEVEL_WARNING	slirp_glue/glib.h	/^    G_LOG_LEVEL_WARNING  = 1 << 4,$/;"	e	enum:__anon45
GetVHDFooter	sim_disk.c	/^GetVHDFooter(const char *szVHDPath,$/;"	f	file:
H	display/type340cmd.h	89;"	d
HALF	PDP10/ka10_ch10.c	48;"	d	file:
HALF_LIVES_TO_DISPLAY	display/display.c	290;"	d	file:
HALT_BADCMD	PDP10/ks10_kmc.c	382;"	d	file:
HALT_BADCSR	PDP10/ks10_kmc.c	383;"	d	file:
HALT_BADRES	PDP10/ks10_kmc.c	380;"	d	file:
HALT_BADUC	PDP10/ks10_kmc.c	389;"	d	file:
HALT_LINE	PDP10/ks10_kmc.c	381;"	d	file:
HALT_MRC	PDP10/ks10_kmc.c	379;"	d	file:
HALT_MTRCV	PDP10/ks10_kmc.c	385;"	d	file:
HALT_RCVOVF	PDP10/ks10_kmc.c	384;"	d	file:
HALT_STOP	PDP10/ks10_kmc.c	378;"	d	file:
HALT_XMTOVF	PDP10/ks10_kmc.c	386;"	d	file:
HALT_XSOM	PDP10/ks10_kmc.c	387;"	d	file:
HALT_XSOM2	PDP10/ks10_kmc.c	388;"	d	file:
HAS_PCAP_SENDPACKET	sim_ether.c	1548;"	d	file:
HAS_PCAP_SENDPACKET	sim_ether.c	1552;"	d	file:
HAVE_ARPA_INET_H	slirp/slirp_config.h	109;"	d
HAVE_ARPA_INET_H	slirp/slirp_config.h	111;"	d
HAVE_BCMP	slirp/slirp_config.h	160;"	d
HAVE_C99_STRFTIME	sim_defs.h	299;"	d
HAVE_DRAND48	slirp/slirp_config.h	163;"	d
HAVE_FCHMOD	slirp/slirp_config.h	184;"	d
HAVE_GETHOSTID	slirp/slirp_config.h	169;"	d
HAVE_GLOB	sim_defs.h	295;"	d
HAVE_GRANTPT	slirp/slirp_config.h	181;"	d
HAVE_INDEX	slirp/slirp_config.h	157;"	d
HAVE_INET_ATON	slirp/slirp_config.h	148;"	d
HAVE_INET_ATON	slirp/slirp_config.h	150;"	d
HAVE_MEMMOVE	slirp/slirp_config.h	166;"	d
HAVE_PCAP_NETWORK	sim_ether.h	134;"	d
HAVE_RANDOM	slirp/slirp_config.h	142;"	d
HAVE_READV	slirp/slirp_config.h	88;"	d
HAVE_REVOKE	slirp/slirp_config.h	178;"	d
HAVE_SETENV	slirp/slirp_config.h	154;"	d
HAVE_SRANDOM	slirp/slirp_config.h	145;"	d
HAVE_STDLIB_H	slirp/slirp_config.h	60;"	d
HAVE_STRERROR	slirp/slirp_config.h	75;"	d
HAVE_STRING_H	slirp/slirp_config.h	106;"	d
HAVE_STRUCT_TIMESPEC	sim_frontpanel.c	88;"	d	file:
HAVE_STRUCT_TIMESPEC	sim_frontpanel.c	96;"	d	file:
HAVE_STRUCT_TIMESPEC	sim_timer.h	49;"	d
HAVE_STRUCT_TIMESPEC	sim_timer.h	58;"	d
HAVE_STRUCT_TIMESPEC	sim_timer.h	63;"	d
HAVE_SYS_BITYPES_H	slirp/slirp_config.h	82;"	d
HAVE_SYS_FILIO_H	slirp/slirp_config.h	69;"	d
HAVE_SYS_FILIO_H	slirp/slirp_config.h	71;"	d
HAVE_SYS_IOCTL_H	slirp/slirp_config.h	63;"	d
HAVE_SYS_IOCTL_H	slirp/slirp_config.h	65;"	d
HAVE_SYS_SELECT_H	slirp/slirp_config.h	100;"	d
HAVE_SYS_SELECT_H	slirp/slirp_config.h	102;"	d
HAVE_SYS_SIGNAL_H	slirp/slirp_config.h	115;"	d
HAVE_SYS_STROPTS_H	slirp/slirp_config.h	118;"	d
HAVE_SYS_TIME_H	slirp/slirp_config.h	79;"	d
HAVE_SYS_TYPES32_H	slirp/slirp_config.h	187;"	d
HAVE_SYS_WAIT_H	slirp/slirp_config.h	97;"	d
HAVE_TAP_NETWORK	sim_ether.c	1217;"	d	file:
HAVE_UNISTD_H	slirp/slirp_config.h	56;"	d
HB_C_SYSID	sim_disk.c	1961;"	d	file:
HB_C_SYSVER_V04	sim_disk.c	1956;"	d	file:
HB_C_SYSVER_V05	sim_disk.c	1957;"	d	file:
HB_C_SYSVER_V3A	sim_disk.c	1955;"	d	file:
HB_C_VMSSYSID	sim_disk.c	1962;"	d	file:
HDR1	sim_tape.c	/^    } HDR1;$/;"	t	typeref:struct:HDR1	file:
HDR1	sim_tape.c	/^typedef struct HDR1 {       \/* Also EOF1, EOV1 *\/$/;"	s	file:
HDR2	sim_tape.c	/^    } HDR2;$/;"	t	typeref:struct:HDR2	file:
HDR2	sim_tape.c	/^typedef struct HDR2 {       \/* Also EOF2, EOV2 *\/$/;"	s	file:
HDR3	sim_tape.c	/^    } HDR3;$/;"	t	typeref:struct:HDR3	file:
HDR3	sim_tape.c	/^typedef struct HDR3 {       \/* Also EOF3, EOV3 *\/$/;"	s	file:
HDR3_RMS_FIXED	sim_tape.c	/^const char HDR3_RMS_FIXED[] =  "HDR3020000010000" $/;"	v
HDR3_RMS_FIXRSX	sim_tape.c	/^const char HDR3_RMS_FIXRSX[] = "HDR3020008010000" $/;"	v
HDR3_RMS_STMLF	sim_tape.c	/^const char HDR3_RMS_STMLF[] =  "HDR3020002050000" $/;"	v
HDR3_RMS_STREAM	sim_tape.c	/^const char HDR3_RMS_STREAM[] = "HDR3020002040000" $/;"	v
HDR3_RMS_VARRSX	sim_tape.c	/^const char HDR3_RMS_VARRSX[] = "HDR300000A020000" $/;"	v
HDR4	sim_tape.c	/^    } HDR4;$/;"	t	typeref:struct:HDR4	file:
HDR4	sim_tape.c	/^typedef struct HDR4 {       \/* Also EOF4, EOV4 *\/$/;"	s	file:
HDSFLG	PDP10/kl10_fe.c	333;"	d	file:
HDSFLG	PDP10/ks10_lp.c	107;"	d	file:
HIST_MAX	PDP10/kx10_cpu.c	121;"	d	file:
HIST_MIN	PDP10/kx10_cpu.c	120;"	d	file:
HIST_PC	PDP10/kx10_cpu.c	117;"	d	file:
HIST_PC2	PDP10/kx10_cpu.c	118;"	d	file:
HIST_PCE	PDP10/kx10_cpu.c	119;"	d	file:
HLP_ASSERT	scp.c	2250;"	d	file:
HLP_ASSIGN	scp.c	1643;"	d	file:
HLP_ATTACH	scp.c	1159;"	d	file:
HLP_BOOT	scp.c	1068;"	d	file:
HLP_BREAK	scp.c	1091;"	d	file:
HLP_CALL	scp.c	1920;"	d	file:
HLP_CAT	scp.c	1260;"	d	file:
HLP_CD	scp.c	1232;"	d	file:
HLP_CONTINUE	scp.c	1050;"	d	file:
HLP_COPY	scp.c	1281;"	d	file:
HLP_CP	scp.c	1284;"	d	file:
HLP_CURL	scp.c	2486;"	d	file:
HLP_DEASSIGN	scp.c	1644;"	d	file:
HLP_DEBUG	scp.c	1128;"	d	file:
HLP_DELETE	scp.c	1270;"	d	file:
HLP_DEPOSIT	scp.c	877;"	d	file:
HLP_DETACH	scp.c	1223;"	d	file:
HLP_DIR	scp.c	1244;"	d	file:
HLP_DISKINFO	scp.c	2491;"	d	file:
HLP_DO	scp.c	1657;"	d	file:
HLP_DUMP	scp.c	998;"	d	file:
HLP_ECHO	scp.c	2009;"	d	file:
HLP_ECHOF	scp.c	2020;"	d	file:
HLP_EVALUATE	scp.c	966;"	d	file:
HLP_EXAMINE	scp.c	875;"	d	file:
HLP_EXIT	scp.c	2423;"	d	file:
HLP_EXPECT	scp.c	2129;"	d	file:
HLP_GO	scp.c	1040;"	d	file:
HLP_GOTO	scp.c	1789;"	d	file:
HLP_HELP	scp.c	1621;"	d	file:
HLP_IDEPOSIT	scp.c	878;"	d	file:
HLP_IEXAMINE	scp.c	876;"	d	file:
HLP_IF	scp.c	2251;"	d	file:
HLP_IGNORE	scp.c	1987;"	d	file:
HLP_LOAD	scp.c	992;"	d	file:
HLP_LS	scp.c	1247;"	d	file:
HLP_MAGIC_TOPIC	scp.c	14350;"	d	file:
HLP_MATCH_AMBIGUOUS	scp.c	14788;"	d	file:
HLP_MATCH_NONE	scp.c	14790;"	d	file:
HLP_MATCH_WILDCARD	scp.c	14789;"	d	file:
HLP_MKDIR	scp.c	1297;"	d	file:
HLP_MOVE	scp.c	1291;"	d	file:
HLP_NEXT	scp.c	1062;"	d	file:
HLP_NOAUTOSIZE	scp.c	1552;"	d	file:
HLP_NOBREAK	scp.c	1092;"	d	file:
HLP_NODEBUG	scp.c	1129;"	d	file:
HLP_ON	scp.c	1925;"	d	file:
HLP_PROCEED	scp.c	1986;"	d	file:
HLP_PWD	scp.c	1239;"	d	file:
HLP_RENAME	scp.c	1288;"	d	file:
HLP_RESET	scp.c	862;"	d	file:
HLP_RESTORE	scp.c	1012;"	d	file:
HLP_RETURN	scp.c	1811;"	d	file:
HLP_RM	scp.c	1275;"	d	file:
HLP_RMDIR	scp.c	1301;"	d	file:
HLP_RUN	scp.c	1030;"	d	file:
HLP_RUNLIMIT	scp.c	1135;"	d	file:
HLP_SAVE	scp.c	1006;"	d	file:
HLP_SCREENSHOT	scp.c	2431;"	d	file:
HLP_SEND	scp.c	2063;"	d	file:
HLP_SET	scp.c	1304;"	d	file:
HLP_SET_ASYNCH	scp.c	1454;"	d	file:
HLP_SET_BREAK	scp.c	1410;"	d	file:
HLP_SET_CLOCK	scp.c	1441;"	d	file:
HLP_SET_CONSOLE	scp.c	1307;"	d	file:
HLP_SET_DEBUG	scp.c	1367;"	d	file:
HLP_SET_DEFAULT	scp.c	1351;"	d	file:
HLP_SET_ENVIRON	scp.c	1458;"	d	file:
HLP_SET_LOG	scp.c	1355;"	d	file:
HLP_SET_MESSAGE	scp.c	1525;"	d	file:
HLP_SET_ON	scp.c	1504;"	d	file:
HLP_SET_PROMPT	scp.c	1537;"	d	file:
HLP_SET_QUIET	scp.c	1531;"	d	file:
HLP_SET_REMOTE	scp.c	1338;"	d	file:
HLP_SET_THROTTLE	scp.c	1415;"	d	file:
HLP_SET_VERIFY	scp.c	1514;"	d	file:
HLP_SET_VERIFY	scp.c	1515;"	d	file:
HLP_SHIFT	scp.c	1917;"	d	file:
HLP_SHOW	scp.c	1557;"	d	file:
HLP_SHOW_ASYNCH	scp.c	1609;"	d	file:
HLP_SHOW_BREAK	scp.c	1605;"	d	file:
HLP_SHOW_CLOCKS	scp.c	1615;"	d	file:
HLP_SHOW_CONFIG	scp.c	1593;"	d	file:
HLP_SHOW_CONSOLE	scp.c	1603;"	d	file:
HLP_SHOW_DEBUG	scp.c	1607;"	d	file:
HLP_SHOW_DEFAULT	scp.c	1602;"	d	file:
HLP_SHOW_DEVICES	scp.c	1594;"	d	file:
HLP_SHOW_DO	scp.c	1617;"	d	file:
HLP_SHOW_ETHERNET	scp.c	1610;"	d	file:
HLP_SHOW_EXPECT	scp.c	1620;"	d	file:
HLP_SHOW_FEATURES	scp.c	1595;"	d	file:
HLP_SHOW_LOG	scp.c	1606;"	d	file:
HLP_SHOW_MODIFIERS	scp.c	1598;"	d	file:
HLP_SHOW_MULTIPLEXER	scp.c	1613;"	d	file:
HLP_SHOW_NAMES	scp.c	1599;"	d	file:
HLP_SHOW_ON	scp.c	1616;"	d	file:
HLP_SHOW_QUEUE	scp.c	1596;"	d	file:
HLP_SHOW_REMOTE	scp.c	1604;"	d	file:
HLP_SHOW_RUNLIMIT	scp.c	1618;"	d	file:
HLP_SHOW_SEND	scp.c	1619;"	d	file:
HLP_SHOW_SERIAL	scp.c	1611;"	d	file:
HLP_SHOW_SHOW	scp.c	1600;"	d	file:
HLP_SHOW_SYNC	scp.c	1612;"	d	file:
HLP_SHOW_THROTTLE	scp.c	1608;"	d	file:
HLP_SHOW_TIME	scp.c	1597;"	d	file:
HLP_SHOW_VERSION	scp.c	1601;"	d	file:
HLP_SHOW_VIDEO	scp.c	1614;"	d	file:
HLP_SLEEP	scp.c	2240;"	d	file:
HLP_SPAWN	scp.c	2442;"	d	file:
HLP_STEP	scp.c	1054;"	d	file:
HLP_TAR	scp.c	2481;"	d	file:
HLP_TESTLIB	scp.c	2453;"	d	file:
HLP_TYPE	scp.c	1251;"	d	file:
HLT_FBIT	PDP10/ka10_iii.c	78;"	d	file:
HLT_FLG	PDP10/ka10_iii.c	68;"	d	file:
HLT_MSK	PDP10/ka10_iii.c	73;"	d	file:
HM1_C_LEVEL1	sim_disk.c	1042;"	d	file:
HM1_C_LEVEL2	sim_disk.c	1043;"	d	file:
HOLD_EMPTY	PDP10/ka10_pmp.c	230;"	d	file:
HOLD_MASK	PDP10/ka10_pmp.c	293;"	d	file:
HOLD_SEL	PDP10/pdp6_mtc.c	60;"	d	file:
HOPPER_EMPTY	PDP10/kx10_cr.c	69;"	d	file:
HOPPER_LOW	PDP10/kx10_cp.c	77;"	d	file:
HOST_LONG_BITS	slirp_glue/qemu/qemu-common.h	27;"	d
HOST_LONG_BITS	slirp_glue/qemu/qemu-common.h	29;"	d
HRDATA	sim_defs.h	1020;"	d
HRDATA	sim_defs.h	932;"	d
HRDATAD	sim_defs.h	1022;"	d
HRDATAD	sim_defs.h	934;"	d
HRDATADF	sim_defs.h	1024;"	d
HRDATADF	sim_defs.h	936;"	d
HT	PDP10/kx10_mt.c	55;"	d	file:
HT	PDP10/pdp6_mtc.c	54;"	d	file:
HTONL	slirp/ip.h	39;"	d
HTONL	slirp/ip.h	43;"	d
HTONL	slirp/ip.h	53;"	d
HTONS	slirp/ip.h	40;"	d
HTONS	slirp/ip.h	44;"	d
HTONS	slirp/ip.h	56;"	d
HYPER	PDP10/kx10_dpy.c	575;"	d	file:
HYPER_BUTTON	PDP10/ka10_tv.c	40;"	d	file:
HYPRBT	PDP10/ka10_tv.c	47;"	d	file:
Halt	sim_frontpanel.h	/^    Halt,       \/* Simulation is halted (instructions not being executed) *\/$/;"	e	enum:__anon23
HeaderVersion	sim_disk.c	/^    uint32 HeaderVersion;$/;"	m	struct:_VHD_DynamicDiskHeader	file:
Highwater	sim_disk.c	/^    uint32      Highwater[2];           \/* Size before footer addition or furthest container point written *\/$/;"	m	struct:simh_disk_footer	file:
HostPathToVhdPath	sim_disk.c	/^HostPathToVhdPath (const char *szHostPath,$/;"	f	file:
IADR_ATTN	PDP10/kx10_defs.h	351;"	d
IADR_ATTN	PDP10/kx10_rh.c	88;"	d	file:
IARD_RAE	PDP10/kx10_defs.h	352;"	d
IARD_RAE	PDP10/kx10_rh.c	89;"	d	file:
ICMPHeader	sim_ether.c	/^struct ICMPHeader {$/;"	s	file:
ICMP_ADVLEN	slirp/ip_icmp.h	105;"	d
ICMP_ADVLENMIN	slirp/ip_icmp.h	104;"	d
ICMP_ECHO	slirp/ip_icmp.h	132;"	d
ICMP_ECHOREPLY	slirp/ip_icmp.h	111;"	d
ICMP_INFOTYPE	slirp/ip_icmp.h	149;"	d
ICMP_IREQ	slirp/ip_icmp.h	142;"	d
ICMP_IREQREPLY	slirp/ip_icmp.h	143;"	d
ICMP_MASKLEN	slirp/ip_icmp.h	103;"	d
ICMP_MASKREPLY	slirp/ip_icmp.h	145;"	d
ICMP_MASKREQ	slirp/ip_icmp.h	144;"	d
ICMP_MAXDATALEN	slirp/ip_icmp.c	244;"	d	file:
ICMP_MAXDATALEN	slirp/ip_icmp.c	363;"	d	file:
ICMP_MAXTYPE	slirp/ip_icmp.h	147;"	d
ICMP_MINLEN	slirp/ip_icmp.h	101;"	d
ICMP_PARAMPROB	slirp/ip_icmp.h	138;"	d
ICMP_PARAMPROB_OPTABSENT	slirp/ip_icmp.h	139;"	d
ICMP_PROTO	PDP10/kl10_nia.c	270;"	d	file:
ICMP_PROTO	PDP10/kx10_imp.c	270;"	d	file:
ICMP_REDIRECT	slirp/ip_icmp.h	127;"	d
ICMP_REDIRECT_HOST	slirp/ip_icmp.h	129;"	d
ICMP_REDIRECT_NET	slirp/ip_icmp.h	128;"	d
ICMP_REDIRECT_TOSHOST	slirp/ip_icmp.h	131;"	d
ICMP_REDIRECT_TOSNET	slirp/ip_icmp.h	130;"	d
ICMP_ROUTERADVERT	slirp/ip_icmp.h	133;"	d
ICMP_ROUTERSOLICIT	slirp/ip_icmp.h	134;"	d
ICMP_SOURCEQUENCH	slirp/ip_icmp.h	126;"	d
ICMP_TIMXCEED	slirp/ip_icmp.h	135;"	d
ICMP_TIMXCEED_INTRANS	slirp/ip_icmp.h	136;"	d
ICMP_TIMXCEED_REASS	slirp/ip_icmp.h	137;"	d
ICMP_TSLEN	slirp/ip_icmp.h	102;"	d
ICMP_TSTAMP	slirp/ip_icmp.h	140;"	d
ICMP_TSTAMPREPLY	slirp/ip_icmp.h	141;"	d
ICMP_UNREACH	slirp/ip_icmp.h	112;"	d
ICMP_UNREACH_HOST	slirp/ip_icmp.h	114;"	d
ICMP_UNREACH_HOST_PROHIB	slirp/ip_icmp.h	123;"	d
ICMP_UNREACH_HOST_UNKNOWN	slirp/ip_icmp.h	120;"	d
ICMP_UNREACH_ISOLATED	slirp/ip_icmp.h	121;"	d
ICMP_UNREACH_NEEDFRAG	slirp/ip_icmp.h	117;"	d
ICMP_UNREACH_NET	slirp/ip_icmp.h	113;"	d
ICMP_UNREACH_NET_PROHIB	slirp/ip_icmp.h	122;"	d
ICMP_UNREACH_NET_UNKNOWN	slirp/ip_icmp.h	119;"	d
ICMP_UNREACH_PORT	slirp/ip_icmp.h	116;"	d
ICMP_UNREACH_PROTOCOL	slirp/ip_icmp.h	115;"	d
ICMP_UNREACH_SRCFAIL	slirp/ip_icmp.h	118;"	d
ICMP_UNREACH_TOSHOST	slirp/ip_icmp.h	125;"	d
ICMP_UNREACH_TOSNET	slirp/ip_icmp.h	124;"	d
ICWA	PDP10/kx10_defs.h	329;"	d
IDLE	PDP10/ka10_pmp.c	225;"	d	file:
IDLE_CH	PDP10/ka10_pmp.c	261;"	d	file:
IDLE_UNIT	PDP10/kx10_mt.c	79;"	d	file:
IDS	PDP10/pdp6_dsk.c	79;"	d	file:
IF_AUTOCOMP	slirp/if.h	13;"	d
IF_COMP	slirp/if.h	18;"	d
IF_COMPRESS	slirp/if.h	11;"	d
IF_MAXLINKHDR	slirp/if.h	21;"	d
IF_MRU	slirp/if.h	17;"	d
IF_MTU	slirp/if.h	16;"	d
IF_NOCIDCOMP	slirp/if.h	14;"	d
IF_NOCOMPRESS	slirp/if.h	12;"	d
IF_THRESH	slirp/ip_output.c	45;"	d	file:
III_DEVNUM	PDP10/ka10_iii.c	36;"	d	file:
ILC_CLR	PDP10/kx10_rh.c	134;"	d	file:
ILEN	PDP10/kx10_imp.c	184;"	d	file:
ILL_CMD	PDP10/kx10_dp.c	65;"	d	file:
ILL_OPR	PDP10/kx10_mt.c	88;"	d	file:
ILL_OPR	PDP10/pdp6_mtc.c	107;"	d	file:
ILL_WR	PDP10/kx10_dp.c	66;"	d	file:
ILL_WR	PDP10/kx10_rc.c	79;"	d	file:
IMAGE_ERROR	PDP10/ka10_ai.c	/^    IMAGE_ERROR,$/;"	e	enum:image_state	file:
IMAGE_GAP	PDP10/ka10_ai.c	/^    IMAGE_GAP,                  \/* Empty bits (ones) between sectors. *\/$/;"	e	enum:image_state	file:
IMAGE_HEADER	PDP10/ka10_ai.c	/^    IMAGE_HEADER,               \/* Sector header, in FM encoding. *\/$/;"	e	enum:image_state	file:
IMAGE_POSTAMBLE	PDP10/ka10_ai.c	/^    IMAGE_POSTAMBLE,            \/* Empty bits (ones). *\/$/;"	e	enum:image_state	file:
IMAGE_POSTAMBLE2	PDP10/ka10_ai.c	/^    IMAGE_POSTAMBLE2,           \/* A "01" to start the sector data. *\/$/;"	e	enum:image_state	file:
IMAGE_PREAMBLE	PDP10/ka10_ai.c	/^    IMAGE_PREAMBLE,             \/* Bit pattern before sector header. *\/$/;"	e	enum:image_state	file:
IMAGE_SECTOR	PDP10/ka10_ai.c	/^    IMAGE_SECTOR,               \/* Sector data, in FM encoding. *\/$/;"	e	enum:image_state	file:
IMAGE_TYPE_CPT	sim_imd.h	92;"	d
IMAGE_TYPE_DSK	sim_imd.h	90;"	d
IMAGE_TYPE_IMD	sim_imd.h	91;"	d
IMD_DISK_IO_COMPRESSED	sim_imd.h	75;"	d
IMD_DISK_IO_DELETED_ADDR_MARK	sim_imd.h	74;"	d
IMD_DISK_IO_ERROR_CRC	sim_imd.h	73;"	d
IMD_DISK_IO_ERROR_GENERAL	sim_imd.h	72;"	d
IMD_DISK_IO_ERROR_WPROT	sim_imd.h	76;"	d
IMD_FLAG_SECT_CYL_MAP	sim_imd.h	54;"	d
IMD_FLAG_SECT_HEAD_MAP	sim_imd.h	53;"	d
IMD_HEADER	sim_imd.h	/^} IMD_HEADER;$/;"	t	typeref:struct:__anon24
IMD_MAX_SECTSIZE	sim_imd.h	85;"	d
IMD_MODE_250K_FM	sim_imd.h	80;"	d
IMD_MODE_250K_MFM	sim_imd.h	83;"	d
IMD_MODE_300K_FM	sim_imd.h	79;"	d
IMD_MODE_300K_MFM	sim_imd.h	82;"	d
IMD_MODE_500K_FM	sim_imd.h	78;"	d
IMD_MODE_500K_MFM	sim_imd.h	81;"	d
IMD_MODE_FM	sim_imd.h	87;"	d
IMD_MODE_MFM	sim_imd.h	88;"	d
IMI32C	PDP10/kx10_imp.c	120;"	d	file:
IMI32S	PDP10/kx10_imp.c	119;"	d	file:
IMIIHE	PDP10/kx10_imp.c	127;"	d	file:
IMO32C	PDP10/kx10_imp.c	123;"	d	file:
IMO32S	PDP10/kx10_imp.c	122;"	d	file:
IMPERR	PDP10/kx10_imp.c	109;"	d	file:
IMPERR	PDP10/kx10_imp.c	90;"	d	file:
IMPHEC	PDP10/kx10_imp.c	126;"	d	file:
IMPHER	PDP10/kx10_imp.c	112;"	d	file:
IMPHER	PDP10/kx10_imp.c	93;"	d	file:
IMPHR	PDP10/kx10_imp.c	113;"	d	file:
IMPHR	PDP10/kx10_imp.c	94;"	d	file:
IMPI32	PDP10/kx10_imp.c	104;"	d	file:
IMPIB	PDP10/kx10_imp.c	105;"	d	file:
IMPIB	PDP10/kx10_imp.c	87;"	d	file:
IMPIC	PDP10/kx10_imp.c	111;"	d	file:
IMPIC	PDP10/kx10_imp.c	92;"	d	file:
IMPID	PDP10/kx10_imp.c	103;"	d	file:
IMPID	PDP10/kx10_imp.c	86;"	d	file:
IMPIDC	PDP10/kx10_imp.c	118;"	d	file:
IMPIHE	PDP10/kx10_imp.c	114;"	d	file:
IMPIHE	PDP10/kx10_imp.c	95;"	d	file:
IMPIR	PDP10/kx10_imp.c	125;"	d	file:
IMPLHW	PDP10/kx10_imp.c	128;"	d	file:
IMPLW	PDP10/kx10_imp.c	115;"	d	file:
IMPLW	PDP10/kx10_imp.c	96;"	d	file:
IMPO32	PDP10/kx10_imp.c	107;"	d	file:
IMPOB	PDP10/kx10_imp.c	108;"	d	file:
IMPOB	PDP10/kx10_imp.c	89;"	d	file:
IMPOD	PDP10/kx10_imp.c	106;"	d	file:
IMPOD	PDP10/kx10_imp.c	88;"	d	file:
IMPODC	PDP10/kx10_imp.c	121;"	d	file:
IMPODS	PDP10/kx10_imp.c	124;"	d	file:
IMPR	PDP10/kx10_imp.c	110;"	d	file:
IMPR	PDP10/kx10_imp.c	91;"	d	file:
IMP_ARPTAB_SIZE	PDP10/kx10_imp.c	187;"	d	file:
IMP_ARP_MAX_AGE	PDP10/kx10_imp.c	188;"	d	file:
IMP_CLR	PDP10/kx10_imp.c	140;"	d	file:
IMP_CLRST	PDP10/kx10_imp.c	160;"	d	file:
IMP_CLRWT	PDP10/kx10_imp.c	159;"	d	file:
IMP_DEVNUM	PDP10/kx10_imp.c	31;"	d	file:
IMP_DN	PDP10/kx10_imp.c	147;"	d	file:
IMP_ECHN	PDP10/kx10_imp.c	174;"	d	file:
IMP_ECHN	PDP10/kx10_imp.c	664;"	d	file:
IMP_ENDIN	PDP10/kx10_imp.c	146;"	d	file:
IMP_END_IN	PDP10/kx10_imp.c	136;"	d	file:
IMP_END_OUT	PDP10/kx10_imp.c	137;"	d	file:
IMP_EN_END	PDP10/kx10_imp.c	135;"	d	file:
IMP_EN_IN	PDP10/kx10_imp.c	133;"	d	file:
IMP_EN_OUT	PDP10/kx10_imp.c	134;"	d	file:
IMP_ERR	PDP10/kx10_imp.c	170;"	d	file:
IMP_FINO	PDP10/kx10_imp.c	157;"	d	file:
IMP_I32	PDP10/kx10_imp.c	162;"	d	file:
IMP_ICHN	PDP10/kx10_imp.c	173;"	d	file:
IMP_ICHN	PDP10/kx10_imp.c	663;"	d	file:
IMP_IDONE	PDP10/kx10_imp.c	169;"	d	file:
IMP_IDPIEN	PDP10/kx10_imp.c	155;"	d	file:
IMP_IEND	PDP10/kx10_imp.c	168;"	d	file:
IMP_IEPIEN	PDP10/kx10_imp.c	156;"	d	file:
IMP_IFULL	PDP10/kx10_imp.c	144;"	d	file:
IMP_O32	PDP10/kx10_imp.c	161;"	d	file:
IMP_OCHN	PDP10/kx10_imp.c	172;"	d	file:
IMP_OCHN	PDP10/kx10_imp.c	662;"	d	file:
IMP_ODONE	PDP10/kx10_imp.c	167;"	d	file:
IMP_ODPIEN	PDP10/kx10_imp.c	154;"	d	file:
IMP_OEMPY	PDP10/kx10_imp.c	145;"	d	file:
IMP_PDP_DN	PDP10/kx10_imp.c	139;"	d	file:
IMP_PWR	PDP10/kx10_imp.c	149;"	d	file:
IMP_RDY	PDP10/kx10_imp.c	171;"	d	file:
IMP_RST	PDP10/kx10_imp.c	141;"	d	file:
IMP_STOP	PDP10/kx10_imp.c	138;"	d	file:
IMP_STRIN	PDP10/kx10_imp.c	163;"	d	file:
IMP_STROUT	PDP10/kx10_imp.c	158;"	d	file:
IMP_TEST	PDP10/kx10_imp.c	164;"	d	file:
IMP_WAS_DN	PDP10/kx10_imp.c	148;"	d	file:
IMX_ASSIGNED	PDP10/ka10_imx.c	43;"	d	file:
IMX_CHANNEL	PDP10/ka10_imx.c	48;"	d	file:
IMX_CONI	PDP10/ka10_imx.c	46;"	d	file:
IMX_CONO	PDP10/ka10_imx.c	45;"	d	file:
IMX_DEVNUM	PDP10/ka10_imx.c	35;"	d	file:
IMX_DONE	PDP10/ka10_imx.c	38;"	d	file:
IMX_PACK	PDP10/ka10_imx.c	39;"	d	file:
IMX_PIA	PDP10/ka10_imx.c	37;"	d	file:
IMX_RATE	PDP10/ka10_imx.c	42;"	d	file:
IMX_SEQUENCE	PDP10/ka10_imx.c	40;"	d	file:
IMX_TEST	PDP10/ka10_imx.c	41;"	d	file:
IN0	display/type340cmd.h	75;"	d
IN1	display/type340cmd.h	76;"	d
IN2	display/type340cmd.h	77;"	d
IN3	display/type340cmd.h	78;"	d
IN4	display/type340cmd.h	79;"	d
IN5	display/type340cmd.h	80;"	d
IN6	display/type340cmd.h	81;"	d
IN7	display/type340cmd.h	82;"	d
INA	slirp/ip_input.c	534;"	d	file:
INCR	display/type340.c	/^enum mode { PARAM=0, POINT, SLAVE, CHAR, VECTOR, VCONT, INCR, SUBR };$/;"	e	enum:mode	file:
INCRPT	display/type340cmd.h	36;"	d
INIT	display/vt11.c	222;"	d	file:
INITIAL_DELAY_CHECK	display/display.c	532;"	d	file:
INITIAL_KMCS	PDP10/ks10_kmc.c	75;"	d	file:
INITIAL_KMCS	PDP10/ks10_kmc.c	79;"	d	file:
INITIAL_KMCS	PDP10/ks10_kmc.c	80;"	d	file:
INITIAL_KMCS	PDP10/ks10_kmc.c	84;"	d	file:
INITIAL_KMCS	PDP10/ks10_kmc.c	85;"	d	file:
INIT_HDR_ONLY	PDP10/ks10_kmc.c	698;"	d	file:
INIT_PAR	PDP10/kx10_rc.c	52;"	d	file:
INOUT_FAIL	PDP10/kx10_defs.h	218;"	d
INO_GPIO	PDP10/pidp10panel.c	64;"	d	file:
INP_GPIO	PDP10/pidp10panel.c	65;"	d	file:
INSFY	display/type340cmd.h	134;"	d
INST_HLT	PDP10/ka10_iii.c	54;"	d	file:
INST_IND	PDP10/kx10_defs.h	242;"	d
INST_M_AC	PDP10/kx10_defs.h	240;"	d
INST_M_DEV	PDP10/kx10_defs.h	238;"	d
INST_M_OP	PDP10/kx10_defs.h	236;"	d
INST_M_XR	PDP10/kx10_defs.h	244;"	d
INST_V_AC	PDP10/kx10_defs.h	239;"	d
INST_V_DEV	PDP10/kx10_defs.h	237;"	d
INST_V_IND	PDP10/kx10_defs.h	241;"	d
INST_V_OP	PDP10/kx10_defs.h	235;"	d
INST_V_XR	PDP10/kx10_defs.h	243;"	d
INT64_C	sim_defs.h	244;"	d
INTERR	PDP10/kl10_nia.c	93;"	d	file:
INTFLG	PDP10/kl10_fe.c	335;"	d	file:
INTFLG	PDP10/ks10_lp.c	109;"	d	file:
INTTYPES_H	slirp_glue/qemu/win32/inttypes.h	2;"	d
INT_COUNT	PDP10/kx10_dpy.c	150;"	d	file:
INT_COUNTDOWN	PDP10/kx10_dpy.c	153;"	d	file:
INT_DONE	PDP10/kx10_defs.h	224;"	d
INT_REG	PDP10/kx10_dk.c	39;"	d	file:
INT_SEL	PDP10/ka10_pmp.c	226;"	d	file:
INVALID_HANDLE	sim_serial.h	57;"	d
INVALID_HANDLE	sim_serial.h	71;"	d
INVALID_HANDLE	sim_serial.h	76;"	d
INVALID_HANDLE	sim_serial.h	82;"	d
INVALID_SOCKET	sim_sock.h	93;"	d
IN_0	display/vtmacs.h	141;"	d
IN_1	display/vtmacs.h	142;"	d
IN_2	display/vtmacs.h	143;"	d
IN_3	display/vtmacs.h	144;"	d
IN_4	display/vtmacs.h	145;"	d
IN_5	display/vtmacs.h	146;"	d
IN_6	display/vtmacs.h	147;"	d
IN_7	display/vtmacs.h	148;"	d
IN_OUT	PDP10/pdp6_dct.c	40;"	d	file:
IN_SAME	display/vtmacs.h	140;"	d
IN_SCP_C	scp.c	219;"	d	file:
IN_SIM_FIO_C	sim_fio.c	73;"	d	file:
IOCTL	PDP10/kx10_defs.h	208;"	d
IOLN_CH	PDP10/ka10_ch10.c	83;"	d	file:
IOLN_CH	PDP10/ks10_ch11.c	69;"	d	file:
IOLN_DUP	PDP10/ks10_dup.c	313;"	d	file:
IOLN_KMC	PDP10/ks10_kmc.c	492;"	d	file:
IOSB	sim_console.c	/^    unsigned int dev_status; } IOSB;$/;"	t	typeref:struct:__anon10	file:
IOSB	sim_serial.c	/^    unsigned int dev_status; } IOSB;$/;"	t	typeref:struct:__anon28	file:
IOSB	sim_tmxr.c	/^    unsigned int dev_status; } IOSB;$/;"	t	typeref:struct:__anon31	file:
IOV_MAX	slirp_glue/qemu/osdep.h	147;"	d
IP	display/type340cmd.h	90;"	d
IPDEFTTL	slirp/ip.h	186;"	d
IPFRAGTTL	slirp/ip.h	187;"	d
IPHeader	sim_ether.c	/^struct IPHeader {$/;"	s	file:
IPOPT_CLASS	slirp/ip.h	118;"	d
IPOPT_CONTROL	slirp/ip.h	121;"	d
IPOPT_COPIED	slirp/ip.h	117;"	d
IPOPT_DEBMEAS	slirp/ip.h	123;"	d
IPOPT_EOL	slirp/ip.h	126;"	d
IPOPT_LSRR	slirp/ip.h	132;"	d
IPOPT_MINOFF	slirp/ip.h	142;"	d
IPOPT_NOP	slirp/ip.h	127;"	d
IPOPT_NUMBER	slirp/ip.h	119;"	d
IPOPT_OFFSET	slirp/ip.h	141;"	d
IPOPT_OLEN	slirp/ip.h	140;"	d
IPOPT_OPTVAL	slirp/ip.h	139;"	d
IPOPT_RESERVED1	slirp/ip.h	122;"	d
IPOPT_RESERVED2	slirp/ip.h	124;"	d
IPOPT_RR	slirp/ip.h	129;"	d
IPOPT_SATID	slirp/ip.h	133;"	d
IPOPT_SECURITY	slirp/ip.h	131;"	d
IPOPT_SECUR_CONFID	slirp/ip.h	175;"	d
IPOPT_SECUR_EFTO	slirp/ip.h	176;"	d
IPOPT_SECUR_MMMM	slirp/ip.h	177;"	d
IPOPT_SECUR_RESTR	slirp/ip.h	178;"	d
IPOPT_SECUR_SECRET	slirp/ip.h	179;"	d
IPOPT_SECUR_TOPSECRET	slirp/ip.h	180;"	d
IPOPT_SECUR_UNCLASS	slirp/ip.h	174;"	d
IPOPT_SSRR	slirp/ip.h	134;"	d
IPOPT_TS	slirp/ip.h	130;"	d
IPOPT_TS_PRESPEC	slirp/ip.h	171;"	d
IPOPT_TS_TSANDADDR	slirp/ip.h	170;"	d
IPOPT_TS_TSONLY	slirp/ip.h	169;"	d
IPOS	PDP10/kx10_imp.c	183;"	d	file:
IPPROTO_ICMP	sim_ether.c	3295;"	d	file:
IPPROTO_TCP	sim_ether.c	3289;"	d	file:
IPPROTO_UDP	sim_ether.c	3292;"	d	file:
IPTOS_LOWDELAY	slirp/ip.h	110;"	d
IPTOS_RELIABILITY	slirp/ip.h	112;"	d
IPTOS_THROUGHPUT	slirp/ip.h	111;"	d
IPTTLDEC	slirp/ip.h	188;"	d
IPV6_V6ONLY	sim_sock.c	433;"	d	file:
IPV6_V6ONLY	sim_sock.c	436;"	d	file:
IPVERSION	slirp/ip.h	78;"	d
IP_DF	PDP10/kl10_nia.c	223;"	d	file:
IP_DF	PDP10/kx10_imp.c	223;"	d	file:
IP_DF	slirp/ip.h	96;"	d
IP_DF_FLAG	sim_ether.c	3238;"	d	file:
IP_FRAG_DF	sim_ether.c	3241;"	d	file:
IP_FRAG_MF	sim_ether.c	3242;"	d	file:
IP_FRAG_OFFSET	sim_ether.c	3243;"	d	file:
IP_HLEN	sim_ether.c	3232;"	d	file:
IP_MAXPACKET	slirp/ip.h	105;"	d
IP_MF	PDP10/kl10_nia.c	224;"	d	file:
IP_MF	PDP10/kx10_imp.c	224;"	d	file:
IP_MF	slirp/ip.h	97;"	d
IP_MF_FLAG	sim_ether.c	3239;"	d	file:
IP_MSS	slirp/ip.h	190;"	d
IP_OFFMASK	PDP10/kl10_nia.c	225;"	d	file:
IP_OFFMASK	PDP10/kx10_imp.c	225;"	d	file:
IP_OFFMASK	slirp/ip.h	98;"	d
IP_OFFSET_MASK	sim_ether.c	3240;"	d	file:
IP_VERSION	sim_ether.c	3233;"	d	file:
IR	PDP10/kx10_cpu.c	/^uint32  IR;                                   \/* Instruction register *\/$/;"	v
IRQ	PDP10/ka10_auxcpu.c	41;"	d	file:
IRQ	PDP10/pdp6_slave.c	42;"	d	file:
IRQ_BIT	PDP10/ka10_iii.c	62;"	d	file:
IRQ_EMPTY	PDP10/ka10_pmp.c	247;"	d	file:
IRQ_ERF	PDP10/pdp6_mtc.c	119;"	d	file:
IRQ_ERROR	PDP10/ka10_pmp.c	246;"	d	file:
IRQ_ICE	PDP10/pdp6_mtc.c	117;"	d	file:
IRQ_IDLE	PDP10/ka10_pmp.c	248;"	d	file:
IRQ_JNU	PDP10/pdp6_mtc.c	118;"	d	file:
IRQ_KA10	PDP10/kx10_rh.c	164;"	d	file:
IRQ_KI10	PDP10/kx10_rh.c	163;"	d	file:
IRQ_LIE	PDP10/pdp6_mtc.c	121;"	d	file:
IRQ_MASK	PDP10/pdp6_mtc.c	122;"	d	file:
IRQ_NSTS	PDP10/ka10_pmp.c	250;"	d	file:
IRQ_STS	PDP10/ka10_pmp.c	251;"	d	file:
IRQ_UEND	PDP10/ka10_pmp.c	249;"	d	file:
IRQ_VECT	PDP10/kx10_rh.c	162;"	d	file:
IRQ_XNE	PDP10/pdp6_mtc.c	120;"	d	file:
IS_CH	PDP10/ka10_pmp.c	263;"	d	file:
IS_TCP	slirp_glue/sim_slirp.c	53;"	d	file:
IS_UDP	slirp_glue/sim_slirp.c	54;"	d	file:
IS_VALID_RSTS_GFD	sim_disk.c	1523;"	d	file:
IS_VALID_RSTS_MFD	sim_disk.c	1503;"	d	file:
IS_VALID_RSTS_UFD	sim_disk.c	1544;"	d	file:
ITEM	sim_serial.c	/^    } ITEM;$/;"	t	typeref:struct:__anon29	file:
ITS	PDP10/kx10_defs.h	71;"	d
ITS_DTECHK	PDP10/kl10_fe.c	173;"	d	file:
ITS_DTEHNG	PDP10/kl10_fe.c	181;"	d	file:
ITS_DTEINP	PDP10/kl10_fe.c	174;"	d	file:
ITS_DTELPR	PDP10/kl10_fe.c	177;"	d	file:
ITS_DTELSP	PDP10/kl10_fe.c	176;"	d	file:
ITS_DTEODN	PDP10/kl10_fe.c	180;"	d	file:
ITS_DTEOST	PDP10/kl10_fe.c	178;"	d	file:
ITS_DTEOUT	PDP10/kl10_fe.c	175;"	d	file:
ITS_DTETYI	PDP10/kl10_fe.c	179;"	d	file:
ITS_DTEVER	PDP10/kl10_fe.c	172;"	d	file:
ITS_ON	PDP10/kl10_fe.c	114;"	d	file:
IT_ITALIC	display/vtmacs.h	41;"	d
IT_NORMAL	display/vtmacs.h	40;"	d
IT_SAME	display/vtmacs.h	39;"	d
I_AC	PDP10/kx10_sys.c	897;"	d	file:
I_IO	PDP10/kx10_sys.c	899;"	d	file:
I_M_FL	PDP10/kx10_sys.c	896;"	d	file:
I_OFF	display/vtmacs.h	200;"	d
I_ON	display/vtmacs.h	201;"	d
I_OP	PDP10/kx10_sys.c	898;"	d	file:
I_V_AC	PDP10/kx10_sys.c	900;"	d	file:
I_V_FL	PDP10/kx10_sys.c	895;"	d	file:
I_V_IO	PDP10/kx10_sys.c	902;"	d	file:
I_V_OP	PDP10/kx10_sys.c	901;"	d	file:
IncludeFileName	sim_BuildROMs.c	/^    const char *BinaryName;             const char *IncludeFileName; size_t expected_size; unsigned int checksum;  const char *ArrayName;            const char *Comments;} ROMs[] = {$/;"	m	struct:ROM_File_Descriptor	file:
InstHistory	PDP10/kx10_cpu.c	/^    } InstHistory;$/;"	t	typeref:struct:__anon1	file:
InterlockedCompareExchangePointer	sim_defs.h	1234;"	d
InterlockedCompareExchangePointer	sim_defs.h	1236;"	d
JDL_	display/vtmacs.h	17;"	d
JMPA	display/vttest.c	47;"	d	file:
JMP_INST	PDP10/ka10_iii.c	86;"	d	file:
JOB_DONE	PDP10/kx10_mt.c	80;"	d	file:
JOY0	PDP10/kx10_dpy.c	585;"	d	file:
JOY1	PDP10/kx10_dpy.c	586;"	d	file:
JOY2	PDP10/kx10_dpy.c	587;"	d	file:
JOY3	PDP10/kx10_dpy.c	588;"	d	file:
JOY_MAX_AXES	PDP10/ka10_imx.c	51;"	d	file:
JOY_MAX_AXES	PDP10/ka10_tv.c	32;"	d	file:
JOY_MAX_AXES	PDP10/kx10_dpy.c	397;"	d	file:
JOY_MAX_BUTTONS	PDP10/ka10_tv.c	33;"	d	file:
JOY_MAX_BUTTONS	PDP10/kx10_dpy.c	398;"	d	file:
JOY_MAX_UNITS	PDP10/ka10_imx.c	50;"	d	file:
JOY_MAX_UNITS	PDP10/ka10_tv.c	31;"	d	file:
JOY_MAX_UNITS	PDP10/kx10_dpy.c	396;"	d	file:
JOY_NO_CHAN	PDP10/ka10_imx.c	52;"	d	file:
JOY_TRIG	PDP10/ka10_tv.c	35;"	d	file:
JOY_TRIG	PDP10/kx10_dpy.c	584;"	d	file:
JRST1	PDP10/kx10_defs.h	256;"	d
JSR_INST	PDP10/ka10_iii.c	87;"	d	file:
KA	PDP10/kx10_defs.h	42;"	d
KA_FAIL	PDP10/ks10_cty.c	45;"	d	file:
KBD_POLL_WAIT	sim_defs.h	442;"	d
KEEP_ALIVE	PDP10/ks10_cty.c	49;"	d	file:
KEY_BLANK	sim_scsi.c	69;"	d	file:
KEY_BSY	PDP10/kx10_cty.c	50;"	d	file:
KEY_EVENT_QUEUE	sim_video.c	/^    } KEY_EVENT_QUEUE;$/;"	t	typeref:struct:__anon33	file:
KEY_ILLREQ	sim_scsi.c	67;"	d	file:
KEY_MODIFIERS	display/carbon.c	134;"	d	file:
KEY_M_ILI	sim_scsi.c	70;"	d	file:
KEY_NOTRDY	sim_scsi.c	66;"	d	file:
KEY_OK	sim_scsi.c	65;"	d	file:
KEY_PROT	sim_scsi.c	68;"	d	file:
KEY_RDY	PDP10/kx10_cty.c	49;"	d	file:
KEY_TST	PDP10/kx10_cty.c	51;"	d	file:
KEY_WOW64_64KEY	sim_ether.c	1864;"	d	file:
KI	PDP10/kx10_defs.h	46;"	d
KI_22BIT	PDP10/kx10_defs.h	66;"	d
KI_PAG_A	PDP10/kx10_defs.h	394;"	d
KI_PAG_P	PDP10/kx10_defs.h	395;"	d
KI_PAG_S	PDP10/kx10_defs.h	397;"	d
KI_PAG_W	PDP10/kx10_defs.h	396;"	d
KI_PAG_X	PDP10/kx10_defs.h	398;"	d
KL	PDP10/kx10_defs.h	50;"	d
KLINK_ACT	PDP10/ks10_cty.c	62;"	d	file:
KLINK_CHAR	PDP10/ks10_cty.c	61;"	d	file:
KLINK_ENB	PDP10/ks10_cty.c	56;"	d	file:
KLINK_HANG	PDP10/ks10_cty.c	63;"	d	file:
KLINK_IN	PDP10/ks10_cty.c	39;"	d	file:
KLINK_OUT	PDP10/ks10_cty.c	40;"	d	file:
KL_ITS	PDP10/kx10_defs.h	86;"	d
KL_PAG_A	PDP10/kx10_defs.h	385;"	d
KL_PAG_C	PDP10/kx10_defs.h	389;"	d
KL_PAG_P	PDP10/kx10_defs.h	386;"	d
KL_PAG_S	PDP10/kx10_defs.h	388;"	d
KL_PAG_W	PDP10/kx10_defs.h	387;"	d
KMAP_BRK	sim_console.c	169;"	d	file:
KMAP_DBGINT	sim_console.c	171;"	d	file:
KMAP_DEL	sim_console.c	170;"	d	file:
KMAP_MASK	sim_console.c	172;"	d	file:
KMAP_NZ	sim_console.c	173;"	d	file:
KMAP_WRU	sim_console.c	168;"	d	file:
KMC_CRAMSIZE	PDP10/ks10_kmc.c	225;"	d	file:
KMC_CYCLETIME	PDP10/ks10_kmc.c	227;"	d	file:
KMC_DIS	PDP10/ks10_kmc.c	86;"	d	file:
KMC_DIS	PDP10/ks10_kmc.c	88;"	d	file:
KMC_DRAMSIZE	PDP10/ks10_kmc.c	226;"	d	file:
KMC_RDX	PDP10/ks10_kmc.c	43;"	d	file:
KMC_UNITS	PDP10/ks10_kmc.c	70;"	d	file:
KS	PDP10/kx10_defs.h	54;"	d
KS_ITS	PDP10/kx10_defs.h	91;"	d
L	scp_help.h	256;"	d
LASTCMD	PDP10/ka10_pmp.c	191;"	d	file:
LA_V_SC	PDP10/kx10_rp.c	137;"	d	file:
LA_V_SC	PDP10/kx10_rs.c	123;"	d	file:
LC1	display/vt11.c	1284;"	d	file:
LC2	display/vt11.c	1285;"	d	file:
LC3	display/vt11.c	1286;"	d	file:
LC4	display/vt11.c	1287;"	d	file:
LD_PT	PDP10/pdp6_mtc.c	99;"	d	file:
LEASE_TIME	slirp/bootp.c	28;"	d	file:
LEVELS_PER_HALFLIFE	display/display.c	285;"	d	file:
LF	PDP10/ka10_stk.c	74;"	d	file:
LFLAG	PDP10/kx10_dc.c	57;"	d	file:
LH_DIS	display/vtmacs.h	114;"	d
LH_ENA	display/vtmacs.h	115;"	d
LH_SAME	display/vtmacs.h	113;"	d
LIBS	Makefile	/^LIBS = `\/usr\/bin\/sdl2-config --libs`  -lm -lrt -lpthread -lpcre -ldl -lpng -lz -lvdeplug -Wl,-R,\/lib\/x86_64-linux-gnu\/ -L\/lib\/x86_64-linux-gnu\/$/;"	m
LIGHT_FLG	PDP10/ka10_iii.c	65;"	d	file:
LIGH_ENB	PDP10/ka10_iii.c	57;"	d	file:
LIGH_MSK	PDP10/ka10_iii.c	72;"	d	file:
LINE	PDP10/ka10_dkb.c	53;"	d	file:
LINE	PDP10/kl10_fe.c	328;"	d	file:
LINE	PDP10/ks10_dz.c	65;"	d	file:
LINE	PDP10/ks10_lp.c	45;"	d	file:
LINE	PDP10/kx10_dc.c	56;"	d	file:
LINE	PDP10/kx10_lp.c	41;"	d	file:
LINE	PDP10/pdp6_dcs.c	54;"	d	file:
LINE_EN	PDP10/ks10_dz.c	98;"	d	file:
LINE_ENB	PDP10/ks10_dz.c	74;"	d	file:
LINK_DSR	PDP10/ks10_kmc.c	260;"	d	file:
LINK_SEL	PDP10/ks10_kmc.c	261;"	d	file:
LIT_FBIT	PDP10/ka10_iii.c	76;"	d	file:
LI_BRIGHTDOWN	display/vtmacs.h	35;"	d
LI_INTENSIFY	display/vtmacs.h	34;"	d
LI_NOBRIGHTDOWN	display/vtmacs.h	37;"	d
LI_NOINTENSIFY	display/vtmacs.h	36;"	d
LI_SAME	display/vtmacs.h	33;"	d
LL	PDP10/kx10_dpy.c	581;"	d	file:
LL_FMT	sim_defs.h	282;"	d
LL_FMT	sim_defs.h	286;"	d
LL_FMT	sim_defs.h	289;"	d
LL_TYPE	sim_defs.h	283;"	d
LL_TYPE	sim_defs.h	287;"	d
LL_TYPE	sim_defs.h	290;"	d
LMASK	PDP10/kx10_defs.h	171;"	d
LNR	display/vtmacs.h	122;"	d
LOAD_REG	PDP10/kx10_rh.c	152;"	d	file:
LOG_BL	PDP10/kx10_dt.c	254;"	d	file:
LOG_BL	PDP10/pdp6_dtc.c	229;"	d	file:
LOG_MS	PDP10/kx10_dt.c	251;"	d	file:
LOG_MS	PDP10/pdp6_dtc.c	226;"	d	file:
LOG_RA	PDP10/kx10_dt.c	253;"	d	file:
LOG_RA	PDP10/pdp6_dtc.c	228;"	d	file:
LOG_RW	PDP10/kx10_dt.c	252;"	d	file:
LOG_RW	PDP10/pdp6_dtc.c	227;"	d	file:
LONG_DASH	display/vt11.c	/^enum linetype { SOLID=0, LONG_DASH, SHORT_DASH, DOT_DASH };$/;"	e	enum:linetype	file:
LOOP	PDP10/ka10_ch10.c	46;"	d	file:
LOOPBACK_PHYSICAL_REFLECTION	sim_ether.h	189;"	d
LOOPBACK_PHYSICAL_RESPONSE	sim_ether.h	179;"	d
LOOPBACK_REFLECTION_TEST_PACKET	sim_ether.h	197;"	d
LOOPBACK_SELF_FRAME	sim_ether.h	171;"	d
LOST	PDP10/ka10_ch10.c	53;"	d	file:
LP	display/vttest.c	/^unsigned short LP[] = {$/;"	v
LP1ON	display/type340cmd.h	98;"	d
LP20_RAM_CHR	PDP10/kl10_fe.c	363;"	d	file:
LP20_RAM_CHR	PDP10/ks10_lp.c	152;"	d	file:
LP20_RAM_DEL	PDP10/kl10_fe.c	360;"	d	file:
LP20_RAM_DEL	PDP10/ks10_lp.c	149;"	d	file:
LP20_RAM_INT	PDP10/kl10_fe.c	359;"	d	file:
LP20_RAM_INT	PDP10/ks10_lp.c	148;"	d	file:
LP20_RAM_PI	PDP10/kl10_fe.c	362;"	d	file:
LP20_RAM_PI	PDP10/ks10_lp.c	151;"	d	file:
LP20_RAM_RAP	PDP10/kl10_fe.c	358;"	d	file:
LP20_RAM_RAP	PDP10/ks10_lp.c	147;"	d	file:
LP20_RAM_TRN	PDP10/kl10_fe.c	361;"	d	file:
LP20_RAM_TRN	PDP10/ks10_lp.c	150;"	d	file:
LP2ON	display/type340cmd.h	102;"	d
LP3ON	display/type340cmd.h	106;"	d
LP4ON	display/type340cmd.h	110;"	d
LPADAPTER	sim_ether.c	/^typedef void **LPADAPTER;$/;"	t	file:
LPCNT	PDP10/kl10_fe.c	330;"	d	file:
LPOFF	display/type340cmd.h	63;"	d
LPON	display/type340cmd.h	62;"	d
LPST	PDP10/kl10_fe.c	329;"	d	file:
LPXON	display/type340cmd.h	115;"	d
LP_DEVNUM	PDP10/kx10_lp.c	37;"	d	file:
LP_DIS	display/vtmacs.h	151;"	d
LP_ENA	display/vtmacs.h	152;"	d
LP_SAME	display/vtmacs.h	150;"	d
LR	PDP10/kx10_dpy.c	580;"	d	file:
LRZ	PDP10/kx10_defs.h	255;"	d
LSRA	display/vtmacs.h	23;"	d
LSRB	display/vtmacs.h	55;"	d
LSRBB	display/vtmacs.h	68;"	d
LSRC	display/vtmacs.h	88;"	d
LSSR	display/vtmacs.h	103;"	d
LST_ADDR	PDP10/ka10_pmp.c	222;"	d	file:
LT	PDP10/kx10_mt.c	54;"	d	file:
LT	PDP10/pdp6_mtc.c	53;"	d	file:
LT	display/type340cmd.h	151;"	d
LT_DDASH	display/vtmacs.h	162;"	d
LT_LDASH	display/vtmacs.h	160;"	d
LT_SAME	display/vtmacs.h	158;"	d
LT_SDASH	display/vtmacs.h	161;"	d
LT_SOLID	display/vtmacs.h	159;"	d
LVECT	display/vtmacs.h	218;"	d
LVECT3	display/vtmacs.h	221;"	d
LVECTOR	display/vt11.c	/^enum gmode { CHAR=0, SVECTOR, LVECTOR, POINT, GRAPHX, GRAPHY, RELPOINT, \/* all *\/$/;"	e	enum:gmode	file:
LVW_INST	PDP10/ka10_iii.c	84;"	d	file:
LastDir	scp.c	/^    char LastDir[PATH_MAX + 1];$/;"	m	struct:__anon4	file:
Length	sim_ether.c	/^    uint32 Length;              \/\/\/< Length of the data field$/;"	m	struct:_PACKET_OID_DATA	file:
M	PDP10/ka10_iii.c	113;"	d	file:
M	PDP10/kx10_cpu.c	/^uint64  M[MAXMEMSIZE];                        \/* Memory *\/$/;"	v
M	display/tst340.c	241;"	d	file:
MAGIC	PDP10/kx10_cpu.c	/^int     MAGIC = 1;                            \/* Magic switch. *\/$/;"	v
MAGIC_SWITCH	PDP10/kx10_defs.h	99;"	d
MAG_	display/vtmacs.h	13;"	d
MAG_FMT	PDP10/ks10_cty.c	43;"	d	file:
MAINT	PDP10/ks10_dz.c	43;"	d	file:
MAINT_SEG	PDP10/kx10_rc.c	66;"	d	file:
MANT	PDP10/kx10_defs.h	196;"	d
MAP_ANONYMOUS	slirp_glue/qemu/osdep.h	96;"	d
MAP_EN16	PDP10/ks10_uba.c	31;"	d	file:
MAP_FME	PDP10/ks10_uba.c	30;"	d	file:
MAP_OFFSET	sim_disk.c	1611;"	d	file:
MAP_RAMP	PDP10/ks10_uba.c	33;"	d	file:
MAP_RPV	PDP10/ks10_uba.c	28;"	d	file:
MAP_RPW	PDP10/ks10_uba.c	32;"	d	file:
MAP_VALID	PDP10/ks10_uba.c	29;"	d	file:
MAR	PDP10/ka10_iii.c	39;"	d	file:
MARGIN	PDP10/kl10_fe.c	338;"	d	file:
MARGIN	PDP10/ks10_lp.c	112;"	d	file:
MARGIN	PDP10/kx10_lp.c	43;"	d	file:
MATCH_CMD	sim_defs.h	453;"	d
MAX	scp.c	248;"	d	file:
MAX	sim_defs.h	165;"	d
MAX	sim_ether.c	382;"	d	file:
MAX	sim_fio.c	88;"	d	file:
MAX	sim_tape.c	3471;"	d	file:
MAX	sim_timer.c	98;"	d	file:
MAX	slirp_glue/qemu/osdep.h	118;"	d
MAX	slirp_glue/sim_slirp.c	541;"	d	file:
MAXDELAY	display/display.c	511;"	d	file:
MAXELAPSED	display/display.c	493;"	d	file:
MAXIMUM_WAIT_OBJECTS	sim_tmxr.c	4074;"	d	file:
MAXLEVEL	display/display.c	326;"	d	file:
MAXMEMSIZE	PDP10/kx10_defs.h	319;"	d
MAXMEMSIZE	PDP10/kx10_defs.h	321;"	d
MAXMEMSIZE	PDP10/kx10_defs.h	323;"	d
MAXMEMSIZE	PDP10/kx10_defs.h	325;"	d
MAXQUEUE	PDP10/ks10_kmc.c	229;"	d	file:
MAXTTL	display/display.c	319;"	d	file:
MAXTTL	slirp/ip.h	185;"	d
MAX_ACTIVE	PDP10/ks10_kmc.c	154;"	d	file:
MAX_COMMENT_LEN	sim_imd.c	323;"	d	file:
MAX_CONCURRENT_ROMS	sim_BuildROMs.c	84;"	d	file:
MAX_CYL	sim_imd.h	66;"	d
MAX_DEV	PDP10/kx10_cpu.c	761;"	d	file:
MAX_DO_NEST_LVL	scp.c	268;"	d	file:
MAX_EVENTS	sim_video.c	326;"	d	file:
MAX_HEAD	sim_imd.h	67;"	d
MAX_INTERFACES	slirp/slirp_config.h	15;"	d
MAX_IPOPTLEN	slirp/ip.h	261;"	d
MAX_LINE	PDP10/ks10_kmc.c	153;"	d	file:
MAX_LIST_SIZE	PDP10/ks10_kmc.c	697;"	d	file:
MAX_MRU	slirp/slirp.h	350;"	d
MAX_MRU	slirp/slirp.h	353;"	d
MAX_OPT_LEN	slirp/dnssearch.c	/^static const uint8_t MAX_OPT_LEN = 255;$/;"	v	file:
MAX_PPP_INTERFACES	slirp/slirp_config.h	16;"	d
MAX_RECORD_SIZE	sim_tape.c	380;"	d	file:
MAX_REMOTE_SESSIONS	sim_console.c	448;"	d	file:
MAX_SPEED	PDP10/ks10_kmc.c	106;"	d	file:
MAX_SPT	sim_imd.h	68;"	d
MAX_TCPOPTLEN	slirp/tcp_output.c	50;"	d	file:
MAX_TCPOPTLEN	slirp/tcp_output.c	51;"	d	file:
MAX_WIDTH	scp.c	11641;"	d	file:
MAX_X	PDP10/ka10_iii.c	101;"	d	file:
MAX_Y	PDP10/ka10_iii.c	103;"	d	file:
MB	PDP10/kx10_cpu.c	/^uint64  MB;                                   \/* Memory Bufer Register *\/$/;"	v
MBUF_THRESH	slirp/mbuf.c	20;"	d	file:
MB_ERR	PDP10/kx10_defs.h	226;"	d
MB_ID	sim_disk.c	1501;"	d	file:
MB_PAR	PDP10/kx10_defs.h	217;"	d
MCHR	display/type340cmd.h	50;"	d
MCL	PDP10/pdp6_dsk.c	62;"	d	file:
MClose	scp.c	/^MClose (MFILE *f)$/;"	f	file:
MEMFILE	sim_defs.h	/^struct MEMFILE {$/;"	s
MEMFILE	sim_defs.h	/^typedef struct MEMFILE MEMFILE;$/;"	t	typeref:struct:MEMFILE
MEMOREX_CYLINDERS	PDP10/ka10_ai.c	42;"	d	file:
MEMOREX_SIZE	PDP10/ka10_ai.c	45;"	d	file:
MEMORY_TAPE	sim_tape.c	/^    } MEMORY_TAPE;$/;"	t	typeref:struct:MEMORY_TAPE	file:
MEMORY_TAPE	sim_tape.c	/^typedef struct MEMORY_TAPE {$/;"	s	file:
MEMSIZE	PDP10/kx10_defs.h	327;"	d
MEM_MAPPED	sim_defs.h	143;"	d
MENU_OFFSET	display/vt11.c	590;"	d	file:
META	PDP10/ka10_dkb.c	47;"	d	file:
META	PDP10/ka10_stk.c	44;"	d	file:
MFILE	scp.c	/^    } MFILE;$/;"	t	typeref:struct:MFILE	file:
MFILE	scp.c	/^typedef struct MFILE {$/;"	s	file:
MFlush	scp.c	/^MFlush (MFILE *f)$/;"	f
MI	PDP10/kx10_cpu.c	/^uint64  MI;                                   \/* Monitor lights *\/$/;"	v
MILLIS_PER_SEC	sim_timer.c	571;"	d	file:
MILLIS_PER_SEC	sim_timer.c	630;"	d	file:
MIN	scp.c	251;"	d	file:
MIN	sim_console.c	142;"	d	file:
MIN	sim_defs.h	168;"	d
MIN	sim_fio.c	91;"	d	file:
MIN	sim_timer.c	95;"	d	file:
MIN	sim_tmxr.c	342;"	d	file:
MIN	slirp_glue/qemu/osdep.h	115;"	d
MINCR	display/type340cmd.h	53;"	d
MINCSIZE	slirp/mbuf.h	36;"	d
MINDELAY	display/display.c	523;"	d	file:
MINELAPSED	display/display.c	500;"	d	file:
MIN_MRU	slirp/slirp.h	349;"	d
MIN_MRU	slirp/slirp.h	352;"	d
MIN_NON_ZERO	slirp_glue/qemu/osdep.h	124;"	d
MIN_RECORD_SIZE	sim_tape.c	379;"	d	file:
MIN_X	PDP10/ka10_iii.c	100;"	d	file:
MIN_Y	PDP10/ka10_iii.c	102;"	d	file:
MISS	PDP10/pdp6_dct.c	44;"	d	file:
MIS_CHR	PDP10/pdp6_mtc.c	96;"	d	file:
MIS_CHR_DLY	PDP10/pdp6_mtc.c	127;"	d	file:
MI_PROG	PDP10/kx10_cpu.c	/^int     MI_PROG = 0;                          \/* MI program data *\/$/;"	v
MMASK	PDP10/kx10_defs.h	181;"	d
MN_MAIN	display/vtmacs.h	51;"	d
MN_MENU	display/vtmacs.h	52;"	d
MN_SAME	display/vtmacs.h	50;"	d
MODEMASK	display/type340cmd.h	56;"	d
MODEM_CHANGE_CALLBACK	PDP10/ks10_dup.h	/^typedef void (*MODEM_CHANGE_CALLBACK)(int32 dup);$/;"	t
MODE_026	sim_card.h	98;"	d
MODE_029	sim_card.h	99;"	d
MODE_AUTO	sim_card.h	89;"	d
MODE_BCD	sim_card.h	92;"	d
MODE_BIN	sim_card.h	90;"	d
MODE_CBN	sim_card.h	93;"	d
MODE_CHAR	sim_card.h	101;"	d
MODE_COMPARE	PDP10/ka10_ai.c	/^    MODE_COMPARE,               \/* Compare sector data. *\/$/;"	e	enum:__anon2	file:
MODE_DEC29	sim_card.h	100;"	d
MODE_EBCDIC	sim_card.h	94;"	d
MODE_ERROR	PDP10/ka10_ai.c	/^    MODE_ERROR = 0,$/;"	e	enum:__anon2	file:
MODE_IMAGE	PDP10/ka10_ai.c	/^    MODE_IMAGE                  \/* Write raw image. *\/$/;"	e	enum:__anon2	file:
MODE_LOWER	sim_card.h	97;"	d
MODE_OCTAL	sim_card.h	95;"	d
MODE_READ	PDP10/ka10_ai.c	/^    MODE_READ,                  \/* Read sector data. *\/$/;"	e	enum:__anon2	file:
MODE_READ_HEADERS	PDP10/ka10_ai.c	/^    MODE_READ_HEADERS,          \/* Read sector headers. *\/$/;"	e	enum:__anon2	file:
MODE_TEXT	sim_card.h	91;"	d
MODE_WRITE	PDP10/ka10_ai.c	/^    MODE_WRITE,                 \/* Write sector data. *\/$/;"	e	enum:__anon2	file:
MODIFIER_KEYS	display/sim_ws.c	160;"	d	file:
MODKEY	display/sim_ws.c	158;"	d	file:
MODMASK	sim_defs.h	782;"	d
MONITOR_H	slirp_glue/qemu/monitor/monitor.h	2;"	d
MORE_DATA	display/vt11.c	3470;"	d	file:
MOTION_ERROR	PDP10/kx10_cr.c	72;"	d	file:
MOT_DLY	PDP10/pdp6_mtc.c	130;"	d	file:
MOT_STOP	PDP10/pdp6_mtc.c	106;"	d	file:
MOT_STOP_DLY	PDP10/pdp6_mtc.c	134;"	d	file:
MOUSE_EVENT_QUEUE	sim_video.c	/^    } MOUSE_EVENT_QUEUE;$/;"	t	typeref:struct:__anon34	file:
MOpen	scp.c	/^MOpen (void)$/;"	f	file:
MPAR	display/type340cmd.h	47;"	d
MPT	display/type340cmd.h	48;"	d
MPX_DEV	PDP10/kx10_defs.h	104;"	d
MQ	PDP10/kx10_cpu.c	/^uint64  MQ;                                   \/* Extension to AR *\/$/;"	v
MRB	PDP10/pdp6_dsk.c	55;"	d	file:
MREVERSE	PDP10/kx10_cpu.c	6;"	d	file:
MREVERSE	PDP10/kx10_cpu.c	8;"	d	file:
MREVERSE	PDP10/pidp10panel.c	6;"	d	file:
MREVERSE	PDP10/pidp10panel.c	8;"	d	file:
MRG	PDP10/pdp6_dsk.c	56;"	d	file:
MSE	PDP10/ks10_dz.c	45;"	d	file:
MSLV	display/type340cmd.h	49;"	d
MSUBR	display/type340cmd.h	54;"	d
MTAB	sim_defs.h	/^struct MTAB {$/;"	s
MTAB	sim_defs.h	/^typedef struct MTAB MTAB;$/;"	t	typeref:struct:MTAB
MTAB_NC	sim_defs.h	779;"	d
MTAB_NMO	sim_defs.h	778;"	d
MTAB_QUOTE	sim_defs.h	780;"	d
MTAB_SHP	sim_defs.h	781;"	d
MTAB_VALO	sim_defs.h	777;"	d
MTAB_VALR	sim_defs.h	776;"	d
MTAB_VDV	sim_defs.h	774;"	d
MTAB_VUN	sim_defs.h	775;"	d
MTAB_XTD	sim_defs.h	773;"	d
MTAT_F_RSTS	sim_tape.h	110;"	d
MTAT_F_RSX11	sim_tape.h	108;"	d
MTAT_F_RT11	sim_tape.h	109;"	d
MTAT_F_VAR	sim_tape.h	111;"	d
MTAT_F_VMS	sim_tape.h	107;"	d
MTC_BUSY	PDP10/pdp6_mtc.c	144;"	d	file:
MTC_DEVCTL	PDP10/pdp6_mtc.c	140;"	d	file:
MTC_DEVSTA	PDP10/pdp6_mtc.c	141;"	d	file:
MTC_DEVSTM	PDP10/pdp6_mtc.c	142;"	d	file:
MTC_MOTION	PDP10/pdp6_mtc.c	143;"	d	file:
MTC_START	PDP10/pdp6_mtc.c	145;"	d	file:
MTDF_TYPEB	PDP10/kx10_mt.c	49;"	d	file:
MTPOS_M_DLE	sim_tape.h	134;"	d
MTPOS_M_OBJ	sim_tape.h	132;"	d
MTPOS_M_REV	sim_tape.h	130;"	d
MTPOS_M_REW	sim_tape.h	128;"	d
MTPOS_V_DLE	sim_tape.h	133;"	d
MTPOS_V_OBJ	sim_tape.h	131;"	d
MTPOS_V_REV	sim_tape.h	129;"	d
MTPOS_V_REW	sim_tape.h	127;"	d
MTR_EOM	sim_tape.h	51;"	d
MTR_ERF	sim_tape.h	58;"	d
MTR_F	sim_tape.h	59;"	d
MTR_FHGAP	sim_tape.h	54;"	d
MTR_GAP	sim_tape.h	52;"	d
MTR_L	sim_tape.h	60;"	d
MTR_MAXLEN	sim_tape.h	57;"	d
MTR_M_RHGAP	sim_tape.h	56;"	d
MTR_RHGAP	sim_tape.h	55;"	d
MTR_RRGAP	sim_tape.h	53;"	d
MTR_TMK	sim_tape.h	50;"	d
MTSE_BOT	sim_tape.h	163;"	d
MTSE_DBG_API	sim_tape.h	175;"	d
MTSE_DBG_DAT	sim_tape.h	176;"	d
MTSE_DBG_POS	sim_tape.h	177;"	d
MTSE_DBG_STR	sim_tape.h	178;"	d
MTSE_EOM	sim_tape.h	164;"	d
MTSE_FMT	sim_tape.h	162;"	d
MTSE_INVRL	sim_tape.h	161;"	d
MTSE_IOERR	sim_tape.h	160;"	d
MTSE_LEOT	sim_tape.h	167;"	d
MTSE_MAX_ERR	sim_tape.h	169;"	d
MTSE_OK	sim_tape.h	157;"	d
MTSE_RECE	sim_tape.h	165;"	d
MTSE_RUNAWAY	sim_tape.h	168;"	d
MTSE_TMK	sim_tape.h	158;"	d
MTSE_UNATT	sim_tape.h	159;"	d
MTSE_WRP	sim_tape.h	166;"	d
MTUF_7TRK	PDP10/kx10_mt.c	50;"	d	file:
MTUF_7TRK	PDP10/pdp6_mtc.c	49;"	d	file:
MTUF_F_ANSI	sim_tape.h	103;"	d
MTUF_F_AWS	sim_tape.h	100;"	d
MTUF_F_DOS11	sim_tape.h	105;"	d
MTUF_F_E11	sim_tape.h	97;"	d
MTUF_F_FIXED	sim_tape.h	104;"	d
MTUF_F_P7B	sim_tape.h	99;"	d
MTUF_F_STD	sim_tape.h	96;"	d
MTUF_F_TAR	sim_tape.h	101;"	d
MTUF_F_TPC	sim_tape.h	98;"	d
MTUF_V_UF	sim_tape.h	95;"	d
MTUF_WLK	sim_tape.h	113;"	d
MTUF_WRP	sim_tape.h	114;"	d
MTVF_DENS_MASK	sim_tape.h	145;"	d
MTY_CONI_BITS	PDP10/ka10_mty.c	49;"	d	file:
MTY_CONO_BITS	PDP10/ka10_mty.c	50;"	d	file:
MTY_DEVNUM	PDP10/ka10_mty.c	37;"	d	file:
MTY_DONE	PDP10/ka10_mty.c	48;"	d	file:
MTY_FIRST	PDP10/ka10_mty.c	39;"	d	file:
MTY_IDONE	PDP10/ka10_mty.c	44;"	d	file:
MTY_LINE	PDP10/ka10_mty.c	46;"	d	file:
MTY_LINES	PDP10/ka10_mty.c	38;"	d	file:
MTY_NAME	PDP10/ka10_mty.c	36;"	d	file:
MTY_ODONE	PDP10/ka10_mty.c	43;"	d	file:
MTY_PIA	PDP10/ka10_mty.c	41;"	d	file:
MTY_RQINT	PDP10/ka10_mty.c	42;"	d	file:
MTY_STOP	PDP10/ka10_mty.c	45;"	d	file:
MT_1600_VALID	sim_tape.h	152;"	d
MT_200_VALID	sim_tape.h	149;"	d
MT_556_VALID	sim_tape.h	150;"	d
MT_6250_VALID	sim_tape.h	153;"	d
MT_800_VALID	sim_tape.h	151;"	d
MT_BRFUL	PDP10/kx10_mt.c	116;"	d	file:
MT_BUFFUL	PDP10/kx10_mt.c	115;"	d	file:
MT_BUSY	PDP10/kx10_mt.c	114;"	d	file:
MT_CLR_INMRK	sim_tape.h	120;"	d
MT_CLR_PNU	sim_tape.h	117;"	d
MT_DENS	sim_tape.h	146;"	d
MT_DENS_1600	sim_tape.h	142;"	d
MT_DENS_200	sim_tape.h	139;"	d
MT_DENS_556	sim_tape.h	140;"	d
MT_DENS_6250	sim_tape.h	143;"	d
MT_DENS_800	sim_tape.h	141;"	d
MT_DENS_NONE	sim_tape.h	138;"	d
MT_DEVNUM	PDP10/kx10_mt.c	112;"	d	file:
MT_GET_ANSI_TYP	sim_tape.h	123;"	d
MT_GET_FMT	sim_tape.h	122;"	d
MT_LASTWD	PDP10/kx10_mt.c	118;"	d	file:
MT_MOTION	PDP10/kx10_mt.c	113;"	d	file:
MT_NONE_VALID	sim_tape.h	148;"	d
MT_SET_INMRK	sim_tape.h	119;"	d
MT_SET_PNU	sim_tape.h	116;"	d
MT_STOP	PDP10/kx10_mt.c	117;"	d	file:
MT_TST_INMRK	sim_tape.h	121;"	d
MT_TST_PNU	sim_tape.h	118;"	d
MUST_DO_SELECT	sim_ether.h	119;"	d
MVCT	display/type340cmd.h	51;"	d
MVCTC	display/type340cmd.h	52;"	d
M_DOFREE	slirp/mbuf.h	100;"	d
M_EXT	slirp/mbuf.h	97;"	d
M_FREELIST	slirp/mbuf.h	98;"	d
M_FREEROOM	slirp/mbuf.h	63;"	d
M_ROOM	slirp/mbuf.h	55;"	d
M_TRAILINGSPACE	slirp/mbuf.h	64;"	d
M_USEDLIST	slirp/mbuf.h	99;"	d
MaxTableEntries	sim_disk.c	/^    uint32 MaxTableEntries;$/;"	m	struct:_VHD_DynamicDiskHeader	file:
Mem_deposit_word	PDP10/kx10_cpu.c	/^int Mem_deposit_word(int n, int wrd, uint64 *data) {$/;"	f
Mem_examine_word	PDP10/kx10_cpu.c	/^int Mem_examine_word(int n, int wrd, uint64 *data) {$/;"	f
Mem_read	PDP10/kx10_cpu.c	/^int (*Mem_read)(int flag, int cur_context, int fetch, int mod);$/;"	v
Mem_read	PDP10/kx10_cpu.c	/^int Mem_read(int flag, int cur_context, int fetch, int mod) {$/;"	f
Mem_read_bbn	PDP10/kx10_cpu.c	/^int Mem_read_bbn(int flag, int cur_context, int fetch, int mod) {$/;"	f
Mem_read_byte	PDP10/kx10_cpu.c	/^int Mem_read_byte(int n, uint16 *data, int byte) {$/;"	f
Mem_read_its	PDP10/kx10_cpu.c	/^int Mem_read_its(int flag, int cur_context, int fetch, int mod) {$/;"	f
Mem_read_ka	PDP10/kx10_cpu.c	/^int Mem_read_ka(int flag, int cur_context, int fetch, int mod) {$/;"	f
Mem_read_nopage	PDP10/kx10_cpu.c	/^int Mem_read_nopage() {$/;"	f
Mem_read_waits	PDP10/kx10_cpu.c	/^int Mem_read_waits(int flag, int cur_context, int fetch, int mod) {$/;"	f
Mem_read_word	PDP10/kx10_cpu.c	/^int Mem_read_word(t_addr addr, uint64 *data, int ept)$/;"	f
Mem_write	PDP10/kx10_cpu.c	/^int (*Mem_write)(int flag, int cur_context);$/;"	v
Mem_write	PDP10/kx10_cpu.c	/^int Mem_write(int flag, int cur_context) {$/;"	f
Mem_write_bbn	PDP10/kx10_cpu.c	/^int Mem_write_bbn(int flag, int cur_context) {$/;"	f
Mem_write_byte	PDP10/kx10_cpu.c	/^int Mem_write_byte(int n, uint16 *data) {$/;"	f
Mem_write_its	PDP10/kx10_cpu.c	/^int Mem_write_its(int flag, int cur_context) {$/;"	f
Mem_write_ka	PDP10/kx10_cpu.c	/^int Mem_write_ka(int flag, int cur_context) {$/;"	f
Mem_write_nopage	PDP10/kx10_cpu.c	/^int Mem_write_nopage() {$/;"	f
Mem_write_waits	PDP10/kx10_cpu.c	/^int Mem_write_waits(int flag, int cur_context) {$/;"	f
Mem_write_word	PDP10/kx10_cpu.c	/^int Mem_write_word(t_addr addr, uint64 *data, int ept)$/;"	f
Monitor	slirp_glue/qemu/typedefs.h	/^typedef struct Monitor Monitor;$/;"	t	typeref:struct:Monitor
Mprintf	scp.c	/^static int Mprintf (MFILE *f, const char* fmt, ...)$/;"	f	file:
MyEventWait	display/carbon.c	/^void MyEventWait (      EventTimeout    timeout )       \/* double *\/$/;"	f
NANOSECONDS_PER_SECOND	slirp_glue/qemu/timer.h	7;"	d
NANOS_PER_MILLI	sim_timer.c	570;"	d	file:
NANOS_PER_MILLI	sim_timer.c	629;"	d	file:
NB	PDP10/kx10_dc.c	67;"	d	file:
NB_BOOTP_CLIENTS	slirp/bootp.h	122;"	d
NEED_CLOCK_GETTIME	sim_frontpanel.c	94;"	d	file:
NEED_CLOCK_GETTIME	sim_timer.h	55;"	d
NEED_OPR	PDP10/kx10_cp.c	76;"	d	file:
NEED_THREAD_PRIORITY	sim_timer.c	327;"	d	file:
NEED_THREAD_PRIORITY	sim_timer.c	332;"	d	file:
NEED_THREAD_PRIORITY	sim_timer.c	685;"	d	file:
NEG	PDP10/kx10_cpu.c	7903;"	d	file:
NEW_STS	PDP10/ka10_pmp.c	232;"	d	file:
NEXT_UNIT	PDP10/kx10_mt.c	75;"	d	file:
NEXT_UNIT_ENAB	PDP10/kx10_mt.c	105;"	d	file:
NEXT_UNIT_NUM	PDP10/kx10_mt.c	110;"	d	file:
NIA_CMD_LMAC	PDP10/kl10_nia.c	98;"	d	file:
NIA_CMD_LPTT	PDP10/kl10_nia.c	99;"	d	file:
NIA_CMD_RCNT	PDP10/kl10_nia.c	100;"	d	file:
NIA_CMD_RCV	PDP10/kl10_nia.c	101;"	d	file:
NIA_CMD_RNSA	PDP10/kl10_nia.c	104;"	d	file:
NIA_CMD_RPLI	PDP10/kl10_nia.c	103;"	d	file:
NIA_CMD_SND	PDP10/kl10_nia.c	97;"	d	file:
NIA_CMD_WNSA	PDP10/kl10_nia.c	105;"	d	file:
NIA_CMD_WPLI	PDP10/kl10_nia.c	102;"	d	file:
NIA_CNT_BR	PDP10/kl10_nia.c	140;"	d	file:
NIA_CNT_BX	PDP10/kl10_nia.c	141;"	d	file:
NIA_CNT_CDF	PDP10/kl10_nia.c	160;"	d	file:
NIA_CNT_D01	PDP10/kl10_nia.c	170;"	d	file:
NIA_CNT_D02	PDP10/kl10_nia.c	171;"	d	file:
NIA_CNT_D03	PDP10/kl10_nia.c	172;"	d	file:
NIA_CNT_D04	PDP10/kl10_nia.c	173;"	d	file:
NIA_CNT_D05	PDP10/kl10_nia.c	174;"	d	file:
NIA_CNT_D06	PDP10/kl10_nia.c	175;"	d	file:
NIA_CNT_D07	PDP10/kl10_nia.c	176;"	d	file:
NIA_CNT_D08	PDP10/kl10_nia.c	177;"	d	file:
NIA_CNT_D09	PDP10/kl10_nia.c	178;"	d	file:
NIA_CNT_D10	PDP10/kl10_nia.c	179;"	d	file:
NIA_CNT_D11	PDP10/kl10_nia.c	180;"	d	file:
NIA_CNT_D12	PDP10/kl10_nia.c	181;"	d	file:
NIA_CNT_D13	PDP10/kl10_nia.c	182;"	d	file:
NIA_CNT_D14	PDP10/kl10_nia.c	183;"	d	file:
NIA_CNT_D15	PDP10/kl10_nia.c	184;"	d	file:
NIA_CNT_D16	PDP10/kl10_nia.c	185;"	d	file:
NIA_CNT_DOV	PDP10/kl10_nia.c	187;"	d	file:
NIA_CNT_DUN	PDP10/kl10_nia.c	169;"	d	file:
NIA_CNT_FR	PDP10/kl10_nia.c	142;"	d	file:
NIA_CNT_FX	PDP10/kl10_nia.c	143;"	d	file:
NIA_CNT_FXD	PDP10/kl10_nia.c	146;"	d	file:
NIA_CNT_FXM	PDP10/kl10_nia.c	148;"	d	file:
NIA_CNT_FXS	PDP10/kl10_nia.c	147;"	d	file:
NIA_CNT_LEN	PDP10/kl10_nia.c	199;"	d	file:
NIA_CNT_MCB	PDP10/kl10_nia.c	144;"	d	file:
NIA_CNT_MCF	PDP10/kl10_nia.c	145;"	d	file:
NIA_CNT_RF	PDP10/kl10_nia.c	161;"	d	file:
NIA_CNT_RFM	PDP10/kl10_nia.c	162;"	d	file:
NIA_CNT_RS0	PDP10/kl10_nia.c	190;"	d	file:
NIA_CNT_RS1	PDP10/kl10_nia.c	191;"	d	file:
NIA_CNT_RS2	PDP10/kl10_nia.c	192;"	d	file:
NIA_CNT_RS3	PDP10/kl10_nia.c	193;"	d	file:
NIA_CNT_RS4	PDP10/kl10_nia.c	194;"	d	file:
NIA_CNT_RS5	PDP10/kl10_nia.c	195;"	d	file:
NIA_CNT_RS6	PDP10/kl10_nia.c	196;"	d	file:
NIA_CNT_RS7	PDP10/kl10_nia.c	197;"	d	file:
NIA_CNT_RS8	PDP10/kl10_nia.c	198;"	d	file:
NIA_CNT_SBU	PDP10/kl10_nia.c	188;"	d	file:
NIA_CNT_UBU	PDP10/kl10_nia.c	189;"	d	file:
NIA_CNT_UFD	PDP10/kl10_nia.c	186;"	d	file:
NIA_CNT_XF	PDP10/kl10_nia.c	149;"	d	file:
NIA_CNT_XFM	PDP10/kl10_nia.c	150;"	d	file:
NIA_CPE	PDP10/kl10_nia.c	37;"	d	file:
NIA_CPT	PDP10/kl10_nia.c	45;"	d	file:
NIA_CQA	PDP10/kl10_nia.c	53;"	d	file:
NIA_DCC	PDP10/kl10_nia.c	36;"	d	file:
NIA_DCP	PDP10/kl10_nia.c	40;"	d	file:
NIA_DEVNUM	PDP10/kl10_nia.c	30;"	d	file:
NIA_DIS	PDP10/kl10_nia.c	55;"	d	file:
NIA_DME	PDP10/kl10_nia.c	52;"	d	file:
NIA_ECP	PDP10/kl10_nia.c	41;"	d	file:
NIA_ENB	PDP10/kl10_nia.c	56;"	d	file:
NIA_EPE	PDP10/kl10_nia.c	50;"	d	file:
NIA_ERR_BLK	PDP10/kl10_nia.c	126;"	d	file:
NIA_ERR_BLV	PDP10/kl10_nia.c	135;"	d	file:
NIA_ERR_CAR	PDP10/kl10_nia.c	120;"	d	file:
NIA_ERR_COL	PDP10/kl10_nia.c	121;"	d	file:
NIA_ERR_ECL	PDP10/kl10_nia.c	119;"	d	file:
NIA_ERR_FRM	PDP10/kl10_nia.c	127;"	d	file:
NIA_ERR_INT	PDP10/kl10_nia.c	137;"	d	file:
NIA_ERR_LNG	PDP10/kl10_nia.c	124;"	d	file:
NIA_ERR_OPN	PDP10/kl10_nia.c	123;"	d	file:
NIA_ERR_OVR	PDP10/kl10_nia.c	128;"	d	file:
NIA_ERR_PAR	PDP10/kl10_nia.c	136;"	d	file:
NIA_ERR_PLI	PDP10/kl10_nia.c	133;"	d	file:
NIA_ERR_PRO	PDP10/kl10_nia.c	129;"	d	file:
NIA_ERR_QLV	PDP10/kl10_nia.c	132;"	d	file:
NIA_ERR_RMT	PDP10/kl10_nia.c	125;"	d	file:
NIA_ERR_RUN	PDP10/kl10_nia.c	130;"	d	file:
NIA_ERR_SHT	PDP10/kl10_nia.c	122;"	d	file:
NIA_ERR_UNK	PDP10/kl10_nia.c	134;"	d	file:
NIA_ERR_WCZ	PDP10/kl10_nia.c	131;"	d	file:
NIA_FLG_BSD	PDP10/kl10_nia.c	110;"	d	file:
NIA_FLG_CLRC	PDP10/kl10_nia.c	109;"	d	file:
NIA_FLG_ICRC	PDP10/kl10_nia.c	112;"	d	file:
NIA_FLG_PACK	PDP10/kl10_nia.c	113;"	d	file:
NIA_FLG_PAD	PDP10/kl10_nia.c	111;"	d	file:
NIA_FLG_RESP	PDP10/kl10_nia.c	108;"	d	file:
NIA_FQE	PDP10/kl10_nia.c	51;"	d	file:
NIA_GEB	PDP10/kl10_nia.c	47;"	d	file:
NIA_ILD	PDP10/kl10_nia.c	39;"	d	file:
NIA_LAR	PDP10/kl10_nia.c	48;"	d	file:
NIA_LRA	PDP10/kl10_nia.c	60;"	d	file:
NIA_MBE	PDP10/kl10_nia.c	38;"	d	file:
NIA_MRN	PDP10/kl10_nia.c	57;"	d	file:
NIA_MSB	PDP10/kl10_nia.c	62;"	d	file:
NIA_PIA	PDP10/kl10_nia.c	58;"	d	file:
NIA_PID	PDP10/kl10_nia.c	42;"	d	file:
NIA_PPT	PDP10/kl10_nia.c	35;"	d	file:
NIA_RAR	PDP10/kl10_nia.c	61;"	d	file:
NIA_RFM_BCE	PDP10/kl10_nia.c	167;"	d	file:
NIA_RFM_FER	PDP10/kl10_nia.c	166;"	d	file:
NIA_RFM_FLE	PDP10/kl10_nia.c	163;"	d	file:
NIA_RFM_FTL	PDP10/kl10_nia.c	165;"	d	file:
NIA_RFM_NFB	PDP10/kl10_nia.c	164;"	d	file:
NIA_RQA	PDP10/kl10_nia.c	54;"	d	file:
NIA_SEB	PDP10/kl10_nia.c	46;"	d	file:
NIA_SSC	PDP10/kl10_nia.c	49;"	d	file:
NIA_STS_CPE	PDP10/kl10_nia.c	114;"	d	file:
NIA_STS_ERR	PDP10/kl10_nia.c	116;"	d	file:
NIA_STS_SR	PDP10/kl10_nia.c	115;"	d	file:
NIA_XFM_CCF	PDP10/kl10_nia.c	157;"	d	file:
NIA_XFM_EXC	PDP10/kl10_nia.c	158;"	d	file:
NIA_XFM_LOC	PDP10/kl10_nia.c	151;"	d	file:
NIA_XFM_OC	PDP10/kl10_nia.c	155;"	d	file:
NIA_XFM_RFD	PDP10/kl10_nia.c	153;"	d	file:
NIA_XFM_SC	PDP10/kl10_nia.c	156;"	d	file:
NIA_XFM_XBP	PDP10/kl10_nia.c	152;"	d	file:
NIA_XFM_XFL	PDP10/kl10_nia.c	154;"	d	file:
NI_MAXHOST	sim_sock.c	71;"	d	file:
NLEVELS	display/display.c	324;"	d	file:
NO	PDP10/kx10_dp.c	101;"	d	file:
NODIV	PDP10/kx10_defs.h	261;"	d
NODIV	PDP10/kx10_defs.h	264;"	d
NOP	PDP10/pdp6_mtc.c	62;"	d	file:
NOP_1	PDP10/pdp6_mtc.c	63;"	d	file:
NOP_CLR	PDP10/kx10_mt.c	57;"	d	file:
NOP_IDLE	PDP10/kx10_mt.c	58;"	d	file:
NOQUEUE_WAIT	sim_defs.h	445;"	d
NOT_MUX_USING_CODE	scp.c	217;"	d	file:
NOT_MUX_USING_CODE	sim_timer.c	86;"	d	file:
NOT_MUX_USING_CODE	sim_tmxr.c	332;"	d	file:
NOT_RDY	PDP10/kx10_dp.c	67;"	d	file:
NOT_RDY	PDP10/kx10_rc.c	73;"	d	file:
NO_DRIVE	PDP10/kx10_dp.c	113;"	d	file:
NO_PROTOTYPES	slirp/slirp_config.h	127;"	d
NO_PROTOTYPES	slirp/slirp_config.h	42;"	d
NO_TAPE_PP	PDP10/kx10_pt.c	45;"	d	file:
NO_UNIX_SOCKETS	slirp/slirp_config.h	172;"	d
NO_UNIX_SOCKETS	slirp/slirp_config.h	174;"	d
NO_vsnprintf	sim_defs.h	273;"	d
NSTS_CLR	PDP10/ka10_pmp.c	274;"	d	file:
NTOHL	slirp/ip.h	37;"	d
NTOHL	slirp/ip.h	41;"	d
NTOHL	slirp/ip.h	47;"	d
NTOHS	slirp/ip.h	38;"	d
NTOHS	slirp/ip.h	42;"	d
NTOHS	slirp/ip.h	50;"	d
NTTL	display/display.c	312;"	d	file:
NULL	slirp/slirp.h	274;"	d
NULL_DEVICE	sim_defs.h	303;"	d
NULL_DEVICE	sim_defs.h	305;"	d
NULL_DEVICE	sim_defs.h	307;"	d
NUL_CHAR	sim_console.c	3662;"	d	file:
NUMDEV	PDP10/kx10_sys.c	1153;"	d	file:
NUM_CHARS	PDP10/pdp6_dct.c	45;"	d	file:
NUM_DEVS_AI	PDP10/ka10_ai.c	30;"	d	file:
NUM_DEVS_AI	PDP10/kx10_defs.h	786;"	d
NUM_DEVS_AUXCPU	PDP10/ka10_auxcpu.c	30;"	d	file:
NUM_DEVS_AUXCPU	PDP10/kx10_defs.h	782;"	d
NUM_DEVS_CH10	PDP10/ka10_ch10.c	35;"	d	file:
NUM_DEVS_CH10	PDP10/kx10_defs.h	784;"	d
NUM_DEVS_CH10	PDP10/kx10_defs.h	791;"	d
NUM_DEVS_CH11	PDP10/ks10_ch11.c	35;"	d	file:
NUM_DEVS_CH11	PDP10/kx10_defs.h	752;"	d
NUM_DEVS_CP	PDP10/kx10_defs.h	721;"	d
NUM_DEVS_CR	PDP10/kx10_defs.h	720;"	d
NUM_DEVS_DC	PDP10/kx10_dc.c	33;"	d	file:
NUM_DEVS_DC	PDP10/kx10_defs.h	735;"	d
NUM_DEVS_DCS	PDP10/kx10_defs.h	731;"	d
NUM_DEVS_DCS	PDP10/pdp6_dcs.c	33;"	d	file:
NUM_DEVS_DCT	PDP10/kx10_defs.h	728;"	d
NUM_DEVS_DCT	PDP10/pdp6_dct.c	27;"	d	file:
NUM_DEVS_DK	PDP10/kx10_defs.h	758;"	d
NUM_DEVS_DK	PDP10/kx10_dk.c	31;"	d	file:
NUM_DEVS_DKB	PDP10/ka10_dkb.c	30;"	d	file:
NUM_DEVS_DKB	PDP10/kx10_defs.h	772;"	d
NUM_DEVS_DN	PDP10/kl10_dn.c	34;"	d	file:
NUM_DEVS_DN	PDP10/kx10_defs.h	743;"	d
NUM_DEVS_DP	PDP10/kx10_defs.h	759;"	d
NUM_DEVS_DP	PDP10/kx10_dp.c	28;"	d	file:
NUM_DEVS_DPK	PDP10/kx10_defs.h	785;"	d
NUM_DEVS_DPY	PDP10/kx10_defs.h	723;"	d
NUM_DEVS_DPY	PDP10/kx10_dpy.c	115;"	d	file:
NUM_DEVS_DSK	PDP10/kx10_defs.h	730;"	d
NUM_DEVS_DSK	PDP10/pdp6_dsk.c	27;"	d	file:
NUM_DEVS_DT	PDP10/kx10_defs.h	757;"	d
NUM_DEVS_DT	PDP10/kx10_dt.c	88;"	d	file:
NUM_DEVS_DTC	PDP10/kx10_defs.h	727;"	d
NUM_DEVS_DTC	PDP10/pdp6_dtc.c	90;"	d	file:
NUM_DEVS_DUP	PDP10/kx10_defs.h	748;"	d
NUM_DEVS_DZ	PDP10/ks10_dz.c	33;"	d	file:
NUM_DEVS_DZ	PDP10/kx10_defs.h	746;"	d
NUM_DEVS_III	PDP10/ka10_iii.c	30;"	d	file:
NUM_DEVS_III	PDP10/kx10_defs.h	773;"	d
NUM_DEVS_IMP	PDP10/kx10_defs.h	751;"	d
NUM_DEVS_IMP	PDP10/kx10_defs.h	783;"	d
NUM_DEVS_IMP	PDP10/kx10_defs.h	790;"	d
NUM_DEVS_IMX	PDP10/ka10_imx.c	30;"	d	file:
NUM_DEVS_IMX	PDP10/kx10_defs.h	777;"	d
NUM_DEVS_KMC	PDP10/kx10_defs.h	749;"	d
NUM_DEVS_LP	PDP10/kx10_defs.h	716;"	d
NUM_DEVS_LP	PDP10/kx10_lp.c	32;"	d	file:
NUM_DEVS_LP20	PDP10/kl10_fe.c	321;"	d	file:
NUM_DEVS_LP20	PDP10/ks10_lp.c	33;"	d	file:
NUM_DEVS_LP20	PDP10/kx10_defs.h	739;"	d
NUM_DEVS_LP20	PDP10/kx10_defs.h	745;"	d
NUM_DEVS_MT	PDP10/kx10_defs.h	736;"	d
NUM_DEVS_MT	PDP10/kx10_mt.c	41;"	d	file:
NUM_DEVS_MTC	PDP10/kx10_defs.h	729;"	d
NUM_DEVS_MTC	PDP10/pdp6_mtc.c	41;"	d	file:
NUM_DEVS_MTY	PDP10/ka10_mty.c	31;"	d	file:
NUM_DEVS_MTY	PDP10/kx10_defs.h	780;"	d
NUM_DEVS_NIA	PDP10/kx10_defs.h	742;"	d
NUM_DEVS_OCNSLS	PDP10/kx10_defs.h	725;"	d
NUM_DEVS_PCLK	PDP10/ka10_pclk.c	28;"	d	file:
NUM_DEVS_PCLK	PDP10/kx10_defs.h	776;"	d
NUM_DEVS_PD	PDP10/ka10_pd.c	36;"	d	file:
NUM_DEVS_PD	PDP10/kx10_defs.h	775;"	d
NUM_DEVS_PD	PDP10/kx10_defs.h	789;"	d
NUM_DEVS_PMP	PDP10/ka10_pmp.c	63;"	d	file:
NUM_DEVS_PMP	PDP10/kx10_defs.h	771;"	d
NUM_DEVS_PT	PDP10/kx10_defs.h	719;"	d
NUM_DEVS_PT	PDP10/kx10_pt.c	30;"	d	file:
NUM_DEVS_RC	PDP10/kx10_defs.h	756;"	d
NUM_DEVS_RC	PDP10/kx10_rc.c	27;"	d	file:
NUM_DEVS_RP	PDP10/kx10_defs.h	762;"	d
NUM_DEVS_RP	PDP10/kx10_defs.h	764;"	d
NUM_DEVS_RP	PDP10/kx10_rp.c	28;"	d	file:
NUM_DEVS_RS	PDP10/kx10_defs.h	765;"	d
NUM_DEVS_RS	PDP10/kx10_rs.c	27;"	d	file:
NUM_DEVS_SLAVE	PDP10/kx10_defs.h	732;"	d
NUM_DEVS_SLAVE	PDP10/pdp6_slave.c	31;"	d	file:
NUM_DEVS_STK	PDP10/kx10_defs.h	778;"	d
NUM_DEVS_TCU	PDP10/ks10_tcu.c	33;"	d	file:
NUM_DEVS_TCU	PDP10/kx10_defs.h	747;"	d
NUM_DEVS_TEN11	PDP10/ka10_ten11.c	30;"	d	file:
NUM_DEVS_TEN11	PDP10/kx10_defs.h	781;"	d
NUM_DEVS_TK10	PDP10/ka10_tk10.c	31;"	d	file:
NUM_DEVS_TK10	PDP10/kx10_defs.h	779;"	d
NUM_DEVS_TTY	PDP10/kl10_fe.c	478;"	d	file:
NUM_DEVS_TTY	PDP10/kx10_defs.h	740;"	d
NUM_DEVS_TU	PDP10/kx10_defs.h	768;"	d
NUM_DEVS_TU	PDP10/kx10_tu.c	28;"	d	file:
NUM_DEVS_TV	PDP10/kx10_defs.h	774;"	d
NUM_DEVS_WCNSLS	PDP10/kx10_defs.h	724;"	d
NUM_DLS	PDP10/kl10_dn.c	174;"	d	file:
NUM_DLS	PDP10/kl10_fe.c	168;"	d	file:
NUM_LINES_TTY	PDP10/kx10_defs.h	741;"	d
NUM_UNITS	PDP10/ka10_ai.c	58;"	d	file:
NUM_UNITS_DP	PDP10/kx10_dp.c	38;"	d	file:
NUM_UNITS_DSK	PDP10/pdp6_dsk.c	33;"	d	file:
NUM_UNITS_PMP	PDP10/ka10_pmp.c	80;"	d	file:
NUM_UNITS_RC	PDP10/kx10_rc.c	33;"	d	file:
NUM_UNITS_RP	PDP10/kx10_rp.c	36;"	d	file:
NUM_UNITS_RS	PDP10/kx10_rs.c	35;"	d	file:
NUM_UNITS_TU	PDP10/kx10_tu.c	33;"	d	file:
NXM_BIT	PDP10/ka10_iii.c	61;"	d	file:
NXM_ERR	PDP10/ka10_pmp.c	219;"	d	file:
NXM_ERR	PDP10/kx10_dp.c	69;"	d	file:
NXM_ERR	PDP10/kx10_mt.c	95;"	d	file:
NXM_ERR	PDP10/kx10_rc.c	78;"	d	file:
NXM_FLG	PDP10/ka10_iii.c	79;"	d	file:
NXM_MEM	PDP10/kx10_defs.h	219;"	d
NXM_MEM	PDP10/kx10_defs.h	227;"	d
NtoHl	sim_disk.c	/^NtoHl(uint32 value)$/;"	f	file:
NtoHll	sim_disk.c	/^NtoHll(uint64 value)$/;"	f	file:
OBJS	Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
OCCW	PDP10/kx10_dpy.c	803;"	d	file:
OCNSLS_DEVNUM	PDP10/kx10_dpy.c	775;"	d	file:
OCW	PDP10/kx10_dpy.c	802;"	d	file:
ODD_PAR	PDP10/ks10_dz.c	69;"	d	file:
ODD_PARITY	PDP10/kx10_mt.c	108;"	d	file:
ODD_PARITY	PDP10/pdp6_mtc.c	82;"	d	file:
ODS1_FileHeader	sim_disk.c	/^    } ODS1_FileHeader;$/;"	t	typeref:struct:_ODS1_FileHeader	file:
ODS1_HomeBlock	sim_disk.c	/^    } ODS1_HomeBlock;$/;"	t	typeref:struct:_ODS1_HomeBlock	file:
ODS1_Retreval	sim_disk.c	/^    } ODS1_Retreval;$/;"	t	typeref:struct:_ODS1_Retreval	file:
ODS1_SCB	sim_disk.c	/^    } ODS1_SCB;$/;"	t	typeref:struct:_ODS1_StorageControlBlock	file:
ODS2_FileHeader	sim_disk.c	/^    } ODS2_FileHeader;$/;"	t	typeref:struct:_ODS2_FileHeader	file:
ODS2_HomeBlock	sim_disk.c	/^    } ODS2_HomeBlock;$/;"	t	typeref:struct:_ODS2_HomeBlock	file:
ODS2_Retreval	sim_disk.c	/^    } ODS2_Retreval;$/;"	t	typeref:union:_ODS2_Retreval	file:
ODS2_SCB	sim_disk.c	/^    } ODS2_SCB;$/;"	t	typeref:struct:_ODS2_StorageControlBlock	file:
ODSChecksum	sim_disk.c	/^ODSChecksum (void *Buffer, uint16 WordCount)$/;"	f	file:
OFFSET	display/vtmacs.h	245;"	d
OFFSET3	display/vtmacs.h	248;"	d
OFFSET_CARD	PDP10/kx10_cp.c	61;"	d	file:
OFFSET_CARD	PDP10/kx10_cr.c	59;"	d	file:
OFF_HOOK	PDP10/kx10_dc.c	68;"	d	file:
OFIRE	PDP10/kx10_dpy.c	801;"	d	file:
OF_ECI	PDP10/kx10_rp.c	160;"	d	file:
OF_F22	PDP10/kx10_rp.c	161;"	d	file:
OF_HCI	PDP10/kx10_rp.c	159;"	d	file:
OF_MBZ	PDP10/kx10_rp.c	162;"	d	file:
OHYPER	PDP10/kx10_dpy.c	800;"	d	file:
OID_802_3_CURRENT_ADDRESS	sim_ether.c	1581;"	d	file:
ONCRT	display/vt11.c	596;"	d	file:
ONEP	PDP10/kx10_defs.h	307;"	d
ONE_MS	PDP10/ks10_cty.c	51;"	d	file:
ONSCREEN	display/vt11.c	628;"	d	file:
ONSCREEN	display/vt11.c	632;"	d	file:
ON_ACT	sim_tmxr.c	446;"	d	file:
ON_CLKOK	sim_tmxr.c	448;"	d	file:
ON_CYL	PDP10/kx10_dp.c	116;"	d	file:
ON_SIGINT_ACTION	scp.c	655;"	d	file:
ON_SYN	sim_tmxr.c	447;"	d	file:
OP	PDP10/kx10_dp.c	93;"	d	file:
OP1	PDP10/ka10_pmp.c	257;"	d	file:
OPL	PDP10/ka10_pmp.c	267;"	d	file:
OPL_RESET	PDP10/ka10_pmp.c	280;"	d	file:
OPOS	PDP10/kx10_imp.c	182;"	d	file:
OPR	PDP10/pdp6_dsk.c	76;"	d	file:
OPTS	Makefile	/^OPTS = -DNO_GPIO$/;"	m
OPT_HEADER_LEN	slirp/dnssearch.c	/^static const uint8_t OPT_HEADER_LEN = 2;$/;"	v	file:
OP_JRST	PDP10/kx10_defs.h	245;"	d
OP_JSR	PDP10/kx10_defs.h	248;"	d
OP_JUMPA	PDP10/kx10_defs.h	246;"	d
OP_PORTAL	PDP10/kx10_defs.h	258;"	d
ORANGE	display/vt11.c	/^enum scolor { GREEN=0, YELLOW, ORANGE, RED };$/;"	e	enum:scolor	file:
ORDATA	sim_defs.h	1006;"	d
ORDATA	sim_defs.h	918;"	d
ORDATAD	sim_defs.h	1008;"	d
ORDATAD	sim_defs.h	920;"	d
ORDATADF	sim_defs.h	1010;"	d
ORDATADF	sim_defs.h	922;"	d
OUT_GPIO	PDP10/pidp10panel.c	66;"	d	file:
OVER	PDP10/ka10_ch10.c	58;"	d	file:
OVER_CLR	PDP10/kx10_rh.c	136;"	d	file:
OVR	PDP10/kx10_defs.h	297;"	d
OVRN	PDP10/ks10_dz.c	61;"	d	file:
OVRRUN	PDP10/kx10_rc.c	80;"	d	file:
O_BINARY	slirp/slirp.h	25;"	d
O_BINARY	slirp_glue/qemu/osdep.h	93;"	d
O_BINARY	slirp_glue/qemu/qemu-common.h	22;"	d
O_LARGEFILE	slirp_glue/qemu/osdep.h	90;"	d
O_NONBLOCK	sim_console.c	4010;"	d	file:
O_NONBLOCK	sim_console.c	4013;"	d	file:
Oid	sim_ether.c	/^    uint32 Oid;                 \/\/\/< OID code. See the Microsoft DDK documentation or the file ntddndis.h$/;"	m	struct:_PACKET_OID_DATA	file:
OperationalState	sim_frontpanel.h	/^    } OperationalState;$/;"	t	typeref:enum:__anon23
Operator	scp.c	/^    } Operator;$/;"	t	typeref:struct:Operator	file:
Operator	scp.c	/^typedef struct Operator {$/;"	s	file:
Operator_Function	scp.c	/^typedef t_svalue (*Operator_Function)(t_svalue, t_svalue);$/;"	t	file:
Operator_String_Function	scp.c	/^typedef t_svalue (*Operator_String_Function)(const char *, const char *);$/;"	t	file:
OriginalSize	sim_disk.c	/^    uint64 OriginalSize;$/;"	m	struct:_VHD_Footer	file:
P	display/display.c	381;"	d	file:
P	display/tst340.c	222;"	d	file:
P10	PDP10/kx10_cpu.c	708;"	d	file:
P10	PDP10/kx10_cpu.c	711;"	d	file:
P6	PDP10/kx10_cpu.c	707;"	d	file:
P6	PDP10/kx10_cpu.c	710;"	d	file:
P7B_DATA	sim_tape.h	74;"	d
P7B_DPAR	sim_tape.h	75;"	d
P7B_EOF	sim_tape.h	76;"	d
P7B_PAR	sim_tape.h	73;"	d
P7B_SOR	sim_tape.h	72;"	d
PACK	PDP10/pdp6_dct.c	39;"	d	file:
PACKED	sim_defs.h	141;"	d
PACKED_BEGIN	sim_defs.h	326;"	d
PACKED_BEGIN	sim_defs.h	329;"	d
PACKED_BEGIN	slirp/ip.h	63;"	d
PACKED_BEGIN	slirp/ip.h	66;"	d
PACKED_END	PDP10/kl10_nia.c	/^} PACKED_END;$/;"	v	typeref:struct:arp_hdr
PACKED_END	PDP10/kl10_nia.c	/^} PACKED_END;$/;"	v	typeref:struct:icmp
PACKED_END	PDP10/kl10_nia.c	/^} PACKED_END;$/;"	v	typeref:struct:ip
PACKED_END	PDP10/kl10_nia.c	/^} PACKED_END;$/;"	v	typeref:struct:ip_hdr
PACKED_END	PDP10/kl10_nia.c	/^} PACKED_END;$/;"	v	typeref:struct:nia_eth_hdr
PACKED_END	PDP10/kl10_nia.c	/^} PACKED_END;$/;"	v	typeref:struct:tcp
PACKED_END	PDP10/kl10_nia.c	/^} PACKED_END;$/;"	v	typeref:struct:udp
PACKED_END	PDP10/kl10_nia.c	/^} PACKED_END;$/;"	v	typeref:struct:udp_hdr
PACKED_END	PDP10/kx10_imp.c	/^} PACKED_END;$/;"	v	typeref:struct:arp_hdr
PACKED_END	PDP10/kx10_imp.c	/^} PACKED_END;$/;"	v	typeref:struct:dhcp
PACKED_END	PDP10/kx10_imp.c	/^} PACKED_END;$/;"	v	typeref:struct:icmp
PACKED_END	PDP10/kx10_imp.c	/^} PACKED_END;$/;"	v	typeref:struct:imp_eth_hdr
PACKED_END	PDP10/kx10_imp.c	/^} PACKED_END;$/;"	v	typeref:struct:ip
PACKED_END	PDP10/kx10_imp.c	/^} PACKED_END;$/;"	v	typeref:struct:ip_hdr
PACKED_END	PDP10/kx10_imp.c	/^} PACKED_END;$/;"	v	typeref:struct:tcp
PACKED_END	PDP10/kx10_imp.c	/^} PACKED_END;$/;"	v	typeref:struct:udp
PACKED_END	PDP10/kx10_imp.c	/^} PACKED_END;$/;"	v	typeref:struct:udp_hdr
PACKED_END	sim_defs.h	327;"	d
PACKED_END	sim_defs.h	331;"	d
PACKED_END	sim_defs.h	333;"	d
PACKED_END	slirp/ip.h	/^} PACKED_END;$/;"	v	typeref:struct:ip
PACKED_END	slirp/ip.h	/^} PACKED_END;$/;"	v	typeref:struct:ip_timestamp
PACKED_END	slirp/ip.h	/^} PACKED_END;$/;"	v	typeref:struct:ipasfrag
PACKED_END	slirp/ip.h	/^} PACKED_END;$/;"	v	typeref:struct:ipoption
PACKED_END	slirp/ip.h	/^} PACKED_END;$/;"	v	typeref:struct:ipovly
PACKED_END	slirp/ip.h	/^} PACKED_END;$/;"	v	typeref:struct:ipq
PACKED_END	slirp/ip.h	/^} PACKED_END;$/;"	v	typeref:struct:mbuf_ptr
PACKED_END	slirp/ip.h	64;"	d
PACKED_END	slirp/ip.h	68;"	d
PACKED_END	slirp/ip.h	70;"	d
PACKED_END	slirp/slirp.h	/^} PACKED_END;$/;"	v	typeref:struct:arphdr
PACKED_END	slirp/slirp.h	/^} PACKED_END;$/;"	v	typeref:struct:ethhdr
PACKET_DATA_AVAILABLE_CALLBACK	PDP10/ks10_dup.h	/^typedef void (*PACKET_DATA_AVAILABLE_CALLBACK)(int32 dup, int len);$/;"	t
PACKET_OID_DATA	sim_ether.c	/^typedef struct _PACKET_OID_DATA PACKET_OID_DATA, *PPACKET_OID_DATA;$/;"	t	typeref:struct:_PACKET_OID_DATA	file:
PACKET_TRANSMIT_COMPLETE_CALLBACK	PDP10/ks10_dup.h	/^typedef void (*PACKET_TRANSMIT_COMPLETE_CALLBACK)(int32 dup, int status);$/;"	t
PAGESIZE	sim_defs.h	177;"	d
PAGE_MASK	PDP10/ks10_uba.c	27;"	d	file:
PAG_SIZE	PDP10/kx10_sys.c	648;"	d	file:
PAG_V_PN	PDP10/kx10_sys.c	649;"	d	file:
PANEL	sim_frontpanel.c	/^struct PANEL {$/;"	s	file:
PANEL	sim_frontpanel.h	/^typedef struct PANEL PANEL;$/;"	t	typeref:struct:PANEL
PANEL_DISPLAY_PCALLBACK	sim_frontpanel.h	/^typedef void (*PANEL_DISPLAY_PCALLBACK)(PANEL *panel, $/;"	t
PAR1_ERR	PDP10/ka10_pmp.c	223;"	d	file:
PAR2_ERR	PDP10/ka10_pmp.c	224;"	d	file:
PARAM	display/type340.c	/^enum mode { PARAM=0, POINT, SLAVE, CHAR, VECTOR, VCONT, INCR, SUBR };$/;"	e	enum:mode	file:
PARCSR_MBZ	PDP10/ks10_dup.c	224;"	d	file:
PARCSR_M_ADSYNC	PDP10/ks10_dup.c	209;"	d	file:
PARCSR_M_DECMODE	PDP10/ks10_dup.c	221;"	d	file:
PARCSR_M_NOCRC	PDP10/ks10_dup.c	213;"	d	file:
PARCSR_M_SECMODE	PDP10/ks10_dup.c	217;"	d	file:
PARCSR_S_ADSYNC	PDP10/ks10_dup.c	208;"	d	file:
PARCSR_V_ADSYNC	PDP10/ks10_dup.c	207;"	d	file:
PARCSR_V_DECMODE	PDP10/ks10_dup.c	220;"	d	file:
PARCSR_V_NOCRC	PDP10/ks10_dup.c	212;"	d	file:
PARCSR_V_SECMODE	PDP10/ks10_dup.c	216;"	d	file:
PARCSR_WRITEABLE	PDP10/ks10_dup.c	225;"	d	file:
PARITY_ERR	PDP10/kx10_mt.c	87;"	d	file:
PARITY_ERR	PDP10/pdp6_mtc.c	93;"	d	file:
PARITY_ERRL	PDP10/pdp6_mtc.c	94;"	d	file:
PAR_ENB	PDP10/ks10_cty.c	55;"	d	file:
PAR_ENB	PDP10/ks10_dz.c	68;"	d	file:
PAR_ERR	PDP10/ka10_pmp.c	229;"	d	file:
PAR_ERR	PDP10/ks10_dz.c	59;"	d	file:
PATH_MAX	sim_defs.h	342;"	d
PC	PDP10/kx10_cpu.c	/^t_addr  PC;                                   \/* Program counter *\/$/;"	v
PCAP_ERRBUF_SIZE	sim_ether.c	1026;"	d	file:
PCAP_READ_TIMEOUT	sim_ether.h	100;"	d
PCAP_READ_TIMEOUT	sim_ether.h	102;"	d
PCAP_READ_TIMEOUT	sim_ether.h	116;"	d
PCAP_READ_TIMEOUT	sim_ether.h	117;"	d
PCB_CCW	PDP10/kl10_nia.c	88;"	d	file:
PCB_CQB	PDP10/kl10_nia.c	67;"	d	file:
PCB_CQF	PDP10/kl10_nia.c	66;"	d	file:
PCB_CQI	PDP10/kl10_nia.c	65;"	d	file:
PCB_EPA	PDP10/kl10_nia.c	83;"	d	file:
PCB_EPW	PDP10/kl10_nia.c	84;"	d	file:
PCB_ER0	PDP10/kl10_nia.c	81;"	d	file:
PCB_ER1	PDP10/kl10_nia.c	82;"	d	file:
PCB_MCT	PDP10/kl10_nia.c	79;"	d	file:
PCB_PCB	PDP10/kl10_nia.c	85;"	d	file:
PCB_PIA	PDP10/kl10_nia.c	86;"	d	file:
PCB_PTT	PDP10/kl10_nia.c	78;"	d	file:
PCB_RCB	PDP10/kl10_nia.c	89;"	d	file:
PCB_RS0	PDP10/kl10_nia.c	68;"	d	file:
PCB_RS1	PDP10/kl10_nia.c	72;"	d	file:
PCB_RS2	PDP10/kl10_nia.c	77;"	d	file:
PCB_RS3	PDP10/kl10_nia.c	80;"	d	file:
PCB_RS4	PDP10/kl10_nia.c	87;"	d	file:
PCB_RSB	PDP10/kl10_nia.c	71;"	d	file:
PCB_RSF	PDP10/kl10_nia.c	70;"	d	file:
PCB_RSI	PDP10/kl10_nia.c	69;"	d	file:
PCB_UPB	PDP10/kl10_nia.c	75;"	d	file:
PCB_UPF	PDP10/kl10_nia.c	74;"	d	file:
PCB_UPI	PDP10/kl10_nia.c	73;"	d	file:
PCB_UPL	PDP10/kl10_nia.c	76;"	d	file:
PCHNG	PDP10/kx10_defs.h	290;"	d
PCHNG	PDP10/kx10_defs.h	293;"	d
PCLK_DEVNUM	PDP10/ka10_pclk.c	33;"	d	file:
PCLK_OFF	PDP10/ka10_pclk.c	34;"	d	file:
PC_CHANGE	PDP10/kx10_cpu.c	715;"	d	file:
PC_CHANGE	PDP10/kx10_cpu.c	717;"	d	file:
PD	display/type340cmd.h	169;"	d
PDL	display/type340cmd.h	174;"	d
PDP11_DDCMP_H_	PDP10/pdp11_ddcmp.h	32;"	d
PDP11_DUP_H_	PDP10/ks10_dup.h	36;"	d
PDP6	PDP10/kx10_defs.h	38;"	d
PDP6_DEV	PDP10/kx10_defs.h	95;"	d
PDR	display/type340cmd.h	175;"	d
PD_DEVNUM	PDP10/ka10_pd.c	41;"	d	file:
PD_OFF	PDP10/ka10_pd.c	42;"	d	file:
PEN_RADIUS	display/display.c	76;"	d	file:
PER	PDP10/pdp6_dsk.c	74;"	d	file:
PFAIL	PDP10/kx10_defs.h	214;"	d
PFAIL	PDP10/kx10_defs.h	228;"	d
PG_AGE	PDP10/kx10_cpu.c	1891;"	d	file:
PG_AGE	PDP10/kx10_cpu.c	2384;"	d	file:
PG_CAC	PDP10/kx10_cpu.c	1886;"	d	file:
PG_CAC	PDP10/kx10_cpu.c	2379;"	d	file:
PG_IDX	PDP10/kx10_cpu.c	1888;"	d	file:
PG_IDX	PDP10/kx10_cpu.c	2381;"	d	file:
PG_KEP	PDP10/kx10_cpu.c	1885;"	d	file:
PG_KEP	PDP10/kx10_cpu.c	2378;"	d	file:
PG_MASK	PDP10/kx10_cpu.c	1890;"	d	file:
PG_MASK	PDP10/kx10_cpu.c	2383;"	d	file:
PG_PAG	PDP10/kx10_cpu.c	1892;"	d	file:
PG_PAG	PDP10/kx10_cpu.c	2385;"	d	file:
PG_PUB	PDP10/kx10_cpu.c	1883;"	d	file:
PG_PUB	PDP10/kx10_cpu.c	2376;"	d	file:
PG_STG	PDP10/kx10_cpu.c	1887;"	d	file:
PG_STG	PDP10/kx10_cpu.c	2380;"	d	file:
PG_WRT	PDP10/kx10_cpu.c	1884;"	d	file:
PG_WRT	PDP10/kx10_cpu.c	2377;"	d	file:
PI	PDP10/kx10_rc.c	60;"	d	file:
PIA	PDP10/ka10_auxcpu.c	51;"	d	file:
PIA	PDP10/ka10_ch10.c	42;"	d	file:
PIA	PDP10/ka10_dkb.c	52;"	d	file:
PIA	PDP10/ka10_iii.c	40;"	d	file:
PIA	PDP10/ka10_pmp.c	242;"	d	file:
PIA	PDP10/kx10_cp.c	65;"	d	file:
PIA	PDP10/kx10_cr.c	51;"	d	file:
PIA	PDP10/kx10_cty.c	56;"	d	file:
PIA	PDP10/kx10_dk.c	43;"	d	file:
PIA	PDP10/pdp6_dct.c	37;"	d	file:
PIA	PDP10/pdp6_dsk.c	49;"	d	file:
PIA	PDP10/pdp6_slave.c	52;"	d	file:
PIA_CH	PDP10/ka10_pclk.c	35;"	d	file:
PIA_CH	PDP10/ka10_pd.c	44;"	d	file:
PIA_FLG	PDP10/ka10_pclk.c	36;"	d	file:
PIA_FLG	PDP10/ka10_pd.c	46;"	d	file:
PIA_MSK	PDP10/ka10_iii.c	53;"	d	file:
PICK_ERROR	PDP10/kx10_cr.c	74;"	d	file:
PICK_FAIL	PDP10/kx10_cp.c	75;"	d	file:
PIDPContState	PDP10/kx10_cpu.c	/^int PIDPContState = 0;$/;"	v
PIDPMomentaryStateDN	PDP10/kx10_cpu.c	/^int PIDPMomentaryStateET = 0, PIDPMomentaryStateEN = 0, PIDPMomentaryStateDT = 0, PIDPMomentaryStateDN = 0;$/;"	v
PIDPMomentaryStateDT	PDP10/kx10_cpu.c	/^int PIDPMomentaryStateET = 0, PIDPMomentaryStateEN = 0, PIDPMomentaryStateDT = 0, PIDPMomentaryStateDN = 0;$/;"	v
PIDPMomentaryStateEN	PDP10/kx10_cpu.c	/^int PIDPMomentaryStateET = 0, PIDPMomentaryStateEN = 0, PIDPMomentaryStateDT = 0, PIDPMomentaryStateDN = 0;$/;"	v
PIDPMomentaryStateET	PDP10/kx10_cpu.c	/^int PIDPMomentaryStateET = 0, PIDPMomentaryStateEN = 0, PIDPMomentaryStateDT = 0, PIDPMomentaryStateDN = 0;$/;"	v
PIDPMomentaryStateRS	PDP10/kx10_cpu.c	/^int PIDPMomentaryStateST = 0, PIDPMomentaryStateSTRT=0, PIDPMomentaryStateRS = 0, PIDPMomentaryStateXC = 0;$/;"	v
PIDPMomentaryStateST	PDP10/kx10_cpu.c	/^int PIDPMomentaryStateST = 0, PIDPMomentaryStateSTRT=0, PIDPMomentaryStateRS = 0, PIDPMomentaryStateXC = 0;$/;"	v
PIDPMomentaryStateSTRT	PDP10/kx10_cpu.c	/^int PIDPMomentaryStateST = 0, PIDPMomentaryStateSTRT=0, PIDPMomentaryStateRS = 0, PIDPMomentaryStateXC = 0;$/;"	v
PIDPMomentaryStateXC	PDP10/kx10_cpu.c	/^int PIDPMomentaryStateST = 0, PIDPMomentaryStateSTRT=0, PIDPMomentaryStateRS = 0, PIDPMomentaryStateXC = 0;$/;"	v
PIDPReadinState	PDP10/kx10_cpu.c	/^int PIDPReadinState = 0;$/;"	v
PIDPStopState	PDP10/kx10_cpu.c	/^int PIDPStopState = 0;$/;"	v
PIE	PDP10/kx10_cpu.c	/^uint8   PIE;                                  \/* Priority enable mask *\/$/;"	v
PIH	PDP10/kx10_cpu.c	/^uint8   PIH;                                  \/* Highest priority *\/$/;"	v
PIR	PDP10/kx10_cpu.c	/^uint8   PIR;                                  \/* Current priority level *\/$/;"	v
PIX_SCALE	display/display.c	71;"	d	file:
PIX_SCALE	display/ng.h	46;"	d
PIX_SCALE	display/vt11.h	80;"	d
PIX_SIZE	display/carbon.c	26;"	d	file:
PIX_SIZE	display/sim_ws.c	48;"	d	file:
PIX_SIZE	display/win32.c	53;"	d	file:
PIX_SIZE	display/x11.c	66;"	d	file:
PI_ACT	PDP10/ka10_pmp.c	241;"	d	file:
PI_CHN	PDP10/kx10_dc.c	46;"	d	file:
PI_DONE	PDP10/kx10_lp.c	51;"	d	file:
PI_DONE	PDP10/kx10_pt.c	41;"	d	file:
PI_ENABLE	PDP10/kx10_defs.h	347;"	d
PI_ERROR	PDP10/kx10_lp.c	52;"	d	file:
PK_LVL0	sim_disk.c	1474;"	d	file:
PK_LVL11	sim_disk.c	1475;"	d	file:
PK_LVL12	sim_disk.c	1476;"	d	file:
PK_UC_NEW	sim_disk.c	1479;"	d	file:
PL	display/type340cmd.h	167;"	d
PLE	PDP10/ka10_ch10.c	57;"	d	file:
PMASK	PDP10/kx10_defs.h	178;"	d
PMASK	sim_defs.h	171;"	d
PMP_DEV	PDP10/ka10_pmp.c	82;"	d	file:
PND	PDP10/kx10_dc.c	63;"	d	file:
PNORM	display/vt11.c	208;"	d	file:
POINT	display/type340.c	/^enum mode { PARAM=0, POINT, SLAVE, CHAR, VECTOR, VCONT, INCR, SUBR };$/;"	e	enum:mode	file:
POINT	display/vt11.c	/^enum gmode { CHAR=0, SVECTOR, LVECTOR, POINT, GRAPHX, GRAPHY, RELPOINT, \/* all *\/$/;"	e	enum:gmode	file:
PORT_INPUT	PDP10/ka10_dpk.c	64;"	d	file:
PORT_OUTPUT	PDP10/ka10_dpk.c	63;"	d	file:
POS	PDP10/ka10_iii.c	41;"	d	file:
POS	PDP10/ka10_pmp.c	145;"	d	file:
POS	PDP10/kl10_fe.c	327;"	d	file:
POS	PDP10/kx10_lp.c	40;"	d	file:
POS_X	PDP10/ka10_iii.c	91;"	d	file:
POS_X_V	PDP10/ka10_iii.c	95;"	d	file:
POS_Y	PDP10/ka10_iii.c	92;"	d	file:
POS_Y_V	PDP10/ka10_iii.c	96;"	d	file:
PPACKET_OID_DATA	sim_ether.c	/^typedef struct _PACKET_OID_DATA PACKET_OID_DATA, *PPACKET_OID_DATA;$/;"	t	typeref:struct:	file:
PP_DEVNUM	PDP10/kx10_pt.c	35;"	d	file:
PR	display/type340cmd.h	166;"	d
PRIORITY_ABOVE_NORMAL	sim_timer.h	158;"	d
PRIORITY_BELOW_NORMAL	sim_timer.h	156;"	d
PRIORITY_NORMAL	sim_timer.h	157;"	d
PRI_CMTW_0	PDP10/kl10_dn.c	121;"	d	file:
PRI_CMTW_0	PDP10/kl10_fe.c	117;"	d	file:
PRI_CMTW_CNT	PDP10/kl10_dn.c	134;"	d	file:
PRI_CMTW_CNT	PDP10/kl10_fe.c	130;"	d	file:
PRI_CMTW_KAC	PDP10/kl10_dn.c	135;"	d	file:
PRI_CMTW_KAC	PDP10/kl10_fe.c	131;"	d	file:
PRI_CMTW_PPT	PDP10/kl10_dn.c	122;"	d	file:
PRI_CMTW_PPT	PDP10/kl10_fe.c	118;"	d	file:
PRI_CMTW_STS	PDP10/kl10_dn.c	123;"	d	file:
PRI_CMTW_STS	PDP10/kl10_fe.c	119;"	d	file:
PRI_CMT_10IC	PDP10/kl10_dn.c	132;"	d	file:
PRI_CMT_10IC	PDP10/kl10_fe.c	128;"	d	file:
PRI_CMT_11IC	PDP10/kl10_dn.c	133;"	d	file:
PRI_CMT_11IC	PDP10/kl10_fe.c	129;"	d	file:
PRI_CMT_FWD	PDP10/kl10_dn.c	129;"	d	file:
PRI_CMT_FWD	PDP10/kl10_fe.c	125;"	d	file:
PRI_CMT_INI	PDP10/kl10_dn.c	126;"	d	file:
PRI_CMT_INI	PDP10/kl10_fe.c	122;"	d	file:
PRI_CMT_IP	PDP10/kl10_dn.c	130;"	d	file:
PRI_CMT_IP	PDP10/kl10_fe.c	126;"	d	file:
PRI_CMT_L11	PDP10/kl10_dn.c	125;"	d	file:
PRI_CMT_L11	PDP10/kl10_fe.c	121;"	d	file:
PRI_CMT_PWF	PDP10/kl10_dn.c	124;"	d	file:
PRI_CMT_PWF	PDP10/kl10_fe.c	120;"	d	file:
PRI_CMT_QP	PDP10/kl10_dn.c	128;"	d	file:
PRI_CMT_QP	PDP10/kl10_fe.c	124;"	d	file:
PRI_CMT_TOT	PDP10/kl10_dn.c	131;"	d	file:
PRI_CMT_TOT	PDP10/kl10_fe.c	127;"	d	file:
PRI_CMT_TST	PDP10/kl10_dn.c	127;"	d	file:
PRI_CMT_TST	PDP10/kl10_fe.c	123;"	d	file:
PRI_CTYDV	PDP10/kl10_dn.c	173;"	d	file:
PRI_CTYDV	PDP10/kl10_fe.c	167;"	d	file:
PRI_DN60	PDP10/kl10_dn.c	172;"	d	file:
PRI_EM2EI	PDP10/kl10_dn.c	138;"	d	file:
PRI_EM2EI	PDP10/kl10_fe.c	134;"	d	file:
PRI_EM2TI	PDP10/kl10_dn.c	139;"	d	file:
PRI_EM2TI	PDP10/kl10_fe.c	135;"	d	file:
PRI_EMAKA	PDP10/kl10_dn.c	157;"	d	file:
PRI_EMAKA	PDP10/kl10_fe.c	153;"	d	file:
PRI_EMCDR	PDP10/kl10_dn.c	168;"	d	file:
PRI_EMCDR	PDP10/kl10_fe.c	164;"	d	file:
PRI_EMCLK	PDP10/kl10_dn.c	169;"	d	file:
PRI_EMCLK	PDP10/kl10_fe.c	165;"	d	file:
PRI_EMCTY	PDP10/kl10_dn.c	163;"	d	file:
PRI_EMCTY	PDP10/kl10_fe.c	159;"	d	file:
PRI_EMDH1	PDP10/kl10_dn.c	165;"	d	file:
PRI_EMDH1	PDP10/kl10_fe.c	161;"	d	file:
PRI_EMDL1	PDP10/kl10_dn.c	164;"	d	file:
PRI_EMDL1	PDP10/kl10_fe.c	160;"	d	file:
PRI_EMDLS	PDP10/kl10_dn.c	166;"	d	file:
PRI_EMDLS	PDP10/kl10_fe.c	162;"	d	file:
PRI_EMDSC	PDP10/kl10_dn.c	149;"	d	file:
PRI_EMDSC	PDP10/kl10_fe.c	145;"	d	file:
PRI_EMEDR	PDP10/kl10_dn.c	159;"	d	file:
PRI_EMEDR	PDP10/kl10_fe.c	155;"	d	file:
PRI_EMFED	PDP10/kl10_dn.c	170;"	d	file:
PRI_EMFED	PDP10/kl10_fe.c	166;"	d	file:
PRI_EMFLO	PDP10/kl10_dn.c	147;"	d	file:
PRI_EMFLO	PDP10/kl10_fe.c	143;"	d	file:
PRI_EMHDR	PDP10/kl10_dn.c	146;"	d	file:
PRI_EMHDR	PDP10/kl10_fe.c	142;"	d	file:
PRI_EMHDS	PDP10/kl10_dn.c	144;"	d	file:
PRI_EMHDS	PDP10/kl10_fe.c	140;"	d	file:
PRI_EMHLA	PDP10/kl10_dn.c	155;"	d	file:
PRI_EMHLA	PDP10/kl10_fe.c	151;"	d	file:
PRI_EMHLS	PDP10/kl10_dn.c	154;"	d	file:
PRI_EMHLS	PDP10/kl10_fe.c	150;"	d	file:
PRI_EMHUD	PDP10/kl10_dn.c	150;"	d	file:
PRI_EMHUD	PDP10/kl10_fe.c	146;"	d	file:
PRI_EMLBE	PDP10/kl10_dn.c	151;"	d	file:
PRI_EMLBE	PDP10/kl10_fe.c	147;"	d	file:
PRI_EMLDR	PDP10/kl10_dn.c	160;"	d	file:
PRI_EMLDR	PDP10/kl10_fe.c	156;"	d	file:
PRI_EMLDV	PDP10/kl10_dn.c	161;"	d	file:
PRI_EMLDV	PDP10/kl10_fe.c	157;"	d	file:
PRI_EMLNC	PDP10/kl10_dn.c	141;"	d	file:
PRI_EMLNC	PDP10/kl10_fe.c	137;"	d	file:
PRI_EMLPT	PDP10/kl10_dn.c	167;"	d	file:
PRI_EMLPT	PDP10/kl10_fe.c	163;"	d	file:
PRI_EMOPS	PDP10/kl10_dn.c	143;"	d	file:
PRI_EMOPS	PDP10/kl10_fe.c	139;"	d	file:
PRI_EMRBI	PDP10/kl10_dn.c	156;"	d	file:
PRI_EMRBI	PDP10/kl10_fe.c	152;"	d	file:
PRI_EMRDS	PDP10/kl10_dn.c	142;"	d	file:
PRI_EMRDS	PDP10/kl10_fe.c	138;"	d	file:
PRI_EMRDT	PDP10/kl10_dn.c	145;"	d	file:
PRI_EMRDT	PDP10/kl10_fe.c	141;"	d	file:
PRI_EMSNA	PDP10/kl10_dn.c	148;"	d	file:
PRI_EMSNA	PDP10/kl10_fe.c	144;"	d	file:
PRI_EMSTR	PDP10/kl10_dn.c	140;"	d	file:
PRI_EMSTR	PDP10/kl10_fe.c	136;"	d	file:
PRI_EMTDO	PDP10/kl10_dn.c	158;"	d	file:
PRI_EMTDO	PDP10/kl10_fe.c	154;"	d	file:
PRI_EMXOF	PDP10/kl10_dn.c	152;"	d	file:
PRI_EMXOF	PDP10/kl10_fe.c	148;"	d	file:
PRI_EMXON	PDP10/kl10_dn.c	153;"	d	file:
PRI_EMXON	PDP10/kl10_fe.c	149;"	d	file:
PRI_IND_FLG	PDP10/kl10_dn.c	136;"	d	file:
PRI_IND_FLG	PDP10/kl10_fe.c	132;"	d	file:
PRI_NCL	PDP10/kl10_dn.c	171;"	d	file:
PROBE_CONN	slirp/slirp_config.h	7;"	d
PROTO_PPP	slirp/main.h	44;"	d
PROTO_SLIP	slirp/main.h	42;"	d
PRTLT	PDP10/kx10_rc.c	67;"	d	file:
PRT_ERR	PDP10/kx10_dp.c	68;"	d	file:
PRV_PUB	PDP10/kx10_defs.h	299;"	d
PRV_PUB	PDP10/kx10_defs.h	301;"	d
PR_DEVNUM	PDP10/kx10_pt.c	36;"	d	file:
PR_FASTHZ	slirp/tcp.h	39;"	d
PR_SLOWHZ	slirp/tcp.h	38;"	d
PSCALE	display/vt11.c	207;"	d	file:
PSCALEF	display/vt11.c	203;"	d	file:
PSW_FAIL	PDP10/kx10_rc.c	74;"	d	file:
PT_MAGIC	sim_disk.c	1409;"	d	file:
PT_VALID	sim_disk.c	1410;"	d	file:
PU	display/type340cmd.h	168;"	d
PUBLIC	PDP10/kx10_defs.h	272;"	d
PUBLIC	PDP10/kx10_defs.h	274;"	d
PUBLIC	PDP10/kx10_defs.h	280;"	d
PUL	display/type340cmd.h	171;"	d
PUNCH_ON	PDP10/kx10_cp.c	67;"	d	file:
PUR	display/type340cmd.h	172;"	d
PURE	PDP10/kx10_defs.h	305;"	d
PURE	PDP10/kx10_defs.h	308;"	d
PUTL	sim_scsi.c	79;"	d	file:
PUTW	sim_scsi.c	83;"	d	file:
PUT_RVAL	scp.c	9887;"	d	file:
PV_LEFT	sim_defs.h	436;"	d
PV_LEFTSIGN	sim_defs.h	438;"	d
PV_RCOMMA	sim_defs.h	435;"	d
PV_RCOMMASIGN	sim_defs.h	437;"	d
PV_RSPC	sim_defs.h	434;"	d
PV_RZRO	sim_defs.h	433;"	d
PWR_CLR	PDP10/ka10_pmp.c	275;"	d	file:
PWR_FAIL1	PDP10/ks10_cty.c	47;"	d	file:
PWR_FAIL_10	PDP10/kx10_dp.c	72;"	d	file:
Parent	sim_disk.c	/^    struct VHD_IOData *Parent;$/;"	m	struct:VHD_IOData	typeref:struct:VHD_IOData::VHD_IOData	file:
ParentLocatorEntries	sim_disk.c	/^        } ParentLocatorEntries[8];$/;"	m	struct:_VHD_DynamicDiskHeader	typeref:struct:_VHD_DynamicDiskHeader::VHD_ParentLocator	file:
ParentTimeStamp	sim_disk.c	/^    uint32 ParentTimeStamp;$/;"	m	struct:_VHD_DynamicDiskHeader	file:
ParentUnicodeName	sim_disk.c	/^    char ParentUnicodeName[512];$/;"	m	struct:_VHD_DynamicDiskHeader	file:
ParentUniqueID	sim_disk.c	/^    uint8 ParentUniqueID[16];$/;"	m	struct:_VHD_DynamicDiskHeader	file:
ParentVHDPath	sim_disk.c	/^    char ParentVHDPath[512];$/;"	m	struct:VHD_IOData	file:
Pflag	PDP10/kx10_cpu.c	/^t_addr  Pl, Ph, Rl, Rh, Pflag;                \/* Protection registers *\/$/;"	v
Ph	PDP10/kx10_cpu.c	/^t_addr  Pl, Ph, Rl, Rh, Pflag;                \/* Protection registers *\/$/;"	v
Pl	PDP10/kx10_cpu.c	/^t_addr  Pl, Ph, Rl, Rh, Pflag;                \/* Protection registers *\/$/;"	v
PlatformCode	sim_disk.c	/^        uint8 PlatformCode[4];$/;"	m	struct:_VHD_DynamicDiskHeader::VHD_ParentLocator	file:
PlatformDataLength	sim_disk.c	/^        uint32 PlatformDataLength;$/;"	m	struct:_VHD_DynamicDiskHeader::VHD_ParentLocator	file:
PlatformDataOffset	sim_disk.c	/^        uint64 PlatformDataOffset;$/;"	m	struct:_VHD_DynamicDiskHeader::VHD_ParentLocator	file:
PlatformDataSpace	sim_disk.c	/^        uint32 PlatformDataSpace;$/;"	m	struct:_VHD_DynamicDiskHeader::VHD_ParentLocator	file:
QAUXCPU	PDP10/kx10_cpu.c	733;"	d	file:
QBBN	PDP10/kx10_cpu.c	742;"	d	file:
QBBN	PDP10/kx10_cpu.c	744;"	d	file:
QEMUClockType	slirp_glue/qemu/timer.h	/^} QEMUClockType;$/;"	t	typeref:enum:__anon43
QEMUFile	slirp_glue/qemu/typedefs.h	/^typedef struct QEMUFile QEMUFile;$/;"	t	typeref:struct:QEMUFile
QEMU_CHAR_H	slirp_glue/qemu/sysemu/char.h	2;"	d
QEMU_CLOCK_HOST	slirp_glue/qemu/timer.h	/^    QEMU_CLOCK_HOST = 2,$/;"	e	enum:__anon43
QEMU_CLOCK_MAX	slirp_glue/qemu/timer.h	/^    QEMU_CLOCK_MAX$/;"	e	enum:__anon43
QEMU_CLOCK_REALTIME	slirp_glue/qemu/timer.h	/^    QEMU_CLOCK_REALTIME = 0,$/;"	e	enum:__anon43
QEMU_CLOCK_VIRTUAL	slirp_glue/qemu/timer.h	/^    QEMU_CLOCK_VIRTUAL = 1,$/;"	e	enum:__anon43
QEMU_CLOCK_VIRTUAL_RT	slirp_glue/qemu/timer.h	/^    QEMU_CLOCK_VIRTUAL_RT = 3,$/;"	e	enum:__anon43
QEMU_COMMON_H	slirp_glue/qemu/qemu-common.h	13;"	d
QEMU_GNUC_PREREQ	slirp_glue/qemu/compiler.h	13;"	d
QEMU_GNUC_PREREQ	slirp_glue/qemu/compiler.h	16;"	d
QEMU_MAIN_LOOP_H	slirp_glue/qemu/main-loop.h	26;"	d
QEMU_OSDEP_H	slirp_glue/qemu/osdep.h	26;"	d
QEMU_OS_WIN32_H	slirp_glue/qemu/sysemu/os-win32.h	27;"	d
QEMU_SOCKET_H	slirp_glue/qemu/sockets.h	3;"	d
QEMU_SYS_QUEUE_H_	slirp_glue/qemu/queue.h	41;"	d
QEMU_TIMER_H	slirp_glue/qemu/timer.h	2;"	d
QEMU_TYPEDEFS_H	slirp_glue/qemu/typedefs.h	2;"	d
QH	PDP10/ks10_kmc.c	/^typedef struct queuehdr QH;$/;"	t	typeref:struct:queuehdr	file:
QITS	PDP10/kl10_fe.c	216;"	d	file:
QITS	PDP10/kl10_fe.c	218;"	d	file:
QITS	PDP10/kx10_cpu.c	731;"	d	file:
QITS	PDP10/kx10_cpu.c	736;"	d	file:
QITS	PDP10/kx10_cpu.c	738;"	d	file:
QKLB	PDP10/kx10_cpu.c	752;"	d	file:
QKLB	PDP10/kx10_cpu.c	754;"	d	file:
QLIST_EMPTY	slirp_glue/qemu/queue.h	166;"	d
QLIST_ENTRY	slirp_glue/qemu/queue.h	92;"	d
QLIST_FIRST	slirp_glue/qemu/queue.h	167;"	d
QLIST_FIX_HEAD_PTR	slirp_glue/qemu/queue.h	118;"	d
QLIST_FOREACH	slirp_glue/qemu/queue.h	153;"	d
QLIST_FOREACH_SAFE	slirp_glue/qemu/queue.h	158;"	d
QLIST_HEAD	slirp_glue/qemu/queue.h	84;"	d
QLIST_HEAD_INITIALIZER	slirp_glue/qemu/queue.h	89;"	d
QLIST_INIT	slirp_glue/qemu/queue.h	101;"	d
QLIST_INSERT_AFTER	slirp_glue/qemu/queue.h	124;"	d
QLIST_INSERT_BEFORE	slirp_glue/qemu/queue.h	132;"	d
QLIST_INSERT_HEAD	slirp_glue/qemu/queue.h	139;"	d
QLIST_NEXT	slirp_glue/qemu/queue.h	168;"	d
QLIST_REMOVE	slirp_glue/qemu/queue.h	146;"	d
QLIST_SWAP	slirp_glue/qemu/queue.h	105;"	d
QSIMPLEQ_CONCAT	slirp_glue/qemu/queue.h	311;"	d
QSIMPLEQ_EMPTY	slirp_glue/qemu/queue.h	328;"	d
QSIMPLEQ_ENTRY	slirp_glue/qemu/queue.h	241;"	d
QSIMPLEQ_FIRST	slirp_glue/qemu/queue.h	329;"	d
QSIMPLEQ_FOREACH	slirp_glue/qemu/queue.h	301;"	d
QSIMPLEQ_FOREACH_SAFE	slirp_glue/qemu/queue.h	306;"	d
QSIMPLEQ_HEAD	slirp_glue/qemu/queue.h	232;"	d
QSIMPLEQ_HEAD_INITIALIZER	slirp_glue/qemu/queue.h	238;"	d
QSIMPLEQ_INIT	slirp_glue/qemu/queue.h	249;"	d
QSIMPLEQ_INSERT_AFTER	slirp_glue/qemu/queue.h	266;"	d
QSIMPLEQ_INSERT_HEAD	slirp_glue/qemu/queue.h	254;"	d
QSIMPLEQ_INSERT_TAIL	slirp_glue/qemu/queue.h	260;"	d
QSIMPLEQ_LAST	slirp_glue/qemu/queue.h	319;"	d
QSIMPLEQ_NEXT	slirp_glue/qemu/queue.h	330;"	d
QSIMPLEQ_REMOVE	slirp_glue/qemu/queue.h	288;"	d
QSIMPLEQ_REMOVE_HEAD	slirp_glue/qemu/queue.h	272;"	d
QSIMPLEQ_SPLIT_AFTER	slirp_glue/qemu/queue.h	277;"	d
QSLAVE	PDP10/kx10_cpu.c	757;"	d	file:
QSLAVE	PDP10/kx10_cpu.c	759;"	d	file:
QSLIST_EMPTY	slirp_glue/qemu/queue.h	224;"	d
QSLIST_ENTRY	slirp_glue/qemu/queue.h	182;"	d
QSLIST_FIRST	slirp_glue/qemu/queue.h	225;"	d
QSLIST_FOREACH	slirp_glue/qemu/queue.h	213;"	d
QSLIST_FOREACH_SAFE	slirp_glue/qemu/queue.h	216;"	d
QSLIST_HEAD	slirp_glue/qemu/queue.h	174;"	d
QSLIST_HEAD_INITIALIZER	slirp_glue/qemu/queue.h	179;"	d
QSLIST_INIT	slirp_glue/qemu/queue.h	190;"	d
QSLIST_INSERT_AFTER	slirp_glue/qemu/queue.h	194;"	d
QSLIST_INSERT_HEAD	slirp_glue/qemu/queue.h	199;"	d
QSLIST_NEXT	slirp_glue/qemu/queue.h	226;"	d
QSLIST_REMOVE_AFTER	slirp_glue/qemu/queue.h	208;"	d
QSLIST_REMOVE_HEAD	slirp_glue/qemu/queue.h	204;"	d
QTAILQ_EMPTY	slirp_glue/qemu/queue.h	422;"	d
QTAILQ_ENTRY	slirp_glue/qemu/queue.h	351;"	d
QTAILQ_FIRST	slirp_glue/qemu/queue.h	423;"	d
QTAILQ_FOREACH	slirp_glue/qemu/queue.h	404;"	d
QTAILQ_FOREACH_REVERSE	slirp_glue/qemu/queue.h	414;"	d
QTAILQ_FOREACH_SAFE	slirp_glue/qemu/queue.h	409;"	d
QTAILQ_HEAD	slirp_glue/qemu/queue.h	341;"	d
QTAILQ_HEAD_INITIALIZER	slirp_glue/qemu/queue.h	343;"	d
QTAILQ_INIT	slirp_glue/qemu/queue.h	356;"	d
QTAILQ_INSERT_AFTER	slirp_glue/qemu/queue.h	378;"	d
QTAILQ_INSERT_BEFORE	slirp_glue/qemu/queue.h	388;"	d
QTAILQ_INSERT_HEAD	slirp_glue/qemu/queue.h	361;"	d
QTAILQ_INSERT_TAIL	slirp_glue/qemu/queue.h	371;"	d
QTAILQ_LAST	slirp_glue/qemu/queue.h	426;"	d
QTAILQ_NEXT	slirp_glue/qemu/queue.h	424;"	d
QTAILQ_PREV	slirp_glue/qemu/queue.h	428;"	d
QTAILQ_REMOVE	slirp_glue/qemu/queue.h	395;"	d
QTEN11	PDP10/kx10_cpu.c	732;"	d	file:
QUEUE_LIST_END	sim_defs.h	461;"	d
QWAITS	PDP10/kx10_cpu.c	747;"	d	file:
QWAITS	PDP10/kx10_cpu.c	749;"	d	file:
Q_IDLE	PDP10/kx10_defs.h	168;"	d
Q_TAILQ_ENTRY	slirp_glue/qemu/queue.h	346;"	d
Q_TAILQ_HEAD	slirp_glue/qemu/queue.h	336;"	d
RAND_MAX	scp.h	170;"	d
RAND_MAX	scp.h	172;"	d
RAW_MODE	sim_console.c	3461;"	d	file:
RBUF	PDP10/ks10_dz.c	56;"	d	file:
RC	PDP10/kx10_dp.c	102;"	d	file:
RCE	PDP10/pdp6_dsk.c	73;"	d	file:
RCV_PI	PDP10/kx10_dc.c	47;"	d	file:
RC_DEVNUM	PDP10/kx10_rc.c	32;"	d	file:
RD	PDP10/kx10_dp.c	95;"	d	file:
RD10_CYL	PDP10/kx10_rc.c	85;"	d	file:
RD10_DTYPE	PDP10/kx10_rc.c	82;"	d	file:
RD10_SEGS	PDP10/kx10_rc.c	84;"	d	file:
RD10_SIZE	PDP10/kx10_rc.c	86;"	d	file:
RD10_WDS	PDP10/kx10_rc.c	83;"	d	file:
RDONE	PDP10/ks10_dz.c	47;"	d	file:
RDY_READ	PDP10/kx10_cr.c	65;"	d	file:
RDY_READ_EN	PDP10/kx10_cr.c	75;"	d	file:
RD_CMD	PDP10/pdp6_dsk.c	59;"	d	file:
RD_ONLY	PDP10/kx10_dp.c	112;"	d	file:
READ	PDP10/kx10_mt.c	61;"	d	file:
READ	PDP10/pdp6_mtc.c	72;"	d	file:
READING	PDP10/kx10_cr.c	68;"	d	file:
READ_BK	PDP10/pdp6_mtc.c	73;"	d	file:
READ_CARD	PDP10/kx10_cr.c	58;"	d	file:
READ_CMP	PDP10/kx10_mt.c	84;"	d	file:
READ_CMP	PDP10/pdp6_mtc.c	95;"	d	file:
READ_I	scp.c	8667;"	d	file:
READ_NOEOR	PDP10/kx10_mt.c	62;"	d	file:
READ_S	scp.c	8663;"	d	file:
REA_EN	PDP10/kx10_rh.c	131;"	d	file:
REC_IN_PROG	PDP10/pdp6_mtc.c	136;"	d	file:
RED	display/vt11.c	/^enum scolor { GREEN=0, YELLOW, ORANGE, RED };$/;"	e	enum:scolor	file:
REDUCE	slirp/cksum.c	45;"	d	file:
REFERENCE_LEN	slirp/dnssearch.c	/^static const uint8_t REFERENCE_LEN = 2;$/;"	v	file:
REG	sim_defs.h	/^struct REG {$/;"	s
REG	sim_defs.h	/^typedef struct REG REG;$/;"	t	typeref:struct:REG
REG	sim_frontpanel.c	/^    } REG;$/;"	t	typeref:struct:__anon22	file:
REGDATA	sim_defs.h	1001;"	d
REGDATA	sim_defs.h	913;"	d
REGDATAC	sim_defs.h	1003;"	d
REGDATAC	sim_defs.h	915;"	d
REG_CIRC	sim_defs.h	713;"	d
REG_DEPOSIT	sim_defs.h	717;"	d
REG_FIT	sim_defs.h	716;"	d
REG_FMT	sim_defs.h	707;"	d
REG_HIDDEN	sim_defs.h	709;"	d
REG_HRO	sim_defs.h	718;"	d
REG_NZ	sim_defs.h	710;"	d
REG_RO	sim_defs.h	708;"	d
REG_STRUCT	sim_defs.h	712;"	d
REG_UFMASK	sim_defs.h	721;"	d
REG_UNIT	sim_defs.h	711;"	d
REG_VMAD	sim_defs.h	715;"	d
REG_VMFLAGS	sim_defs.h	722;"	d
REG_VMIO	sim_defs.h	714;"	d
REG_V_UF	sim_defs.h	720;"	d
RELOAD	PDP10/ks10_cty.c	58;"	d	file:
RELPOINT	display/vt11.c	/^enum gmode { CHAR=0, SVECTOR, LVECTOR, POINT, GRAPHX, GRAPHY, RELPOINT, \/* all *\/$/;"	e	enum:gmode	file:
REMOTE	sim_console.c	/^struct REMOTE {$/;"	s	file:
REMOTE	sim_console.c	/^typedef struct REMOTE REMOTE;$/;"	t	typeref:struct:REMOTE	file:
REM_CON_BASE_UNITS	sim_console.c	457;"	d	file:
REQ_CH	PDP10/ka10_pmp.c	262;"	d	file:
REQ_SEL	PDP10/ka10_pmp.c	227;"	d	file:
RESET	PDP10/ka10_ch10.c	54;"	d	file:
RES_DET	PDP10/kx10_dc.c	61;"	d	file:
RES_EIGHTH	display/display.h	63;"	d
RES_FULL	display/display.h	60;"	d
RES_HALF	display/display.h	61;"	d
RES_INST	PDP10/ka10_iii.c	88;"	d	file:
RES_QUARTER	display/display.h	62;"	d
REW	PDP10/pdp6_mtc.c	103;"	d	file:
REWIND	PDP10/kx10_mt.c	59;"	d	file:
REWIND	PDP10/pdp6_mtc.c	64;"	d	file:
REW_FLAG	PDP10/kx10_mt.c	90;"	d	file:
RFC1533_BOOTFILESIZE	slirp/bootp.h	25;"	d
RFC1533_COOKIE	slirp/bootp.h	11;"	d
RFC1533_COOKIESERVER	slirp/bootp.h	20;"	d
RFC1533_DNS	slirp/bootp.h	18;"	d
RFC1533_DOMAINNAME	slirp/bootp.h	27;"	d
RFC1533_END	slirp/bootp.h	93;"	d
RFC1533_EXTENSIONPATH	slirp/bootp.h	30;"	d
RFC1533_GATEWAY	slirp/bootp.h	15;"	d
RFC1533_HOSTNAME	slirp/bootp.h	24;"	d
RFC1533_IEN116NS	slirp/bootp.h	17;"	d
RFC1533_IMPRESSSERVER	slirp/bootp.h	22;"	d
RFC1533_INTBROADCAST	slirp/bootp.h	40;"	d
RFC1533_INTICMPDISCOVER	slirp/bootp.h	41;"	d
RFC1533_INTICMPRESPOND	slirp/bootp.h	42;"	d
RFC1533_INTLOCALSUBNETS	slirp/bootp.h	39;"	d
RFC1533_INTMTU	slirp/bootp.h	38;"	d
RFC1533_INTROUTEDISCOVER	slirp/bootp.h	43;"	d
RFC1533_INTROUTESOLICIT	slirp/bootp.h	44;"	d
RFC1533_INTSTATICROUTES	slirp/bootp.h	45;"	d
RFC1533_IPFORWARDING	slirp/bootp.h	31;"	d
RFC1533_IPMAXREASSEMBLY	slirp/bootp.h	34;"	d
RFC1533_IPMTU	slirp/bootp.h	36;"	d
RFC1533_IPMTUPLATEAU	slirp/bootp.h	37;"	d
RFC1533_IPPOLICYFILTER	slirp/bootp.h	33;"	d
RFC1533_IPSOURCEROUTING	slirp/bootp.h	32;"	d
RFC1533_IPTTL	slirp/bootp.h	35;"	d
RFC1533_LLARPCACHETMO	slirp/bootp.h	47;"	d
RFC1533_LLETHERNETENCAP	slirp/bootp.h	48;"	d
RFC1533_LLTRAILERENCAP	slirp/bootp.h	46;"	d
RFC1533_LOGSERVER	slirp/bootp.h	19;"	d
RFC1533_LPRSERVER	slirp/bootp.h	21;"	d
RFC1533_MERITDUMPFILE	slirp/bootp.h	26;"	d
RFC1533_NBDD	slirp/bootp.h	57;"	d
RFC1533_NBNS	slirp/bootp.h	56;"	d
RFC1533_NBNT	slirp/bootp.h	58;"	d
RFC1533_NBSCOPE	slirp/bootp.h	59;"	d
RFC1533_NETMASK	slirp/bootp.h	13;"	d
RFC1533_NISDOMAIN	slirp/bootp.h	52;"	d
RFC1533_NISSERVER	slirp/bootp.h	53;"	d
RFC1533_NTPSERVER	slirp/bootp.h	54;"	d
RFC1533_PAD	slirp/bootp.h	12;"	d
RFC1533_RESOURCESERVER	slirp/bootp.h	23;"	d
RFC1533_ROOTPATH	slirp/bootp.h	29;"	d
RFC1533_SWAPSERVER	slirp/bootp.h	28;"	d
RFC1533_TCPKEEPALIVEGB	slirp/bootp.h	51;"	d
RFC1533_TCPKEEPALIVETMO	slirp/bootp.h	50;"	d
RFC1533_TCPTTL	slirp/bootp.h	49;"	d
RFC1533_TIMEOFFSET	slirp/bootp.h	14;"	d
RFC1533_TIMESERVER	slirp/bootp.h	16;"	d
RFC1533_VENDOR	slirp/bootp.h	55;"	d
RFC1533_VENDOR_ADDPARM	slirp/bootp.h	83;"	d
RFC1533_VENDOR_ETHDEV	slirp/bootp.h	84;"	d
RFC1533_VENDOR_HOWTO	slirp/bootp.h	85;"	d
RFC1533_VENDOR_IMG	slirp/bootp.h	90;"	d
RFC1533_VENDOR_MAGIC	slirp/bootp.h	82;"	d
RFC1533_VENDOR_MAJOR	slirp/bootp.h	79;"	d
RFC1533_VENDOR_MINOR	slirp/bootp.h	80;"	d
RFC1533_VENDOR_MNUOPTS	slirp/bootp.h	86;"	d
RFC1533_VENDOR_MOTD	slirp/bootp.h	88;"	d
RFC1533_VENDOR_NUMOFIMG	slirp/bootp.h	91;"	d
RFC1533_VENDOR_NUMOFMOTD	slirp/bootp.h	89;"	d
RFC1533_VENDOR_SELECTION	slirp/bootp.h	87;"	d
RFC1533_XDM	slirp/bootp.h	61;"	d
RFC1533_XFS	slirp/bootp.h	60;"	d
RFC2132_LEASE_TIME	slirp/bootp.h	64;"	d
RFC2132_MAX_SIZE	slirp/bootp.h	69;"	d
RFC2132_MESSAGE	slirp/bootp.h	68;"	d
RFC2132_MSG_TYPE	slirp/bootp.h	65;"	d
RFC2132_PARAM_LIST	slirp/bootp.h	67;"	d
RFC2132_REBIND_TIME	slirp/bootp.h	71;"	d
RFC2132_RENEWAL_TIME	slirp/bootp.h	70;"	d
RFC2132_REQ_ADDR	slirp/bootp.h	63;"	d
RFC2132_SRV_ID	slirp/bootp.h	66;"	d
RFC3397_OPT_DOMAIN_SEARCH	slirp/dnssearch.c	/^static const uint8_t RFC3397_OPT_DOMAIN_SEARCH = 119;$/;"	v	file:
RF_30	display/vtmacs.h	46;"	d
RF_40	display/vtmacs.h	47;"	d
RF_EXT	display/vtmacs.h	48;"	d
RF_LINE	display/vtmacs.h	45;"	d
RF_SAME	display/vtmacs.h	44;"	d
RF_UNSYNC	display/vtmacs.h	43;"	d
RH10_DEV	PDP10/kx10_defs.h	664;"	d
RH20_ATTN	PDP10/kx10_rh.c	115;"	d	file:
RH20_ATTN_ENA	PDP10/kx10_rh.c	113;"	d	file:
RH20_CHAN_ERR	PDP10/kx10_rh.c	121;"	d	file:
RH20_CHAN_RDY	PDP10/kx10_rh.c	118;"	d	file:
RH20_CLR_MBC	PDP10/kx10_rh.c	147;"	d	file:
RH20_CLR_RAE	PDP10/kx10_rh.c	148;"	d	file:
RH20_DATA_OVR	PDP10/kx10_rh.c	117;"	d	file:
RH20_DATA_PRI	PDP10/kx10_rh.c	125;"	d	file:
RH20_DELETE_SCR	PDP10/kx10_rh.c	143;"	d	file:
RH20_DEV	PDP10/kx10_defs.h	665;"	d
RH20_DR_EXC	PDP10/kx10_rh.c	124;"	d	file:
RH20_DR_RESP	PDP10/kx10_rh.c	120;"	d	file:
RH20_ERROR	PDP10/kx10_rh.c	172;"	d	file:
RH20_HALT	PDP10/kx10_defs.h	337;"	d
RH20_LAST_ERR	PDP10/kx10_rh.c	171;"	d	file:
RH20_LONG_STS	PDP10/kx10_rh.c	173;"	d	file:
RH20_LONG_WC	PDP10/kx10_rh.c	123;"	d	file:
RH20_MASS_EN	PDP10/kx10_rh.c	145;"	d	file:
RH20_MASS_ENA	PDP10/kx10_rh.c	116;"	d	file:
RH20_MEM_PAR	PDP10/kx10_rh.c	167;"	d	file:
RH20_NADR_PAR	PDP10/kx10_rh.c	168;"	d	file:
RH20_NOT_WC0	PDP10/kx10_rh.c	169;"	d	file:
RH20_NXM_ERR	PDP10/kx10_rh.c	170;"	d	file:
RH20_OVER	PDP10/kx10_rh.c	175;"	d	file:
RH20_PCR_FULL	PDP10/kx10_rh.c	112;"	d	file:
RH20_RAE	PDP10/kx10_rh.c	119;"	d	file:
RH20_RCLP	PDP10/kx10_rh.c	144;"	d	file:
RH20_REV	PDP10/kx10_defs.h	338;"	d
RH20_SBAR	PDP10/kx10_rh.c	126;"	d	file:
RH20_SCR_FULL	PDP10/kx10_rh.c	114;"	d	file:
RH20_SHRT_STS	PDP10/kx10_rh.c	174;"	d	file:
RH20_SHRT_WC	PDP10/kx10_rh.c	122;"	d	file:
RH20_WMASK	PDP10/kx10_defs.h	335;"	d
RH20_XEND	PDP10/kx10_rh.c	127;"	d	file:
RH20_XFER	PDP10/kx10_defs.h	336;"	d
RH20_XFER_CLR	PDP10/kx10_rh.c	146;"	d	file:
RIE	PDP10/ks10_dz.c	46;"	d	file:
RIM_EOF	PDP10/kx10_sys.c	479;"	d	file:
RLC_ERR	PDP10/kx10_mt.c	83;"	d	file:
RLS_SCN	PDP10/pdp6_dcs.c	47;"	d	file:
RM10_CYL	PDP10/kx10_rc.c	91;"	d	file:
RM10_DTYPE	PDP10/kx10_rc.c	88;"	d	file:
RM10_SEGS	PDP10/kx10_rc.c	90;"	d	file:
RM10_SIZE	PDP10/kx10_rc.c	92;"	d	file:
RM10_WDS	PDP10/kx10_rc.c	89;"	d	file:
RMASK	PDP10/kx10_defs.h	172;"	d
RO	PDP10/ks10_dz.c	78;"	d	file:
ROM_File_Descriptor	sim_BuildROMs.c	/^struct ROM_File_Descriptor {$/;"	s	file:
ROMs	sim_BuildROMs.c	/^    const char *BinaryName;             const char *IncludeFileName; size_t expected_size; unsigned int checksum;  const char *ArrayName;            const char *Comments;} ROMs[] = {$/;"	v	typeref:struct:ROM_File_Descriptor
ROTATE	display/vtmacs.h	227;"	d
ROTATE3	display/vtmacs.h	230;"	d
ROTATE_AXIS	PDP10/ka10_tv.c	37;"	d	file:
ROTLBT	PDP10/ka10_tv.c	46;"	d	file:
ROTRBT	PDP10/ka10_tv.c	45;"	d	file:
ROUND_UP	slirp_glue/qemu/osdep.h	128;"	d
RO_HORIZONTAL	display/vtmacs.h	93;"	d
RO_SAME	display/vtmacs.h	92;"	d
RO_VERTICAL	display/vtmacs.h	94;"	d
RP01_CYL	PDP10/kx10_dp.c	124;"	d	file:
RP01_DEV	PDP10/kx10_dp.c	125;"	d	file:
RP01_DTYPE	PDP10/kx10_dp.c	121;"	d	file:
RP01_SECT	PDP10/kx10_dp.c	122;"	d	file:
RP01_SIZE	PDP10/kx10_dp.c	126;"	d	file:
RP01_SURF	PDP10/kx10_dp.c	123;"	d	file:
RP02_CYL	PDP10/kx10_dp.c	131;"	d	file:
RP02_DEV	PDP10/kx10_dp.c	132;"	d	file:
RP02_DTYPE	PDP10/kx10_dp.c	128;"	d	file:
RP02_SECT	PDP10/kx10_dp.c	129;"	d	file:
RP02_SIZE	PDP10/kx10_dp.c	133;"	d	file:
RP02_SURF	PDP10/kx10_dp.c	130;"	d	file:
RP03_CYL	PDP10/kx10_dp.c	138;"	d	file:
RP03_DEV	PDP10/kx10_dp.c	139;"	d	file:
RP03_DTYPE	PDP10/kx10_dp.c	135;"	d	file:
RP03_SECT	PDP10/kx10_dp.c	136;"	d	file:
RP03_SIZE	PDP10/kx10_dp.c	140;"	d	file:
RP03_SURF	PDP10/kx10_dp.c	137;"	d	file:
RP04_CYL	PDP10/kx10_rp.c	193;"	d	file:
RP04_DEV	PDP10/kx10_rp.c	194;"	d	file:
RP04_DTYPE	PDP10/kx10_rp.c	190;"	d	file:
RP04_SECT	PDP10/kx10_rp.c	191;"	d	file:
RP04_SIZE	PDP10/kx10_rp.c	195;"	d	file:
RP04_SURF	PDP10/kx10_rp.c	192;"	d	file:
RP06_CYL	PDP10/kx10_rp.c	200;"	d	file:
RP06_DEV	PDP10/kx10_rp.c	201;"	d	file:
RP06_DTYPE	PDP10/kx10_rp.c	197;"	d	file:
RP06_SECT	PDP10/kx10_rp.c	198;"	d	file:
RP06_SIZE	PDP10/kx10_rp.c	202;"	d	file:
RP06_SURF	PDP10/kx10_rp.c	199;"	d	file:
RP07_CYL	PDP10/kx10_rp.c	207;"	d	file:
RP07_DEV	PDP10/kx10_rp.c	208;"	d	file:
RP07_DTYPE	PDP10/kx10_rp.c	204;"	d	file:
RP07_SECT	PDP10/kx10_rp.c	205;"	d	file:
RP07_SIZE	PDP10/kx10_rp.c	209;"	d	file:
RP07_SURF	PDP10/kx10_rp.c	206;"	d	file:
RPAS	PDP10/kx10_rp.c	116;"	d	file:
RPCS1	PDP10/kx10_rp.c	47;"	d	file:
RPDA	PDP10/kx10_rp.c	121;"	d	file:
RPDC	PDP10/kx10_rp.c	143;"	d	file:
RPDS	PDP10/kx10_rp.c	77;"	d	file:
RPDT	PDP10/kx10_rp.c	132;"	d	file:
RPEC1	PDP10/kx10_rp.c	166;"	d	file:
RPEC2	PDP10/kx10_rp.c	168;"	d	file:
RPER1	PDP10/kx10_rp.c	93;"	d	file:
RPER2	PDP10/kx10_rp.c	139;"	d	file:
RPER3	PDP10/kx10_rp.c	156;"	d	file:
RPI_CHN	PDP10/pdp6_dcs.c	45;"	d	file:
RPLA	PDP10/kx10_rp.c	135;"	d	file:
RPMR	PDP10/kx10_rp.c	113;"	d	file:
RPOF	PDP10/kx10_rp.c	141;"	d	file:
RPOINT	display/vtmacs.h	266;"	d
RPOINT3	display/vtmacs.h	268;"	d
RPSN	PDP10/kx10_rp.c	154;"	d	file:
RP_NUMWD	PDP10/kx10_dp.c	36;"	d	file:
RP_NUMWD	PDP10/kx10_rp.c	35;"	d	file:
RRZ	PDP10/kx10_dpy.c	131;"	d	file:
RS	sim_defs.h	174;"	d
RS03_DEV	PDP10/kx10_rs.c	148;"	d	file:
RS03_DTYPE	PDP10/kx10_rs.c	145;"	d	file:
RS03_SECT	PDP10/kx10_rs.c	146;"	d	file:
RS03_SIZE	PDP10/kx10_rs.c	149;"	d	file:
RS03_SURF	PDP10/kx10_rs.c	147;"	d	file:
RS04_DEV	PDP10/kx10_rs.c	154;"	d	file:
RS04_DTYPE	PDP10/kx10_rs.c	151;"	d	file:
RS04_SECT	PDP10/kx10_rs.c	152;"	d	file:
RS04_SIZE	PDP10/kx10_rs.c	155;"	d	file:
RS04_SURF	PDP10/kx10_rs.c	153;"	d	file:
RSCN_ACT	PDP10/pdp6_dcs.c	49;"	d	file:
RSIGN	PDP10/kx10_defs.h	177;"	d
RSTS_ACNT	sim_disk.c	/^    } RSTS_ACNT;$/;"	t	typeref:struct:_RSTS_ACNT	file:
RSTS_DCMAP	sim_disk.c	/^    }  RSTS_DCMAP;$/;"	t	typeref:struct:_RSTS_DCMAP	file:
RSTS_FNAME	sim_disk.c	/^    } RSTS_FNAME;$/;"	t	typeref:struct:_RSTS_FNAME	file:
RSTS_GFDBLOCKETTE	sim_disk.c	/^    } RSTS_GFDBLOCKETTE;$/;"	t	typeref:struct:_RSTS_GFDBLOCKETTE	file:
RSTS_MFDBLOCKETTE	sim_disk.c	/^    } RSTS_MFDBLOCKETTE;$/;"	t	typeref:struct:_RSTS_MFDBLOCKETTE	file:
RSTS_MFDLABEL	sim_disk.c	/^    } RSTS_MFDLABEL;$/;"	t	typeref:struct:_RSTS_MFDLABEL	file:
RSTS_PACKLABEL	sim_disk.c	/^    } RSTS_PACKLABEL;$/;"	t	typeref:struct:_RSTS_PACKLABEL	file:
RSTS_RETR	sim_disk.c	/^    } RSTS_RETR;$/;"	t	typeref:struct:_RSTS_RETR	file:
RSTS_ROOT	sim_disk.c	/^    } RSTS_ROOT;$/;"	t	typeref:union:_RSTS_ROOT	file:
RSTS_UFDBLOCKETTE	sim_disk.c	/^    } RSTS_UFDBLOCKETTE;$/;"	t	typeref:struct:_RSTS_UFDBLOCKETTE	file:
RSTS_UNAME	sim_disk.c	/^    } RSTS_UNAME;$/;"	t	typeref:struct:_RSTS_UNAME	file:
RST_MSK	PDP10/ka10_iii.c	50;"	d	file:
RST_MSK	PDP10/kx10_rc.c	64;"	d	file:
RST_SCN	PDP10/kx10_dc.c	50;"	d	file:
RST_SCN	PDP10/pdp6_dcs.c	48;"	d	file:
RS_NUMWD	PDP10/kx10_rs.c	34;"	d	file:
RT	display/type340cmd.h	152;"	d
RT11_DirEntry	sim_disk.c	/^    } RT11_DirEntry;$/;"	t	typeref:struct:_RT11_DirEntry	file:
RT11_DirHeader	sim_disk.c	/^    } RT11_DirHeader;$/;"	t	typeref:struct:_RT11_DirHeader	file:
RT11_HOME	sim_disk.c	1995;"	d	file:
RT11_HomeBlock	sim_disk.c	/^    } RT11_HomeBlock;$/;"	t	typeref:struct:_RT11_HomeBlock	file:
RT11_MAXPARTITIONS	sim_disk.c	1994;"	d	file:
RT11_MULTIPART	sim_disk.c	1999;"	d	file:
RT11_NOPART	sim_disk.c	1997;"	d	file:
RT11_SINGLEPART	sim_disk.c	1998;"	d	file:
RTC	sim_timer.c	/^    } RTC;$/;"	t	typeref:struct:RTC	file:
RTC	sim_timer.c	/^typedef struct RTC {$/;"	s	file:
RT_ENTRIES	sim_disk.c	1586;"	d	file:
RUN_FLG	PDP10/ka10_iii.c	81;"	d	file:
RU_BOOT	scp.h	54;"	d
RU_CONT	scp.h	53;"	d
RU_GO	scp.h	50;"	d
RU_NEXT	scp.h	52;"	d
RU_RUN	scp.h	49;"	d
RU_STEP	scp.h	51;"	d
RV	PDP10/kx10_dp.c	97;"	d	file:
RX0xINTER	sim_disk.c	1022;"	d	file:
RX0xISKEW	sim_disk.c	1023;"	d	file:
RX0xNSECT	sim_disk.c	1021;"	d	file:
RXBDL	PDP10/ks10_kmc.c	275;"	d	file:
RXBDL_DELAY	PDP10/ks10_kmc.c	515;"	d	file:
RXBUF	PDP10/ks10_kmc.c	276;"	d	file:
RXCSR_A_MODEM_BITS	PDP10/ks10_dup.c	168;"	d	file:
RXCSR_B_MODEM_BITS	PDP10/ks10_dup.c	169;"	d	file:
RXCSR_M_BDATSET	PDP10/ks10_dup.c	120;"	d	file:
RXCSR_M_CTS	PDP10/ks10_dup.c	159;"	d	file:
RXCSR_M_DCD	PDP10/ks10_dup.c	156;"	d	file:
RXCSR_M_DSCHNG	PDP10/ks10_dup.c	165;"	d	file:
RXCSR_M_DSCIE	PDP10/ks10_dup.c	135;"	d	file:
RXCSR_M_DSR	PDP10/ks10_dup.c	147;"	d	file:
RXCSR_M_DTR	PDP10/ks10_dup.c	123;"	d	file:
RXCSR_M_RCVEN	PDP10/ks10_dup.c	132;"	d	file:
RXCSR_M_RING	PDP10/ks10_dup.c	162;"	d	file:
RXCSR_M_RTS	PDP10/ks10_dup.c	126;"	d	file:
RXCSR_M_RXACT	PDP10/ks10_dup.c	153;"	d	file:
RXCSR_M_RXDONE	PDP10/ks10_dup.c	141;"	d	file:
RXCSR_M_RXIE	PDP10/ks10_dup.c	138;"	d	file:
RXCSR_M_SECRCV	PDP10/ks10_dup.c	150;"	d	file:
RXCSR_M_SECXMT	PDP10/ks10_dup.c	129;"	d	file:
RXCSR_M_STRSYN	PDP10/ks10_dup.c	144;"	d	file:
RXCSR_V_BDATSET	PDP10/ks10_dup.c	119;"	d	file:
RXCSR_V_CTS	PDP10/ks10_dup.c	158;"	d	file:
RXCSR_V_DCD	PDP10/ks10_dup.c	155;"	d	file:
RXCSR_V_DSCHNG	PDP10/ks10_dup.c	164;"	d	file:
RXCSR_V_DSCIE	PDP10/ks10_dup.c	134;"	d	file:
RXCSR_V_DSR	PDP10/ks10_dup.c	146;"	d	file:
RXCSR_V_DTR	PDP10/ks10_dup.c	122;"	d	file:
RXCSR_V_RCVEN	PDP10/ks10_dup.c	131;"	d	file:
RXCSR_V_RING	PDP10/ks10_dup.c	161;"	d	file:
RXCSR_V_RTS	PDP10/ks10_dup.c	125;"	d	file:
RXCSR_V_RXACT	PDP10/ks10_dup.c	152;"	d	file:
RXCSR_V_RXDONE	PDP10/ks10_dup.c	140;"	d	file:
RXCSR_V_RXIE	PDP10/ks10_dup.c	137;"	d	file:
RXCSR_V_SECRCV	PDP10/ks10_dup.c	149;"	d	file:
RXCSR_V_SECXMT	PDP10/ks10_dup.c	128;"	d	file:
RXCSR_V_STRSYN	PDP10/ks10_dup.c	143;"	d	file:
RXCSR_WRITEABLE	PDP10/ks10_dup.c	170;"	d	file:
RXD	PDP10/ka10_ch10.c	50;"	d	file:
RXDAT	PDP10/ks10_kmc.c	277;"	d	file:
RXDBUF_MBZ	PDP10/ks10_dup.c	201;"	d	file:
RXDBUF_M_RABRT	PDP10/ks10_dup.c	187;"	d	file:
RXDBUF_M_RCRCER	PDP10/ks10_dup.c	191;"	d	file:
RXDBUF_M_RENDMSG	PDP10/ks10_dup.c	184;"	d	file:
RXDBUF_M_RSTRMSG	PDP10/ks10_dup.c	181;"	d	file:
RXDBUF_M_RXDBUF	PDP10/ks10_dup.c	178;"	d	file:
RXDBUF_M_RXERR	PDP10/ks10_dup.c	198;"	d	file:
RXDBUF_M_RXOVR	PDP10/ks10_dup.c	195;"	d	file:
RXDBUF_S_RXDBUF	PDP10/ks10_dup.c	177;"	d	file:
RXDBUF_V_RABRT	PDP10/ks10_dup.c	186;"	d	file:
RXDBUF_V_RCRCER	PDP10/ks10_dup.c	190;"	d	file:
RXDBUF_V_RENDMSG	PDP10/ks10_dup.c	183;"	d	file:
RXDBUF_V_RSTRMSG	PDP10/ks10_dup.c	180;"	d	file:
RXDBUF_V_RXDBUF	PDP10/ks10_dup.c	176;"	d	file:
RXDBUF_V_RXERR	PDP10/ks10_dup.c	197;"	d	file:
RXDBUF_V_RXOVR	PDP10/ks10_dup.c	194;"	d	file:
RXFULL	PDP10/ks10_kmc.c	279;"	d	file:
RXIDLE	PDP10/ks10_kmc.c	274;"	d	file:
RXIE	PDP10/ka10_ch10.c	44;"	d	file:
RXLAST	PDP10/ks10_kmc.c	278;"	d	file:
RXLINE	PDP10/ks10_dz.c	57;"	d	file:
RXLINE_V	PDP10/ks10_dz.c	58;"	d	file:
RXNEWBD_DELAY	PDP10/ks10_kmc.c	516;"	d	file:
RXNOBUF	PDP10/ks10_kmc.c	280;"	d	file:
RXON	PDP10/ks10_dz.c	71;"	d	file:
RXPOLL_DELAY	PDP10/ks10_kmc.c	514;"	d	file:
RXSTART_DELAY	PDP10/ks10_kmc.c	517;"	d	file:
ReadFilePosition	sim_disk.c	/^static t_stat ReadFilePosition(FILE *File, void *buf, size_t bufsize, uint32 *bytesread, uint64 position)$/;"	f	file:
ReadQ	PDP10/kl10_nia.c	/^    ETH_QUE           ReadQ;$/;"	m	struct:nia_device	file:
ReadQ	PDP10/kx10_imp.c	/^    ETH_QUE           ReadQ;$/;"	m	struct:imp_device	file:
ReadVirtualDisk	sim_disk.c	/^ReadVirtualDisk(VHDHANDLE hVHD,$/;"	f	file:
ReadVirtualDiskSectors	sim_disk.c	/^ReadVirtualDiskSectors(VHDHANDLE hVHD,$/;"	f	file:
Reserved	sim_disk.c	/^        uint32 Reserved;$/;"	m	struct:_VHD_DynamicDiskHeader::VHD_ParentLocator	file:
Reserved	sim_disk.c	/^    char Reserved[256];$/;"	m	struct:_VHD_DynamicDiskHeader	file:
Reserved	sim_disk.c	/^    uint8       Reserved[354];          \/* Currently unused *\/$/;"	m	struct:simh_disk_footer	file:
Reserved	sim_disk.c	/^    uint8 Reserved[328];$/;"	m	struct:_VHD_Footer	file:
Reserved0	sim_disk.c	/^    uint32 Reserved0;$/;"	m	struct:_VHD_DynamicDiskHeader	file:
Reserved1	sim_disk.c	/^    uint8 Reserved1[11];$/;"	m	struct:_VHD_Footer	file:
Rh	PDP10/kx10_cpu.c	/^t_addr  Pl, Ph, Rl, Rh, Pflag;                \/* Protection registers *\/$/;"	v
Rl	PDP10/kx10_cpu.c	/^t_addr  Pl, Ph, Rl, Rh, Pflag;                \/* Protection registers *\/$/;"	v
Run	sim_frontpanel.h	/^    Run,        \/* Simulation is executing instructions *\/$/;"	e	enum:__anon23
S0	display/type340cmd.h	69;"	d
S1	display/type340cmd.h	70;"	d
S1OFF	display/type340cmd.h	97;"	d
S1ON	display/type340cmd.h	96;"	d
S2	display/type340cmd.h	71;"	d
S2OFF	display/type340cmd.h	101;"	d
S2ON	display/type340cmd.h	100;"	d
S3	display/type340cmd.h	72;"	d
S3OFF	display/type340cmd.h	105;"	d
S3ON	display/type340cmd.h	104;"	d
S4OFF	display/type340cmd.h	109;"	d
S4ON	display/type340cmd.h	108;"	d
SA	PDP10/ks10_dz.c	51;"	d	file:
SA	slirp/ip_input.c	535;"	d	file:
SAC	PDP10/kx10_cpu.c	700;"	d	file:
SAC2	PDP10/kx10_cpu.c	702;"	d	file:
SACZ	PDP10/kx10_cpu.c	701;"	d	file:
SAE	PDP10/ks10_dz.c	50;"	d	file:
SAMPLE_FREQUENCY	sim_video.c	/^const int SAMPLE_FREQUENCY = 11025;$/;"	v
SATT0	sim_disk.c	1613;"	d	file:
SATT1	sim_disk.c	1614;"	d	file:
SATT2	sim_disk.c	1615;"	d	file:
SAVEDATA	sim_defs.h	1076;"	d
SAVEDATA	sim_defs.h	988;"	d
SAVE_FF	display/type340.c	/^    unsigned char SAVE_FF;      \/* "save" flip-flop *\/$/;"	m	struct:type340	file:
SBUS_ERR	PDP10/kx10_defs.h	220;"	d
SC	PDP10/kx10_cpu.c	/^int     SC;                                   \/* Shift count *\/$/;"	v
SCAD	PDP10/kx10_cpu.c	/^int     SCAD;                                 \/* Shift count extension *\/$/;"	v
SCALE	PDP10/kx10_dpy.c	128;"	d	file:
SCALE_MS	slirp_glue/qemu/timer.h	11;"	d
SCALE_NS	slirp_glue/qemu/timer.h	13;"	d
SCALE_US	slirp_glue/qemu/timer.h	12;"	d
SCE	PDP10/kx10_cpu.c	697;"	d	file:
SCE	PDP10/pdp6_dsk.c	86;"	d	file:
SCHTAB	sim_defs.h	/^struct SCHTAB {$/;"	s
SCHTAB	sim_defs.h	/^typedef struct SCHTAB SCHTAB;$/;"	t	typeref:struct:SCHTAB
SCH_AND	scp.c	257;"	d	file:
SCH_E	scp.c	259;"	d	file:
SCH_EE	scp.c	263;"	d	file:
SCH_G	scp.c	261;"	d	file:
SCH_GE	scp.c	265;"	d	file:
SCH_L	scp.c	262;"	d	file:
SCH_LE	scp.c	266;"	d	file:
SCH_N	scp.c	260;"	d	file:
SCH_NE	scp.c	264;"	d	file:
SCH_OR	scp.c	256;"	d	file:
SCH_XOR	scp.c	258;"	d	file:
SCL	PDP10/pdp6_dsk.c	54;"	d	file:
SCPE_2FARG	sim_defs.h	402;"	d
SCPE_2MARG	sim_defs.h	403;"	d
SCPE_AFAIL	sim_defs.h	414;"	d
SCPE_ALATT	sim_defs.h	392;"	d
SCPE_AMBREG	sim_defs.h	417;"	d
SCPE_ARG	sim_defs.h	380;"	d
SCPE_BARE_STATUS	sim_defs.h	429;"	d
SCPE_BASE	sim_defs.h	371;"	d
SCPE_BREAK	sim_defs.h	427;"	d
SCPE_CSUM	sim_defs.h	375;"	d
SCPE_EOF	sim_defs.h	389;"	d
SCPE_EXIT	sim_defs.h	386;"	d
SCPE_EXPECT	sim_defs.h	416;"	d
SCPE_FMT	sim_defs.h	376;"	d
SCPE_FSSIZE	sim_defs.h	421;"	d
SCPE_IERR	sim_defs.h	409;"	d
SCPE_INCOMP	sim_defs.h	384;"	d
SCPE_INCOMPDSK	sim_defs.h	423;"	d
SCPE_INVEXPR	sim_defs.h	419;"	d
SCPE_INVREM	sim_defs.h	415;"	d
SCPE_INVSW	sim_defs.h	400;"	d
SCPE_IOERR	sim_defs.h	374;"	d
SCPE_KFLAG	sim_defs.h	426;"	d
SCPE_LOST	sim_defs.h	411;"	d
SCPE_MAX_ERR	sim_defs.h	425;"	d
SCPE_MEM	sim_defs.h	379;"	d
SCPE_MISVAL	sim_defs.h	401;"	d
SCPE_MTRLNT	sim_defs.h	410;"	d
SCPE_NEST	sim_defs.h	408;"	d
SCPE_NOATT	sim_defs.h	377;"	d
SCPE_NOFNC	sim_defs.h	397;"	d
SCPE_NOMESSAGE	sim_defs.h	428;"	d
SCPE_NOPARAM	sim_defs.h	391;"	d
SCPE_NORO	sim_defs.h	399;"	d
SCPE_NXDEV	sim_defs.h	404;"	d
SCPE_NXM	sim_defs.h	372;"	d
SCPE_NXPAR	sim_defs.h	407;"	d
SCPE_NXREG	sim_defs.h	406;"	d
SCPE_NXUN	sim_defs.h	405;"	d
SCPE_OK	sim_defs.h	370;"	d
SCPE_OPENERR	sim_defs.h	378;"	d
SCPE_REL	sim_defs.h	390;"	d
SCPE_REMOTE	sim_defs.h	418;"	d
SCPE_RO	sim_defs.h	383;"	d
SCPE_RUNTIME	sim_defs.h	422;"	d
SCPE_SIGERR	sim_defs.h	394;"	d
SCPE_SIGTERM	sim_defs.h	420;"	d
SCPE_STALL	sim_defs.h	413;"	d
SCPE_STEP	sim_defs.h	381;"	d
SCPE_STOP	sim_defs.h	385;"	d
SCPE_SUB	sim_defs.h	396;"	d
SCPE_TIMER	sim_defs.h	393;"	d
SCPE_TTIERR	sim_defs.h	387;"	d
SCPE_TTMO	sim_defs.h	412;"	d
SCPE_TTOERR	sim_defs.h	388;"	d
SCPE_TTYERR	sim_defs.h	395;"	d
SCPE_UDIS	sim_defs.h	398;"	d
SCPE_UNATT	sim_defs.h	373;"	d
SCPE_UNK	sim_defs.h	382;"	d
SCP_HELP_ATTACH	scp.h	279;"	d
SCP_HELP_FLAT	scp.h	277;"	d
SCP_HELP_H_	scp_help.h	28;"	d
SCP_HELP_ONECMD	scp.h	278;"	d
SCRCHCMP	PDP10/kx10_rc.c	69;"	d	file:
SCS	PDP10/pdp6_dsk.c	85;"	d	file:
SCSI_BUS	sim_scsi.h	/^typedef struct scsi_bus_t SCSI_BUS;$/;"	t	typeref:struct:scsi_bus_t
SCSI_CDROM	sim_scsi.h	47;"	d
SCSI_CMD	sim_scsi.h	57;"	d
SCSI_COMM	sim_scsi.h	51;"	d
SCSI_DATI	sim_scsi.h	56;"	d
SCSI_DATO	sim_scsi.h	55;"	d
SCSI_DBG_BUS	sim_scsi.h	66;"	d
SCSI_DBG_CMD	sim_scsi.h	64;"	d
SCSI_DBG_DSK	sim_scsi.h	67;"	d
SCSI_DBG_MSG	sim_scsi.h	65;"	d
SCSI_DBG_TAP	sim_scsi.h	68;"	d
SCSI_DEV	sim_scsi.h	/^typedef struct scsi_dev_t SCSI_DEV;$/;"	t	typeref:struct:scsi_dev_t
SCSI_DISC	sim_scsi.h	36;"	d
SCSI_DISK	sim_scsi.h	42;"	d
SCSI_INIT	sim_scsi.h	38;"	d
SCSI_JUKE	sim_scsi.h	50;"	d
SCSI_MSGI	sim_scsi.h	60;"	d
SCSI_MSGO	sim_scsi.h	59;"	d
SCSI_NOAUTO	sim_scsi.h	73;"	d
SCSI_OPTI	sim_scsi.h	49;"	d
SCSI_PRINT	sim_scsi.h	44;"	d
SCSI_PROC	sim_scsi.h	45;"	d
SCSI_SCAN	sim_scsi.h	48;"	d
SCSI_STS	sim_scsi.h	58;"	d
SCSI_TAPE	sim_scsi.h	43;"	d
SCSI_TARG	sim_scsi.h	37;"	d
SCSI_V_NOAUTO	sim_scsi.h	70;"	d
SCSI_V_UF	sim_scsi.h	71;"	d
SCSI_WLK	sim_scsi.h	72;"	d
SCSI_WORM	sim_scsi.h	46;"	d
SDL_PNGFormatAlpha	sim_video.c	/^static SDL_Surface *SDL_PNGFormatAlpha(SDL_Surface *src) $/;"	f	file:
SDL_SavePNG	sim_video.c	141;"	d	file:
SDL_SavePNG_RW	sim_video.c	/^static int SDL_SavePNG_RW(SDL_Surface *surface, SDL_RWops *dst, int freedst) $/;"	f	file:
SD_BOTH	sim_sock.c	67;"	d	file:
SECTM	PDP10/kx10_defs.h	182;"	d
SECTOR	PDP10/kx10_dp.c	88;"	d	file:
SECTORS	PDP10/ka10_ai.c	40;"	d	file:
SECTOR_REAL_SIZE	PDP10/ka10_ai.c	50;"	d	file:
SECTOR_SIZE	PDP10/ka10_ai.c	39;"	d	file:
SECT_CNT	PDP10/kx10_dp.c	54;"	d	file:
SECT_CNT	PDP10/kx10_rc.c	58;"	d	file:
SECT_END	PDP10/pdp6_dsk.c	66;"	d	file:
SECT_RECORD_NORM	sim_imd.h	57;"	d
SECT_RECORD_NORM_COMP	sim_imd.h	58;"	d
SECT_RECORD_NORM_COMP_ERR	sim_imd.h	62;"	d
SECT_RECORD_NORM_DAM	sim_imd.h	59;"	d
SECT_RECORD_NORM_DAM_COMP	sim_imd.h	60;"	d
SECT_RECORD_NORM_DAM_COMP_ERR	sim_imd.h	64;"	d
SECT_RECORD_NORM_DAM_ERR	sim_imd.h	63;"	d
SECT_RECORD_NORM_ERR	sim_imd.h	61;"	d
SECT_RECORD_UNAVAILABLE	sim_imd.h	56;"	d
SEC_CLK	PDP10/kl10_dn.c	118;"	d	file:
SEC_CLK	PDP10/kl10_fe.c	113;"	d	file:
SEC_CLKCTL	PDP10/kl10_dn.c	104;"	d	file:
SEC_CLKCTL	PDP10/kl10_fe.c	99;"	d	file:
SEC_CLKOFF	PDP10/kl10_dn.c	105;"	d	file:
SEC_CLKOFF	PDP10/kl10_fe.c	100;"	d	file:
SEC_CLKON	PDP10/kl10_dn.c	106;"	d	file:
SEC_CLKON	PDP10/kl10_fe.c	101;"	d	file:
SEC_CLKRD	PDP10/kl10_dn.c	108;"	d	file:
SEC_CLKRD	PDP10/kl10_fe.c	103;"	d	file:
SEC_CLKWT	PDP10/kl10_dn.c	107;"	d	file:
SEC_CLKWT	PDP10/kl10_fe.c	102;"	d	file:
SEC_CLRDDT	PDP10/kl10_dn.c	110;"	d	file:
SEC_CLRDDT	PDP10/kl10_fe.c	105;"	d	file:
SEC_CMDMSK	PDP10/kl10_dn.c	116;"	d	file:
SEC_CMDMSK	PDP10/kl10_fe.c	111;"	d	file:
SEC_DTCHR	PDP10/kl10_dn.c	91;"	d	file:
SEC_DTCHR	PDP10/kl10_fe.c	86;"	d	file:
SEC_DTCI	PDP10/kl10_dn.c	85;"	d	file:
SEC_DTCI	PDP10/kl10_fe.c	80;"	d	file:
SEC_DTCLK	PDP10/kl10_dn.c	84;"	d	file:
SEC_DTCLK	PDP10/kl10_fe.c	79;"	d	file:
SEC_DTCMD	PDP10/kl10_dn.c	88;"	d	file:
SEC_DTCMD	PDP10/kl10_fe.c	83;"	d	file:
SEC_DTF11	PDP10/kl10_dn.c	87;"	d	file:
SEC_DTF11	PDP10/kl10_fe.c	82;"	d	file:
SEC_DTFLG	PDP10/kl10_dn.c	83;"	d	file:
SEC_DTFLG	PDP10/kl10_fe.c	78;"	d	file:
SEC_DTMTD	PDP10/kl10_dn.c	92;"	d	file:
SEC_DTMTD	PDP10/kl10_fe.c	87;"	d	file:
SEC_DTMTI	PDP10/kl10_dn.c	93;"	d	file:
SEC_DTMTI	PDP10/kl10_fe.c	88;"	d	file:
SEC_DTOPR	PDP10/kl10_dn.c	90;"	d	file:
SEC_DTOPR	PDP10/kl10_fe.c	85;"	d	file:
SEC_DTSEQ	PDP10/kl10_dn.c	89;"	d	file:
SEC_DTSEQ	PDP10/kl10_fe.c	84;"	d	file:
SEC_DTSWR	PDP10/kl10_dn.c	94;"	d	file:
SEC_DTSWR	PDP10/kl10_fe.c	89;"	d	file:
SEC_DTT11	PDP10/kl10_dn.c	86;"	d	file:
SEC_DTT11	PDP10/kl10_fe.c	81;"	d	file:
SEC_ENDPASS	PDP10/kl10_dn.c	97;"	d	file:
SEC_ENDPASS	PDP10/kl10_fe.c	92;"	d	file:
SEC_EPRI	PDP10/kl10_dn.c	102;"	d	file:
SEC_EPRI	PDP10/kl10_fe.c	97;"	d	file:
SEC_ERR	PDP10/kx10_dp.c	64;"	d	file:
SEC_ERTM	PDP10/kl10_dn.c	103;"	d	file:
SEC_ERTM	PDP10/kl10_fe.c	98;"	d	file:
SEC_ESEC	PDP10/kl10_dn.c	101;"	d	file:
SEC_ESEC	PDP10/kl10_fe.c	96;"	d	file:
SEC_LOOKUP	PDP10/kl10_dn.c	98;"	d	file:
SEC_LOOKUP	PDP10/kl10_fe.c	93;"	d	file:
SEC_MONO	PDP10/kl10_dn.c	112;"	d	file:
SEC_MONO	PDP10/kl10_fe.c	107;"	d	file:
SEC_MONON	PDP10/kl10_dn.c	113;"	d	file:
SEC_MONON	PDP10/kl10_fe.c	108;"	d	file:
SEC_PGMCTL	PDP10/kl10_dn.c	96;"	d	file:
SEC_PGMCTL	PDP10/kl10_fe.c	91;"	d	file:
SEC_PRTY	PDP10/kx10_dp.c	77;"	d	file:
SEC_RDBYT	PDP10/kl10_dn.c	100;"	d	file:
SEC_RDBYT	PDP10/kl10_fe.c	95;"	d	file:
SEC_RDSW	PDP10/kl10_dn.c	109;"	d	file:
SEC_RDSW	PDP10/kl10_fe.c	104;"	d	file:
SEC_RDWRD	PDP10/kl10_dn.c	99;"	d	file:
SEC_RDWRD	PDP10/kl10_fe.c	94;"	d	file:
SEC_RTM	PDP10/kl10_dn.c	115;"	d	file:
SEC_RTM	PDP10/kl10_fe.c	110;"	d	file:
SEC_SCTR	PDP10/kx10_rc.c	62;"	d	file:
SEC_SEL	PDP10/kx10_rc.c	57;"	d	file:
SEC_SETDDT	PDP10/kl10_dn.c	111;"	d	file:
SEC_SETDDT	PDP10/kl10_fe.c	106;"	d	file:
SEC_SETPRI	PDP10/kl10_dn.c	114;"	d	file:
SEC_SETPRI	PDP10/kl10_fe.c	109;"	d	file:
SEEK_DONE	PDP10/kx10_dp.c	57;"	d	file:
SEEK_INC	PDP10/kx10_dp.c	117;"	d	file:
SEEK_STATE	PDP10/kx10_dp.c	58;"	d	file:
SEGMENT	PDP10/kx10_rc.c	51;"	d	file:
SEL0_CWR	PDP10/ks10_kmc.c	138;"	d	file:
SEL0_IEI	PDP10/ks10_kmc.c	146;"	d	file:
SEL0_IEO	PDP10/ks10_kmc.c	145;"	d	file:
SEL0_LUL	PDP10/ks10_kmc.c	140;"	d	file:
SEL0_MRC	PDP10/ks10_kmc.c	137;"	d	file:
SEL0_RMI	PDP10/ks10_kmc.c	142;"	d	file:
SEL0_RMO	PDP10/ks10_kmc.c	141;"	d	file:
SEL0_RQI	PDP10/ks10_kmc.c	144;"	d	file:
SEL0_RUN	PDP10/ks10_kmc.c	136;"	d	file:
SEL0_SLU	PDP10/ks10_kmc.c	139;"	d	file:
SEL0_SUP	PDP10/ks10_kmc.c	143;"	d	file:
SEL2_CMD	PDP10/ks10_kmc.c	160;"	d	file:
SEL2_II_RESERVED	PDP10/ks10_kmc.c	170;"	d	file:
SEL2_IOT	PDP10/ks10_kmc.c	158;"	d	file:
SEL2_LINE	PDP10/ks10_kmc.c	152;"	d	file:
SEL2_OVR	PDP10/ks10_kmc.c	150;"	d	file:
SEL2_RDI	PDP10/ks10_kmc.c	157;"	d	file:
SEL2_RDO	PDP10/ks10_kmc.c	156;"	d	file:
SEL2_V_CMD	PDP10/ks10_kmc.c	159;"	d	file:
SEL2_V_LINE	PDP10/ks10_kmc.c	151;"	d	file:
SEL4_ADDR	PDP10/ks10_kmc.c	175;"	d	file:
SEL4_CI_POLL	PDP10/ks10_kmc.c	173;"	d	file:
SEL6_BI_ENABLE	PDP10/ks10_kmc.c	186;"	d	file:
SEL6_BI_KILL	PDP10/ks10_kmc.c	187;"	d	file:
SEL6_BO_EOM	PDP10/ks10_kmc.c	190;"	d	file:
SEL6_CI_DDCMP	PDP10/ks10_kmc.c	205;"	d	file:
SEL6_CI_ENABLE	PDP10/ks10_kmc.c	213;"	d	file:
SEL6_CI_ENASS	PDP10/ks10_kmc.c	209;"	d	file:
SEL6_CI_HDX	PDP10/ks10_kmc.c	207;"	d	file:
SEL6_CI_NOCRC	PDP10/ks10_kmc.c	211;"	d	file:
SEL6_CI_SADDR	PDP10/ks10_kmc.c	214;"	d	file:
SEL6_CI_V_DDCMP	PDP10/ks10_kmc.c	204;"	d	file:
SEL6_CI_V_ENABLE	PDP10/ks10_kmc.c	212;"	d	file:
SEL6_CI_V_ENASS	PDP10/ks10_kmc.c	208;"	d	file:
SEL6_CI_V_HDX	PDP10/ks10_kmc.c	206;"	d	file:
SEL6_CI_V_NOCRC	PDP10/ks10_kmc.c	210;"	d	file:
SEL6_CO_ABORT	PDP10/ks10_kmc.c	193;"	d	file:
SEL6_CO_DCRC	PDP10/ks10_kmc.c	195;"	d	file:
SEL6_CO_DSRCHG	PDP10/ks10_kmc.c	197;"	d	file:
SEL6_CO_HCRC	PDP10/ks10_kmc.c	194;"	d	file:
SEL6_CO_KDONE	PDP10/ks10_kmc.c	201;"	d	file:
SEL6_CO_NOBUF	PDP10/ks10_kmc.c	196;"	d	file:
SEL6_CO_NXM	PDP10/ks10_kmc.c	198;"	d	file:
SEL6_CO_RXO	PDP10/ks10_kmc.c	200;"	d	file:
SEL6_CO_TXU	PDP10/ks10_kmc.c	199;"	d	file:
SEL6_CO_XAD	PDP10/ks10_kmc.c	180;"	d	file:
SEL6_II_DUPCSR	PDP10/ks10_kmc.c	183;"	d	file:
SEL6_V_CO_XAD	PDP10/ks10_kmc.c	179;"	d	file:
SEL_CYL	PDP10/kx10_dp.c	118;"	d	file:
SEL_CYL256	PDP10/kx10_dp.c	108;"	d	file:
SEL_DRIVE	PDP10/kx10_dp.c	119;"	d	file:
SEL_ERR	PDP10/ka10_pmp.c	221;"	d	file:
SEL_INST	PDP10/ka10_iii.c	89;"	d	file:
SEL_RP03	PDP10/kx10_dp.c	107;"	d	file:
SEL_SEC	PDP10/kx10_dp.c	110;"	d	file:
SEL_SPARE	PDP10/kx10_dp.c	109;"	d	file:
SEND	sim_defs.h	/^struct SEND {$/;"	s
SEND	sim_defs.h	/^typedef struct SEND SEND;$/;"	t	typeref:struct:SEND
SEND_DEFAULT_DELAY	sim_defs.h	857;"	d
SENSE	PDP10/ka10_pmp.c	153;"	d	file:
SENSE_BUF	sim_console.c	/^    unsigned int stat2; } SENSE_BUF;$/;"	t	typeref:struct:__anon9	file:
SENSE_BUF	sim_serial.c	/^    unsigned int stat2; } SENSE_BUF;$/;"	t	typeref:struct:__anon27	file:
SEQ_GEQ	slirp/tcp.h	161;"	d
SEQ_GT	slirp/tcp.h	160;"	d
SEQ_LEQ	slirp/tcp.h	159;"	d
SEQ_LT	slirp/tcp.h	158;"	d
SERCONFIG	sim_serial.c	/^    } SERCONFIG;$/;"	t	typeref:struct:serial_config	file:
SERHANDLE	sim_serial.h	/^typedef struct SERPORT *SERHANDLE;$/;"	t	typeref:struct:SERPORT
SERHANDLE	sim_tmxr.h	/^typedef struct SERPORT *SERHANDLE;$/;"	t	typeref:struct:SERPORT
SERIAL_IN_WAIT	sim_defs.h	443;"	d
SERIAL_LIST	sim_serial.c	/^    } SERIAL_LIST;$/;"	t	typeref:struct:serial_list	file:
SERIAL_OUT_WAIT	sim_defs.h	444;"	d
SERPORT	sim_serial.c	/^struct SERPORT {$/;"	s	file:
SER_DEV_CONFIG_MAX	sim_serial.c	135;"	d	file:
SER_DEV_DESC_MAX	sim_serial.c	134;"	d	file:
SER_DEV_NAME_MAX	sim_serial.c	133;"	d	file:
SER_MAX_DEVICE	sim_serial.c	136;"	d	file:
SET_BITMAP	sim_disk.c	6595;"	d	file:
SET_DATA_REQ	PDP10/kx10_cp.c	51;"	d	file:
SET_FMT	PDP10/kx10_disk.h	30;"	d
SET_GPIO_ALT	PDP10/pidp10panel.c	67;"	d	file:
SET_HOLD	PDP10/ka10_pmp.c	290;"	d	file:
SET_MASK	PDP10/ka10_ai.c	95;"	d	file:
SET_MSK	PDP10/ka10_iii.c	49;"	d	file:
SET_PIA	PDP10/ka10_iii.c	45;"	d	file:
SET_PUNCH_ON	PDP10/kx10_cp.c	53;"	d	file:
SET_TYPE	PDP10/ka10_pmp.c	71;"	d	file:
SEVEN_CHAN	PDP10/kx10_mt.c	76;"	d	file:
SGM	display/vtmacs.h	126;"	d
SGN_	display/vtmacs.h	12;"	d
SHFT	PDP10/ka10_dkb.c	45;"	d	file:
SHFT	PDP10/ka10_stk.c	41;"	d	file:
SHMEM	sim_fio.c	/^struct SHMEM {$/;"	s	file:
SHMEM	sim_fio.h	/^typedef struct SHMEM SHMEM;$/;"	t	typeref:struct:SHMEM
SHORT_DASH	display/vt11.c	/^enum linetype { SOLID=0, LONG_DASH, SHORT_DASH, DOT_DASH };$/;"	e	enum:linetype	file:
SHTAB	sim_defs.h	/^struct SHTAB {$/;"	s
SHTAB	sim_defs.h	/^typedef struct SHTAB SHTAB;$/;"	t	typeref:struct:SHTAB
SHUT_RD	slirp_glue/qemu/sockets.h	46;"	d
SHUT_RDWR	slirp_glue/qemu/sockets.h	48;"	d
SHUT_WR	slirp_glue/qemu/sockets.h	47;"	d
SIGN	display/display.c	813;"	d	file:
SIGN	display/imlac.c	51;"	d	file:
SIGN	display/tt2500.c	52;"	d	file:
SIMH	PDP10/kx10_disk.h	33;"	d
SIMH_SERHANDLE_DEFINED	sim_serial.h	40;"	d
SIMH_SERHANDLE_DEFINED	sim_tmxr.h	55;"	d
SIM_ALPHA_ADD	sim_video.h	162;"	d
SIM_ALPHA_BLEND	sim_video.h	161;"	d
SIM_ALPHA_MOD	sim_video.h	163;"	d
SIM_ALPHA_NONE	sim_video.h	160;"	d
SIM_ARCHIVE_GIT_COMMIT_ID	sim_rev.h	59;"	d
SIM_ARCHIVE_GIT_COMMIT_TIME	sim_rev.h	60;"	d
SIM_ASYNCH_CLOCKS	sim_defs.h	1109;"	d
SIM_ASYNCH_CLOCKS	sim_timer.c	236;"	d	file:
SIM_ASYNCH_MUX	sim_tmxr.h	346;"	d
SIM_BKPT_N_SPC	sim_defs.h	352;"	d
SIM_BKPT_V_SPC	sim_defs.h	353;"	d
SIM_BRK_ALLTYP	scp.c	271;"	d	file:
SIM_BRK_INILNT	scp.c	270;"	d	file:
SIM_CARD_API	sim_card.h	82;"	d
SIM_CARD_H_	sim_card.h	76;"	d
SIM_CONSOLE_H_	sim_console.h	36;"	d
SIM_DBG_ACTIVATE	scp.c	318;"	d	file:
SIM_DBG_AIO_QUEUE	scp.c	319;"	d	file:
SIM_DBG_BRK_ACTION	scp.c	322;"	d	file:
SIM_DBG_DO	scp.c	323;"	d	file:
SIM_DBG_EVENT	scp.c	317;"	d	file:
SIM_DBG_EVENT_NEG	scp.c	316;"	d	file:
SIM_DBG_EXP_EVAL	scp.c	321;"	d	file:
SIM_DBG_EXP_STACK	scp.c	320;"	d	file:
SIM_DBG_RESTORE	scp.c	325;"	d	file:
SIM_DBG_SAVE	scp.c	324;"	d	file:
SIM_DEFS_H_	sim_defs.h	110;"	d
SIM_DELTA	sim_rev.h	40;"	d
SIM_DISK_H_	sim_disk.h	31;"	d
SIM_ETHER_H	sim_ether.h	67;"	d
SIM_FIO_H_	sim_fio.h	34;"	d
SIM_FRONTPANEL_H_	sim_frontpanel.h	49;"	d
SIM_FRONTPANEL_VERSION	sim_frontpanel.h	59;"	d
SIM_IDLE_CAL	sim_timer.h	83;"	d
SIM_IDLE_STDFLT	sim_timer.h	85;"	d
SIM_IDLE_STMAX	sim_timer.h	86;"	d
SIM_IDLE_STMIN	sim_timer.h	84;"	d
SIM_IMD_H_	sim_imd.h	40;"	d
SIM_INITIAL_IPS	sim_timer.h	79;"	d
SIM_INLINE	sim_defs.h	313;"	d
SIM_INLINE	sim_defs.h	316;"	d
SIM_INLINE	sim_defs.h	319;"	d
SIM_INTERNAL_CLK	sim_timer.c	92;"	d	file:
SIM_INTERNAL_UNIT	sim_timer.c	93;"	d	file:
SIM_KEYPRESS_DOWN	sim_video.h	39;"	d
SIM_KEYPRESS_REPEAT	sim_video.h	41;"	d
SIM_KEYPRESS_UP	sim_video.h	40;"	d
SIM_KEY_0	sim_video.h	57;"	d
SIM_KEY_1	sim_video.h	58;"	d
SIM_KEY_2	sim_video.h	59;"	d
SIM_KEY_3	sim_video.h	60;"	d
SIM_KEY_4	sim_video.h	61;"	d
SIM_KEY_5	sim_video.h	62;"	d
SIM_KEY_6	sim_video.h	63;"	d
SIM_KEY_7	sim_video.h	64;"	d
SIM_KEY_8	sim_video.h	65;"	d
SIM_KEY_9	sim_video.h	66;"	d
SIM_KEY_A	sim_video.h	68;"	d
SIM_KEY_ALT_L	sim_video.h	131;"	d
SIM_KEY_ALT_R	sim_video.h	132;"	d
SIM_KEY_B	sim_video.h	69;"	d
SIM_KEY_BACKQUOTE	sim_video.h	95;"	d
SIM_KEY_BACKSLASH	sim_video.h	102;"	d
SIM_KEY_BACKSPACE	sim_video.h	113;"	d
SIM_KEY_C	sim_video.h	70;"	d
SIM_KEY_CAPS_LOCK	sim_video.h	128;"	d
SIM_KEY_COMMA	sim_video.h	104;"	d
SIM_KEY_CTRL_L	sim_video.h	133;"	d
SIM_KEY_CTRL_R	sim_video.h	134;"	d
SIM_KEY_D	sim_video.h	71;"	d
SIM_KEY_DELETE	sim_video.h	118;"	d
SIM_KEY_DOWN	sim_video.h	124;"	d
SIM_KEY_E	sim_video.h	72;"	d
SIM_KEY_END	sim_video.h	120;"	d
SIM_KEY_ENTER	sim_video.h	115;"	d
SIM_KEY_EQUALS	sim_video.h	97;"	d
SIM_KEY_ESC	sim_video.h	112;"	d
SIM_KEY_EVENT	sim_video.h	/^typedef struct key_event SIM_KEY_EVENT;$/;"	t	typeref:struct:key_event
SIM_KEY_F	sim_video.h	73;"	d
SIM_KEY_F1	sim_video.h	44;"	d
SIM_KEY_F10	sim_video.h	53;"	d
SIM_KEY_F11	sim_video.h	54;"	d
SIM_KEY_F12	sim_video.h	55;"	d
SIM_KEY_F2	sim_video.h	45;"	d
SIM_KEY_F3	sim_video.h	46;"	d
SIM_KEY_F4	sim_video.h	47;"	d
SIM_KEY_F5	sim_video.h	48;"	d
SIM_KEY_F6	sim_video.h	49;"	d
SIM_KEY_F7	sim_video.h	50;"	d
SIM_KEY_F8	sim_video.h	51;"	d
SIM_KEY_F9	sim_video.h	52;"	d
SIM_KEY_G	sim_video.h	74;"	d
SIM_KEY_H	sim_video.h	75;"	d
SIM_KEY_HOME	sim_video.h	119;"	d
SIM_KEY_I	sim_video.h	76;"	d
SIM_KEY_INSERT	sim_video.h	117;"	d
SIM_KEY_J	sim_video.h	77;"	d
SIM_KEY_K	sim_video.h	78;"	d
SIM_KEY_KP_5	sim_video.h	153;"	d
SIM_KEY_KP_ADD	sim_video.h	141;"	d
SIM_KEY_KP_DELETE	sim_video.h	152;"	d
SIM_KEY_KP_DIVIDE	sim_video.h	156;"	d
SIM_KEY_KP_DOWN	sim_video.h	144;"	d
SIM_KEY_KP_END	sim_video.h	143;"	d
SIM_KEY_KP_ENTER	sim_video.h	154;"	d
SIM_KEY_KP_HOME	sim_video.h	148;"	d
SIM_KEY_KP_INSERT	sim_video.h	151;"	d
SIM_KEY_KP_LEFT	sim_video.h	146;"	d
SIM_KEY_KP_MULTIPLY	sim_video.h	155;"	d
SIM_KEY_KP_PAGE_DOWN	sim_video.h	145;"	d
SIM_KEY_KP_PAGE_UP	sim_video.h	150;"	d
SIM_KEY_KP_RIGHT	sim_video.h	147;"	d
SIM_KEY_KP_SUBTRACT	sim_video.h	142;"	d
SIM_KEY_KP_UP	sim_video.h	149;"	d
SIM_KEY_L	sim_video.h	79;"	d
SIM_KEY_LEFT	sim_video.h	125;"	d
SIM_KEY_LEFT_BACKSLASH	sim_video.h	103;"	d
SIM_KEY_LEFT_BRACKET	sim_video.h	98;"	d
SIM_KEY_M	sim_video.h	80;"	d
SIM_KEY_MENU	sim_video.h	139;"	d
SIM_KEY_MINUS	sim_video.h	96;"	d
SIM_KEY_N	sim_video.h	81;"	d
SIM_KEY_NUM_LOCK	sim_video.h	129;"	d
SIM_KEY_O	sim_video.h	82;"	d
SIM_KEY_P	sim_video.h	83;"	d
SIM_KEY_PAGE_DOWN	sim_video.h	122;"	d
SIM_KEY_PAGE_UP	sim_video.h	121;"	d
SIM_KEY_PAUSE	sim_video.h	110;"	d
SIM_KEY_PERIOD	sim_video.h	105;"	d
SIM_KEY_PRINT	sim_video.h	108;"	d
SIM_KEY_Q	sim_video.h	84;"	d
SIM_KEY_R	sim_video.h	85;"	d
SIM_KEY_RIGHT	sim_video.h	126;"	d
SIM_KEY_RIGHT_BRACKET	sim_video.h	99;"	d
SIM_KEY_S	sim_video.h	86;"	d
SIM_KEY_SCRL_LOCK	sim_video.h	109;"	d
SIM_KEY_SEMICOLON	sim_video.h	100;"	d
SIM_KEY_SHIFT_L	sim_video.h	135;"	d
SIM_KEY_SHIFT_R	sim_video.h	136;"	d
SIM_KEY_SINGLE_QUOTE	sim_video.h	101;"	d
SIM_KEY_SLASH	sim_video.h	106;"	d
SIM_KEY_SPACE	sim_video.h	116;"	d
SIM_KEY_T	sim_video.h	87;"	d
SIM_KEY_TAB	sim_video.h	114;"	d
SIM_KEY_U	sim_video.h	88;"	d
SIM_KEY_UNKNOWN	sim_video.h	158;"	d
SIM_KEY_UP	sim_video.h	123;"	d
SIM_KEY_V	sim_video.h	89;"	d
SIM_KEY_W	sim_video.h	90;"	d
SIM_KEY_WIN_L	sim_video.h	137;"	d
SIM_KEY_WIN_R	sim_video.h	138;"	d
SIM_KEY_X	sim_video.h	91;"	d
SIM_KEY_Y	sim_video.h	92;"	d
SIM_KEY_Z	sim_video.h	93;"	d
SIM_MAJOR	sim_rev.h	31;"	d
SIM_MINOR	sim_rev.h	34;"	d
SIM_MOUSE_EVENT	sim_video.h	/^typedef struct mouse_event SIM_MOUSE_EVENT;$/;"	t	typeref:struct:mouse_event
SIM_NOINLINE	sim_defs.h	314;"	d
SIM_NOINLINE	sim_defs.h	317;"	d
SIM_NOINLINE	sim_defs.h	320;"	d
SIM_NTIMERS	sim_timer.h	76;"	d
SIM_PATCH	sim_rev.h	37;"	d
SIM_PRE_CALIBRATE_MIN_MS	sim_timer.h	81;"	d
SIM_PRINT_BPF_ARGUMENTS	sim_ether.c	4368;"	d	file:
SIM_REV_H_	sim_rev.h	28;"	d
SIM_SCP_H_	scp.h	38;"	d
SIM_SERIAL_H_	sim_serial.h	33;"	d
SIM_SLIRP_H	slirp_glue/sim_slirp.h	2;"	d
SIM_SOCK_H_	sim_sock.h	47;"	d
SIM_SOCK_OPT_BLOCKING	sim_sock.h	123;"	d
SIM_SOCK_OPT_DATAGRAM	sim_sock.h	121;"	d
SIM_SOCK_OPT_NODELAY	sim_sock.h	122;"	d
SIM_SOCK_OPT_REUSEADDR	sim_sock.h	120;"	d
SIM_SW_HIDE	sim_defs.h	357;"	d
SIM_SW_REG	sim_defs.h	359;"	d
SIM_SW_REST	sim_defs.h	358;"	d
SIM_SW_SHUT	sim_defs.h	361;"	d
SIM_SW_STOP	sim_defs.h	360;"	d
SIM_TAPE_H_	sim_tape.h	40;"	d
SIM_TEST	scp.h	398;"	d
SIM_TEST	sim_ether.h	394;"	d
SIM_TEST_INIT	scp.h	388;"	d
SIM_TEST_INIT	sim_ether.h	393;"	d
SIM_THROT_DRIFT_PCT_DFLT	sim_timer.h	92;"	d
SIM_THROT_KCYC	sim_timer.h	96;"	d
SIM_THROT_MCYC	sim_timer.h	95;"	d
SIM_THROT_MSMIN	sim_timer.h	93;"	d
SIM_THROT_NONE	sim_timer.h	94;"	d
SIM_THROT_PCT	sim_timer.h	97;"	d
SIM_THROT_SPC	sim_timer.h	98;"	d
SIM_THROT_STATE_INIT	sim_timer.h	99;"	d
SIM_THROT_STATE_THROTTLE	sim_timer.h	101;"	d
SIM_THROT_STATE_TIME	sim_timer.h	100;"	d
SIM_THROT_WINIT	sim_timer.h	88;"	d
SIM_THROT_WMIN	sim_timer.h	91;"	d
SIM_THROT_WMUL	sim_timer.h	90;"	d
SIM_THROT_WST	sim_timer.h	89;"	d
SIM_TIMER_H_	sim_timer.h	32;"	d
SIM_TMAX	sim_timer.h	77;"	d
SIM_TMXR_H_	sim_tmxr.h	48;"	d
SIM_VERSION_MODE	sim_rev.h	44;"	d
SIM_VIDEO_H_	sim_video.h	31;"	d
SIM_VID_DBG_CURSOR	sim_video.h	246;"	d
SIM_VID_DBG_KEY	sim_video.h	247;"	d
SIM_VID_DBG_MOUSE	sim_video.h	245;"	d
SIM_VID_DBG_VIDEO	sim_video.h	248;"	d
SIM_VID_INPUTCAPTURED	sim_video.h	190;"	d
SIXTOASC	PDP10/kx10_sys.c	1172;"	d	file:
SIZEOF_CHAR	slirp/slirp_config.h	130;"	d
SIZEOF_CHAR_P	slirp/slirp_config.h	139;"	d
SIZEOF_INT	slirp/slirp_config.h	136;"	d
SIZEOF_SHORT	slirp/slirp_config.h	133;"	d
SI_GENERATE	display/vtmacs.h	31;"	d
SI_INHIBIT	display/vtmacs.h	30;"	d
SI_SAME	display/vtmacs.h	29;"	d
SK	PDP10/kx10_dp.c	99;"	d	file:
SKP_MOD_OFF	PDP10/ka10_pmp.c	285;"	d	file:
SKP_MOD_ON	PDP10/ka10_pmp.c	286;"	d	file:
SLAVE	display/type340.c	/^enum mode { PARAM=0, POINT, SLAVE, CHAR, VECTOR, VCONT, INCR, SUBR };$/;"	e	enum:mode	file:
SLAVE_DEVNUM	PDP10/pdp6_slave.c	48;"	d	file:
SLAVE_MEM_CYCLE	PDP10/pdp6_slave.c	45;"	d	file:
SLAVE_POLL	PDP10/pdp6_slave.c	50;"	d	file:
SLFTST	PDP10/kl10_nia.c	92;"	d	file:
SLICE	PDP10/pdp6_mtc.c	83;"	d	file:
SLIRP	slirp_glue/sim_slirp.h	/^typedef struct sim_slirp SLIRP;$/;"	t	typeref:struct:sim_slirp
SLIRP_BOOTP_H	slirp/bootp.h	3;"	d
SLIRP_DEBUG_H	slirp/debug.h	2;"	d
SLIRP_MAIN_H	slirp/main.h	8;"	d
SLIRP_MSIZE	slirp/mbuf.c	26;"	d	file:
SLIRP_TFTP_H	slirp/tftp.h	3;"	d
SLOW	PDP10/kx10_dpy.c	804;"	d	file:
SLW_CHN	PDP10/kx10_dp.c	70;"	d	file:
SMASK	PDP10/kx10_defs.h	175;"	d
SMEAR_SIGN	PDP10/kx10_cpu.c	720;"	d	file:
SNA	PDP10/pdp6_dsk.c	80;"	d	file:
SNS_ADDR	PDP10/ka10_pmp.c	172;"	d	file:
SNS_ATTN	PDP10/ka10_pmp.c	296;"	d	file:
SNS_BSY	PDP10/ka10_pmp.c	299;"	d	file:
SNS_BUSCHK	PDP10/ka10_pmp.c	158;"	d	file:
SNS_BYTE2	PDP10/ka10_pmp.c	176;"	d	file:
SNS_BYTE3	PDP10/ka10_pmp.c	178;"	d	file:
SNS_CHNEND	PDP10/ka10_pmp.c	300;"	d	file:
SNS_CMDREJ	PDP10/ka10_pmp.c	156;"	d	file:
SNS_CTLEND	PDP10/ka10_pmp.c	298;"	d	file:
SNS_DATCHK	PDP10/ka10_pmp.c	160;"	d	file:
SNS_DCCNT	PDP10/ka10_pmp.c	166;"	d	file:
SNS_DEVEND	PDP10/ka10_pmp.c	301;"	d	file:
SNS_ENDCYL	PDP10/ka10_pmp.c	168;"	d	file:
SNS_EQUCHK	PDP10/ka10_pmp.c	159;"	d	file:
SNS_INTVENT	PDP10/ka10_pmp.c	157;"	d	file:
SNS_INVSEQ	PDP10/ka10_pmp.c	169;"	d	file:
SNS_NOREC	PDP10/ka10_pmp.c	170;"	d	file:
SNS_OVRINC	PDP10/ka10_pmp.c	173;"	d	file:
SNS_OVRRUN	PDP10/ka10_pmp.c	161;"	d	file:
SNS_SEEKCK	PDP10/ka10_pmp.c	163;"	d	file:
SNS_SMS	PDP10/ka10_pmp.c	297;"	d	file:
SNS_TRKCND	PDP10/ka10_pmp.c	162;"	d	file:
SNS_TRKOVR	PDP10/ka10_pmp.c	167;"	d	file:
SNS_UNITCHK	PDP10/ka10_pmp.c	302;"	d	file:
SNS_UNITEXP	PDP10/ka10_pmp.c	303;"	d	file:
SNS_WRP	PDP10/ka10_pmp.c	171;"	d	file:
SOB	PDP10/kx10_cpu.c	725;"	d	file:
SOB	PDP10/kx10_cpu.c	728;"	d	file:
SOCKET	sim_sock.h	73;"	d
SOCKET	slirp_glue/config-host.h	/^typedef int SOCKET;$/;"	t
SOCKET_ERROR	sim_sock.h	95;"	d
SOCKET_ERROR	slirp_glue/config-host.h	11;"	d
SOLID	display/vt11.c	/^enum linetype { SOLID=0, LONG_DASH, SHORT_DASH, DOT_DASH };$/;"	e	enum:linetype	file:
SO_EXPIRE	slirp/socket.h	11;"	d
SO_EXPIREFAST	slirp/socket.h	12;"	d
SO_OPTIONS	slirp/slirp.h	301;"	d
SPACEWAR_SWITCHES	display/display.h	194;"	d
SPARE	PDP10/kx10_dp.c	86;"	d	file:
SPCLKEY	display/sim_ws.c	165;"	d	file:
SPC_EOF	PDP10/kx10_mt.c	70;"	d	file:
SPC_EOF	PDP10/pdp6_mtc.c	75;"	d	file:
SPC_FWD	PDP10/kx10_mt.c	69;"	d	file:
SPC_FWD	PDP10/pdp6_mtc.c	74;"	d	file:
SPC_REV	PDP10/kx10_mt.c	71;"	d	file:
SPC_REV	PDP10/pdp6_mtc.c	76;"	d	file:
SPC_REV_EOF	PDP10/kx10_mt.c	72;"	d	file:
SPC_REV_EOF	PDP10/pdp6_mtc.c	77;"	d	file:
SPECIAL_CHAR_KEYS	display/sim_ws.c	170;"	d	file:
SPW	PDP10/ka10_dkb.c	40;"	d	file:
SPW_FLG	PDP10/ka10_dkb.c	43;"	d	file:
SPY	PDP10/ka10_ch10.c	45;"	d	file:
SRBSIZ	scp.c	269;"	d	file:
SRCS	Makefile	/^SRCS = .\/PDP10\/kx10_cpu.c .\/PDP10\/kx10_sys.c .\/PDP10\/kx10_df.c .\/PDP10\/kx10_dp.c .\/PDP10\/kx10_mt.c .\/PDP10\/kx10_cty.c .\/PDP10\/kx10_lp.c .\/PDP10\/kx10_pt.c .\/PDP10\/kx10_dc.c .\/PDP10\/kx10_rp.c .\/PDP10\/kx10_rc.c .\/PDP10\/kx10_dt.c .\/PDP10\/kx10_dk.c .\/PDP10\/kx10_cr.c .\/PDP10\/kx10_cp.c .\/PDP10\/kx10_tu.c .\/PDP10\/kx10_rs.c .\/PDP10\/ka10_pd.c .\/PDP10\/kx10_rh.c .\/PDP10\/kx10_imp.c .\/PDP10\/ka10_tk10.c .\/PDP10\/ka10_mty.c .\/PDP10\/ka10_imx.c .\/PDP10\/ka10_ch10.c .\/PDP10\/ka10_stk.c .\/PDP10\/ka10_ten11.c .\/PDP10\/ka10_auxcpu.c .\/PDP10\/ka10_pmp.c .\/PDP10\/ka10_dkb.c .\/PDP10\/pdp6_dct.c .\/PDP10\/pdp6_dtc.c .\/PDP10\/pdp6_mtc.c .\/PDP10\/pdp6_dsk.c .\/PDP10\/pdp6_dcs.c .\/PDP10\/ka10_dpk.c .\/PDP10\/kx10_dpy.c .\/PDP10\/ka10_ai.c .\/PDP10\/ka10_iii.c .\/PDP10\/kx10_disk.c .\/PDP10\/ka10_pclk.c .\/PDP10\/ka10_tv.c .\/display\/display.c .\/display\/sim_ws.c .\/display\/type340.c  .\/scp.c .\/sim_console.c .\/sim_fio.c .\/sim_timer.c .\/sim_sock.c .\/sim_tmxr.c .\/sim_ether.c .\/sim_tape.c .\/sim_disk.c .\/sim_serial.c .\/sim_video.c .\/sim_imd.c .\/sim_card.c .\/PDP10\/pidp10panel.c .\/slirp\/*.c slirp_glue\/*.c$/;"	m
SRC_DONE	PDP10/kx10_dp.c	74;"	d	file:
SRC_ERR	PDP10/kx10_dp.c	71;"	d	file:
SSH_CL	scp.h	66;"	d
SSH_SH	scp.h	65;"	d
SSH_ST	scp.h	64;"	d
SS_CHANGE	display/vtmacs.h	65;"	d
SS_CTL	slirp/socket.h	71;"	d
SS_FACCEPTCONN	slirp/socket.h	72;"	d
SS_FACCEPTONCE	slirp/socket.h	73;"	d
SS_FCANTRCVMORE	slirp/socket.h	67;"	d
SS_FCANTSENDMORE	slirp/socket.h	68;"	d
SS_FWDRAIN	slirp/socket.h	69;"	d
SS_HOSTFWD	slirp/socket.h	76;"	d
SS_INCOMING	slirp/socket.h	77;"	d
SS_ISFCONNECTED	slirp/socket.h	66;"	d
SS_ISFCONNECTING	slirp/socket.h	65;"	d
SS_NOFDREF	slirp/socket.h	63;"	d
SS_PERSISTENT_MASK	slirp/socket.h	75;"	d
SS_SAME	display/vtmacs.h	64;"	d
ST340_HEDGE	display/type340.h	40;"	d
ST340_LPHIT	display/type340.h	39;"	d
ST340_STOPPED	display/type340.h	44;"	d
ST340_STOP_INT	display/type340.h	41;"	d
ST340_VEDGE	display/type340.h	38;"	d
STACKBUFSIZE	sim_defs.h	276;"	d
STACKBUFSIZE	sim_defs.h	278;"	d
STACK_EMPTY	display/vt11.c	523;"	d	file:
STACK_FULL	display/vt11.c	524;"	d	file:
STACK_GROW_AMOUNT	scp.c	15242;"	d	file:
STARTBIT	sim_defs.h	1078;"	d
STARTBIT	sim_defs.h	990;"	d
STATUS	PDP10/ka10_auxcpu.c	52;"	d	file:
STATUS	PDP10/ka10_dkb.c	50;"	d	file:
STATUS	PDP10/ka10_iii.c	38;"	d	file:
STATUS	PDP10/kl10_dn.c	200;"	d	file:
STATUS	PDP10/kl10_fe.c	221;"	d	file:
STATUS	PDP10/ks10_cty.c	36;"	d	file:
STATUS	PDP10/kx10_cp.c	80;"	d	file:
STATUS	PDP10/kx10_cr.c	78;"	d	file:
STATUS	PDP10/kx10_cty.c	54;"	d	file:
STATUS	PDP10/kx10_dc.c	43;"	d	file:
STATUS	PDP10/kx10_dp.c	53;"	d	file:
STATUS	PDP10/kx10_imp.c	181;"	d	file:
STATUS	PDP10/kx10_lp.c	38;"	d	file:
STATUS	PDP10/kx10_pt.c	37;"	d	file:
STATUS	PDP10/kx10_tu.c	71;"	d	file:
STATUS	PDP10/pdp6_dcs.c	43;"	d	file:
STATUS	PDP10/pdp6_dct.c	34;"	d	file:
STATUS	PDP10/pdp6_mtc.c	148;"	d	file:
STATUS	PDP10/pdp6_slave.c	53;"	d	file:
STATUS_BITS	PDP10/ka10_ch10.c	60;"	d	file:
STAT_REG	PDP10/kx10_dk.c	37;"	d	file:
STAT_REG	PDP10/kx10_dpy.c	152;"	d	file:
STAT_VALID	PDP10/kx10_dpy.c	158;"	d	file:
STDBOOL_H	slirp_glue/qemu/win32/stdbool.h	2;"	d
STDINT_H	slirp_glue/qemu/win32/stdint.h	2;"	d
STK_DEVNUM	PDP10/ka10_stk.c	34;"	d	file:
STK_DONE	PDP10/ka10_stk.c	38;"	d	file:
STK_PIA	PDP10/ka10_stk.c	37;"	d	file:
STOP	PDP10/ka10_iii.c	46;"	d	file:
STOP	PDP10/ks10_dz.c	67;"	d	file:
STOP	PDP10/kx10_cr.c	71;"	d	file:
STOP	display/type340cmd.h	66;"	d
STOP_ACCESS	PDP10/kx10_defs.h	148;"	d
STOP_HALT	PDP10/kx10_defs.h	146;"	d
STOP_IBKPT	PDP10/kx10_defs.h	147;"	d
STOP_MAGIC	PDP10/kx10_defs.h	150;"	d
STP	display/type340cmd.h	65;"	d
STRDATA	sim_defs.h	1069;"	d
STRDATA	sim_defs.h	981;"	d
STRDATAD	sim_defs.h	1071;"	d
STRDATAD	sim_defs.h	983;"	d
STRDATADF	sim_defs.h	1073;"	d
STRDATADF	sim_defs.h	985;"	d
STS	PDP10/kx10_rc.c	68;"	d	file:
STS_CHK	sim_scsi.c	61;"	d	file:
STS_CLR	PDP10/ka10_pmp.c	276;"	d	file:
STS_MASK	PDP10/ka10_pmp.c	243;"	d	file:
STS_OK	sim_scsi.c	60;"	d	file:
ST_MOD	PDP10/ka10_pmp.c	234;"	d	file:
ST_SAME	display/vtmacs.h	26;"	d
ST_STOP	display/vtmacs.h	27;"	d
SUBR	display/type340.c	/^enum mode { PARAM=0, POINT, SLAVE, CHAR, VECTOR, VCONT, INCR, SUBR };$/;"	e	enum:mode	file:
SUBSCR	display/vttest.c	50;"	d	file:
SUCCESS	sim_video.c	154;"	d	file:
SUF_ERR	PDP10/kx10_dp.c	63;"	d	file:
SUPSCR	display/vttest.c	49;"	d	file:
SURFACE	PDP10/kx10_dp.c	90;"	d	file:
SURFACES	PDP10/ka10_ai.c	41;"	d	file:
SVECT	display/vtmacs.h	211;"	d
SVECT3	display/vtmacs.h	213;"	d
SVECTOR	display/vt11.c	/^enum gmode { CHAR=0, SVECTOR, LVECTOR, POINT, GRAPHX, GRAPHY, RELPOINT, \/* all *\/$/;"	e	enum:gmode	file:
SVW_INST	PDP10/ka10_iii.c	85;"	d	file:
SW	PDP10/kx10_cpu.c	/^uint64  SW;                                   \/* Switch register *\/$/;"	v
SWAP	PDP10/ka10_ch10.c	47;"	d	file:
SWAP_AR	PDP10/kx10_cpu.c	719;"	d	file:
SWAR	PDP10/kx10_cpu.c	703;"	d	file:
SWITCH_PARSE	scp.c	/^    } SWITCH_PARSE;$/;"	t	typeref:enum:__anon3	file:
SWMASK	sim_defs.h	449;"	d
SWP_DONE	PDP10/kx10_defs.h	213;"	d
SWSW	PDP10/kx10_dpy.c	686;"	d	file:
SWSW	PDP10/kx10_dpy.c	693;"	d	file:
SWSW	display/display.c	1148;"	d	file:
SWSW	display/display.c	1151;"	d	file:
SWSW	display/display.c	1165;"	d	file:
SWSW	display/display.c	1169;"	d	file:
SW_BITMASK	scp.c	/^    SW_BITMASK,         \/* Bitmask Value or Not a switch *\/$/;"	e	enum:__anon3	file:
SW_DIS	display/vtmacs.h	118;"	d
SW_ENA	display/vtmacs.h	119;"	d
SW_ERROR	scp.c	/^    SW_ERROR,           \/* Parse Error *\/$/;"	e	enum:__anon3	file:
SW_NUMBER	scp.c	/^    SW_NUMBER           \/* Numeric Value *\/$/;"	e	enum:__anon3	file:
SW_SAME	display/vtmacs.h	117;"	d
SXOFF	display/type340cmd.h	114;"	d
SXON	display/type340cmd.h	113;"	d
SYS_OPEN	slirp_glue/qemu/sysemu/os-win32.h	37;"	d
SYS_TIME_H	slirp_glue/qemu/win32/include/sys/time.h	2;"	d
SZ_D	scp.c	291;"	d	file:
SZ_LOAD	scp.c	295;"	d	file:
SZ_LOAD	scp.c	306;"	d	file:
SZ_R	scp.c	292;"	d	file:
SZ_STORE	scp.c	300;"	d	file:
SZ_STORE	scp.c	310;"	d	file:
S_ERROR	PDP10/kx10_rc.c	70;"	d	file:
S_SIM_IO_FSEEK_EXT_	sim_fio.c	435;"	d	file:
S_SIM_IO_FSEEK_EXT_	sim_fio.c	451;"	d	file:
S_SIM_IO_FSEEK_EXT_	sim_fio.c	467;"	d	file:
S_SIM_IO_FSEEK_EXT_	sim_fio.c	485;"	d	file:
S_SIM_IO_FSEEK_EXT_	sim_fio.c	501;"	d	file:
S__STR	scp.c	10252;"	d	file:
S__STR	sim_disk.c	5514;"	d	file:
S__STR_QUOTE	scp.c	10251;"	d	file:
S__STR_QUOTE	sim_disk.c	5513;"	d	file:
S_str	scp.c	6540;"	d	file:
S_str	scp.c	6836;"	d	file:
S_str	scp.c	8497;"	d	file:
S_str	scp.c	8499;"	d	file:
S_str	scp.c	8722;"	d	file:
S_str	scp.c	8728;"	d	file:
S_xstr	scp.c	6539;"	d	file:
S_xstr	scp.c	6837;"	d	file:
S_xstr	scp.c	8496;"	d	file:
S_xstr	scp.c	8500;"	d	file:
S_xstr	scp.c	8721;"	d	file:
S_xstr	scp.c	8729;"	d	file:
SavedState	sim_disk.c	/^    uint8 SavedState;$/;"	m	struct:_VHD_Footer	file:
SectorCount	sim_disk.c	/^    uint32      SectorCount;$/;"	m	struct:simh_disk_footer	file:
SectorSize	sim_disk.c	/^    uint32      SectorSize;$/;"	m	struct:simh_disk_footer	file:
Signature	sim_disk.c	/^    uint8       Signature[4];           \/* must be 'simh' *\/$/;"	m	struct:simh_disk_footer	file:
Slirp	slirp/libslirp.h	/^typedef struct Slirp Slirp;$/;"	t	typeref:struct:Slirp
Slirp	slirp/slirp.h	/^struct Slirp {$/;"	s
Stack	scp.c	/^    } Stack;$/;"	t	typeref:struct:Stack	file:
Stack	scp.c	/^typedef struct Stack {$/;"	s	file:
Stack_Element	scp.c	/^    } Stack_Element;$/;"	t	typeref:struct:Stack_Element	file:
Stack_Element	scp.c	/^typedef struct Stack_Element {$/;"	s	file:
State	sim_frontpanel.c	/^    volatile OperationalState State;$/;"	m	struct:PANEL	file:
T	scp_help.h	255;"	d
T11ADDR	PDP10/ka10_ten11.c	51;"	d	file:
T11CPA	PDP10/ka10_ten11.c	45;"	d	file:
T11LIMIT	PDP10/ka10_ten11.c	52;"	d	file:
T11PDP11	PDP10/ka10_ten11.c	50;"	d	file:
T11RANGE	PDP10/kx10_cpu.c	336;"	d	file:
T11VALID	PDP10/ka10_ten11.c	48;"	d	file:
T11WRITE	PDP10/ka10_ten11.c	49;"	d	file:
TAB	PDP10/ka10_stk.c	75;"	d	file:
TAPE_FREE	PDP10/pdp6_mtc.c	90;"	d	file:
TAPE_PCALLBACK	sim_tape.h	/^typedef void (*TAPE_PCALLBACK)(UNIT *unit, t_stat status);$/;"	t
TAPE_PR	PDP10/kx10_pt.c	47;"	d	file:
TAPE_PR	PDP10/kx10_pt.c	49;"	d	file:
TAPE_RDY	PDP10/pdp6_mtc.c	91;"	d	file:
TAPE_RECORD	sim_tape.c	/^    } TAPE_RECORD;$/;"	t	typeref:struct:TAPE_RECORD	file:
TAPE_RECORD	sim_tape.c	/^typedef struct TAPE_RECORD {$/;"	s	file:
TAR_DFLT_RECSIZE	sim_tape.h	91;"	d
TBUF	PDP10/ks10_dz.c	82;"	d	file:
TCPHeader	sim_ether.c	/^struct TCPHeader {$/;"	s	file:
TCPOLEN_MAXSEG	slirp/tcp.h	92;"	d
TCPOLEN_SACK_PERMITTED	slirp/tcp.h	94;"	d
TCPOLEN_TIMESTAMP	slirp/tcp.h	95;"	d
TCPOLEN_TSTAMP_APPA	slirp/tcp.h	96;"	d
TCPOLEN_WINDOW	slirp/tcp.h	93;"	d
TCPOOB_HADDATA	slirp/tcp_var.h	115;"	d
TCPOOB_HAVEDATA	slirp/tcp_var.h	114;"	d
TCPOPT_EOL	slirp/tcp.h	79;"	d
TCPOPT_MAXSEG	slirp/tcp.h	81;"	d
TCPOPT_NOP	slirp/tcp.h	80;"	d
TCPOPT_SACK	slirp/tcp.h	84;"	d
TCPOPT_SACK_PERMITTED	slirp/tcp.h	83;"	d
TCPOPT_TIMESTAMP	slirp/tcp.h	85;"	d
TCPOPT_TSTAMP_HDR	slirp/tcp.h	87;"	d
TCPOPT_WINDOW	slirp/tcp.h	82;"	d
TCPREXMTTHRESH	slirp/tcp_input.c	44;"	d	file:
TCPS_CLOSED	slirp/tcp.h	134;"	d
TCPS_CLOSE_WAIT	slirp/tcp.h	140;"	d
TCPS_CLOSING	slirp/tcp.h	143;"	d
TCPS_ESTABLISHED	slirp/tcp.h	139;"	d
TCPS_FIN_WAIT_1	slirp/tcp.h	142;"	d
TCPS_FIN_WAIT_2	slirp/tcp.h	146;"	d
TCPS_HAVEESTABLISHED	slirp/tcp.h	150;"	d
TCPS_HAVERCVDFIN	slirp/tcp.h	151;"	d
TCPS_HAVERCVDSYN	slirp/tcp.h	149;"	d
TCPS_LAST_ACK	slirp/tcp.h	144;"	d
TCPS_LISTEN	slirp/tcp.h	135;"	d
TCPS_SYN_RECEIVED	slirp/tcp.h	137;"	d
TCPS_SYN_SENT	slirp/tcp.h	136;"	d
TCPS_TIME_WAIT	slirp/tcp.h	147;"	d
TCPTV_KEEPCNT	slirp/tcp_timer.h	98;"	d
TCPTV_KEEPINTVL	slirp/tcp_timer.h	97;"	d
TCPTV_KEEP_IDLE	slirp/tcp_timer.h	96;"	d
TCPTV_KEEP_INIT	slirp/tcp_timer.h	95;"	d
TCPTV_MIN	slirp/tcp_timer.h	100;"	d
TCPTV_MSL	slirp/tcp_timer.h	86;"	d
TCPTV_PERSMAX	slirp/tcp_timer.h	93;"	d
TCPTV_PERSMIN	slirp/tcp_timer.h	92;"	d
TCPTV_REXMTMAX	slirp/tcp_timer.h	101;"	d
TCPTV_SRTTBASE	slirp/tcp_timer.h	88;"	d
TCPTV_SRTTDFLT	slirp/tcp_timer.h	90;"	d
TCPT_2MSL	slirp/tcp_timer.h	45;"	d
TCPT_KEEP	slirp/tcp_timer.h	44;"	d
TCPT_NTIMERS	slirp/tcp_timer.h	40;"	d
TCPT_PERSIST	slirp/tcp_timer.h	43;"	d
TCPT_RANGESET	slirp/tcp_timer.h	111;"	d
TCPT_REXMT	slirp/tcp_timer.h	42;"	d
TCP_ACK_FLAG	sim_ether.c	3276;"	d	file:
TCP_CWR_FLAG	sim_ether.c	3273;"	d	file:
TCP_DATA_OFFSET	sim_ether.c	3272;"	d	file:
TCP_DO_RFC1323	slirp/tcp_subr.c	45;"	d	file:
TCP_ECR_FLAG	sim_ether.c	3274;"	d	file:
TCP_FIN_FLAG	sim_ether.c	3280;"	d	file:
TCP_FLAGS_MASK	sim_ether.c	3281;"	d	file:
TCP_FL_ACK	PDP10/kl10_nia.c	245;"	d	file:
TCP_FL_ACK	PDP10/kx10_imp.c	245;"	d	file:
TCP_FL_FIN	PDP10/kl10_nia.c	241;"	d	file:
TCP_FL_FIN	PDP10/kx10_imp.c	241;"	d	file:
TCP_FL_PSH	PDP10/kl10_nia.c	244;"	d	file:
TCP_FL_PSH	PDP10/kx10_imp.c	244;"	d	file:
TCP_FL_RST	PDP10/kl10_nia.c	243;"	d	file:
TCP_FL_RST	PDP10/kx10_imp.c	243;"	d	file:
TCP_FL_SYN	PDP10/kl10_nia.c	242;"	d	file:
TCP_FL_SYN	PDP10/kx10_imp.c	242;"	d	file:
TCP_FL_URG	PDP10/kl10_nia.c	246;"	d	file:
TCP_FL_URG	PDP10/kx10_imp.c	246;"	d	file:
TCP_ISSINCR	slirp/tcp.h	174;"	d
TCP_LINGERTIME	slirp/tcp_timer.h	103;"	d
TCP_MAXIDLE	slirp/slirp.h	302;"	d
TCP_MAXRXTSHIFT	slirp/tcp_timer.h	105;"	d
TCP_MAXSEG	slirp/tcp.h	125;"	d
TCP_MAXWIN	slirp/tcp.h	110;"	d
TCP_MAXWIN	slirp/tcp.h	111;"	d
TCP_MAX_WINSHIFT	slirp/tcp.h	113;"	d
TCP_MAX_WINSHIFT	slirp/tcp.h	114;"	d
TCP_MSS	slirp/tcp.h	107;"	d
TCP_MSS	slirp/tcp.h	108;"	d
TCP_NODELAY	slirp/tcp.h	123;"	d
TCP_NODELAY	slirp/tcp.h	124;"	d
TCP_NSTATES	slirp/tcp.h	132;"	d
TCP_PAWS_IDLE	slirp/tcp_input.c	46;"	d	file:
TCP_PROTO	PDP10/kl10_nia.c	233;"	d	file:
TCP_PROTO	PDP10/kx10_imp.c	233;"	d	file:
TCP_PSH_FLAG	sim_ether.c	3277;"	d	file:
TCP_RCVSPACE	slirp/tcp.h	42;"	d
TCP_REASS	slirp/tcp_input.c	63;"	d	file:
TCP_REASS	slirp/tcp_input.c	83;"	d	file:
TCP_REXMTVAL	slirp/tcp_var.h	158;"	d
TCP_RST_FLAG	sim_ether.c	3278;"	d	file:
TCP_RTTVAR_SCALE	slirp/tcp_var.h	142;"	d
TCP_RTTVAR_SHIFT	slirp/tcp_var.h	143;"	d
TCP_RTT_SCALE	slirp/tcp_var.h	140;"	d
TCP_RTT_SHIFT	slirp/tcp_var.h	141;"	d
TCP_SNDSPACE	slirp/tcp.h	41;"	d
TCP_SYN_FLAG	sim_ether.c	3279;"	d	file:
TCP_URG_FLAG	sim_ether.c	3275;"	d	file:
TCSETATTR_ACTION	sim_console.c	4158;"	d	file:
TCSETATTR_ACTION	sim_console.c	4160;"	d	file:
TC_10CORE	PDP10/kx10_tu.c	136;"	d	file:
TC_10NORM	PDP10/kx10_tu.c	140;"	d	file:
TC_11CORE	PDP10/kx10_tu.c	144;"	d	file:
TC_11NORM	PDP10/kx10_tu.c	142;"	d	file:
TC_15CORE	PDP10/kx10_tu.c	138;"	d	file:
TC_15NORM	PDP10/kx10_tu.c	146;"	d	file:
TC_1600	PDP10/kx10_tu.c	150;"	d	file:
TC_800	PDP10/kx10_tu.c	149;"	d	file:
TC_ACCL	PDP10/kx10_tu.c	154;"	d	file:
TC_DENS	PDP10/kx10_tu.c	148;"	d	file:
TC_EAODTE	PDP10/kx10_tu.c	151;"	d	file:
TC_EVPAR	PDP10/kx10_tu.c	134;"	d	file:
TC_FCS	PDP10/kx10_tu.c	153;"	d	file:
TC_FMTSEL	PDP10/kx10_tu.c	135;"	d	file:
TC_SAC	PDP10/kx10_tu.c	152;"	d	file:
TC_SS	PDP10/kx10_tu.c	133;"	d	file:
TEL_BSY	PDP10/kx10_cty.c	48;"	d	file:
TEL_RDY	PDP10/kx10_cty.c	47;"	d	file:
TEN11_POLL	PDP10/ka10_ten11.c	61;"	d	file:
TEST	PDP10/kx10_cp.c	78;"	d	file:
TESTBIT	display/type340.c	90;"	d	file:
TESTBIT	display/vt11.c	129;"	d	file:
TEST_DIS	display/test.c	40;"	d	file:
TEST_DIS	display/vttest.c	28;"	d	file:
TEST_RES	display/test.c	44;"	d	file:
TEST_RES	display/vttest.c	32;"	d	file:
TFTP_ACK	slirp/tftp.h	12;"	d
TFTP_DATA	slirp/tftp.h	11;"	d
TFTP_ERROR	slirp/tftp.h	13;"	d
TFTP_FILENAME_MAX	slirp/tftp.h	16;"	d
TFTP_OACK	slirp/tftp.h	14;"	d
TFTP_RRQ	slirp/tftp.h	9;"	d
TFTP_SERVER	slirp/tftp.h	7;"	d
TFTP_SESSIONS_MAX	slirp/tftp.h	5;"	d
TFTP_WRQ	slirp/tftp.h	10;"	d
TF_ACKNOW	slirp/tcp_var.h	53;"	d
TF_DELACK	slirp/tcp_var.h	54;"	d
TF_NODELAY	slirp/tcp_var.h	55;"	d
TF_NOOPT	slirp/tcp_var.h	56;"	d
TF_RCVD_SCALE	slirp/tcp_var.h	59;"	d
TF_RCVD_TSTMP	slirp/tcp_var.h	61;"	d
TF_REQ_SCALE	slirp/tcp_var.h	58;"	d
TF_REQ_TSTMP	slirp/tcp_var.h	60;"	d
TF_SACK_PERMIT	slirp/tcp_var.h	62;"	d
TF_SENTFIN	slirp/tcp_var.h	57;"	d
THREADS	display/win32.c	36;"	d	file:
THRUBT	PDP10/ka10_tv.c	44;"	d	file:
THRUST	PDP10/kx10_dpy.c	574;"	d	file:
THRUSTER_AXIS	PDP10/ka10_tv.c	38;"	d	file:
TH_ACK	slirp/tcp.h	74;"	d
TH_FIN	slirp/tcp.h	70;"	d
TH_PUSH	slirp/tcp.h	73;"	d
TH_RST	slirp/tcp.h	72;"	d
TH_SYN	slirp/tcp.h	71;"	d
TH_URG	slirp/tcp.h	75;"	d
TIE	PDP10/ks10_dz.c	52;"	d	file:
TIMEOUT	PDP10/ka10_auxcpu.c	40;"	d	file:
TIMEOUT	PDP10/ka10_ten11.c	59;"	d	file:
TIMEOUT	PDP10/pdp6_slave.c	41;"	d	file:
TIMEOUT_DEFAULT	slirp/slirp.c	51;"	d	file:
TIMEOUT_FAST	slirp/slirp.c	48;"	d	file:
TIMEOUT_SLOW	slirp/slirp.c	49;"	d	file:
TIMER_DBG_IDLE	sim_timer.h	103;"	d
TIMER_DBG_MUX	sim_timer.h	105;"	d
TIMER_DBG_QUEUE	sim_timer.h	104;"	d
TIME_DIFF	slirp/main.h	29;"	d
TIME_MAX	slirp_glue/qemu/osdep.h	111;"	d
TIME_WITH_SYS_TIME	slirp/slirp_config.h	78;"	d
TK10_CLEAR	PDP10/ka10_tk10.c	48;"	d	file:
TK10_CONI_BITS	PDP10/ka10_tk10.c	52;"	d	file:
TK10_DEVNUM	PDP10/ka10_tk10.c	37;"	d	file:
TK10_GO	PDP10/ka10_tk10.c	50;"	d	file:
TK10_IDONE	PDP10/ka10_tk10.c	44;"	d	file:
TK10_INT	PDP10/ka10_tk10.c	47;"	d	file:
TK10_LINES	PDP10/ka10_tk10.c	38;"	d	file:
TK10_NAME	PDP10/ka10_tk10.c	36;"	d	file:
TK10_ODONE	PDP10/ka10_tk10.c	42;"	d	file:
TK10_PIA	PDP10/ka10_tk10.c	40;"	d	file:
TK10_RQINT	PDP10/ka10_tk10.c	41;"	d	file:
TK10_SELECT	PDP10/ka10_tk10.c	49;"	d	file:
TK10_STOP	PDP10/ka10_tk10.c	43;"	d	file:
TK10_TYI	PDP10/ka10_tk10.c	45;"	d	file:
TK10_TYO	PDP10/ka10_tk10.c	46;"	d	file:
TKGO	display/ng.c	33;"	d	file:
TKRUN	display/ng.c	32;"	d	file:
TKSTOP	display/ng.c	34;"	d	file:
TLINE	PDP10/ks10_dz.c	48;"	d	file:
TLINE_V	PDP10/ks10_dz.c	49;"	d	file:
TMLN	sim_tmxr.h	/^typedef struct tmln TMLN;$/;"	t	typeref:struct:tmln
TMLN_SPD_110_BPS	sim_tmxr.h	104;"	d
TMLN_SPD_115200_BPS	sim_tmxr.h	125;"	d
TMLN_SPD_1200_BPS	sim_tmxr.h	109;"	d
TMLN_SPD_134_BPS	sim_tmxr.h	105;"	d
TMLN_SPD_150_BPS	sim_tmxr.h	106;"	d
TMLN_SPD_1800_BPS	sim_tmxr.h	110;"	d
TMLN_SPD_19200_BPS	sim_tmxr.h	117;"	d
TMLN_SPD_2000_BPS	sim_tmxr.h	111;"	d
TMLN_SPD_2400_BPS	sim_tmxr.h	112;"	d
TMLN_SPD_25000_BPS	sim_tmxr.h	118;"	d
TMLN_SPD_300_BPS	sim_tmxr.h	107;"	d
TMLN_SPD_3600_BPS	sim_tmxr.h	113;"	d
TMLN_SPD_38400_BPS	sim_tmxr.h	119;"	d
TMLN_SPD_40000_BPS	sim_tmxr.h	120;"	d
TMLN_SPD_4800_BPS	sim_tmxr.h	114;"	d
TMLN_SPD_50000_BPS	sim_tmxr.h	121;"	d
TMLN_SPD_50_BPS	sim_tmxr.h	102;"	d
TMLN_SPD_57600_BPS	sim_tmxr.h	122;"	d
TMLN_SPD_600_BPS	sim_tmxr.h	108;"	d
TMLN_SPD_7200_BPS	sim_tmxr.h	115;"	d
TMLN_SPD_75_BPS	sim_tmxr.h	103;"	d
TMLN_SPD_76800_BPS	sim_tmxr.h	123;"	d
TMLN_SPD_80000_BPS	sim_tmxr.h	124;"	d
TMLN_SPD_9600_BPS	sim_tmxr.h	116;"	d
TMR_QUA	PDP10/kx10_cpu.c	123;"	d	file:
TMR_RTC	PDP10/kx10_cpu.c	122;"	d	file:
TMUF_NOASYNCH	sim_tmxr.h	96;"	d
TMUF_V_NOASYNCH	sim_tmxr.h	95;"	d
TMXR	sim_tmxr.h	/^typedef struct tmxr TMXR;$/;"	t	typeref:struct:tmxr
TMXR_DBG_ASY	sim_tmxr.h	75;"	d
TMXR_DBG_CFG	sim_tmxr.h	73;"	d
TMXR_DBG_CON	sim_tmxr.h	74;"	d
TMXR_DBG_EXP	sim_tmxr.h	79;"	d
TMXR_DBG_MDM	sim_tmxr.h	72;"	d
TMXR_DBG_PRCV	sim_tmxr.h	78;"	d
TMXR_DBG_PXMT	sim_tmxr.h	77;"	d
TMXR_DBG_RCV	sim_tmxr.h	70;"	d
TMXR_DBG_RET	sim_tmxr.h	71;"	d
TMXR_DBG_SEND	sim_tmxr.h	80;"	d
TMXR_DBG_TRC	sim_tmxr.h	76;"	d
TMXR_DBG_XMT	sim_tmxr.h	69;"	d
TMXR_DEFAULT_CONNECT_POLL_INTERVAL	sim_tmxr.h	67;"	d
TMXR_DTR_DROP_TIME	sim_tmxr.h	65;"	d
TMXR_GUARD	sim_tmxr.c	481;"	d	file:
TMXR_LINE_DISABLED	sim_tmxr.c	483;"	d	file:
TMXR_MAXBUF	sim_tmxr.h	63;"	d
TMXR_MDM_CTS	sim_tmxr.h	88;"	d
TMXR_MDM_DCD	sim_tmxr.h	86;"	d
TMXR_MDM_DSR	sim_tmxr.h	89;"	d
TMXR_MDM_DTR	sim_tmxr.h	84;"	d
TMXR_MDM_INCOMING	sim_tmxr.h	90;"	d
TMXR_MDM_OUTGOING	sim_tmxr.h	91;"	d
TMXR_MDM_RNG	sim_tmxr.h	87;"	d
TMXR_MDM_RTS	sim_tmxr.h	85;"	d
TMXR_MODEM_RING_TIME	sim_tmxr.h	66;"	d
TMXR_VALID	sim_tmxr.h	62;"	d
TMXR_V_VALID	sim_tmxr.h	61;"	d
TNOS_DONT	sim_tmxr.c	423;"	d	file:
TNOS_WONT	sim_tmxr.c	424;"	d	file:
TNS_CRPAD	sim_tmxr.c	418;"	d	file:
TNS_DO	sim_tmxr.c	419;"	d	file:
TNS_IAC	sim_tmxr.c	414;"	d	file:
TNS_NORM	sim_tmxr.c	413;"	d	file:
TNS_SKIP	sim_tmxr.c	417;"	d	file:
TNS_WILL	sim_tmxr.c	415;"	d	file:
TNS_WONT	sim_tmxr.c	416;"	d	file:
TN_3270	sim_tmxr.c	391;"	d	file:
TN_AO	sim_tmxr.c	360;"	d	file:
TN_AUTH	sim_tmxr.c	399;"	d	file:
TN_AYT	sim_tmxr.c	359;"	d	file:
TN_BIN	sim_frontpanel.c	245;"	d	file:
TN_BIN	sim_tmxr.c	369;"	d	file:
TN_BM	sim_tmxr.c	383;"	d	file:
TN_BRK	sim_tmxr.c	362;"	d	file:
TN_CHARST	sim_tmxr.c	403;"	d	file:
TN_COMPRT	sim_tmxr.c	404;"	d	file:
TN_CR	sim_frontpanel.c	248;"	d	file:
TN_CR	sim_tmxr.c	407;"	d	file:
TN_DATAMK	sim_tmxr.c	363;"	d	file:
TN_DET	sim_tmxr.c	384;"	d	file:
TN_DO	sim_frontpanel.c	241;"	d	file:
TN_DO	sim_tmxr.c	352;"	d	file:
TN_DONT	sim_frontpanel.c	240;"	d	file:
TN_DONT	sim_tmxr.c	351;"	d	file:
TN_EC	sim_tmxr.c	358;"	d	file:
TN_ECHO	sim_frontpanel.c	246;"	d	file:
TN_ECHO	sim_tmxr.c	370;"	d	file:
TN_EL	sim_tmxr.c	357;"	d	file:
TN_ENCRYP	sim_tmxr.c	400;"	d	file:
TN_ENDREC	sim_tmxr.c	387;"	d	file:
TN_ENVIRO	sim_tmxr.c	398;"	d	file:
TN_EXTEND	sim_tmxr.c	381;"	d	file:
TN_GA	sim_tmxr.c	356;"	d	file:
TN_IAC	sim_frontpanel.c	239;"	d	file:
TN_IAC	sim_tmxr.c	350;"	d	file:
TN_IP	sim_tmxr.c	361;"	d	file:
TN_KERMIT	sim_tmxr.c	405;"	d	file:
TN_LF	sim_frontpanel.c	249;"	d	file:
TN_LF	sim_tmxr.c	408;"	d	file:
TN_LINE	sim_frontpanel.c	250;"	d	file:
TN_LINE	sim_tmxr.c	396;"	d	file:
TN_LOGOUT	sim_tmxr.c	382;"	d	file:
TN_NAOCRD	sim_tmxr.c	374;"	d	file:
TN_NAOFFD	sim_tmxr.c	377;"	d	file:
TN_NAOHTD	sim_tmxr.c	376;"	d	file:
TN_NAOHTS	sim_tmxr.c	375;"	d	file:
TN_NAOLFD	sim_tmxr.c	380;"	d	file:
TN_NAOVTD	sim_tmxr.c	379;"	d	file:
TN_NAOVTS	sim_tmxr.c	378;"	d	file:
TN_NAWS	sim_tmxr.c	393;"	d	file:
TN_NEWENV	sim_tmxr.c	401;"	d	file:
TN_NOP	sim_tmxr.c	364;"	d	file:
TN_NUL	sim_tmxr.c	409;"	d	file:
TN_OUTMRK	sim_tmxr.c	389;"	d	file:
TN_SB	sim_tmxr.c	355;"	d	file:
TN_SE	sim_tmxr.c	365;"	d	file:
TN_SENDLO	sim_tmxr.c	385;"	d	file:
TN_SGA	sim_frontpanel.c	247;"	d	file:
TN_SGA	sim_tmxr.c	371;"	d	file:
TN_STATUS	sim_tmxr.c	372;"	d	file:
TN_TERMSP	sim_tmxr.c	394;"	d	file:
TN_TERMTY	sim_tmxr.c	386;"	d	file:
TN_TIMING	sim_tmxr.c	373;"	d	file:
TN_TN3270	sim_tmxr.c	402;"	d	file:
TN_TOGFLO	sim_tmxr.c	395;"	d	file:
TN_TTYLOC	sim_tmxr.c	390;"	d	file:
TN_TUID	sim_tmxr.c	388;"	d	file:
TN_WILL	sim_frontpanel.c	243;"	d	file:
TN_WILL	sim_tmxr.c	354;"	d	file:
TN_WONT	sim_frontpanel.c	242;"	d	file:
TN_WONT	sim_tmxr.c	353;"	d	file:
TN_X3PAD	sim_tmxr.c	392;"	d	file:
TN_XDISPL	sim_tmxr.c	397;"	d	file:
TOP	PDP10/ka10_dkb.c	46;"	d	file:
TOP	PDP10/ka10_stk.c	43;"	d	file:
TOPIC	scp.c	/^    } TOPIC;$/;"	t	typeref:struct:topic	file:
TOP_DONE	sim_tape.c	206;"	d	file:
TOP_POSN	sim_tape.c	223;"	d	file:
TOP_RDRF	sim_tape.c	207;"	d	file:
TOP_RDRR	sim_tape.c	208;"	d	file:
TOP_RWND	sim_tape.c	222;"	d	file:
TOP_SFRF	sim_tape.c	219;"	d	file:
TOP_SFRR	sim_tape.c	221;"	d	file:
TOP_SPFF	sim_tape.c	218;"	d	file:
TOP_SPFR	sim_tape.c	220;"	d	file:
TOP_SPRF	sim_tape.c	214;"	d	file:
TOP_SPRR	sim_tape.c	216;"	d	file:
TOP_SRSF	sim_tape.c	215;"	d	file:
TOP_SRSR	sim_tape.c	217;"	d	file:
TOP_WEMR	sim_tape.c	212;"	d	file:
TOP_WEOM	sim_tape.c	211;"	d	file:
TOP_WGAP	sim_tape.c	213;"	d	file:
TOP_WREC	sim_tape.c	209;"	d	file:
TOP_WTMK	sim_tape.c	210;"	d	file:
TORPEDO_BUTTON	PDP10/ka10_tv.c	39;"	d	file:
TOWRITEMAX	slirp/main.h	14;"	d
TPBIT	PDP10/ka10_tv.c	43;"	d	file:
TPC_EOM	sim_tape.h	67;"	d
TPC_TMK	sim_tape.h	66;"	d
TPI_CHN	PDP10/pdp6_dcs.c	46;"	d	file:
TPOINT	display/vt11.c	1387;"	d	file:
TRACK	PDP10/kx10_rc.c	50;"	d	file:
TRACK_INFO	sim_imd.h	/^} TRACK_INFO;$/;"	t	typeref:struct:__anon25
TRACK_REAL_SIZE	PDP10/ka10_ai.c	53;"	d	file:
TRANS	PDP10/ka10_pmp.c	228;"	d	file:
TRANS_CH	PDP10/ka10_pmp.c	264;"	d	file:
TRAN_HUNG	PDP10/kx10_mt.c	91;"	d	file:
TRAPS_ENB	PDP10/ks10_cty.c	50;"	d	file:
TRDY	PDP10/ks10_dz.c	53;"	d	file:
TRF_CMD	PDP10/pdp6_mtc.c	104;"	d	file:
TRK_SEL_E	PDP10/kx10_rc.c	72;"	d	file:
TROUBLE	PDP10/kx10_cp.c	73;"	d	file:
TROUBLE	PDP10/kx10_cr.c	67;"	d	file:
TROUBLE_EN	PDP10/kx10_cp.c	72;"	d	file:
TROUBLE_EN	PDP10/kx10_cr.c	76;"	d	file:
TRP1	PDP10/kx10_defs.h	268;"	d
TRP1	PDP10/kx10_defs.h	277;"	d
TRP2	PDP10/kx10_defs.h	269;"	d
TRP2	PDP10/kx10_defs.h	278;"	d
TRP_SPD_DLY	PDP10/pdp6_mtc.c	137;"	d	file:
TRUE	sim_defs.h	182;"	d
TSS_INST	PDP10/ka10_iii.c	83;"	d	file:
TSTMP_GEQ	slirp/tcp_input.c	50;"	d	file:
TSTMP_LT	slirp/tcp_input.c	49;"	d	file:
TSTS	PDP10/kx10_sys.c	496;"	d	file:
TST_IND	PDP10/kx10_defs.h	252;"	d
TTUF_KSR	sim_console.h	56;"	d
TTUF_MODE_7B	sim_console.h	44;"	d
TTUF_MODE_7P	sim_console.h	47;"	d
TTUF_MODE_8B	sim_console.h	45;"	d
TTUF_MODE_UC	sim_console.h	46;"	d
TTUF_M_MODE	sim_console.h	48;"	d
TTUF_M_PAR	sim_console.h	55;"	d
TTUF_PAR_EVEN	sim_console.h	53;"	d
TTUF_PAR_MARK	sim_console.h	52;"	d
TTUF_PAR_ODD	sim_console.h	54;"	d
TTUF_PAR_SPACE	sim_console.h	51;"	d
TTUF_V_MODE	sim_console.h	42;"	d
TTUF_V_PAR	sim_console.h	49;"	d
TTUF_V_UF	sim_console.h	57;"	d
TTUF_W_MODE	sim_console.h	43;"	d
TTUF_W_PAR	sim_console.h	50;"	d
TT_GET_MODE	sim_console.h	72;"	d
TT_MODE	sim_console.h	58;"	d
TT_MODE_7B	sim_console.h	59;"	d
TT_MODE_7P	sim_console.h	62;"	d
TT_MODE_8B	sim_console.h	60;"	d
TT_MODE_KSR	sim_console.h	63;"	d
TT_MODE_UC	sim_console.h	61;"	d
TT_PAR	sim_console.h	65;"	d
TT_PAR_EVEN	sim_console.h	68;"	d
TT_PAR_MARK	sim_console.h	67;"	d
TT_PAR_ODD	sim_console.h	69;"	d
TT_PAR_SPACE	sim_console.h	66;"	d
TUAS	PDP10/kx10_tu.c	114;"	d	file:
TUDC	PDP10/kx10_tu.c	119;"	d	file:
TUDS	PDP10/kx10_tu.c	70;"	d	file:
TUDT	PDP10/kx10_tu.c	122;"	d	file:
TUER1	PDP10/kx10_tu.c	91;"	d	file:
TULA	PDP10/kx10_tu.c	125;"	d	file:
TUMR	PDP10/kx10_tu.c	111;"	d	file:
TUSN	PDP10/kx10_tu.c	128;"	d	file:
TUTC	PDP10/kx10_tu.c	131;"	d	file:
TU_NUMFR	PDP10/kx10_tu.c	34;"	d	file:
TU_UNIT	PDP10/kx10_tu.c	41;"	d	file:
TV_DEVNUM	PDP10/ka10_tv.c	29;"	d	file:
TWOSCOMP	display/vt11.c	217;"	d	file:
TXA	PDP10/ka10_ch10.c	51;"	d	file:
TXACT	PDP10/ks10_kmc.c	302;"	d	file:
TXBUF_AVAIL	sim_tmxr.c	2469;"	d	file:
TXBUF_CHAR	sim_tmxr.c	2470;"	d	file:
TXCSR_GETMAISEL	PDP10/ks10_dup.c	257;"	d	file:
TXCSR_MBZ	PDP10/ks10_dup.c	269;"	d	file:
TXCSR_M_DRESET	PDP10/ks10_dup.c	246;"	d	file:
TXCSR_M_HALFDUP	PDP10/ks10_dup.c	233;"	d	file:
TXCSR_M_MAIDATA	PDP10/ks10_dup.c	252;"	d	file:
TXCSR_M_MAISEL	PDP10/ks10_dup.c	256;"	d	file:
TXCSR_M_MAISSCLK	PDP10/ks10_dup.c	260;"	d	file:
TXCSR_M_SEND	PDP10/ks10_dup.c	236;"	d	file:
TXCSR_M_TXACT	PDP10/ks10_dup.c	249;"	d	file:
TXCSR_M_TXDLAT	PDP10/ks10_dup.c	266;"	d	file:
TXCSR_M_TXDONE	PDP10/ks10_dup.c	243;"	d	file:
TXCSR_M_TXIE	PDP10/ks10_dup.c	240;"	d	file:
TXCSR_M_TXMNTOUT	PDP10/ks10_dup.c	263;"	d	file:
TXCSR_S_MAISEL	PDP10/ks10_dup.c	255;"	d	file:
TXCSR_V_DRESET	PDP10/ks10_dup.c	245;"	d	file:
TXCSR_V_HALFDUP	PDP10/ks10_dup.c	232;"	d	file:
TXCSR_V_MAIDATA	PDP10/ks10_dup.c	251;"	d	file:
TXCSR_V_MAISEL	PDP10/ks10_dup.c	254;"	d	file:
TXCSR_V_MAISSCLK	PDP10/ks10_dup.c	259;"	d	file:
TXCSR_V_SEND	PDP10/ks10_dup.c	235;"	d	file:
TXCSR_V_TXACT	PDP10/ks10_dup.c	248;"	d	file:
TXCSR_V_TXDLAT	PDP10/ks10_dup.c	265;"	d	file:
TXCSR_V_TXDONE	PDP10/ks10_dup.c	242;"	d	file:
TXCSR_V_TXIE	PDP10/ks10_dup.c	239;"	d	file:
TXCSR_V_TXMNTOUT	PDP10/ks10_dup.c	262;"	d	file:
TXCSR_WRITEABLE	PDP10/ks10_dup.c	270;"	d	file:
TXCTS_DELAY	PDP10/ks10_kmc.c	555;"	d	file:
TXD	PDP10/ka10_ch10.c	49;"	d	file:
TXDATA	PDP10/ks10_kmc.c	298;"	d	file:
TXDATAX	PDP10/ks10_kmc.c	299;"	d	file:
TXDBUF_MBZ	PDP10/ks10_dup.c	301;"	d	file:
TXDBUF_M_MAINTT	PDP10/ks10_dup.c	290;"	d	file:
TXDBUF_M_RCRCTIN	PDP10/ks10_dup.c	297;"	d	file:
TXDBUF_M_TABRT	PDP10/ks10_dup.c	287;"	d	file:
TXDBUF_M_TCRCTIN	PDP10/ks10_dup.c	293;"	d	file:
TXDBUF_M_TEOM	PDP10/ks10_dup.c	284;"	d	file:
TXDBUF_M_TSOM	PDP10/ks10_dup.c	281;"	d	file:
TXDBUF_M_TXDBUF	PDP10/ks10_dup.c	278;"	d	file:
TXDBUF_S_TXDBUF	PDP10/ks10_dup.c	277;"	d	file:
TXDBUF_V_MAINTT	PDP10/ks10_dup.c	289;"	d	file:
TXDBUF_V_RCRCTIN	PDP10/ks10_dup.c	296;"	d	file:
TXDBUF_V_TABRT	PDP10/ks10_dup.c	286;"	d	file:
TXDBUF_V_TCRCTIN	PDP10/ks10_dup.c	292;"	d	file:
TXDBUF_V_TEOM	PDP10/ks10_dup.c	283;"	d	file:
TXDBUF_V_TSOM	PDP10/ks10_dup.c	280;"	d	file:
TXDBUF_V_TXDBUF	PDP10/ks10_dup.c	276;"	d	file:
TXDBUF_WRITEABLE	PDP10/ks10_dup.c	302;"	d	file:
TXDELAY	PDP10/ks10_kmc.c	1043;"	d	file:
TXDELAY	PDP10/ks10_kmc.c	1243;"	d	file:
TXDONE	PDP10/ks10_kmc.c	293;"	d	file:
TXDONE_DELAY	PDP10/ks10_kmc.c	554;"	d	file:
TXDUP_DELAY	PDP10/ks10_kmc.c	556;"	d	file:
TXHDR	PDP10/ks10_kmc.c	296;"	d	file:
TXHDRX	PDP10/ks10_kmc.c	297;"	d	file:
TXIDLE	PDP10/ks10_kmc.c	292;"	d	file:
TXIE	PDP10/ka10_ch10.c	43;"	d	file:
TXKILL	PDP10/ks10_kmc.c	303;"	d	file:
TXKILR	PDP10/ks10_kmc.c	304;"	d	file:
TXMRDY	PDP10/ks10_kmc.c	300;"	d	file:
TXRDY	PDP10/ks10_kmc.c	301;"	d	file:
TXRTS	PDP10/ks10_kmc.c	294;"	d	file:
TXSOM	PDP10/ks10_kmc.c	295;"	d	file:
TXSTART_DELAY	PDP10/ks10_kmc.c	553;"	d	file:
TXSTATE	PDP10/ks10_kmc.c	1037;"	d	file:
TXSTATE	PDP10/ks10_kmc.c	1242;"	d	file:
TXSTOP	PDP10/ks10_kmc.c	1053;"	d	file:
TXSTOP	PDP10/ks10_kmc.c	1244;"	d	file:
TY340_UNITS	display/type340.c	100;"	d	file:
TYPE342	display/type340.c	78;"	d	file:
TYPE_BBN	PDP10/kx10_imp.c	44;"	d	file:
TYPE_CTX	scp.c	/^    } TYPE_CTX;$/;"	t	typeref:struct:__anon5	file:
TYPE_DAZZLE	display/ng.h	37;"	d
TYPE_LOGO	display/ng.h	38;"	d
TYPE_MIT	PDP10/kx10_imp.c	43;"	d	file:
TYPE_RH10	PDP10/kx10_defs.h	432;"	d
TYPE_RH20	PDP10/kx10_defs.h	433;"	d
TYPE_RSX10	PDP10/kl10_dn.c	44;"	d	file:
TYPE_RSX10	PDP10/kl10_fe.c	39;"	d	file:
TYPE_RSX20	PDP10/kl10_dn.c	45;"	d	file:
TYPE_RSX20	PDP10/kl10_fe.c	40;"	d	file:
TYPE_SIMP	PDP10/kx10_imp.c	48;"	d	file:
TYPE_UNI	PDP10/kx10_imp.c	47;"	d	file:
TYPE_WAITS	PDP10/kx10_imp.c	45;"	d	file:
T_ADDR_FMT	sim_defs.h	262;"	d
T_ADDR_FMT	sim_defs.h	266;"	d
T_ADDR_W	sim_defs.h	261;"	d
T_ADDR_W	sim_defs.h	265;"	d
T_SVALUE_MAX	sim_defs.h	251;"	d
T_SVALUE_MAX	sim_defs.h	256;"	d
T_VALUE_MAX	sim_defs.h	250;"	d
T_VALUE_MAX	sim_defs.h	255;"	d
TableOffset	sim_disk.c	/^    uint64 TableOffset;$/;"	m	struct:_VHD_DynamicDiskHeader	file:
TimeStamp	sim_disk.c	/^    uint32 TimeStamp;$/;"	m	struct:_VHD_Footer	file:
TotalBytes	scp.c	/^    t_offset TotalBytes;$/;"	m	struct:__anon4	file:
TotalDirs	scp.c	/^    int TotalDirs;$/;"	m	struct:__anon4	file:
TotalFiles	scp.c	/^    int TotalFiles;$/;"	m	struct:__anon4	file:
TransferElementSize	sim_disk.c	/^    uint32      TransferElementSize;$/;"	m	struct:simh_disk_footer	file:
Type	sim_disk.c	/^    int32 Type;$/;"	m	struct:_device_type	file:
UBST_BAD	PDP10/ks10_uba.c	45;"	d	file:
UBST_DXFR	PDP10/ks10_uba.c	39;"	d	file:
UBST_INIT	PDP10/ks10_uba.c	38;"	d	file:
UBST_INTH	PDP10/ks10_uba.c	42;"	d	file:
UBST_INTL	PDP10/ks10_uba.c	41;"	d	file:
UBST_NED	PDP10/ks10_uba.c	43;"	d	file:
UBST_PAR	PDP10/ks10_uba.c	44;"	d	file:
UBST_PIH	PDP10/ks10_uba.c	37;"	d	file:
UBST_PIL	PDP10/ks10_uba.c	36;"	d	file:
UBST_PWRL	PDP10/ks10_uba.c	40;"	d	file:
UBST_TIM	PDP10/ks10_uba.c	46;"	d	file:
UB_ID	sim_disk.c	1542;"	d	file:
UCB$M_ONLINE	sim_serial.c	1450;"	d	file:
UCB$M_TEMPLATE	sim_serial.c	1449;"	d	file:
UDATA	sim_defs.h	903;"	d
UDPCTL_CHECKSUM	slirp/udp.h	71;"	d
UDPCTL_MAXID	slirp/udp.h	72;"	d
UDPHeader	sim_ether.c	/^struct UDPHeader {$/;"	s	file:
UDP_PROTO	PDP10/kl10_nia.c	252;"	d	file:
UDP_PROTO	PDP10/kx10_imp.c	252;"	d	file:
UDP_TTL	slirp/udp.h	36;"	d
UDP_UDPDATALEN	slirp/udp.h	37;"	d
UFLAGS	PDP10/kx10_dp.c	52;"	d	file:
UFLAGS	PDP10/kx10_rc.c	46;"	d	file:
UFLAGS	PDP10/pdp6_dsk.c	46;"	d	file:
UL	PDP10/kx10_dpy.c	582;"	d	file:
UNASSIGNED_LINE	PDP10/ks10_kmc.c	155;"	d	file:
UNIBUS_MEM_CYCLE	PDP10/ka10_ten11.c	64;"	d	file:
UNIT	display/type340.c	145;"	d	file:
UNIT	display/type340.c	147;"	d	file:
UNIT	sim_defs.h	/^struct UNIT {$/;"	s
UNIT	sim_defs.h	/^typedef struct UNIT UNIT;$/;"	t	typeref:struct:UNIT
UNIT_11FMT	PDP10/kx10_dt.c	97;"	d	file:
UNIT_11FMT	PDP10/pdp6_dtc.c	99;"	d	file:
UNIT_8FMT	PDP10/kx10_dt.c	96;"	d	file:
UNIT_8FMT	PDP10/pdp6_dtc.c	98;"	d	file:
UNIT_ADDR	PDP10/ka10_pmp.c	78;"	d	file:
UNIT_ADDR_MASK	PDP10/ka10_pmp.c	76;"	d	file:
UNIT_ATT	sim_defs.h	638;"	d
UNIT_ATTABLE	sim_defs.h	634;"	d
UNIT_ATTMULT	sim_defs.h	661;"	d
UNIT_BBNPAGE	PDP10/kx10_defs.h	418;"	d
UNIT_BINK	sim_defs.h	639;"	d
UNIT_BUF	sim_defs.h	642;"	d
UNIT_BUFABLE	sim_defs.h	640;"	d
UNIT_BUF_FIN	PDP10/pdp6_mtc.c	129;"	d	file:
UNIT_CARD_MODE	sim_card.h	88;"	d
UNIT_CDP	PDP10/kx10_cp.c	37;"	d	file:
UNIT_CDR	PDP10/kx10_cr.c	37;"	d	file:
UNIT_CHK	PDP10/ka10_pmp.c	239;"	d	file:
UNIT_CSCOPE	PDP10/kx10_dpy.c	511;"	d	file:
UNIT_CT	PDP10/kl10_fe.c	342;"	d	file:
UNIT_CT	PDP10/ks10_lp.c	40;"	d	file:
UNIT_CT	PDP10/kx10_lp.c	46;"	d	file:
UNIT_DASD	PDP10/ka10_pmp.c	72;"	d	file:
UNIT_DHCP	PDP10/kx10_imp.c	37;"	d	file:
UNIT_DIS	sim_defs.h	645;"	d
UNIT_DISABLE	sim_defs.h	644;"	d
UNIT_DISK_CHK	sim_defs.h	664;"	d
UNIT_DTYPE	PDP10/kx10_dp.c	45;"	d	file:
UNIT_DTYPE	PDP10/kx10_imp.c	40;"	d	file:
UNIT_DTYPE	PDP10/kx10_rc.c	39;"	d	file:
UNIT_DTYPE	PDP10/kx10_rp.c	42;"	d	file:
UNIT_DTYPE	PDP10/kx10_rs.c	41;"	d	file:
UNIT_DTYPE	PDP10/pdp6_dsk.c	39;"	d	file:
UNIT_DUMMY	PDP10/kl10_dn.c	39;"	d	file:
UNIT_DUMMY	PDP10/kl10_fe.c	34;"	d	file:
UNIT_DUMMY	PDP10/ks10_cty.c	34;"	d	file:
UNIT_DUMMY	PDP10/kx10_cty.c	30;"	d	file:
UNIT_EXP	PDP10/ka10_pmp.c	240;"	d	file:
UNIT_FIX	sim_defs.h	636;"	d
UNIT_FMT	PDP10/kx10_disk.h	31;"	d
UNIT_IDLE	sim_defs.h	646;"	d
UNIT_ITSPAGE	PDP10/kx10_defs.h	417;"	d
UNIT_JOY	PDP10/kx10_dpy.c	510;"	d	file:
UNIT_KL10B	PDP10/kx10_defs.h	408;"	d
UNIT_MAOFF	PDP10/kx10_defs.h	406;"	d
UNIT_MPX	PDP10/kx10_defs.h	425;"	d
UNIT_MSIZE	PDP10/kx10_defs.h	403;"	d
UNIT_MT	PDP10/kx10_mt.c	53;"	d	file:
UNIT_MT	PDP10/pdp6_mtc.c	52;"	d	file:
UNIT_MUSTBUF	sim_defs.h	641;"	d
UNIT_M_DTYPE	PDP10/kx10_dp.c	44;"	d	file:
UNIT_M_DTYPE	PDP10/kx10_imp.c	39;"	d	file:
UNIT_M_DTYPE	PDP10/kx10_rc.c	38;"	d	file:
UNIT_M_DTYPE	PDP10/kx10_rp.c	41;"	d	file:
UNIT_M_DTYPE	PDP10/kx10_rs.c	40;"	d	file:
UNIT_M_DTYPE	PDP10/pdp6_dsk.c	38;"	d	file:
UNIT_M_FMT	PDP10/kx10_disk.h	28;"	d
UNIT_M_MPX	PDP10/kx10_defs.h	424;"	d
UNIT_M_PAGE	PDP10/kx10_defs.h	419;"	d
UNIT_M_TAPE_ANSI	sim_defs.h	675;"	d
UNIT_M_TAPE_FMT	sim_defs.h	672;"	d
UNIT_M_WAITS	PDP10/kx10_defs.h	421;"	d
UNIT_NO_FIO	sim_defs.h	663;"	d
UNIT_NUM	PDP10/kx10_mt.c	109;"	d	file:
UNIT_NUM	PDP10/pdp6_mtc.c	59;"	d	file:
UNIT_OPT	PDP10/ks10_lp.c	42;"	d	file:
UNIT_RFLAGS	sim_defs.h	655;"	d
UNIT_RO	sim_defs.h	635;"	d
UNIT_ROABLE	sim_defs.h	643;"	d
UNIT_SEL_NEW	PDP10/pdp6_mtc.c	132;"	d	file:
UNIT_SEQ	sim_defs.h	637;"	d
UNIT_S_DF_TAPE	sim_defs.h	669;"	d
UNIT_S_TAPE_ANSI	sim_defs.h	674;"	d
UNIT_S_TAPE_FMT	sim_defs.h	671;"	d
UNIT_TAPE_MRK	sim_defs.h	666;"	d
UNIT_TAPE_PNU	sim_defs.h	667;"	d
UNIT_TEXT	sim_defs.h	651;"	d
UNIT_TMR_UNIT	sim_defs.h	665;"	d
UNIT_TM_POLL	sim_defs.h	662;"	d
UNIT_TWOSEG	PDP10/kx10_defs.h	409;"	d
UNIT_TWOSEG	PDP10/kx10_defs.h	412;"	d
UNIT_TWOSEG	PDP10/kx10_defs.h	414;"	d
UNIT_TYPE	PDP10/ka10_pmp.c	68;"	d	file:
UNIT_UC	PDP10/kl10_fe.c	341;"	d	file:
UNIT_UC	PDP10/ks10_lp.c	39;"	d	file:
UNIT_UC	PDP10/kx10_lp.c	47;"	d	file:
UNIT_UFMASK	sim_defs.h	654;"	d
UNIT_UFMASK_31	sim_defs.h	653;"	d
UNIT_UTF8	PDP10/kx10_lp.c	48;"	d	file:
UNIT_V_11FMT	PDP10/kx10_dt.c	95;"	d	file:
UNIT_V_11FMT	PDP10/pdp6_dtc.c	97;"	d	file:
UNIT_V_8FMT	PDP10/kx10_dt.c	94;"	d	file:
UNIT_V_8FMT	PDP10/pdp6_dtc.c	96;"	d	file:
UNIT_V_ADDR	PDP10/ka10_pmp.c	75;"	d	file:
UNIT_V_CARD_MODE	sim_card.h	87;"	d
UNIT_V_CT	PDP10/kl10_fe.c	340;"	d	file:
UNIT_V_CT	PDP10/ks10_lp.c	38;"	d	file:
UNIT_V_CT	PDP10/kx10_lp.c	45;"	d	file:
UNIT_V_DF_TAPE	sim_defs.h	668;"	d
UNIT_V_DHCP	PDP10/kx10_imp.c	36;"	d	file:
UNIT_V_DTYPE	PDP10/kx10_dp.c	43;"	d	file:
UNIT_V_DTYPE	PDP10/kx10_imp.c	38;"	d	file:
UNIT_V_DTYPE	PDP10/kx10_rc.c	37;"	d	file:
UNIT_V_DTYPE	PDP10/kx10_rp.c	40;"	d	file:
UNIT_V_DTYPE	PDP10/kx10_rs.c	39;"	d	file:
UNIT_V_DTYPE	PDP10/pdp6_dsk.c	37;"	d	file:
UNIT_V_FMT	PDP10/kx10_disk.h	27;"	d
UNIT_V_MAOFF	PDP10/kx10_defs.h	404;"	d
UNIT_V_MPX	PDP10/kx10_defs.h	423;"	d
UNIT_V_MSIZE	PDP10/kx10_defs.h	402;"	d
UNIT_V_PAGE	PDP10/kx10_defs.h	405;"	d
UNIT_V_RSV	sim_defs.h	632;"	d
UNIT_V_TAPE_ANSI	sim_defs.h	673;"	d
UNIT_V_TAPE_FMT	sim_defs.h	670;"	d
UNIT_V_TYPE	PDP10/ka10_pmp.c	67;"	d	file:
UNIT_V_UF	sim_defs.h	631;"	d
UNIT_V_UF_31	sim_defs.h	630;"	d
UNIT_V_VFU	PDP10/ks10_lp.c	41;"	d	file:
UNIT_V_WAITS	PDP10/kx10_defs.h	420;"	d
UNIT_V_Y2K	PDP10/ks10_tcu.c	38;"	d	file:
UNIT_WA	PDP10/kx10_lp.c	49;"	d	file:
UNIT_WAITS	PDP10/kx10_defs.h	422;"	d
UNIT_WLK	sim_defs.h	647;"	d
UNIT_WPRT	sim_defs.h	648;"	d
UNIT_Y2K	PDP10/ks10_tcu.c	39;"	d	file:
UNLOAD	PDP10/kx10_mt.c	60;"	d	file:
UNLOAD	PDP10/pdp6_mtc.c	65;"	d	file:
UNUSED_ARG	PDP10/ks10_kmc.c	49;"	d	file:
UNU_END	PDP10/ka10_pmp.c	231;"	d	file:
UP	display/type340cmd.h	139;"	d
UPDATE_SIM_TIME	scp.c	272;"	d	file:
UPTR	PDP10/kx10_dpy.c	203;"	d	file:
UR	PDP10/kx10_dpy.c	579;"	d	file:
URDATA	sim_defs.h	1062;"	d
URDATA	sim_defs.h	974;"	d
URDATAD	sim_defs.h	1064;"	d
URDATAD	sim_defs.h	976;"	d
URDATADF	sim_defs.h	1066;"	d
URDATADF	sim_defs.h	978;"	d
US	display/test.c	117;"	d	file:
USB_CFG_DEVICE_ID	PDP10/kx10_lights.c	77;"	d	file:
USB_CFG_DEVICE_NAME	PDP10/kx10_lights.c	78;"	d	file:
USB_CFG_DEVICE_NAME_LEN	PDP10/kx10_lights.c	79;"	d	file:
USB_CFG_VENDOR_ID	PDP10/kx10_lights.c	76;"	d	file:
USEC	display/vttest.c	44;"	d	file:
USECS_PER_SECOND	sim_tmxr.h	183;"	d
USER	PDP10/kx10_defs.h	286;"	d
USERIO	PDP10/kx10_defs.h	285;"	d
USE_AIO_INTRINSICS	sim_defs.h	1199;"	d
USE_AIO_INTRINSICS	sim_defs.h	1203;"	d
USE_AIO_INTRINSICS	sim_defs.h	1208;"	d
USE_BPF	sim_ether.h	144;"	d
USE_LOWCPU	slirp/slirp_config.h	38;"	d
USE_READER_THREAD	sim_ether.h	91;"	d
USE_READER_THREAD	sim_ether.h	95;"	d
USE_REGEX	sim_defs.h	148;"	d
USE_REGEX	sim_defs.h	152;"	d
USE_ROW_POINTERS	sim_video.c	157;"	d	file:
USE_SETNONBLOCK	sim_ether.h	114;"	d
USE_SETNONBLOCK	sim_ether.h	82;"	d
USE_SHARED	sim_ether.h	125;"	d
USE_SHARED	sim_ether.h	129;"	d
USE_TMPSOCKET	slirp/slirp_config.h	20;"	d
USE_XKB	display/x11.c	42;"	d	file:
UniqueID	sim_disk.c	/^    uint8 UniqueID[16];$/;"	m	struct:_VHD_Footer	file:
Unused	sim_disk.c	/^    uint32      Unused;                 \/* Currently unused *\/$/;"	m	struct:simh_disk_footer	file:
Usage	sim_BuildROMs.c	/^Usage(void)$/;"	f
V	PDP10/ka10_iii.c	114;"	d	file:
V	display/type340cmd.h	88;"	d
VALID	PDP10/ka10_dkb.c	42;"	d	file:
VALID	PDP10/ks10_dz.c	62;"	d	file:
VBRDATA	sim_defs.h	1055;"	d
VBRDATA	sim_defs.h	967;"	d
VBRDATAD	sim_defs.h	1057;"	d
VBRDATAD	sim_defs.h	969;"	d
VBRDATADF	sim_defs.h	1059;"	d
VBRDATADF	sim_defs.h	971;"	d
VCONT	display/type340.c	/^enum mode { PARAM=0, POINT, SLAVE, CHAR, VECTOR, VCONT, INCR, SUBR };$/;"	e	enum:mode	file:
VECTOR	display/type340.c	/^enum mode { PARAM=0, POINT, SLAVE, CHAR, VECTOR, VCONT, INCR, SUBR };$/;"	e	enum:mode	file:
VECT_CTR	PDP10/ks10_uba.c	50;"	d	file:
VECT_H	PDP10/ks10_uba.c	49;"	d	file:
VECT_L	PDP10/ks10_uba.c	48;"	d	file:
VEC_DEVMAX	PDP10/kx10_defs.h	613;"	d
VHDHANDLE	sim_disk.c	/^typedef struct VHD_IOData *VHDHANDLE;$/;"	t	typeref:struct:VHD_IOData	file:
VHD_BAT_FREE_ENTRY	sim_disk.c	4835;"	d	file:
VHD_DATA_BLOCK_ALIGNMENT	sim_disk.c	4836;"	d	file:
VHD_DT_Differencing	sim_disk.c	4840;"	d	file:
VHD_DT_Dynamic	sim_disk.c	4839;"	d	file:
VHD_DT_Fixed	sim_disk.c	4838;"	d	file:
VHD_DynamicDiskHeader	sim_disk.c	/^    } VHD_DynamicDiskHeader;$/;"	t	typeref:struct:_VHD_DynamicDiskHeader	file:
VHD_Footer	sim_disk.c	/^    } VHD_Footer;$/;"	t	typeref:struct:_VHD_Footer	file:
VHD_IOData	sim_disk.c	/^struct VHD_IOData {$/;"	s	file:
VHD_Internal_SectorSize	sim_disk.c	4842;"	d	file:
VHD_ParentLocator	sim_disk.c	/^    struct VHD_ParentLocator {$/;"	s	struct:_VHD_DynamicDiskHeader	file:
VID_DISPLAY	sim_video.c	/^struct VID_DISPLAY {$/;"	s	file:
VID_DISPLAY	sim_video.h	/^typedef struct VID_DISPLAY VID_DISPLAY;$/;"	t	typeref:struct:VID_DISPLAY
VID_GAMEPAD_CALLBACK	sim_video.h	/^typedef void (*VID_GAMEPAD_CALLBACK)(int, int, int);$/;"	t
VID_QUIT_CALLBACK	sim_video.h	/^typedef void (*VID_QUIT_CALLBACK)(void);$/;"	t
VOL1	sim_tape.c	/^    } VOL1;$/;"	t	typeref:struct:VOL1	file:
VOL1	sim_tape.c	/^typedef struct VOL1 {$/;"	s	file:
VR48_GUTTER	display/display.h	81;"	d
VR48_WIDTH	display/vt11.c	591;"	d	file:
VS	display/vttest.c	/^unsigned short VS[] = {$/;"	v
VS60	display/vt11.h	90;"	d
VSCALE	display/vt11.c	212;"	d	file:
VSMAX	scp.c	14409;"	d	file:
VS_CHANGE	display/vtmacs.h	100;"	d
VS_SAME	display/vtmacs.h	99;"	d
VT	PDP10/ka10_stk.c	77;"	d	file:
VT	display/vttest.c	/^unsigned short VT[] = {$/;"	v
VT11	display/vt11.h	91;"	d
VT11_CSP_H	display/vt11.h	60;"	d
VT11_CSP_H	display/vt11.h	62;"	d
VT11_CSP_W	display/vt11.h	54;"	d
VT11_CSP_W	display/vt11.h	56;"	d
VhdPathToHostPath	sim_disk.c	/^VhdPathToHostPath (const char *szVhdPath,$/;"	f	file:
WAITS	PDP10/kx10_defs.h	81;"	d
WA_IMP_DEVNUM	PDP10/kx10_imp.c	32;"	d	file:
WB	PDP10/ks10_kmc.c	/^ typedef struct workblock WB;$/;"	t	typeref:struct:workblock	file:
WC	PDP10/ka10_ai.c	154;"	d	file:
WCMA_LD	PDP10/ka10_pmp.c	259;"	d	file:
WCNSLS_DEVNUM	PDP10/kx10_dpy.c	508;"	d	file:
WCW	PDP10/kx10_rc.c	61;"	d	file:
WEXITSTATUS	slirp_glue/qemu/osdep.h	71;"	d
WF	display/vttest.c	/^unsigned short WF[] = {$/;"	v
WH	PDP10/kx10_dp.c	98;"	d	file:
WIFEXITED	slirp_glue/qemu/osdep.h	70;"	d
WIN32_LEAN_AND_MEAN	sim_serial.h	53;"	d
WLE	PDP10/ka10_ch10.c	56;"	d	file:
WLE	PDP10/pdp6_dsk.c	69;"	d	file:
WMASK	PDP10/kx10_defs.h	332;"	d
WMASK	PDP10/kx10_defs.h	342;"	d
WORD	PDP10/kx10_defs.h	573;"	d
WR	PDP10/kx10_dp.c	96;"	d	file:
WRAP_ENB	PDP10/ka10_iii.c	55;"	d	file:
WRAP_FLG	PDP10/ka10_iii.c	66;"	d	file:
WRAP_MSK	PDP10/ka10_iii.c	70;"	d	file:
WRCLK	PDP10/pdp6_mtc.c	84;"	d	file:
WRITE	PDP10/kx10_mt.c	65;"	d	file:
WRITE	PDP10/kx10_rc.c	55;"	d	file:
WRITE	PDP10/pdp6_mtc.c	66;"	d	file:
WRITE_1	PDP10/pdp6_mtc.c	67;"	d	file:
WRITE_I	scp.c	8483;"	d	file:
WRITE_LOCK	PDP10/kx10_mt.c	77;"	d	file:
WRITE_LOCK	PDP10/pdp6_mtc.c	97;"	d	file:
WRITE_LONG	PDP10/kx10_mt.c	66;"	d	file:
WRITTEN	PDP10/kx10_dt.c	260;"	d	file:
WRITTEN	PDP10/pdp6_dtc.c	235;"	d	file:
WRP_FBIT	PDP10/ka10_iii.c	74;"	d	file:
WRT_CW	PDP10/kx10_rh.c	137;"	d	file:
WR_CMD	PDP10/pdp6_dsk.c	58;"	d	file:
WR_HD_LK	PDP10/kx10_dp.c	111;"	d	file:
WSAAPI	sim_sock.c	63;"	d	file:
WSAEACCES	sim_sock.h	91;"	d
WSAEADDRINUSE	sim_sock.h	87;"	d
WSAEAFNOSUPPORT	sim_sock.h	89;"	d
WSAECONNABORTED	sim_sock.h	85;"	d
WSAECONNREFUSED	sim_sock.h	84;"	d
WSAECONNRESET	sim_sock.h	83;"	d
WSAEHOSTUNREACH	sim_sock.h	86;"	d
WSAEINPROGRESS	sim_sock.h	80;"	d
WSAEINTR	sim_sock.h	92;"	d
WSAEISCONN	sim_sock.h	82;"	d
WSAENAMETOOLONG	sim_sock.h	79;"	d
WSAETIMEDOUT	sim_sock.h	81;"	d
WSAEWOULDBLOCK	sim_sock.h	75;"	d
WSAEWOULDBLOCK	sim_sock.h	77;"	d
WSAGetLastError	sim_sock.h	70;"	d
WSASetLastError	sim_sock.h	71;"	d
WTM	PDP10/kx10_mt.c	67;"	d	file:
WTM	PDP10/pdp6_mtc.c	68;"	d	file:
WT_CW_DONE	PDP10/kx10_mt.c	93;"	d	file:
WriteFilePosition	sim_disk.c	/^static t_stat WriteFilePosition(FILE *File, void *buf, size_t bufsize, uint32 *byteswritten, uint64 position)$/;"	f	file:
WriteVirtualDisk	sim_disk.c	/^WriteVirtualDisk(VHDHANDLE hVHD,$/;"	f	file:
WriteVirtualDiskSectors	sim_disk.c	/^WriteVirtualDiskSectors(VHDHANDLE hVHD,$/;"	f	file:
X	display/display.c	384;"	d	file:
XMASK	PDP10/kx10_defs.h	179;"	d
XMT_PI	PDP10/kx10_dc.c	48;"	d	file:
XMT_RLS	PDP10/pdp6_dcs.c	50;"	d	file:
XP1	display/type340cmd.h	160;"	d
XP16	display/type340cmd.h	156;"	d
XP2	display/type340cmd.h	159;"	d
XP32	display/type340cmd.h	155;"	d
XP4	display/type340cmd.h	158;"	d
XP64	display/type340cmd.h	154;"	d
XP8	display/type340cmd.h	157;"	d
XPOS	PDP10/kx10_dpy.c	154;"	d	file:
XSCN_ACT	PDP10/pdp6_dcs.c	51;"	d	file:
XTIME	PDP10/ks10_kmc.c	115;"	d	file:
XWD	PDP10/kx10_dpy.c	132;"	d	file:
Y	display/display.c	385;"	d	file:
YELLOW	display/vt11.c	/^enum scolor { GREEN=0, YELLOW, ORANGE, RED };$/;"	e	enum:scolor	file:
YP1	display/type340cmd.h	148;"	d
YP16	display/type340cmd.h	144;"	d
YP2	display/type340cmd.h	147;"	d
YP32	display/type340cmd.h	143;"	d
YP4	display/type340cmd.h	146;"	d
YP64	display/type340cmd.h	142;"	d
YP8	display/type340cmd.h	145;"	d
YPOS	PDP10/kx10_dpy.c	155;"	d	file:
ZD_NO	display/vtmacs.h	72;"	d
ZD_SAME	display/vtmacs.h	71;"	d
ZD_YES	display/vtmacs.h	73;"	d
_DEC_rdsect	sim_disk.c	/^static t_stat _DEC_rdsect (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectsread, t_seccnt sects, uint32 physsectsz)$/;"	f	file:
_FILE_OFFSET_BITS	sim_disk.c	78;"	d	file:
_GArray	slirp_glue/glib.h	/^typedef struct _GArray {$/;"	s
_GSource	slirp_glue/glib.h	/^typedef struct _GSource {int dummy;} GSource;$/;"	s
_IF_H_	slirp/if.h	9;"	d
_IP_H_	slirp/ip.h	34;"	d
_KA10_DEFS_H_	PDP10/kx10_defs.h	29;"	d
_LIBSLIRP_H	slirp/libslirp.h	2;"	d
_MBUF_H_	slirp/mbuf.h	34;"	d
_MISC_H_	slirp/misc.h	9;"	d
_NETINET_IP_ICMP_H_	slirp/ip_icmp.h	34;"	d
_ODS1_FileHeader	sim_disk.c	/^typedef struct _ODS1_FileHeader$/;"	s	file:
_ODS1_HomeBlock	sim_disk.c	/^typedef struct _ODS1_HomeBlock$/;"	s	file:
_ODS1_Retreval	sim_disk.c	/^typedef struct _ODS1_Retreval$/;"	s	file:
_ODS1_StorageControlBlock	sim_disk.c	/^typedef struct _ODS1_StorageControlBlock$/;"	s	file:
_ODS2_FileHeader	sim_disk.c	/^typedef struct _ODS2_FileHeader$/;"	s	file:
_ODS2_HomeBlock	sim_disk.c	/^    typedef struct _ODS2_HomeBlock$/;"	s	file:
_ODS2_Retreval	sim_disk.c	/^typedef union _ODS2_Retreval$/;"	u	file:
_ODS2_StorageControlBlock	sim_disk.c	/^typedef struct _ODS2_StorageControlBlock$/;"	s	file:
_PACKET_OID_DATA	sim_ether.c	/^struct _PACKET_OID_DATA {$/;"	s	file:
_REGDATANF	sim_defs.h	906;"	d
_RSTS_ACNT	sim_disk.c	/^typedef struct _RSTS_ACNT {$/;"	s	file:
_RSTS_DCMAP	sim_disk.c	/^typedef struct _RSTS_DCMAP {$/;"	s	file:
_RSTS_FNAME	sim_disk.c	/^typedef struct _RSTS_FNAME {$/;"	s	file:
_RSTS_GFDBLOCKETTE	sim_disk.c	/^typedef struct _RSTS_GFDBLOCKETTE {$/;"	s	file:
_RSTS_MFDBLOCKETTE	sim_disk.c	/^typedef struct _RSTS_MFDBLOCKETTE {$/;"	s	file:
_RSTS_MFDLABEL	sim_disk.c	/^typedef struct _RSTS_MFDLABEL {$/;"	s	file:
_RSTS_PACKLABEL	sim_disk.c	/^typedef struct _RSTS_PACKLABEL {$/;"	s	file:
_RSTS_RETR	sim_disk.c	/^typedef struct _RSTS_RETR {$/;"	s	file:
_RSTS_ROOT	sim_disk.c	/^typedef union _RSTS_ROOT {$/;"	u	file:
_RSTS_UFDBLOCKETTE	sim_disk.c	/^typedef struct _RSTS_UFDBLOCKETTE {$/;"	s	file:
_RSTS_UNAME	sim_disk.c	/^typedef struct _RSTS_UNAME {$/;"	s	file:
_RT11_DirEntry	sim_disk.c	/^typedef struct _RT11_DirEntry {$/;"	s	file:
_RT11_DirHeader	sim_disk.c	/^typedef struct _RT11_DirHeader {$/;"	s	file:
_RT11_HomeBlock	sim_disk.c	/^typedef struct _RT11_HomeBlock {$/;"	s	file:
_SBUF_H_	slirp/sbuf.h	9;"	d
_SIM_SCSI_H_	sim_scsi.h	28;"	d
_SLIRP_SOCKET_H_	slirp/socket.h	9;"	d
_TCPIP_H_	slirp/tcpip.h	34;"	d
_TCP_H_	slirp/tcp.h	34;"	d
_TCP_TIMER_H_	slirp/tcp_timer.h	34;"	d
_TCP_VAR_H_	slirp/tcp_var.h	34;"	d
_TIMESPEC_DEFINED	sim_ether.h	107;"	d
_TIMESPEC_DEFINED	sim_frontpanel.c	98;"	d	file:
_TIMESPEC_DEFINED	sim_timer.h	42;"	d
_TIMESPEC_DEFINED	sim_timer.h	59;"	d
_TIMESPEC_DEFINED	sim_timer.h	65;"	d
_UDP_H_	slirp/udp.h	34;"	d
_VHD_DynamicDiskHeader	sim_disk.c	/^typedef struct _VHD_DynamicDiskHeader {$/;"	s	file:
_VHD_Footer	sim_disk.c	/^typedef struct _VHD_Footer {$/;"	s	file:
__BYTE_ORDER__	sim_disk.c	121;"	d	file:
__BYTE_ORDER__	sim_disk.c	125;"	d	file:
__BYTE_ORDER__	sim_disk.c	4892;"	d	file:
__BYTE_ORDER__	sim_disk.c	4896;"	d	file:
__COMMON_H__	slirp/slirp.h	2;"	d
__FUNCTION__	sim_defs.h	156;"	d
__STDC_FORMAT_MACROS	PDP10/pidp10panel.c	446;"	d	file:
__STR	sim_ether.c	1257;"	d	file:
__STR	sim_ether.c	1275;"	d	file:
__STR_QUOTE	sim_ether.c	1256;"	d	file:
__STR_QUOTE	sim_ether.c	1276;"	d	file:
__bool_true_false_are_defined	slirp_glue/qemu/win32/stdbool.h	6;"	d
__panel_debug	sim_frontpanel.c	/^static void __panel_debug (PANEL *p, int dbits, const char *fmt, const char *buf, int bufsize, ...)$/;"	f	file:
__panel_vdebug	sim_frontpanel.c	/^static void __panel_vdebug (PANEL *p, int dbits, const char *fmt, const char *buf, int bufsize, va_list arglist)$/;"	f	file:
__printf__	slirp_glue/qemu/compiler.h	52;"	d
_bitmapblk	sim_disk.c	/^    struct _bitmapblk {$/;"	s	struct:_ODS1_StorageControlBlock	file:
_blink	display/vt11.c	/^        unsigned char _blink;           \/* blink enable *\/$/;"	m	struct:frame	file:
_bright	display/vt11.c	/^        unsigned char _bright;          \/* visually indicate hit on entity *\/$/;"	m	struct:frame	file:
_buffer	PDP10/kl10_dn.c	/^struct _buffer {$/;"	s	file:
_buffer	PDP10/kl10_fe.c	/^struct _buffer {$/;"	s	file:
_buffer	PDP10/ks10_dz.c	/^struct _buffer {$/;"	s	file:
_byte	PDP10/kx10_cpu.c	/^struct _byte {$/;"	s	file:
_byte_adj	PDP10/kx10_cpu.c	/^} _byte_adj[] = {$/;"	v	typeref:struct:_byte
_card_buffer	sim_card.c	/^struct _card_buffer {$/;"	s	file:
_cesc	display/vt11.c	/^        unsigned char _cesc;            \/* perform POPR on char. term. match *\/$/;"	m	struct:frame	file:
_clear	slirp_glue/glib_qemu_stubs.c	/^    gboolean _clear;$/;"	m	struct:__anon44	file:
_cmd_name_compare	scp.c	/^static int _cmd_name_compare (const void *pa, const void *pb)$/;"	f	file:
_cmpcard	sim_card.c	/^static int _cmpcard(const uint8 *p, const char *s) {$/;"	f	file:
_color	display/vt11.c	/^        enum scolor   _color;           \/* scope display color (option) *\/$/;"	m	struct:frame	typeref:enum:frame::scolor	file:
_compute_minimum_sleep	sim_timer.c	/^static uint32 _compute_minimum_sleep (void)$/;"	f	file:
_console_poll	sim_console.c	/^_console_poll(void *arg)$/;"	f	file:
_crotate	display/vt11.c	/^        unsigned char _crotate;         \/* rotate chars 90 degrees CCW *\/$/;"	m	struct:frame	file:
_cscale	display/vt11.c	/^        unsigned char _cscale;          \/* character scale factor * 4 *\/$/;"	m	struct:frame	file:
_csi	display/vt11.c	/^        unsigned char _csi;             \/* character scale index 0..3 *\/$/;"	m	struct:frame	file:
_debug_fwrite	scp.c	/^static void _debug_fwrite (const char *buf, size_t len)$/;"	f	file:
_debug_fwrite_all	scp.c	/^static void _debug_fwrite_all (const char *buf, size_t len, FILE *f)$/;"	f	file:
_depth	display/vt11.c	/^        unsigned char _depth;           \/* flag: display Z using depth cue *\/$/;"	m	struct:frame	file:
_device_type	sim_disk.c	/^struct _device_type {$/;"	s	file:
_device_type_name	sim_disk.c	/^static const char *_device_type_name (int DeviceType)$/;"	f	file:
_disk_cancel	sim_disk.c	/^static t_bool _disk_cancel (UNIT *uptr)$/;"	f	file:
_disk_completion_dispatch	sim_disk.c	/^static void _disk_completion_dispatch (UNIT *uptr)$/;"	f	file:
_disk_io	sim_disk.c	/^_disk_io(void *arg)$/;"	f	file:
_disk_is_active	sim_disk.c	/^static t_bool _disk_is_active (UNIT *uptr)$/;"	f	file:
_dn_queue	PDP10/kl10_dn.c	/^struct _dn_queue {$/;"	s	file:
_do_redirects	slirp_glue/sim_slirp.c	/^static int _do_redirects (Slirp *slirp, struct redir_tcp_udp *head)$/;"	f	file:
_double_to_timespec	sim_timer.c	/^static void _double_to_timespec (struct timespec *time, double dtime)$/;"	f	file:
_dpc	display/vt11.c	/^        vt11word      _dpc;             \/* Display Program Counter (even) *\/$/;"	m	struct:frame	file:
_dte_queue	PDP10/kl10_fe.c	/^struct _dte_queue {$/;"	s	file:
_edgeintr	display/vt11.c	/^        unsigned char _edgeintr;        \/* generate intr. on edge transition *\/$/;"	m	struct:frame	file:
_element_size	slirp_glue/glib_qemu_stubs.c	/^    guint _element_size;            \/* element size *\/$/;"	m	struct:__anon44	file:
_err_return	sim_disk.c	/^static t_stat _err_return (UNIT *uptr, t_stat stat)$/;"	f	file:
_eth_add_to_open_list	sim_ether.c	/^static void _eth_add_to_open_list (ETH_DEV* dev)$/;"	f	file:
_eth_callback	sim_ether.c	/^_eth_callback(u_char* info, const struct pcap_pkthdr* header, const u_char* data)$/;"	f	file:
_eth_close_port	sim_ether.c	/^static t_stat _eth_close_port(int eth_api, pcap_t *pcap, SOCKET pcap_fd)$/;"	f	file:
_eth_error	sim_ether.c	/^_eth_error(ETH_DEV* dev, const char* where)$/;"	f	file:
_eth_fix_ip_jumbo_offload	sim_ether.c	/^_eth_fix_ip_jumbo_offload(ETH_DEV* dev, u_char* msg, int len)$/;"	f	file:
_eth_fix_ip_xsum_offload	sim_ether.c	/^_eth_fix_ip_xsum_offload(ETH_DEV* dev, const u_char* msg, int len)$/;"	f	file:
_eth_get_system_id	sim_ether.c	/^static int _eth_get_system_id (char *buf, size_t buf_size)$/;"	f	file:
_eth_getname	sim_ether.c	/^static const char* _eth_getname(int number, char* name, char *desc)$/;"	f	file:
_eth_hash_lookup	sim_ether.c	/^_eth_hash_lookup(ETH_MULTIHASH hash, const u_char* data)$/;"	f	file:
_eth_open_port	sim_ether.c	/^static t_stat _eth_open_port(char *savname, int *eth_api, void **handle, SOCKET *fd_handle, char errbuf[PCAP_ERRBUF_SIZE], char *bpf_filter, void *opaque, DEVICE *dptr, uint32 dbit)$/;"	f	file:
_eth_process_loopback	sim_ether.c	/^_eth_process_loopback (ETH_DEV* dev, const u_char* data, uint32 len)$/;"	f	file:
_eth_rand_byte	sim_ether.c	/^static int _eth_rand_byte()$/;"	f	file:
_eth_reader	sim_ether.c	/^_eth_reader(void *arg)$/;"	f	file:
_eth_remove_from_open_list	sim_ether.c	/^static void _eth_remove_from_open_list (ETH_DEV* dev)$/;"	f	file:
_eth_write	sim_ether.c	/^t_stat _eth_write(ETH_DEV* dev, ETH_PACK* packet, ETH_PCALLBACK routine)$/;"	f	file:
_eth_writer	sim_ether.c	/^_eth_writer(void *arg)$/;"	f	file:
_func	sim_ether.c	/^typedef int (*_func)();$/;"	t	file:
_func	sim_sock.c	/^typedef int (*_func)();$/;"	t	file:
_get_dbg_verb	scp.c	/^static const char *_get_dbg_verb (uint32 dbits, DEVICE* dptr, UNIT *uptr)$/;"	f	file:
_get_open_device	sim_serial.c	/^static struct open_serial_device *_get_open_device (SERHANDLE port)$/;"	f	file:
_get_open_device_byname	sim_serial.c	/^static struct open_serial_device *_get_open_device_byname (const char *name)$/;"	f	file:
_get_string	scp.c	/^static CONST char *_get_string (CONST char *iptr, char *optr, char mchar)$/;"	f	file:
_get_tool_version	scp.c	/^static const char *_get_tool_version (const char *tool)$/;"	f	file:
_head	display/display.c	/^static struct point _head;$/;"	v	typeref:struct:point	file:
_i_strcmp	scp.c	/^static int _i_strcmp (const char *s1, const char *s2)$/;"	f	file:
_inten0	display/vt11.c	/^        unsigned char _inten0;          \/* blank cons. 0 for all graphic data *\/$/;"	m	struct:frame	file:
_inten1	display/vt11.c	/^        unsigned char _inten1;          \/* blank cons. 1 for all graphic data *\/$/;"	m	struct:frame	file:
_intens	display/vt11.c	/^        unsigned char _intens;          \/* intensity: 0 => dim .. 7 => bright *\/$/;"	m	struct:frame	file:
_italics	display/vt11.c	/^        unsigned char _italics;         \/* italicize characters *\/$/;"	m	struct:frame	file:
_lnorder_test	sim_tmxr.c	/^static t_stat _lnorder_test (TMXR *tmxr, $/;"	f	file:
_lp0intr	display/vt11.c	/^        unsigned char _lp0intr;         \/* generate interrupt on LP #0 hit *\/$/;"	m	struct:frame	file:
_lp0swintr	display/vt11.c	/^        unsigned char _lp0swintr;       \/* generate intr. on LP #0 switch chg *\/$/;"	m	struct:frame	file:
_lp1intr	display/vt11.c	/^        unsigned char _lp1intr;         \/* generate interrupt on LP #1 hit *\/$/;"	m	struct:frame	file:
_lp1swintr	display/vt11.c	/^        unsigned char _lp1swintr;       \/* generate intr. on LP #1 switch chg *\/$/;"	m	struct:frame	file:
_ltype	display/vt11.c	/^        enum linetype _ltype;           \/* line type (long dash, etc.) *\/$/;"	m	struct:frame	typeref:enum:frame::linetype	file:
_menu	display/vt11.c	/^        unsigned char _menu;            \/* VS60 graphics in menu area *\/$/;"	m	struct:frame	file:
_mode	display/vt11.c	/^        enum gmode    _mode;            \/* 4 bits: sets type for graphic data *\/$/;"	m	struct:frame	typeref:enum:frame::gmode	file:
_mux_detach_line	sim_tmxr.c	/^static void _mux_detach_line (TMLN *lp, t_bool close_listener, t_bool close_connecting)$/;"	f	file:
_name	display/vt11.c	/^        unsigned      _name;            \/* (11-bit) name from display file *\/$/;"	m	struct:frame	file:
_op_add	scp.c	/^static t_svalue _op_add (t_svalue augend, t_svalue addend)$/;"	f	file:
_op_bit_and	scp.c	/^static t_svalue _op_bit_and (t_svalue data1, t_svalue data2)$/;"	f	file:
_op_bit_lsh	scp.c	/^static t_svalue _op_bit_lsh (t_svalue shift, t_svalue data)$/;"	f	file:
_op_bit_or	scp.c	/^static t_svalue _op_bit_or (t_svalue data1, t_svalue data2)$/;"	f	file:
_op_bit_rsh	scp.c	/^static t_svalue _op_bit_rsh (t_svalue shift, t_svalue data)$/;"	f	file:
_op_bit_xor	scp.c	/^static t_svalue _op_bit_xor (t_svalue data1, t_svalue data2)$/;"	f	file:
_op_comp	scp.c	/^static t_svalue _op_comp (t_svalue data, t_svalue unused)$/;"	f	file:
_op_div	scp.c	/^static t_svalue _op_div (t_svalue divisor, t_svalue dividend)$/;"	f	file:
_op_eq	scp.c	/^static t_svalue _op_eq (t_svalue data1, t_svalue data2)$/;"	f	file:
_op_ge	scp.c	/^static t_svalue _op_ge (t_svalue data1, t_svalue data2)$/;"	f	file:
_op_gt	scp.c	/^static t_svalue _op_gt (t_svalue data1, t_svalue data2)$/;"	f	file:
_op_le	scp.c	/^static t_svalue _op_le (t_svalue data1, t_svalue data2)$/;"	f	file:
_op_log_and	scp.c	/^static t_svalue _op_log_and (t_svalue data1, t_svalue data2)$/;"	f	file:
_op_log_not	scp.c	/^static t_svalue _op_log_not (t_svalue data, t_svalue unused)$/;"	f	file:
_op_log_or	scp.c	/^static t_svalue _op_log_or (t_svalue data1, t_svalue data2)$/;"	f	file:
_op_lt	scp.c	/^static t_svalue _op_lt (t_svalue data1, t_svalue data2)$/;"	f	file:
_op_mod	scp.c	/^static t_svalue _op_mod (t_svalue divisor, t_svalue dividend)$/;"	f	file:
_op_mult	scp.c	/^static t_svalue _op_mult (t_svalue factorx, t_svalue factory)$/;"	f	file:
_op_ne	scp.c	/^static t_svalue _op_ne (t_svalue data1, t_svalue data2)$/;"	f	file:
_op_str_eq	scp.c	/^static t_svalue _op_str_eq (const char *str1, const char *str2)$/;"	f	file:
_op_str_ge	scp.c	/^static t_svalue _op_str_ge (const char *str1, const char *str2)$/;"	f	file:
_op_str_gt	scp.c	/^static t_svalue _op_str_gt (const char *str1, const char *str2)$/;"	f	file:
_op_str_le	scp.c	/^static t_svalue _op_str_le (const char *str1, const char *str2)$/;"	f	file:
_op_str_lt	scp.c	/^static t_svalue _op_str_lt (const char *str1, const char *str2)$/;"	f	file:
_op_str_ne	scp.c	/^static t_svalue _op_str_ne (const char *str1, const char *str2)$/;"	f	file:
_op_sub	scp.c	/^static t_svalue _op_sub (t_svalue subtrahend, t_svalue minuend)$/;"	f	file:
_panel_add_register	sim_frontpanel.c	/^_panel_add_register (PANEL *panel,$/;"	f	file:
_panel_callback	sim_frontpanel.c	/^_panel_callback(void *arg)$/;"	f	file:
_panel_cleanup	sim_frontpanel.c	/^_panel_cleanup (void)$/;"	f	file:
_panel_debug	sim_frontpanel.c	279;"	d	file:
_panel_debugflusher	sim_frontpanel.c	/^_panel_debugflusher(void *arg)$/;"	f	file:
_panel_deregister_panel	sim_frontpanel.c	/^_panel_deregister_panel (PANEL *p)$/;"	f	file:
_panel_establish_register_bits_collection	sim_frontpanel.c	/^_panel_establish_register_bits_collection (PANEL *panel)$/;"	f	file:
_panel_get_registers	sim_frontpanel.c	/^_panel_get_registers (PANEL *panel, int calledback, unsigned long long *simulation_time)$/;"	f	file:
_panel_malloc	sim_frontpanel.c	/^_panel_malloc (size_t size)$/;"	f	file:
_panel_reader	sim_frontpanel.c	/^_panel_reader(void *arg)$/;"	f	file:
_panel_register_panel	sim_frontpanel.c	/^_panel_register_panel (PANEL *p)$/;"	f	file:
_panel_register_query_string	sim_frontpanel.c	/^_panel_register_query_string (PANEL *panel, char **buf, size_t *buf_size)$/;"	f	file:
_panel_send	sim_frontpanel.c	/^_panel_send (PANEL *p, const char *msg, int len)$/;"	f	file:
_panel_sendf	sim_frontpanel.c	/^_panel_sendf (PANEL *p, int *completion_status, char **response, const char *fmt, ...)$/;"	f	file:
_panel_sendf_completion	sim_frontpanel.c	/^_panel_sendf_completion (PANEL *p, char **response, const char *completion, const char *fmt, ...)$/;"	f	file:
_panel_vsendf_completion	sim_frontpanel.c	/^_panel_vsendf_completion (PANEL *p, int *completion_status, char **response, const char *completion_string, const char *fmt, va_list arglist)$/;"	f	file:
_parse_redirect_port	slirp_glue/sim_slirp.c	/^_parse_redirect_port (struct redir_tcp_udp **head, const char *buff, int is_udp)$/;"	f	file:
_process_cmd	scp.c	/^static t_stat _process_cmd (const char *cmd, CONST char *cptr)$/;"	f	file:
_rand_uuid_gen	sim_disk.c	/^_rand_uuid_gen (void *uuidaddr)$/;"	f	file:
_rom_swapb	sim_timer.c	/^SIM_NOINLINE static int32 _rom_swapb(int32 val)$/;"	f	file:
_rstsContext	sim_disk.c	/^typedef struct _rstsContext {$/;"	s	file:
_rtcn_configure_calibrated_clock	sim_timer.c	/^static void _rtcn_configure_calibrated_clock (int32 newtmr)$/;"	f	file:
_rtcn_tick_catchup_check	sim_timer.c	/^static t_bool _rtcn_tick_catchup_check (RTC *rtc, int32 time)$/;"	f	file:
_screenshot_filename	sim_video.c	/^static const char *_screenshot_filename;$/;"	v	file:
_screenshot_stat	sim_video.c	/^static t_stat _screenshot_stat;$/;"	v	file:
_serial_add_to_open_list	sim_serial.c	/^static struct open_serial_device *_serial_add_to_open_list (SERHANDLE port, TMLN *line, const char *name, const char *config)$/;"	f	file:
_serial_name_compare	sim_serial.c	/^static int _serial_name_compare (const void *pa, const void *pb)$/;"	f	file:
_serial_remove_from_open_list	sim_serial.c	/^static void _serial_remove_from_open_list (SERHANDLE port)$/;"	f	file:
_set_debug_file	sim_frontpanel.c	/^_set_debug_file (PANEL *panel, const char *debug_file)$/;"	f	file:
_set_dname_len	scp.c	/^void _set_dname_len (DEVICE *dptr)$/;"	f
_set_errno_from_status	sim_disk.c	/^static void _set_errno_from_status (DWORD dwStatus)$/;"	f	file:
_show_desc	sim_video.c	/^static CONST void *_show_desc;$/;"	v	file:
_show_st	sim_video.c	/^static FILE *_show_st;$/;"	v	file:
_show_stat	sim_video.c	/^static t_stat _show_stat;$/;"	v	file:
_show_uptr	sim_video.c	/^static UNIT *_show_uptr;$/;"	v	file:
_show_val	sim_video.c	/^static int32 _show_val;$/;"	v	file:
_sim_activate	scp.c	/^t_stat _sim_activate (UNIT *uptr, int32 event_time)$/;"	f
_sim_activate_after	scp.c	/^t_stat _sim_activate_after (UNIT *uptr, double usec_delay)$/;"	f
_sim_activate_after_abs	scp.c	/^t_stat _sim_activate_after_abs (UNIT *uptr, double usec_delay)$/;"	f
_sim_activate_queue_time	scp.c	/^int32 _sim_activate_queue_time (UNIT *uptr)$/;"	f
_sim_activate_time	scp.c	/^int32 _sim_activate_time (UNIT *uptr)$/;"	f
_sim_coschedule_cancel	sim_timer.c	/^static t_bool _sim_coschedule_cancel (UNIT *uptr)$/;"	f	file:
_sim_debug_device	scp.c	/^void _sim_debug_device (uint32 dbits, DEVICE* dptr, const char* fmt, ...)$/;"	f
_sim_debug_device	scp.h	264;"	d
_sim_debug_flush	scp.c	/^static t_stat _sim_debug_flush (void)$/;"	f	file:
_sim_debug_unit	scp.c	/^void _sim_debug_unit (uint32 dbits, UNIT *uptr, const char* fmt, ...)$/;"	f
_sim_debug_unit	scp.h	266;"	d
_sim_debug_write	scp.c	/^static void _sim_debug_write (const char *buf, size_t len)$/;"	f	file:
_sim_debug_write_flush	scp.c	/^static void _sim_debug_write_flush (const char *buf, size_t len, t_bool flush)$/;"	f	file:
_sim_disk_io_flush	sim_disk.c	/^static void _sim_disk_io_flush (UNIT *uptr)$/;"	f	file:
_sim_disk_rdsect	sim_disk.c	/^static t_stat _sim_disk_rdsect (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectsread, t_seccnt sects)$/;"	f	file:
_sim_disk_rdsect_interleave	sim_disk.c	/^static t_stat _sim_disk_rdsect_interleave (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectsread, t_seccnt sects, uint16 sectpertrack, uint16 interleave, uint16 skew, uint16 offset)$/;"	f	file:
_sim_disk_test_create	sim_disk.c	/^static t_stat _sim_disk_test_create (const char *container, size_t size)$/;"	f	file:
_sim_disk_wrsect	sim_disk.c	/^static t_stat _sim_disk_wrsect (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectswritten, t_seccnt sects)$/;"	f	file:
_sim_dname	scp.c	/^const char *_sim_dname (DEVICE *dptr)$/;"	f
_sim_dname_prefix	scp.c	/^const char *_sim_dname_prefix (DEVICE *dptr, const char *prefix)$/;"	f
_sim_dname_space	scp.c	/^const char *_sim_dname_space (void)$/;"	f
_sim_expand_homedir	sim_fio.c	/^static char *_sim_expand_homedir (const char *file, char *dest, size_t dest_size)$/;"	f	file:
_sim_filelist_entry	sim_fio.c	/^static void _sim_filelist_entry (const char *directory, $/;"	f	file:
_sim_gen_env_uplowcase	scp.c	/^_sim_gen_env_uplowcase (const char *gbuf, char *rbuf, size_t rbuf_size)$/;"	f	file:
_sim_get_env_special	scp.c	/^_sim_get_env_special (const char *gbuf, char *rbuf, size_t rbuf_size)$/;"	f	file:
_sim_getaddrname	sim_sock.c	/^static int _sim_getaddrname (struct sockaddr *addr, size_t addrsize, char *hostnamebuf, char *portnamebuf)$/;"	f	file:
_sim_name_prefix	scp.c	/^const char *_sim_name_prefix (const char *name, const char *prefix, size_t max_name_len)$/;"	f
_sim_panel_create	sim_frontpanel.c	/^_sim_panel_create (const char *sim_path,$/;"	f	file:
_sim_parse_card	sim_card.c	/^_sim_parse_card(UNIT *uptr, DEVICE *dptr, struct _card_buffer *buf, uint16 (*image)[80]) {$/;"	f
_sim_read_deck	sim_card.c	/^_sim_read_deck(UNIT * uptr, int eof)$/;"	f
_sim_rem_log_out	sim_console.c	/^static void _sim_rem_log_out (TMLN *lp)$/;"	f	file:
_sim_rem_message	sim_console.c	/^static t_stat _sim_rem_message (const char *cmd, t_stat stat)$/;"	f	file:
_sim_subststr_substr	scp.c	/^static void _sim_subststr_substr (const char *ops, char *rbuf, size_t rbuf_size)$/;"	f	file:
_sim_tape_format_name	sim_tape.c	/^static const char *_sim_tape_format_name (UNIT *uptr)$/;"	f	file:
_sim_tape_io_flush	sim_tape.c	/^static void _sim_tape_io_flush (UNIT *uptr)$/;"	f	file:
_sim_timer_activate_time	sim_timer.c	/^int32 _sim_timer_activate_time (UNIT *uptr)$/;"	f
_sim_uname	scp.c	/^const char *_sim_uname (UNIT *uptr)$/;"	f
_sim_uname_prefix	scp.c	/^const char *_sim_uname_prefix (UNIT *uptr, const char *prefix)$/;"	f
_sim_vdebug	scp.c	/^void _sim_vdebug (uint32 dbits, DEVICE* dptr, UNIT *uptr, const char* fmt, va_list arglist)$/;"	f
_sim_wallclock_cancel	sim_timer.c	/^static t_bool _sim_wallclock_cancel (UNIT *uptr)$/;"	f	file:
_sim_wallclock_is_active	sim_timer.c	/^static t_bool _sim_wallclock_is_active (UNIT *uptr)$/;"	f	file:
_size	slirp_glue/glib_qemu_stubs.c	/^    guint _size;                    \/* allocated element count size *\/$/;"	m	struct:__anon44	file:
_slirp_callback	sim_ether.c	/^static void _slirp_callback (void *opaque, const unsigned char *buf, int len)$/;"	f	file:
_so	display/vt11.c	/^        unsigned char _so;              \/* currently in shift-out mode *\/$/;"	m	struct:frame	file:
_stopintr	display/vt11.c	/^        unsigned char _stopintr;        \/* generate interrupt on intern. stop *\/$/;"	m	struct:frame	file:
_tape_cancel	sim_tape.c	/^static t_bool _tape_cancel (UNIT *uptr)$/;"	f	file:
_tape_completion_dispatch	sim_tape.c	/^static void _tape_completion_dispatch (UNIT *uptr)$/;"	f	file:
_tape_io	sim_tape.c	/^_tape_io(void *arg)$/;"	f	file:
_tape_is_active	sim_tape.c	/^static t_bool _tape_is_active (UNIT *uptr)$/;"	f	file:
_time_t_to_filetime	sim_fio.c	/^static void _time_t_to_filetime (time_t ttime, FILETIME *filetime)$/;"	f	file:
_timer_thread	sim_timer.c	/^_timer_thread(void *arg)$/;"	f	file:
_timespec_to_double	sim_timer.c	/^static double _timespec_to_double (struct timespec *time)$/;"	f	file:
_tmln_speed_delta	sim_tmxr.c	/^static int32 _tmln_speed_delta (CONST char *cptr)$/;"	f	file:
_tmxr_activate_delay	sim_tmxr.c	/^static int32 _tmxr_activate_delay (UNIT *uptr, int32 interval)$/;"	f	file:
_tmxr_debug	sim_tmxr.c	/^void _tmxr_debug (uint32 dbits, TMLN *lp, const char *msg, char *buf, int bufsize)$/;"	f
_tmxr_getname	sim_tmxr.c	/^static const char* _tmxr_getname(int number, char* name)$/;"	f	file:
_tmxr_locate_line_send_expect	sim_tmxr.c	/^static t_stat _tmxr_locate_line_send_expect (const char *cptr, TMLN **lp, SEND **snd, EXPECT **exp)$/;"	f	file:
_tmxr_poll	sim_tmxr.c	/^_tmxr_poll(void *arg)$/;"	f	file:
_tmxr_remove_from_open_list	sim_tmxr.c	/^static void _tmxr_remove_from_open_list (TMXR* mux)$/;"	f	file:
_tmxr_send_expect_line_name	sim_tmxr.c	/^static const char *_tmxr_send_expect_line_name (const SEND *snd, const EXPECT *exp)$/;"	f	file:
_tmxr_serial_line_poll	sim_tmxr.c	/^_tmxr_serial_line_poll(void *arg)$/;"	f	file:
_tmxr_serial_poll	sim_tmxr.c	/^_tmxr_serial_poll(void *arg)$/;"	f	file:
_value_of	scp.c	/^static t_bool _value_of (const char *data, t_svalue *svalue, char *string, size_t string_size)$/;"	f	file:
_vid_screenshot	sim_video.c	/^static t_stat _vid_screenshot (VID_DISPLAY *vptr, const char *filename)$/;"	f	file:
_vid_show_video	sim_video.c	/^static t_stat _vid_show_video (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f	file:
_vscale	display/vt11.c	/^        unsigned char _vscale;          \/* non-character scale factor * 4 *\/$/;"	m	struct:frame	file:
_zdata	display/vt11.c	/^        unsigned char _zdata;           \/* flag: display file has Z coords *\/$/;"	m	struct:frame	file:
_zero_terminated	slirp_glue/glib_qemu_stubs.c	/^    gboolean _zero_terminated;$/;"	m	struct:__anon44	file:
a_activate_call	sim_defs.h	/^    ACTIVATE_API        a_activate_call;$/;"	m	struct:UNIT
a_check_completion	sim_defs.h	/^    void                (*a_check_completion)(UNIT *);$/;"	m	struct:UNIT
a_due_gtime	sim_defs.h	/^    double              a_due_gtime;                    \/* due time (in instructions) for timer event *\/$/;"	m	struct:UNIT
a_due_time	sim_defs.h	/^    double              a_due_time;                     \/* due time for timer event *\/$/;"	m	struct:UNIT
a_event_time	sim_defs.h	/^    int32               a_event_time;$/;"	m	struct:UNIT
a_is_active	sim_defs.h	/^    t_bool              (*a_is_active)(UNIT *);$/;"	m	struct:UNIT
a_next	sim_defs.h	/^    UNIT                *a_next;                        \/* next asynch active *\/$/;"	m	struct:UNIT
a_poll_waiter_count	sim_defs.h	/^    int32               a_poll_waiter_count;            \/* count of polling threads *\/$/;"	m	struct:UNIT
a_polling_now	sim_defs.h	/^    t_bool              a_polling_now;                  \/* polling active flag *\/$/;"	m	struct:UNIT
a_usec_delay	sim_defs.h	/^    double              a_usec_delay;                   \/* time delay for timer event *\/$/;"	m	struct:UNIT
ac	PDP10/kx10_cpu.c	/^    uint64      ac;$/;"	m	struct:__anon1	file:
ac_stack	PDP10/kx10_cpu.c	/^uint32  ac_stack;                             \/* Register stack pointer *\/$/;"	v
ac_uclus	sim_disk.c	/^    uint16  ac_uclus;$/;"	m	struct:_RSTS_ACNT	file:
ac_udc	sim_disk.c	/^    uint16  ac_udc;$/;"	m	struct:_RSTS_ACNT	file:
ac_udla	sim_disk.c	/^    uint16  ac_udla;$/;"	m	struct:_RSTS_ACNT	file:
ac_ulnk	sim_disk.c	/^    uint16  ac_ulnk;$/;"	m	struct:_RSTS_ACNT	file:
ac_urts	sim_disk.c	/^    uint16  ac_urts[2];$/;"	m	struct:_RSTS_ACNT	file:
ac_usiz	sim_disk.c	/^    uint16  ac_usiz;$/;"	m	struct:_RSTS_ACNT	file:
ac_utc	sim_disk.c	/^    uint16  ac_utc;$/;"	m	struct:_RSTS_ACNT	file:
accessibility	sim_tape.c	/^    char accessibility;         \/* space *\/$/;"	m	struct:HDR1	file:
accessibity	sim_tape.c	/^    char accessibity;           \/* blank *\/$/;"	m	struct:VOL1	file:
ack	PDP10/kl10_nia.c	/^    uint32          ack;                \/* Ack number *\/$/;"	m	struct:tcp	file:
ack	PDP10/kx10_imp.c	/^    uint32          ack;                \/* Ack number *\/$/;"	m	struct:tcp	file:
acknowledgement_number	sim_ether.c	/^  uint32 acknowledgement_number;$/;"	m	struct:TCPHeader	file:
acl	sim_tmxr.h	/^    char                *acl;                           \/* Access control list (CIDR) to accept or reject connects from *\/$/;"	m	struct:tmln
acl	sim_tmxr.h	/^    char                *acl;                           \/* Access control list (CIDR) to accept or reject connects from *\/$/;"	m	struct:tmxr
acl_accepted_sessions	sim_tmxr.h	/^    int32               acl_accepted_sessions;          \/* count of ACL accepted tcp connections *\/$/;"	m	struct:tmln
acl_accepted_sessions	sim_tmxr.h	/^    int32               acl_accepted_sessions;          \/* count of ACL accepted tcp connections *\/$/;"	m	struct:tmxr
acl_rejected_sessions	sim_tmxr.h	/^    int32               acl_rejected_sessions;          \/* count of ACL rejected tcp connections *\/$/;"	m	struct:tmln
acl_rejected_sessions	sim_tmxr.h	/^    int32               acl_rejected_sessions;          \/* count of ACL rejected tcp connections *\/$/;"	m	struct:tmxr
act	sim_console.c	/^    char            *act;$/;"	m	struct:REMOTE	file:
act	sim_defs.h	/^    char                *act;                           \/* action string *\/$/;"	m	struct:BRKTAB
act	sim_defs.h	/^    char                *act;                           \/* action string *\/$/;"	m	struct:EXPTAB
act_buf	sim_console.c	/^    char            *act_buf;$/;"	m	struct:REMOTE	file:
act_buf_size	sim_console.c	/^    size_t          act_buf_size;$/;"	m	struct:REMOTE	file:
action	sim_defs.h	/^    t_stat              (*action)(DEVICE *dptr, UNIT *uptr,$/;"	m	struct:C1TAB
action	sim_defs.h	/^    t_stat              (*action)(FILE *st, DEVICE *dptr,$/;"	m	struct:SHTAB
action	sim_defs.h	/^    t_stat              (*action)(UNIT *up);            \/* action routine *\/$/;"	m	struct:UNIT
action	sim_defs.h	/^    t_stat              (*action)(int32 flag, CONST char *cptr);$/;"	m	struct:CTAB
add_exec	slirp/misc.c	/^int add_exec(struct ex_list **ex_ptr, int do_pty, const char *exec,$/;"	f
addr	PDP10/pidp10panel.c	/^    volatile unsigned int *addr;$/;"	m	struct:bcm2835_peripheral	file:
addr	sim_defs.h	/^    t_addr              addr;                           \/* address *\/$/;"	m	struct:BRKTAB
addr	sim_frontpanel.c	/^    void *addr;$/;"	m	struct:__anon22	file:
addr_count	sim_ether.h	/^  int           addr_count;                             \/* count of filtering addresses *\/$/;"	m	struct:eth_device
addr_p	PDP10/pidp10panel.c	/^    unsigned long addr_p;$/;"	m	struct:bcm2835_peripheral	file:
address	PDP10/ka10_ch10.c	/^int address;$/;"	v
address	PDP10/ks10_ch11.c	/^static int address;$/;"	v	file:
adj	PDP10/kx10_imp.c	/^    uint32            adj;                     \/* Amount to adjust *\/$/;"	m	struct:imp_map	file:
adj_byte	PDP10/kx10_cpu.c	/^adj_byte(int n)$/;"	f
adv_byte	PDP10/kx10_cpu.c	/^adv_byte(int n)$/;"	f
after	sim_defs.h	/^    uint32              after;                          \/* delay before halting *\/$/;"	m	struct:EXPTAB
after	sim_defs.h	/^    uint32              after;                          \/* instruction delay before sending any data *\/$/;"	m	struct:SEND
age	PDP10/kx10_cpu.c	/^uint8   age;                                  \/* Age word *\/$/;"	v
age	PDP10/kx10_imp.c	/^    int16      age;$/;"	m	struct:arp_entry	file:
ai_attach	PDP10/ka10_ai.c	/^t_stat ai_attach (UNIT *uptr, CONST char *cptr)$/;"	f
ai_debug	PDP10/ka10_ai.c	/^DEBTAB ai_debug[] = {$/;"	v
ai_description	PDP10/ka10_ai.c	/^const char *ai_description (DEVICE *dptr)$/;"	f
ai_detach	PDP10/ka10_ai.c	/^t_stat ai_detach (UNIT *uptr)$/;"	f
ai_dev	PDP10/ka10_ai.c	/^DEVICE ai_dev = {$/;"	v
ai_devio	PDP10/ka10_ai.c	/^t_stat ai_devio(uint32 dev, uint64 *data) {$/;"	f
ai_dib	PDP10/ka10_ai.c	/^DIB ai_dib = { AI_DEVNUM, 2, &ai_devio, NULL };$/;"	v
ai_help	PDP10/ka10_ai.c	/^t_stat ai_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
ai_mod	PDP10/ka10_ai.c	/^MTAB ai_mod[] = {$/;"	v
ai_reg	PDP10/ka10_ai.c	/^REG ai_reg[] = {$/;"	v
ai_reset	PDP10/ka10_ai.c	/^ai_reset(DEVICE *dptr)$/;"	f
ai_svc	PDP10/ka10_ai.c	/^t_stat ai_svc (UNIT *uptr)$/;"	f
ai_unit	PDP10/ka10_ai.c	/^UNIT ai_unit[] = {$/;"	v
aincr	sim_defs.h	/^    uint32              aincr;                          \/* addr increment *\/$/;"	m	struct:DEVICE
all_multicast	sim_ether.h	/^  ETH_BOOL      all_multicast;                          \/* receive all multicast messages *\/$/;"	m	struct:eth_device
allocated	slirp/bootp.h	/^    uint16_t allocated;$/;"	m	struct:__anon41
allowed_master_remote_cmds	sim_console.c	/^static CTAB allowed_master_remote_cmds[] = {$/;"	v	file:
allowed_remote_cmds	sim_console.c	/^static CTAB allowed_remote_cmds[] = {$/;"	v	file:
allowed_single_remote_cmds	sim_console.c	/^static CTAB allowed_single_remote_cmds[] = {$/;"	v	file:
amask	sim_video.c	163;"	d	file:
amask	sim_video.c	168;"	d	file:
amc	PDP10/kl10_nia.c	/^    int               amc;                     \/* Recieve all multicast packets *\/$/;"	m	struct:nia_device	file:
ansi_add_file_to_tape	sim_tape.c	/^static int ansi_add_file_to_tape (MEMORY_TAPE *tape, const char *filename)$/;"	f	file:
ansi_args	sim_tape.c	/^    } ansi_args[] = {     \/* code       nohdr2 nohdr3 fixed_text lvl hdr3 for fixed    hdr3 for lf      hdr3 for crlf  skLF CRLF Y2KDT  0RecLnt RFM  CC*\/$/;"	v	typeref:struct:ansi_tape_parameters	file:
ansi_create_tape	sim_tape.c	/^MEMORY_TAPE *ansi_create_tape (const char *label, uint32 block_size, uint32 ansi_type)$/;"	f
ansi_date	sim_tape.c	/^static void ansi_date (time_t datetime, char date[6], t_bool y2k_date_bug)$/;"	f	file:
ansi_fill_text_buffer	sim_tape.c	/^static void ansi_fill_text_buffer (FILE *f, char *buf, size_t buf_size, size_t record_skip_ending, t_bool fixed_text)$/;"	f	file:
ansi_make_HDR1	sim_tape.c	/^static void ansi_make_HDR1 (HDR1 *hdr1, VOL1 *vol, HDR4 *hdr4, const char *filename, uint32 ansi_type)$/;"	f	file:
ansi_make_HDR2	sim_tape.c	/^static void ansi_make_HDR2 (HDR2 *hdr, t_bool fixed_record, size_t block_size, size_t record_size, uint32 ansi_type)$/;"	f	file:
ansi_make_VOL1	sim_tape.c	/^static void ansi_make_VOL1 (VOL1 *vol, const char *ident, uint32 ansi_type)$/;"	f	file:
ansi_tape_parameters	sim_tape.c	/^static struct ansi_tape_parameters {$/;"	s	file:
ansi_type	sim_tape.c	/^    uint32 ansi_type;       \/* ANSI-VMS, ANSI-RT11, ANSI-RSTS, ANSI-RSX11, etc. *\/$/;"	m	struct:MEMORY_TAPE	file:
app_context	display/x11.c	/^static XtAppContext app_context; \/* the topmost context for everything *\/$/;"	v	file:
appendText	scp.c	/^static void appendText (TOPIC *topic, const char *text, size_t len)$/;"	f	file:
apr_irq	PDP10/kx10_cpu.c	/^int     apr_irq;                              \/* Apr Irq level *\/$/;"	v
apr_serial	PDP10/kx10_cpu.c	/^int32   apr_serial = -1;                      \/* CPU Serial number *\/$/;"	v
ar_hln	slirp/slirp.h	/^    unsigned char  ar_hln;      \/* length of hardware address *\/$/;"	m	struct:arphdr
ar_hrd	slirp/slirp.h	/^    unsigned short ar_hrd;      \/* format of hardware address *\/$/;"	m	struct:arphdr
ar_op	slirp/slirp.h	/^    unsigned short ar_op;       \/* ARP opcode (command)       *\/$/;"	m	struct:arphdr
ar_pln	slirp/slirp.h	/^    unsigned char  ar_pln;      \/* length of protocol address *\/$/;"	m	struct:arphdr
ar_pro	slirp/slirp.h	/^    unsigned short ar_pro;      \/* format of protocol address *\/$/;"	m	struct:arphdr
ar_sha	slirp/slirp.h	/^    unsigned char ar_sha[ETH_ALEN]; \/* sender hardware address *\/$/;"	m	struct:arphdr
ar_sip	slirp/slirp.h	/^    uint32_t      ar_sip;           \/* sender IP address       *\/$/;"	m	struct:arphdr
ar_tha	slirp/slirp.h	/^    unsigned char ar_tha[ETH_ALEN]; \/* target hardware address *\/$/;"	m	struct:arphdr
ar_tip	slirp/slirp.h	/^    uint32_t      ar_tip;           \/* target IP address       *\/$/;"	m	struct:arphdr
aradix	sim_defs.h	/^    uint32              aradix;                         \/* address radix *\/$/;"	m	struct:DEVICE
arg	sim_defs.h	/^    int32               arg;                            \/* argument *\/$/;"	m	struct:C1TAB
arg	sim_defs.h	/^    int32               arg;                            \/* argument *\/$/;"	m	struct:CTAB
arg	sim_defs.h	/^    int32               arg;                            \/* argument *\/$/;"	m	struct:SHTAB
args	slirp_glue/sim_slirp.c	/^    char *args;$/;"	m	struct:sim_slirp	file:
arp_entry	PDP10/kx10_imp.c	/^struct arp_entry {$/;"	s	file:
arp_hdr	PDP10/kl10_nia.c	/^struct arp_hdr {$/;"	s	file:
arp_hdr	PDP10/kx10_imp.c	/^struct arp_hdr {$/;"	s	file:
arp_input	slirp/slirp.c	/^static void arp_input(Slirp *slirp, const uint8_t *pkt, int pkt_len)$/;"	f	file:
arp_requested	slirp/mbuf.h	/^        bool    arp_requested;$/;"	m	struct:mbuf
arp_table	PDP10/kx10_imp.c	/^    struct arp_entry  arp_table[IMP_ARPTAB_SIZE];$/;"	m	struct:imp_device	typeref:struct:imp_device::arp_entry	file:
arp_table	slirp/slirp.h	/^    ArpTable arp_table;$/;"	m	struct:Slirp
arp_table_add	slirp/arp_table.c	/^void arp_table_add(Slirp *slirp, uint32_t ip_addr, const uint8_t ethaddr[ETH_ALEN])$/;"	f
arp_table_search	slirp/arp_table.c	/^bool arp_table_search(Slirp *slirp, uint32_t ip_addr,$/;"	f
arphdr	slirp/slirp.h	/^struct arphdr {$/;"	s
array_element_data	sim_frontpanel.c	/^    unsigned long long      array_element_data;$/;"	m	struct:PANEL	file:
array_size	sim_tape.c	/^    uint32 array_size;      \/* allocated size of records array *\/$/;"	m	struct:MEMORY_TAPE	file:
arrow	display/sim_ws.c	/^static const char *arrow[] = {$/;"	v	file:
arrow	display/win32.c	/^static HCURSOR cross, arrow;$/;"	v	file:
arrow_cursor	display/sim_ws.c	/^static CURSOR *arrow_cursor;$/;"	v	file:
ascii_to_dec_029	sim_card.c	/^static const uint16          ascii_to_dec_029[128] = {$/;"	v	file:
ascii_to_hol_026	sim_card.c	/^static const uint16          ascii_to_hol_026[128] = {$/;"	v	file:
ascii_to_hol_029	sim_card.c	/^static const uint16          ascii_to_hol_029[128] = {$/;"	v	file:
ascii_to_hol_ebcdic	sim_card.c	/^static const uint16          ascii_to_hol_ebcdic[128] = {$/;"	v	file:
assert_cmd	scp.c	/^t_stat assert_cmd (int32 flag, CONST char *cptr)$/;"	f
assignDiskType	sim_imd.c	/^t_stat assignDiskType(UNIT *uptr) {$/;"	f
assign_cmd	scp.c	/^t_stat assign_cmd (int32 flag, CONST char *cptr)$/;"	f
assign_device	scp.c	/^t_stat assign_device (DEVICE *dptr, const char *cptr)$/;"	f
assoc_name	display/vt11.c	/^static unsigned      assoc_name = 0;    \/* compare value *\/$/;"	v	file:
asynch_io	sim_disk.c	/^    int                 asynch_io;          \/* Asynchronous Interrupt scheduling enabled *\/$/;"	m	struct:disk_context	file:
asynch_io	sim_ether.h	/^  int           asynch_io;                              \/* Asynchronous Interrupt scheduling enabled *\/$/;"	m	struct:eth_device
asynch_io	sim_tape.c	/^    t_bool              asynch_io;          \/* Asynchronous Interrupt scheduling enabled *\/$/;"	m	struct:tape_context	file:
asynch_io_latency	sim_disk.c	/^    int                 asynch_io_latency;  \/* instructions to delay pending interrupt *\/$/;"	m	struct:disk_context	file:
asynch_io_latency	sim_ether.h	/^  int           asynch_io_latency;                      \/* instructions to delay pending interrupt *\/$/;"	m	struct:eth_device
asynch_io_latency	sim_tape.c	/^    int                 asynch_io_latency;  \/* instructions to delay pending interrupt *\/$/;"	m	struct:tape_context	file:
atn	sim_scsi.h	/^    t_bool atn;                                         \/* attention flag *\/$/;"	m	struct:scsi_bus_t
attach	sim_defs.h	/^    t_stat              (*attach)(UNIT *up, CONST char *cp);$/;"	m	struct:DEVICE
attach_cmd	scp.c	/^t_stat attach_cmd (int32 flag, CONST char *cptr)$/;"	f
attach_err	scp.c	/^t_stat attach_err (UNIT *uptr, t_stat stat)$/;"	f
attach_help	sim_defs.h	/^    t_stat              (*attach_help)(FILE *st, DEVICE *dptr,$/;"	m	struct:DEVICE
attach_unit	scp.c	/^t_stat attach_unit (UNIT *uptr, CONST char *cptr)$/;"	f
attn	PDP10/kx10_defs.h	/^      int            attn;       \/* Attention bits *\/$/;"	m	struct:rh_if
auto_format	sim_disk.c	/^    uint32              auto_format;        \/* Format determined dynamically *\/$/;"	m	struct:disk_context	file:
auto_format	sim_tape.c	/^    uint32              auto_format;        \/* Format determined dynamically *\/$/;"	m	struct:tape_context	file:
auxcpu_attach	PDP10/ka10_auxcpu.c	/^static t_stat auxcpu_attach (UNIT *uptr, CONST char *cptr)$/;"	f	file:
auxcpu_attach_help	PDP10/ka10_auxcpu.c	/^static t_stat auxcpu_attach_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f	file:
auxcpu_base	PDP10/ka10_auxcpu.c	/^t_addr auxcpu_base = 03000000;$/;"	v
auxcpu_debug	PDP10/ka10_auxcpu.c	/^static DEBTAB auxcpu_debug[] = {$/;"	v	file:
auxcpu_desc	PDP10/ka10_auxcpu.c	/^static TMXR auxcpu_desc = { 1, 0, 0, &auxcpu_ldsc };      \/* mux descriptor *\/$/;"	v	file:
auxcpu_description	PDP10/ka10_auxcpu.c	/^static const char *auxcpu_description (DEVICE *dptr)$/;"	f	file:
auxcpu_detach	PDP10/ka10_auxcpu.c	/^static t_stat auxcpu_detach (UNIT *uptr)$/;"	f	file:
auxcpu_dev	PDP10/ka10_auxcpu.c	/^DEVICE auxcpu_dev = {$/;"	v
auxcpu_devio	PDP10/ka10_auxcpu.c	/^t_stat auxcpu_devio(uint32 dev, uint64 *data)$/;"	f
auxcpu_interrupt	PDP10/ka10_auxcpu.c	/^static int auxcpu_interrupt (void)$/;"	f	file:
auxcpu_ldsc	PDP10/ka10_auxcpu.c	/^static TMLN auxcpu_ldsc;                                 \/* line descriptor *\/$/;"	v	file:
auxcpu_mod	PDP10/ka10_auxcpu.c	/^static MTAB auxcpu_mod[] = {$/;"	v	file:
auxcpu_read	PDP10/ka10_auxcpu.c	/^int auxcpu_read (t_addr addr, uint64 *data)$/;"	f
auxcpu_reg	PDP10/ka10_auxcpu.c	/^static REG auxcpu_reg[] = {$/;"	v	file:
auxcpu_reset	PDP10/ka10_auxcpu.c	/^static t_stat auxcpu_reset (DEVICE *dptr)$/;"	f	file:
auxcpu_set_base	PDP10/ka10_auxcpu.c	/^static t_stat auxcpu_set_base (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f	file:
auxcpu_show_base	PDP10/ka10_auxcpu.c	/^static t_stat auxcpu_show_base (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f	file:
auxcpu_svc	PDP10/ka10_auxcpu.c	/^static t_stat auxcpu_svc (UNIT *uptr)$/;"	f	file:
auxcpu_unit	PDP10/ka10_auxcpu.c	/^UNIT auxcpu_unit[1] = {$/;"	v
auxcpu_write	PDP10/ka10_auxcpu.c	/^int auxcpu_write (t_addr addr, uint64 data)$/;"	f
awidth	sim_defs.h	/^    uint32              awidth;                         \/* address width *\/$/;"	m	struct:DEVICE
b1_state	sim_video.h	/^    t_bool b1_state;                                      \/* state of button 1 *\/$/;"	m	struct:mouse_event
b2_state	sim_video.h	/^    t_bool b2_state;                                      \/* state of button 2 *\/$/;"	m	struct:mouse_event
b3_state	sim_video.h	/^    t_bool b3_state;                                      \/* state of button 3 *\/$/;"	m	struct:mouse_event
ba	PDP10/ks10_kmc.c	/^      uint32 ba;$/;"	m	struct:buffer_list	file:
ba	PDP10/ks10_kmc.c	/^   uint32    ba;$/;"	m	struct:workblock	file:
bak_byte	PDP10/kx10_cpu.c	/^bak_byte(int n, int cnt)$/;"	f
based	sim_timer.c	/^    int32 based;                    \/* base delay *\/$/;"	m	struct:RTC	file:
basic_vector	display/vt11.c	/^basic_vector(int i, int dir, int len)   \/* unscaled display-file units *\/$/;"	f	file:
baudrate	sim_serial.c	/^    uint32 baudrate;                                    \/* baud rate *\/$/;"	m	struct:serial_config	file:
bc	sim_tape.c	/^    uint32              *bc;$/;"	m	struct:tape_context	file:
bcast	PDP10/kx10_imp.c	451;"	d	file:
bcm2835_peripheral	PDP10/pidp10panel.c	/^struct bcm2835_peripheral {$/;"	s	file:
bcm_host_get_peripheral_address	PDP10/pidp10panel.c	/^static unsigned bcm_host_get_peripheral_address(void) \/\/ find Pi's gpio base address$/;"	f	file:
bd	PDP10/ks10_kmc.c	/^   uint16    bd[3];$/;"	m	struct:workblock	file:
bda	PDP10/ks10_kmc.c	/^   uint32    bda;$/;"	m	struct:workblock	file:
bdavail	PDP10/ks10_kmc.c	/^    int32  bdavail;$/;"	m	struct:dupstate	file:
bdb	display/vt11.c	/^static uint16 bdb = 0;                  \/* Buffered Data Bits register;$/;"	v	file:
bdq	PDP10/ks10_kmc.c	/^    BDL    bdq[MAXQUEUE*2];                     \/* Queued TX and RX buffer lists *\/$/;"	m	struct:dupstate	file:
bdqh	PDP10/ks10_kmc.c	/^    QH     bdqh;                                \/* Free queue *\/$/;"	m	struct:dupstate	file:
bit_count	sim_frontpanel.c	/^    size_t bit_count;$/;"	m	struct:__anon22	file:
bits	sim_console.c	/^    BITSAMPLE       *bits;$/;"	m	struct:BITSAMPLE_REG	file:
bits	sim_frontpanel.c	/^    int *bits;$/;"	m	struct:__anon22	file:
blackGC	display/x11.c	/^static GC blackGC;              \/* gc with black foreground *\/$/;"	v	file:
black_brush	display/win32.c	/^static HBRUSH black_brush;$/;"	v	file:
blank	sim_tape.c	/^    char blank;                 \/* blank *\/$/;"	m	struct:HDR4	file:
blankch	scp.c	14337;"	d	file:
blckColor	display/carbon.c	/^static RGBColor                 blckColor = { 0x0000, 0x0000, 0x0000 };$/;"	v	file:
blink	PDP10/pidp10panel.c	/^void *blink(void *ptr)$/;"	f
blink_ena	display/vt11.c	267;"	d	file:
blink_off	display/vt11.c	/^static unsigned char blink_off = 0;     \/* set when blinking graphics is dark *\/$/;"	v	file:
blink_thread	PDP10/pidp10panel.c	/^pthread_t blink_thread;$/;"	v
blink_thread_terminate	PDP10/pidp10panel.c	/^int blink_thread_terminate = 0;$/;"	v
block	scp.c	/^    size_t block;$/;"	m	struct:__anon8	file:
block_count	sim_tape.c	/^    char block_count[6];        \/* 000000 *\/$/;"	m	struct:HDR1	file:
block_length	sim_tape.c	/^    char block_length[5];       \/* label ident *\/$/;"	m	struct:HDR2	file:
block_nr	slirp/tftp.h	/^    uint32_t block_nr;$/;"	m	struct:tftp_session
block_size	sim_scsi.h	/^    uint32 block_size;                                  \/* device block size *\/$/;"	m	struct:scsi_dev_t
block_size	sim_tape.c	/^    uint32 block_size;      \/* tape block size *\/$/;"	m	struct:MEMORY_TAPE	file:
blue	display/display.c	/^    double red, green, blue;$/;"	m	struct:phosphor	file:
bmask	sim_video.c	162;"	d	file:
bmask	sim_video.c	167;"	d	file:
bool	slirp_glue/config-host.h	/^typedef int bool;$/;"	t
boolop	sim_defs.h	/^    int32               boolop;                         \/* boolean operator *\/$/;"	m	struct:SCHTAB
boot	sim_defs.h	/^    t_stat              (*boot)(int32 u, DEVICE *dp);$/;"	m	struct:DEVICE
boot_file	slirp_glue/sim_slirp.c	/^    char *boot_file;$/;"	m	struct:sim_slirp	file:
bootp_clients	slirp/slirp.h	/^    BOOTPClient bootp_clients[NB_BOOTP_CLIENTS];$/;"	m	struct:Slirp
bootp_filename	slirp/slirp.h	/^    char *bootp_filename;$/;"	m	struct:Slirp
bootp_input	slirp/bootp.c	/^void bootp_input(struct mbuf *m)$/;"	f
bootp_reply	slirp/bootp.c	/^static void bootp_reply(Slirp *slirp, const struct bootp_t *bp)$/;"	f	file:
bootp_t	slirp/bootp.h	/^struct bootp_t {$/;"	s
bot	sim_tape.c	/^    t_addr              bot;                            \/* bot test *\/$/;"	m	struct:sim_tape_fmt	file:
bp_ciaddr	slirp/bootp.h	/^    struct in_addr bp_ciaddr;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::in_addr
bp_file	slirp/bootp.h	/^    uint8_t bp_file[128];$/;"	m	struct:bootp_t
bp_giaddr	slirp/bootp.h	/^    struct in_addr bp_giaddr;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::in_addr
bp_hlen	slirp/bootp.h	/^    uint8_t bp_hlen;$/;"	m	struct:bootp_t
bp_hops	slirp/bootp.h	/^    uint8_t bp_hops;$/;"	m	struct:bootp_t
bp_htype	slirp/bootp.h	/^    uint8_t bp_htype;$/;"	m	struct:bootp_t
bp_hwaddr	slirp/bootp.h	/^    uint8_t bp_hwaddr[16];$/;"	m	struct:bootp_t
bp_op	slirp/bootp.h	/^    uint8_t bp_op;$/;"	m	struct:bootp_t
bp_secs	slirp/bootp.h	/^    uint16_t bp_secs;$/;"	m	struct:bootp_t
bp_siaddr	slirp/bootp.h	/^    struct in_addr bp_siaddr;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::in_addr
bp_sname	slirp/bootp.h	/^    uint8_t bp_sname[64];$/;"	m	struct:bootp_t
bp_vend	slirp/bootp.h	/^    uint8_t bp_vend[DHCP_OPT_LEN];$/;"	m	struct:bootp_t
bp_xid	slirp/bootp.h	/^    uint32_t bp_xid;$/;"	m	struct:bootp_t
bp_yiaddr	slirp/bootp.h	/^    struct in_addr bp_yiaddr;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::in_addr
bpf_filter	sim_ether.h	/^  char*         bpf_filter;                             \/* bpf filter currently in effect *\/$/;"	m	struct:eth_device
bpi	sim_tape.c	/^    uint32              bpi;$/;"	m	struct:tape_context	file:
bpi	sim_tape.c	/^static const uint32 bpi [] = {                          \/* tape density table, indexed by MT_DENS constants *\/$/;"	v	file:
bpi	sim_tmxr.h	/^    int32               bpi;                          \/* xmt buf insert *\/$/;"	m	struct:loopbuf
bpr	sim_tmxr.h	/^    int32               bpr;                          \/* xmt buf remove *\/$/;"	m	struct:loopbuf
bpsfactor	sim_tmxr.h	/^    double              bpsfactor;                      \/* receive speed factor (scaled to usecs) *\/$/;"	m	struct:tmln
bpt	PDP10/ka10_pmp.c	/^    int                 bpt;          \/* Max bytes per track *\/$/;"	m	struct:disk_t	file:
brk_addr	PDP10/kx10_cpu.c	/^uint32  brk_addr;                             \/* Address break *\/$/;"	v
brk_cmd	scp.c	/^t_stat brk_cmd (int32 flg, CONST char *cptr)$/;"	f
brk_flags	PDP10/kx10_cpu.c	/^int     brk_flags;                            \/* Break flags *\/$/;"	v
brk_types	sim_defs.h	/^    BRKTYPTAB           *brk_types;                     \/* Breakpoint types *\/$/;"	m	struct:DEVICE
broadcast_ethaddr	PDP10/kl10_nia.c	/^static CONST ETH_MAC broadcast_ethaddr = {0xff,0xff,0xff,0xff,0xff,0xff};$/;"	v	file:
broadcast_ethaddr	PDP10/kx10_imp.c	/^static CONST ETH_MAC broadcast_ethaddr = {0xff,0xff,0xff,0xff,0xff,0xff};$/;"	v	file:
broadcast_ipaddr	PDP10/kx10_imp.c	/^static CONST in_addr_T broadcast_ipaddr = {0xffffffff};$/;"	v	file:
bsel2	PDP10/ks10_kmc.c	/^  uint16              bsel2, bsel4, bsel6;$/;"	m	struct:cqueue	file:
bsel4	PDP10/ks10_kmc.c	/^  uint16              bsel2, bsel4, bsel6;$/;"	m	struct:cqueue	file:
bsel6	PDP10/ks10_kmc.c	/^  uint16              bsel2, bsel4, bsel6;$/;"	m	struct:cqueue	file:
btyp	sim_defs.h	/^    uint32      btyp;                                   \/* type mask *\/$/;"	m	struct:BRKTYPTAB
bucky	PDP10/ka10_stk.c	/^static int bucky = 0;$/;"	v	file:
buf	PDP10/kx10_defs.h	/^      t_uint64       buf;        \/* Data buffer *\/$/;"	m	struct:df10
buf	PDP10/kx10_defs.h	/^      t_uint64       buf;        \/* Data buffer *\/$/;"	m	struct:rh_if
buf	scp.c	/^    char *buf;$/;"	m	struct:MFILE	file:
buf	sim_console.c	/^    char            *buf;$/;"	m	struct:REMOTE	file:
buf	sim_defs.h	/^    char                *buf;                           \/* buffered data *\/$/;"	m	struct:MEMFILE
buf	sim_defs.h	/^    int32               buf;                            \/* buffer *\/$/;"	m	struct:UNIT
buf	sim_defs.h	/^    uint8               *buf;                           \/* buffer of output data which has produced *\/$/;"	m	struct:EXPECT
buf	sim_disk.c	/^    uint8               *buf;$/;"	m	struct:disk_context	file:
buf	sim_scsi.h	/^    uint8 *buf;                                         \/* transfer buffer *\/$/;"	m	struct:scsi_bus_t
buf	sim_tape.c	/^    uint8               *buf;$/;"	m	struct:tape_context	file:
buf_b	sim_scsi.h	/^    uint32 buf_b;                                       \/* buffer bottom ptr *\/$/;"	m	struct:scsi_bus_t
buf_data	sim_defs.h	/^    uint32              buf_data;                       \/* count of data in buffer *\/$/;"	m	struct:EXPECT
buf_ins	sim_defs.h	/^    uint32              buf_ins;                        \/* buffer insertion point for the next output data *\/$/;"	m	struct:EXPECT
buf_ptr	sim_console.c	/^    int32           buf_ptr;$/;"	m	struct:REMOTE	file:
buf_size	sim_console.c	/^    int32           buf_size;$/;"	m	struct:REMOTE	file:
buf_size	sim_defs.h	/^    uint32              buf_size;                       \/* buffer size *\/$/;"	m	struct:EXPECT
buf_t	sim_scsi.h	/^    uint32 buf_t;                                       \/* buffer top ptr *\/$/;"	m	struct:scsi_bus_t
buff	PDP10/kl10_dn.c	/^    char     buff[256];  \/* Buffer *\/$/;"	m	struct:_buffer	file:
buff	PDP10/kl10_fe.c	/^    char     buff[256];  \/* Buffer *\/$/;"	m	struct:_buffer	file:
buff	PDP10/ks10_dz.c	/^    uint16   buff[64];   \/* Buffer *\/$/;"	m	struct:_buffer	file:
buffer	PDP10/pidp10panel.c	/^unsigned char buffer[60] = {0};			\/\/ data exchange buffer for i2c use$/;"	v
buffer	sim_card.c	/^   uint8                 buffer[8192+500];    \/* Buffer data *\/$/;"	m	struct:_card_buffer	file:
buffer	sim_defs.h	/^    uint8               *buffer;                        \/* buffer *\/$/;"	m	struct:SEND
buffer_address	sim_serial.c	/^    void *buffer_address;$/;"	m	struct:__anon29	file:
buffer_list	PDP10/ks10_kmc.c	/^struct buffer_list {                            \/* BDL queue elements  *\/$/;"	s	file:
buffer_offset	sim_tape.c	/^    char buffer_offset[2];      \/* *\/$/;"	m	struct:HDR2	file:
buffer_size	sim_serial.c	/^    unsigned short buffer_size;$/;"	m	struct:__anon29	file:
buffered	sim_tmxr.h	/^    int32               buffered;                       \/* Buffered Line Behavior and Buffer Size Flag *\/$/;"	m	struct:tmxr
buffered_character	sim_console.c	/^int buffered_character = 0;$/;"	v
bufsize	sim_defs.h	/^    size_t              bufsize;                        \/* buffer size *\/$/;"	m	struct:SEND
build	PDP10/ka10_auxcpu.c	/^static void build (unsigned char *request, unsigned char octet)$/;"	f	file:
build	PDP10/ka10_ten11.c	/^static void build (unsigned char *request, unsigned char octet)$/;"	f	file:
build	PDP10/pdp6_slave.c	/^static void build (uint8 *request, uint8 octet)$/;"	f	file:
buildHelp	scp.c	/^static TOPIC *buildHelp (TOPIC *topic, DEVICE *dptr,$/;"	f	file:
build_dev_tab	PDP10/kx10_cpu.c	/^t_bool build_dev_tab (void)$/;"	f
busy	display/vt11.c	318;"	d	file:
button_callback	sim_video.c	/^static VID_GAMEPAD_CALLBACK button_callback[10];$/;"	v	file:
buttons	display/carbon.c	/^static int                      buttons = 0; \/* tracks state of all buttons *\/$/;"	v	file:
buttons	display/x11.c	/^static int buttons = 0;         \/* tracks state of all buttons *\/$/;"	v	file:
caddr_t	slirp/slirp.h	/^typedef char *caddr_t;$/;"	t
calib_initializations	sim_timer.c	/^    uint32 calib_initializations;   \/* Initialization Count *\/$/;"	m	struct:RTC	file:
calib_tick_time	sim_timer.c	/^    double calib_tick_time;         \/* ticks time *\/$/;"	m	struct:RTC	file:
calib_tick_time_tot	sim_timer.c	/^    double calib_tick_time_tot;     \/* ticks time - total*\/$/;"	m	struct:RTC	file:
calib_ticks_acked	sim_timer.c	/^    uint32 calib_ticks_acked;       \/* ticks Acked *\/$/;"	m	struct:RTC	file:
calib_ticks_acked_tot	sim_timer.c	/^    uint32 calib_ticks_acked_tot;   \/* ticks Acked - total *\/$/;"	m	struct:RTC	file:
calibrations	sim_timer.c	/^    uint32 calibrations;            \/* calibration count *\/$/;"	m	struct:RTC	file:
call_cmd	scp.c	/^t_stat call_cmd (int32 flag, CONST char *fcptr)$/;"	f
callback	sim_disk.c	/^    DISK_PCALLBACK      callback;$/;"	m	struct:disk_context	file:
callback	sim_frontpanel.c	/^    PANEL_DISPLAY_PCALLBACK callback;$/;"	m	struct:PANEL	file:
callback	sim_tape.c	/^    TAPE_PCALLBACK      callback;$/;"	m	struct:tape_context	file:
callback	slirp_glue/sim_slirp.c	/^    packet_callback callback;   \/* slirp arriving packet delivery callback *\/$/;"	m	struct:sim_slirp	file:
callback_context	sim_frontpanel.c	/^    void                    *callback_context;$/;"	m	struct:PANEL	file:
callback_thread	sim_frontpanel.c	/^    pthread_t               callback_thread;$/;"	m	struct:PANEL	file:
callback_thread_running	sim_frontpanel.c	/^    int                     callback_thread_running;$/;"	m	struct:PANEL	file:
cancel	sim_defs.h	/^    t_bool              (*cancel)(UNIT *);$/;"	m	struct:UNIT
capac	sim_defs.h	/^    t_addr              capac;                          \/* capacity *\/$/;"	m	struct:UNIT
capac_factor	sim_disk.c	/^    uint32              capac_factor;       \/* Units of Capacity (8 = quadword, 2 = word, 1 = byte) *\/$/;"	m	struct:disk_context	file:
caplen	sim_ether.c	/^    uint32 caplen;  \/* length of portion present *\/$/;"	m	struct:pcap_pkthdr	file:
card_context	sim_card.c	/^struct card_context$/;"	s	file:
card_ctx	sim_card.c	85;"	d	file:
card_formats	sim_card.c	/^struct card_formats {$/;"	s	file:
carriage_control	sim_tape.c	/^    char                carriage_control;$/;"	m	struct:ansi_tape_parameters	file:
carriage_control	sim_tape.c	/^    char carriage_control;      \/* A - Fortran CC, M - Record contained CC, space - CR\/LF to be added *\/$/;"	m	struct:HDR2	file:
cbuf	PDP10/ka10_pmp.c	/^     uint8             *cbuf;    \/* Cylinder buffer *\/$/;"	m	struct:pmp_t	file:
cbuff	sim_card.c	/^    char                cbuff[1024];     \/* Read in buffer for cards *\/$/;"	m	struct:card_context	file:
ccw	PDP10/kx10_defs.h	/^      uint32         ccw;        \/* Current word count *\/$/;"	m	struct:rh_if
ccw	PDP10/kx10_defs.h	/^      uint32         ccw;        \/* Next control word address *\/$/;"	m	struct:df10
ccw_comp	PDP10/kx10_defs.h	/^      uint8          ccw_comp;   \/* Have we written out CCW *\/$/;"	m	struct:df10
ccyl	PDP10/ka10_pmp.c	/^     uint16             ccyl;    \/* Current Cylinder number *\/$/;"	m	struct:pmp_t	file:
cda	PDP10/kx10_defs.h	/^      uint32         cda;        \/* Current bus address *\/$/;"	m	struct:rh_if
cda	PDP10/kx10_defs.h	/^      uint32         cda;        \/* Current transfer address *\/$/;"	m	struct:df10
cda	PDP10/kx10_defs.h	/^      uint32         cda;        \/* Current transfer address *\/$/;"	m	struct:rh_if
ch10_attach	PDP10/ka10_ch10.c	/^t_stat ch10_attach (UNIT *uptr, CONST char *cptr)$/;"	f
ch10_checksum	PDP10/ka10_ch10.c	/^uint16 ch10_checksum (const uint8 *p, int count)$/;"	f
ch10_clear	PDP10/ka10_ch10.c	/^void ch10_clear (void)$/;"	f
ch10_command	PDP10/ka10_ch10.c	/^void ch10_command (uint32 data)$/;"	f
ch10_csr_bits	PDP10/ka10_ch10.c	/^BITFIELD ch10_csr_bits[] = {$/;"	v
ch10_debug	PDP10/ka10_ch10.c	/^DEBTAB ch10_debug[] = {$/;"	v
ch10_description	PDP10/ka10_ch10.c	/^const char *ch10_description (DEVICE *dptr)$/;"	f
ch10_detach	PDP10/ka10_ch10.c	/^t_stat ch10_detach (UNIT *uptr)$/;"	f
ch10_dev	PDP10/ka10_ch10.c	/^DEVICE ch10_dev = {$/;"	v
ch10_devio	PDP10/ka10_ch10.c	/^t_stat ch10_devio(uint32 dev, uint64 *data)$/;"	f
ch10_dib	PDP10/ka10_ch10.c	/^DIB ch10_dib = {CH_DEVNUM, 1, &ch10_devio, NULL};$/;"	v
ch10_help	PDP10/ka10_ch10.c	/^t_stat ch10_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
ch10_help_attach	PDP10/ka10_ch10.c	/^t_stat ch10_help_attach (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
ch10_lines	PDP10/ka10_ch10.c	/^TMLN ch10_lines[1] = { {0} };$/;"	v
ch10_mod	PDP10/ka10_ch10.c	/^MTAB ch10_mod[] = {$/;"	v
ch10_receive	PDP10/ka10_ch10.c	/^void ch10_receive (void)$/;"	f
ch10_reg	PDP10/ka10_ch10.c	/^REG ch10_reg[] = {$/;"	v
ch10_reset	PDP10/ka10_ch10.c	/^t_stat ch10_reset (DEVICE *dptr)$/;"	f
ch10_set_node	PDP10/ka10_ch10.c	/^t_stat ch10_set_node (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f
ch10_set_peer	PDP10/ka10_ch10.c	/^t_stat ch10_set_peer (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f
ch10_show_node	PDP10/ka10_ch10.c	/^t_stat ch10_show_node (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f
ch10_show_peer	PDP10/ka10_ch10.c	/^t_stat ch10_show_peer (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f
ch10_status	PDP10/ka10_ch10.c	/^static uint64 ch10_status;$/;"	v	file:
ch10_svc	PDP10/ka10_ch10.c	/^t_stat ch10_svc(UNIT *uptr)$/;"	f
ch10_test_int	PDP10/ka10_ch10.c	/^int ch10_test_int (void)$/;"	f
ch10_tmxr	PDP10/ka10_ch10.c	/^TMXR ch10_tmxr = { 1, NULL, 0, ch10_lines};$/;"	v
ch10_transmit	PDP10/ka10_ch10.c	/^t_stat ch10_transmit ()$/;"	f
ch10_unit	PDP10/ka10_ch10.c	/^UNIT ch10_unit[] = {$/;"	v
ch10_validate	PDP10/ka10_ch10.c	/^void ch10_validate (const uint8 *p, int count)$/;"	f
ch11_attach	PDP10/ks10_ch11.c	/^t_stat ch11_attach (UNIT *uptr, CONST char *cptr)$/;"	f
ch11_checksum	PDP10/ks10_ch11.c	/^ch11_checksum (const uint8 *p, int count)$/;"	f
ch11_clear	PDP10/ks10_ch11.c	/^ch11_clear (struct pdp_dib *dibp)$/;"	f
ch11_csr	PDP10/ks10_ch11.c	/^static uint16 ch11_csr;$/;"	v	file:
ch11_debug	PDP10/ks10_ch11.c	/^DEBTAB ch11_debug[] = {$/;"	v
ch11_description	PDP10/ks10_ch11.c	/^const char *ch11_description (DEVICE *dptr)$/;"	f
ch11_detach	PDP10/ks10_ch11.c	/^t_stat ch11_detach (UNIT *uptr)$/;"	f
ch11_dev	PDP10/ks10_ch11.c	/^DEVICE ch11_dev = {$/;"	v
ch11_dib	PDP10/ks10_ch11.c	/^DIB ch11_dib = { 0764140, 017, 0270, 6, 3, &ch11_read, &ch11_write, NULL, 0, 0 };$/;"	v
ch11_help	PDP10/ks10_ch11.c	/^t_stat ch11_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
ch11_help_attach	PDP10/ks10_ch11.c	/^t_stat ch11_help_attach (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
ch11_lines	PDP10/ks10_ch11.c	/^TMLN ch11_lines[1] = { {0} };$/;"	v
ch11_mod	PDP10/ks10_ch11.c	/^MTAB ch11_mod[] = {$/;"	v
ch11_read	PDP10/ks10_ch11.c	/^ch11_read(DEVICE *dptr, t_addr addr, uint16 *data, int32 access)$/;"	f
ch11_receive	PDP10/ks10_ch11.c	/^ch11_receive (struct pdp_dib *dibp)$/;"	f
ch11_reg	PDP10/ks10_ch11.c	/^REG ch11_reg[] = {$/;"	v
ch11_reset	PDP10/ks10_ch11.c	/^t_stat ch11_reset (DEVICE *dptr)$/;"	f
ch11_set_node	PDP10/ks10_ch11.c	/^t_stat ch11_set_node (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f
ch11_set_peer	PDP10/ks10_ch11.c	/^t_stat ch11_set_peer (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f
ch11_show_node	PDP10/ks10_ch11.c	/^t_stat ch11_show_node (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f
ch11_show_peer	PDP10/ks10_ch11.c	/^t_stat ch11_show_peer (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f
ch11_svc	PDP10/ks10_ch11.c	/^ch11_svc(UNIT *uptr)$/;"	f
ch11_tmxr	PDP10/ks10_ch11.c	/^TMXR ch11_tmxr = { 1, NULL, 0, ch11_lines};$/;"	v
ch11_transmit	PDP10/ks10_ch11.c	/^ch11_transmit (struct pdp_dib *dibp)$/;"	f
ch11_unit	PDP10/ks10_ch11.c	/^UNIT ch11_unit[] = {$/;"	v
ch11_validate	PDP10/ks10_ch11.c	/^ch11_validate (const uint8 *p, int count)$/;"	f
ch11_write	PDP10/ks10_ch11.c	/^ch11_write(DEVICE *dptr, t_addr addr, uint16 data, int32 access)$/;"	f
chaddr	PDP10/kx10_imp.c	/^    uint8             chaddr[DHCP_CHADDR_LEN];$/;"	m	struct:dhcp	file:
chan_end	PDP10/ka10_pmp.c	/^chan_end(uint8 flags) {$/;"	f
chan_read_byte	PDP10/ka10_pmp.c	/^chan_read_byte(uint8 *data) {$/;"	f
chan_write_byte	PDP10/ka10_pmp.c	/^chan_write_byte(uint8 *data) {$/;"	f
channel_alu	PDP10/ka10_ai.c	/^static void channel_alu (uint64 data)$/;"	f	file:
channel_cc	PDP10/ka10_ai.c	/^static int channel_cc = 0;$/;"	v	file:
channel_command	PDP10/ka10_ai.c	/^static void channel_command (uint64 data)$/;"	f	file:
channel_cylinder	PDP10/ka10_ai.c	/^static int channel_cylinder = 0;$/;"	v	file:
channel_default_delay	PDP10/ka10_ai.c	/^static int channel_default_delay = 1000;$/;"	v	file:
channel_delay	PDP10/ka10_ai.c	/^static int channel_delay;$/;"	v	file:
channel_error	PDP10/ka10_ai.c	/^static void channel_error (int errors)$/;"	f	file:
channel_errors	PDP10/ka10_ai.c	/^static uint64 channel_errors = 0;$/;"	v	file:
channel_mode	PDP10/ka10_ai.c	/^static int channel_mode = MODE_ERROR;$/;"	v	file:
channel_pc	PDP10/ka10_ai.c	/^static int channel_pc = 0;$/;"	v	file:
channel_run	PDP10/ka10_ai.c	/^static void channel_run (void)$/;"	f	file:
channel_seek	PDP10/ka10_ai.c	/^static void channel_seek (const char *cmd, uint64 data, int offset)$/;"	f	file:
channel_seek_delay	PDP10/ka10_ai.c	/^static int channel_seek_delay = 500; \/* Per cylinder travelled. *\/$/;"	v	file:
channel_seek_initial	PDP10/ka10_ai.c	/^static int channel_seek_initial = 25000; \/* Milliseconds. *\/$/;"	v	file:
channel_special	PDP10/ka10_ai.c	/^static void channel_special (uint64 data)$/;"	f	file:
channel_status	PDP10/ka10_ai.c	/^static int channel_status = 0;$/;"	v	file:
channel_unit	PDP10/ka10_ai.c	/^static UNIT *channel_unit = ai_unit;$/;"	v	file:
channel_wc	PDP10/ka10_ai.c	/^static int channel_wc = 0;$/;"	v	file:
char_buf	display/vt11.c	/^static unsigned char char_buf = 0;      \/* (only lowest 6 bits reported) *\/$/;"	v	file:
char_escape	display/vt11.c	481;"	d	file:
char_irq	display/vt11.c	/^static unsigned char char_irq = 0;      \/* intr. on illegal char in SO mode *\/$/;"	v	file:
char_rotate	display/vt11.c	324;"	d	file:
char_scale	display/vt11.c	477;"	d	file:
char_term	display/vt11.c	/^static int char_term = 0;               \/* char. processing POPRs after this *\/$/;"	v	file:
character	display/type340.c	/^character(int n, unsigned char c)$/;"	f
character	display/vt11.c	/^character(int c)$/;"	f	file:
chars	display/type340.c	/^static const unsigned char chars[128][6] = {$/;"	v	file:
charsize	sim_serial.c	/^    uint32 charsize;                                    \/* character size in bits *\/$/;"	m	struct:serial_config	file:
check_apr_irq	PDP10/kx10_cpu.c	/^void check_apr_irq() {$/;"	f
check_interrupt	PDP10/kx10_dpy.c	/^static void check_interrupt (UNIT *uptr)$/;"	f	file:
check_interrupts	PDP10/kx10_imp.c	/^static void check_interrupts (UNIT *uptr)$/;"	f	file:
check_irq_level	PDP10/kx10_cpu.c	/^int check_irq_level() {$/;"	f
check_nxm	PDP10/ka10_ai.c	/^static int check_nxm (uint64 data, int *n, uint64 *data2, int *n2)$/;"	f	file:
checksum	sim_BuildROMs.c	/^    const char *BinaryName;             const char *IncludeFileName; size_t expected_size; unsigned int checksum;  const char *ArrayName;            const char *Comments;} ROMs[] = {$/;"	m	struct:ROM_File_Descriptor	file:
checksum	sim_ether.c	/^  uint16 checksum;        \/* IP checksum *\/$/;"	m	struct:IPHeader	file:
checksum	sim_ether.c	/^  uint16 checksum;     \/* ICMP Checksum *\/$/;"	m	struct:ICMPHeader	file:
checksum	sim_ether.c	/^  uint16 checksum;$/;"	m	struct:TCPHeader	file:
checksum	sim_ether.c	/^  uint16 checksum;$/;"	m	struct:UDPHeader	file:
checksumadjust	PDP10/kx10_imp.c	/^checksumadjust(uint8 *chksum, uint8 *optr,$/;"	f
children	scp.c	/^    struct topic **children;$/;"	m	struct:topic	typeref:struct:topic::topic	file:
chksum	PDP10/kl10_nia.c	/^    uint16          chksum;             \/* packet checksum *\/$/;"	m	struct:icmp	file:
chksum	PDP10/kl10_nia.c	/^    uint16          chksum;             \/* packet checksum *\/$/;"	m	struct:tcp	file:
chksum	PDP10/kl10_nia.c	/^    uint16          chksum;             \/* packet checksum *\/$/;"	m	struct:udp	file:
chksum	PDP10/kx10_imp.c	/^    uint16          chksum;             \/* packet checksum *\/$/;"	m	struct:icmp	file:
chksum	PDP10/kx10_imp.c	/^    uint16          chksum;             \/* packet checksum *\/$/;"	m	struct:tcp	file:
chksum	PDP10/kx10_imp.c	/^    uint16          chksum;             \/* packet checksum *\/$/;"	m	struct:udp	file:
cia	PDP10/kx10_defs.h	/^      uint32         cia;        \/* Initial transfer address *\/$/;"	m	struct:df10
cia	PDP10/kx10_defs.h	/^      uint32         cia;        \/* Initial transfer address *\/$/;"	m	struct:rh_if
ciaddr	PDP10/kx10_imp.c	/^    in_addr_T         ciaddr;                  \/* Client IP address *\/$/;"	m	struct:dhcp	file:
cksum	slirp/cksum.c	/^int cksum(struct mbuf *m, int len)$/;"	f
classify_test	sim_tape.c	/^static struct classify_test {$/;"	s	file:
classify_tests	sim_tape.c	/^    } classify_tests[] = {$/;"	v	typeref:struct:classify_test	file:
cleanHelp	scp.c	/^static void cleanHelp (TOPIC *topic)$/;"	f	file:
clear_interrupt	PDP10/ka10_ai.c	/^static void clear_interrupt (void)$/;"	f	file:
client_hostname	slirp/slirp.h	/^    char client_hostname[33];$/;"	m	struct:Slirp
client_ip	slirp/tftp.h	/^    struct in_addr client_ip;$/;"	m	struct:tftp_session	typeref:struct:tftp_session::in_addr
client_ipaddr	slirp/slirp.h	/^    struct in_addr client_ipaddr;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
client_port	slirp/tftp.h	/^    uint16_t client_port;$/;"	m	struct:tftp_session
clip3	display/vt11.c	/^clip3(int32 x0, int32 y0, int32 z0, int32 x1, int32 y1, int32 z1)$/;"	f
clip_i	display/vt11.c	/^static int clip_i;                      \/* saved "intensify" bit *\/$/;"	v	file:
clip_vect	display/vt11.c	/^static int clip_vect = 0;       \/* set when clipped coords saved; bit-coded:$/;"	v	file:
clip_x0	display/vt11.c	/^static int32 clip_x0, clip_y0, clip_z0; \/* CRT coords for entry point *\/$/;"	v	file:
clip_x1	display/vt11.c	/^static int32 clip_x1, clip_y1, clip_z1; \/* CRT coords for exit point *\/$/;"	v	file:
clip_y0	display/vt11.c	/^static int32 clip_x0, clip_y0, clip_z0; \/* CRT coords for entry point *\/$/;"	v	file:
clip_y1	display/vt11.c	/^static int32 clip_x1, clip_y1, clip_z1; \/* CRT coords for exit point *\/$/;"	v	file:
clip_z0	display/vt11.c	/^static int32 clip_x0, clip_y0, clip_z0; \/* CRT coords for entry point *\/$/;"	v	file:
clip_z1	display/vt11.c	/^static int32 clip_x1, clip_y1, clip_z1; \/* CRT coords for exit point *\/$/;"	v	file:
clk_en	PDP10/kx10_cpu.c	/^int     clk_en;                               \/* Enable clock interrupts *\/$/;"	v
clk_flg	PDP10/kx10_cpu.c	/^int     clk_flg;                              \/* Clock flag *\/$/;"	v
clk_irq	PDP10/kx10_cpu.c	/^int     clk_irq;                              \/* Clock interrupt *\/$/;"	v
clock_calib_backwards	sim_timer.c	/^    uint32 clock_calib_backwards;   \/* Calibrations skipped Clock Running Backwards *\/$/;"	m	struct:RTC	file:
clock_calib_gap2big	sim_timer.c	/^    uint32 clock_calib_gap2big;     \/* Calibrations skipped Gap Too Big *\/$/;"	m	struct:RTC	file:
clock_calib_skip_idle	sim_timer.c	/^    uint32 clock_calib_skip_idle;   \/* Calibrations skipped due to idling *\/$/;"	m	struct:RTC	file:
clock_catchup_base_time	sim_timer.c	/^    double clock_catchup_base_time; \/* reference time for catchup ticks *\/$/;"	m	struct:RTC	file:
clock_catchup_eligible	sim_timer.c	/^    t_bool clock_catchup_eligible;  \/* clock tick catchup eligible *\/$/;"	m	struct:RTC	file:
clock_catchup_pending	sim_timer.c	/^    t_bool clock_catchup_pending;   \/* clock tick catchup pending *\/$/;"	m	struct:RTC	file:
clock_catchup_ticks	sim_timer.c	/^    uint32 clock_catchup_ticks;     \/* Record of catchups *\/$/;"	m	struct:RTC	file:
clock_catchup_ticks_curr	sim_timer.c	/^    uint32 clock_catchup_ticks_curr;\/* Record of catchups in this second *\/$/;"	m	struct:RTC	file:
clock_catchup_ticks_tot	sim_timer.c	/^    uint32 clock_catchup_ticks_tot; \/* Record of catchups - total *\/$/;"	m	struct:RTC	file:
clock_cosched_queue	sim_timer.c	/^    UNIT *clock_cosched_queue;$/;"	m	struct:RTC	file:
clock_gettime	sim_frontpanel.c	/^int clock_gettime(int clk_id, struct timespec *tp)$/;"	f
clock_gettime	sim_timer.c	/^int clock_gettime(clockid_t clk_id, struct timespec *tp)$/;"	f
clock_gettime	sim_timer.c	/^int clock_gettime(int clk_id, struct timespec *tp)$/;"	f
clock_init_base_time	sim_timer.c	/^    double clock_init_base_time;    \/* reference time for clock initialization *\/$/;"	m	struct:RTC	file:
clock_skew_max	sim_timer.c	/^    double clock_skew_max;          \/* asynchronous max skew *\/$/;"	m	struct:RTC	file:
clock_tick_size	sim_timer.c	/^    double clock_tick_size;         \/* 1\/hz *\/$/;"	m	struct:RTC	file:
clock_tick_start_time	sim_timer.c	/^    double clock_tick_start_time;   \/* reference time when ticking started *\/$/;"	m	struct:RTC	file:
clock_ticks	sim_timer.c	/^    uint32 clock_ticks;             \/* ticks delivered since catchup base *\/$/;"	m	struct:RTC	file:
clock_ticks_tot	sim_timer.c	/^    uint32 clock_ticks_tot;         \/* ticks delivered since catchup base - total *\/$/;"	m	struct:RTC	file:
clock_time_idled	sim_timer.c	/^    uint32 clock_time_idled;        \/* total time idled *\/$/;"	m	struct:RTC	file:
clock_time_idled_last	sim_timer.c	/^    uint32 clock_time_idled_last;   \/* total time idled as of the previous second *\/$/;"	m	struct:RTC	file:
clock_unit	sim_timer.c	/^    UNIT *clock_unit;               \/* registered ticking clock unit *\/$/;"	m	struct:RTC	file:
clockid_t	sim_timer.c	/^typedef int clockid_t;$/;"	t	file:
closesocket	sim_sock.h	72;"	d
closesocket	slirp/slirp.h	23;"	d
clr_interrupt	PDP10/kx10_cpu.c	/^void clr_interrupt(int dev) {$/;"	f
cls_tim	PDP10/kx10_imp.c	/^    uint16            cls_tim;                 \/* Close timer *\/$/;"	m	struct:imp_map	file:
cmap	display/x11.c	/^static Colormap cmap;           \/* its colormap *\/$/;"	v	file:
cmd	sim_scsi.h	/^    uint8 cmd[10];                                      \/* command buffer *\/$/;"	m	struct:scsi_bus_t
cmdBuffer	PDP10/pidp10panel.c	/^char cmdBuffer[255];$/;"	v
cmd_entry	PDP10/kl10_nia.c	/^    t_addr            cmd_entry;               \/* Pointer to current command entry *\/$/;"	m	struct:nia_device	file:
cmd_hdr	PDP10/kl10_nia.c	317;"	d	file:
cmd_mode	sim_console.c	/^SENSE_BUF cmd_mode = { 0 };$/;"	v
cmd_rply	PDP10/kl10_nia.c	/^    t_addr            cmd_rply;                \/* Pointer to reply entry *\/$/;"	m	struct:nia_device	file:
cmd_status	PDP10/kl10_nia.c	/^    uint8             cmd_status;              \/* Status feild of current command *\/$/;"	m	struct:nia_device	file:
cmd_table	scp.c	/^static CTAB cmd_table[] = {$/;"	v	file:
cmd_time	scp.c	/^struct timespec cmd_time;                               \/*  *\/$/;"	v	typeref:struct:timespec
cmdfl	sim_console.c	/^int cmdfl,runfl;                                        \/* TTY flags *\/$/;"	v
cmdltchars	sim_console.c	/^struct ltchars cmdltchars,runltchars;                   \/* 4.2 BSD editing *\/$/;"	v	typeref:struct:ltchars
cmdtchars	sim_console.c	/^struct tchars cmdtchars,runtchars;                      \/* V7 editing *\/$/;"	v	typeref:struct:tchars
cmdtty	sim_console.c	/^struct sgttyb cmdtty,runtty;                            \/* V6\/V7 stty data *\/$/;"	v	typeref:struct:sgttyb
cmdtty	sim_console.c	/^struct termios cmdtty, runtty;$/;"	v	typeref:struct:termios
cnms	sim_tmxr.h	/^    uint32              cnms;                           \/* conn time *\/$/;"	m	struct:tmln
cnt	PDP10/kl10_dn.c	/^    uint16      cnt;       \/* Number of bytes in packet *\/$/;"	m	struct:_dn_queue	file:
cnt	PDP10/kl10_fe.c	/^    uint16      cnt;       \/* Number of bytes in packet *\/$/;"	m	struct:_dte_queue	file:
cnt	sim_defs.h	/^    int32               cnt;                            \/* proceed count *\/$/;"	m	struct:BRKTAB
cnt	sim_defs.h	/^    int32               cnt;                            \/* proceed count *\/$/;"	m	struct:EXPTAB
cnt_addr	PDP10/kl10_nia.c	/^    t_addr            cnt_addr;                \/* Address of counters *\/$/;"	m	struct:nia_device	file:
code	PDP10/kl10_nia.c	/^    uint8           code;               \/* Code *\/$/;"	m	struct:icmp	file:
code	PDP10/kx10_imp.c	/^    uint8           code;               \/* Code *\/$/;"	m	struct:icmp	file:
code	scp.c	/^    const char *code;$/;"	m	struct:scp_error	file:
code	sim_ether.c	/^  uint8 code;          \/* Type sub code *\/$/;"	m	struct:ICMPHeader	file:
color	display/display.c	/^    unsigned char color : 1;    \/* for VR20 (two colors) *\/$/;"	m	struct:point	file:
color	display/display.c	/^struct color {$/;"	s	file:
color	display/vt11.c	399;"	d	file:
color0	display/display.c	/^    struct color *color0, *color1;$/;"	m	struct:display	typeref:struct:display::color	file:
color1	display/display.c	/^    struct color *color0, *color1;$/;"	m	struct:display	typeref:struct:display::	file:
color_p29	display/display.c	/^struct color color_p29 = { p29, ELEMENTS(p29), 25000 };$/;"	v	typeref:struct:color
color_p31	display/display.c	/^struct color color_p31 = { p31, ELEMENTS(p31), 100000 };$/;"	v	typeref:struct:color
color_p39	display/display.c	/^struct color color_p39 = { p39, ELEMENTS(p39), 20000 };$/;"	v	typeref:struct:color
color_p40	display/display.c	/^static struct color color_p40 = { p40, ELEMENTS(p40), 20000 };$/;"	v	typeref:struct:color	file:
color_p7	display/display.c	/^static struct color color_p7 = { p7, ELEMENTS(p7), 125000 };$/;"	v	typeref:struct:color	file:
color_red	display/display.c	/^static struct color color_red = { pred, ELEMENTS(pred), 100000 };$/;"	v	typeref:struct:color	file:
colors	display/display.c	/^void *colors[2][NLEVELS][NTTL];$/;"	v
colors	display/sim_ws.c	/^static uint32 *colors = NULL;$/;"	v	file:
command_count	sim_frontpanel.c	/^    int                     command_count;$/;"	m	struct:PANEL	file:
command_done_echo	sim_frontpanel.c	/^static const char *command_done_echo = "# COMMAND-DONE";$/;"	v	file:
command_status	sim_frontpanel.c	/^static const char *command_status = "ECHO Status:%STATUS%-%TSTATUS%";$/;"	v	file:
commentParse	sim_imd.c	/^static t_stat commentParse(DISK_INFO *myDisk, uint8 comment[], uint32 buffLen)$/;"	f	file:
common_octets	slirp/dnssearch.c	/^    size_t common_octets;$/;"	m	struct:compact_domain	file:
comp	sim_defs.h	/^    t_value             *comp;                          \/* comparison for boolean *\/$/;"	m	struct:SCHTAB
compact_domain	slirp/dnssearch.c	/^typedef struct compact_domain {$/;"	s	file:
completion_string	sim_frontpanel.c	/^    const char              *completion_string;$/;"	m	struct:PANEL	file:
config	sim_frontpanel.c	/^    char                    *config;$/;"	m	struct:PANEL	file:
config	sim_serial.c	/^    char config[SER_DEV_CONFIG_MAX];$/;"	m	struct:open_serial_device	file:
conic2	display/vt11.c	2402;"	d	file:
conic3	display/vt11.c	/^conic3(int i, int32 dcx, int32 dcy, int32 dcz, int32 dex, int32 dey, int32 dez)$/;"	f	file:
conn	sim_tmxr.h	/^    int                 conn;                           \/* line connected flag *\/$/;"	m	struct:tmln
connect_pending	sim_tmxr.c	/^    t_bool connect_pending;         \/* True if connected not yet reported *\/    $/;"	m	struct:framer_data	file:
connecting	sim_tmxr.h	/^    SOCKET              connecting;                     \/* Outgoing socket while connecting *\/$/;"	m	struct:tmln
cons_kmap	sim_console.c	/^static int32 *cons_kmap[] = {$/;"	v	file:
console	display/ng.c	/^static int console = 0;$/;"	v	file:
container_of	slirp_glue/qemu/compiler.h	20;"	d
container_size	sim_disk.c	/^    t_offset            container_size;     \/* Size of the data portion (of the pseudo disk) *\/$/;"	m	struct:disk_context	file:
cookie	PDP10/kx10_imp.c	/^    uint32            cookie;                  \/* magic cookie *\/$/;"	m	struct:dhcp	file:
cop	PDP10/kx10_defs.h	/^      int            cop;        \/* RH20 Channel operator *\/$/;"	m	struct:rh_if
copy_cmd	scp.c	/^t_stat copy_cmd (int32 flg, CONST char *cptr)$/;"	f
cosched_interval	sim_timer.c	/^    int32 cosched_interval;$/;"	m	struct:RTC	file:
count	PDP10/ka10_pmp.c	/^     uint16             count;   \/* Remaining in current operation *\/$/;"	m	struct:pmp_t	file:
count	scp.c	/^    int count;$/;"	m	struct:__anon7	file:
count	sim_console.c	/^    unsigned short count;$/;"	m	struct:__anon10	file:
count	sim_defs.h	/^    uint32              count;                          \/* value count in mask and comp arrays *\/$/;"	m	struct:SCHTAB
count	sim_ether.h	/^  int                 count;$/;"	m	struct:eth_queue
count	sim_serial.c	/^    unsigned short count;$/;"	m	struct:__anon28	file:
count	sim_tmxr.c	/^    unsigned short count;$/;"	m	struct:__anon31	file:
count	sim_video.c	/^    int32 count;$/;"	m	struct:__anon33	file:
count	sim_video.c	/^    int32 count;$/;"	m	struct:__anon34	file:
cp_attach	PDP10/kx10_cp.c	/^cp_attach(UNIT * uptr, CONST char *file)$/;"	f
cp_buffer	PDP10/kx10_cp.c	/^uint16              cp_buffer[80];$/;"	v
cp_description	PDP10/kx10_cp.c	/^cp_description(DEVICE *dptr)$/;"	f
cp_detach	PDP10/kx10_cp.c	/^cp_detach(UNIT * uptr)$/;"	f
cp_dev	PDP10/kx10_cp.c	/^DEVICE              cp_dev = {$/;"	v
cp_devio	PDP10/kx10_cp.c	/^t_stat cp_devio(uint32 dev, uint64 *data) {$/;"	f
cp_dib	PDP10/kx10_cp.c	/^DIB cp_dib = { CP_DEVNUM, 1, cp_devio, NULL};$/;"	v
cp_help	PDP10/kx10_cp.c	/^cp_help(FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
cp_mod	PDP10/kx10_cp.c	/^MTAB                cp_mod[] = {$/;"	v
cp_reg	PDP10/kx10_cp.c	/^REG                 cp_reg[] = {$/;"	v
cp_srv	PDP10/kx10_cp.c	/^cp_srv(UNIT *uptr) {$/;"	f
cp_unit	PDP10/kx10_cp.c	/^UNIT                cp_unit = {UDATA(cp_srv, UNIT_CDP, 0), 2000 };$/;"	v
cpos	PDP10/ka10_pmp.c	/^     uint32             cpos;    \/* Position of head of cylinder in file *\/$/;"	m	struct:pmp_t	file:
cpu_debug	PDP10/kx10_cpu.c	/^DEBTAB              cpu_debug[] = {$/;"	v
cpu_dep	PDP10/kx10_cpu.c	/^t_stat cpu_dep (t_value val, t_addr ea, UNIT *uptr, int32 sw)$/;"	f
cpu_description	PDP10/kx10_cpu.c	/^cpu_description (DEVICE *dptr)$/;"	f
cpu_dev	PDP10/kx10_cpu.c	/^DEVICE cpu_dev = {$/;"	v
cpu_ex	PDP10/kx10_cpu.c	/^t_stat cpu_ex (t_value *vptr, t_addr ea, UNIT *uptr, int32 sw)$/;"	f
cpu_get_switches	PDP10/kx10_dpy.c	/^cpu_get_switches(unsigned long *p1, unsigned long *p2) {$/;"	f
cpu_get_switches	display/test.c	/^cpu_get_switches(unsigned long *p1, unsigned long *p2) {$/;"	f
cpu_get_switches	display/tst340.c	/^cpu_get_switches(unsigned long *p1, unsigned long *p2) {$/;"	f
cpu_get_switches	display/vttest.c	/^cpu_get_switches(unsigned long *p1, unsigned long *p2) {$/;"	f
cpu_help	PDP10/kx10_cpu.c	/^cpu_help(FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
cpu_mod	PDP10/kx10_cpu.c	/^MTAB cpu_mod[] = {$/;"	v
cpu_reg	PDP10/kx10_cpu.c	/^REG cpu_reg[] = {$/;"	v
cpu_reset	PDP10/kx10_cpu.c	/^t_stat cpu_reset (DEVICE *dptr)$/;"	f
cpu_set_hist	PDP10/kx10_cpu.c	/^t_stat cpu_set_hist (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
cpu_set_serial	PDP10/kx10_cpu.c	/^t_stat cpu_set_serial (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
cpu_set_size	PDP10/kx10_cpu.c	/^t_stat cpu_set_size (UNIT *uptr, int32 sval, CONST char *cptr, void *desc)$/;"	f
cpu_set_switches	PDP10/kx10_dpy.c	/^cpu_set_switches(unsigned long w1, unsigned long w2) {$/;"	f
cpu_set_switches	display/test.c	/^cpu_set_switches(unsigned long w1, unsigned long w2) {$/;"	f
cpu_set_switches	display/tst340.c	/^cpu_set_switches(unsigned long sw1, unsigned long sw2) {$/;"	f
cpu_set_switches	display/vttest.c	/^cpu_set_switches(unsigned long w1, unsigned long w2) {$/;"	f
cpu_show_hist	PDP10/kx10_cpu.c	/^t_stat cpu_show_hist (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
cpu_show_serial	PDP10/kx10_cpu.c	/^t_stat cpu_show_serial (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
cpu_unit	PDP10/kx10_cpu.c	/^UNIT cpu_unit[] = { { UDATA (&rtc_srv, UNIT_IDLE|UNIT_FIX|UNIT_BINK|UNIT_TWOSEG, DEFMEM * 1024) },$/;"	v
cqueue	PDP10/ks10_kmc.c	/^struct  cqueue {$/;"	s	file:
cqueue	PDP10/ks10_kmc.c	452;"	d	file:
cqueueCount	PDP10/ks10_kmc.c	457;"	d	file:
cqueueHead	PDP10/ks10_kmc.c	455;"	d	file:
cr_attach	PDP10/kx10_cr.c	/^cr_attach(UNIT * uptr, CONST char *file)$/;"	f
cr_buffer	PDP10/kx10_cr.c	/^uint16              cr_buffer[80];$/;"	v
cr_description	PDP10/kx10_cr.c	/^cr_description(DEVICE *dptr)$/;"	f
cr_detach	PDP10/kx10_cr.c	/^cr_detach(UNIT * uptr)$/;"	f
cr_dev	PDP10/kx10_cr.c	/^DEVICE              cr_dev = {$/;"	v
cr_devio	PDP10/kx10_cr.c	/^t_stat cr_devio(uint32 dev, uint64 *data) {$/;"	f
cr_dib	PDP10/kx10_cr.c	/^DIB cr_dib = { CR_DEVNUM, 1, cr_devio, NULL};$/;"	v
cr_help	PDP10/kx10_cr.c	/^cr_help(FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
cr_mod	PDP10/kx10_cr.c	/^MTAB                cr_mod[] = {$/;"	v
cr_reg	PDP10/kx10_cr.c	/^REG                 cr_reg[] = {$/;"	v
cr_srv	PDP10/kx10_cr.c	/^cr_srv(UNIT *uptr) {$/;"	f
cr_unit	PDP10/kx10_cr.c	/^UNIT                cr_unit = {$/;"	v
crc16_nibble	PDP10/pdp11_ddcmp.h	/^static uint16 crc16_nibble[16] = {$/;"	v
crcTable	sim_ether.c	/^static const uint32 crcTable[256] = {$/;"	v	file:
crc_err	sim_tmxr.c	/^    uint32 crc_err;$/;"	m	struct:status_msg_t	file:
crc_len	sim_ether.h	/^  uint32  crc_len;                                      \/* packet length with CRC *\/$/;"	m	struct:eth_packet
crd_debug	PDP10/kx10_sys.c	/^DEBTAB              crd_debug[] = {$/;"	v
create_card_file	sim_card.c	/^static t_stat create_card_file (const char *filename, int cards)$/;"	f	file:
creation_date	sim_tape.c	/^    char creation_date[6];      \/* cyyddd *\/$/;"	m	struct:HDR1	file:
cross	display/sim_ws.c	/^static const char *cross[] = {$/;"	v	file:
cross	display/win32.c	/^static HCURSOR cross, arrow;$/;"	v	file:
cross_cursor	display/sim_ws.c	/^static CURSOR *cross_cursor;$/;"	v	file:
crt	display/x11.c	/^static Widget crt;              \/* the X window in which output will plot *\/$/;"	v	file:
crtshell	display/x11.c	/^static Widget crtshell;         \/* the X window shell *\/$/;"	v	file:
cs1	PDP10/kx10_defs.h	/^      uint16         cs1;        \/* Control register 1 *\/$/;"	m	struct:rh_if
cs2	PDP10/kx10_defs.h	/^      uint16         cs2;        \/* Control register 1 *\/$/;"	m	struct:rh_if
cs_index	display/vt11.c	325;"	d	file:
cscope_b	PDP10/kx10_dpy.c	/^static uint8 cscope_b = 0;$/;"	v	file:
cscope_display	PDP10/kx10_dpy.c	/^static VID_DISPLAY *cscope_display = NULL;$/;"	v	file:
cscope_g	PDP10/kx10_dpy.c	/^static uint8 cscope_g = 0;$/;"	v	file:
cscope_init	PDP10/kx10_dpy.c	/^cscope_init (void)$/;"	f	file:
cscope_plot	PDP10/kx10_dpy.c	/^cscope_plot(int x, int y)$/;"	f	file:
cscope_r	PDP10/kx10_dpy.c	/^static uint8 cscope_r = 0;$/;"	v	file:
csi2csf	display/vt11.c	/^static const unsigned char csi2csf[4] = { 2, 4, 6, 8 }; \/* maps cs_index to " *\/$/;"	v	file:
cst	PDP10/kx10_cpu.c	/^uint64 cst;$/;"	v
cst	PDP10/kx10_cpu.c	284;"	d	file:
cst_dat	PDP10/kx10_cpu.c	/^uint64 cst_dat;$/;"	v
cst_dat	PDP10/kx10_cpu.c	286;"	d	file:
cst_msk	PDP10/kx10_cpu.c	/^uint64 cst_msk;$/;"	v
cst_msk	PDP10/kx10_cpu.c	285;"	d	file:
ctrlFlags	PDP10/ks10_kmc.c	/^    uint16 ctrlFlags;$/;"	m	struct:dupstate	file:
ctxt	sim_defs.h	/^    void                *ctxt;                          \/* context *\/$/;"	m	struct:DEVICE
cty_description	PDP10/ks10_cty.c	/^const char *cty_description (DEVICE *dptr)$/;"	f
cty_description	PDP10/kx10_cty.c	/^const char *cty_description (DEVICE *dptr)$/;"	f
cty_dev	PDP10/ks10_cty.c	/^DEVICE cty_dev = {$/;"	v
cty_dev	PDP10/kx10_cty.c	/^DEVICE cty_dev = {$/;"	v
cty_devio	PDP10/kx10_cty.c	/^t_stat cty_devio(uint32 dev, uint64 *data) {$/;"	f
cty_dib	PDP10/kx10_cty.c	/^DIB cty_dib = { CTY_DEVNUM, 1, cty_devio, NULL};$/;"	v
cty_done	PDP10/kl10_fe.c	/^int32 cty_done;$/;"	v
cty_execute	PDP10/kx10_cpu.c	/^void cty_execute(int addr)$/;"	f
cty_help	PDP10/ks10_cty.c	/^t_stat cty_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
cty_help	PDP10/kx10_cty.c	/^t_stat cty_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
cty_in	PDP10/kl10_fe.c	/^} cty_in, cty_out;$/;"	v	typeref:struct:_buffer
cty_interrupt	PDP10/kx10_cpu.c	/^void cty_interrupt()$/;"	f
cty_mod	PDP10/ks10_cty.c	/^MTAB cty_mod[] = {$/;"	v
cty_mod	PDP10/kx10_cty.c	/^MTAB cty_mod[] = {$/;"	v
cty_out	PDP10/kl10_fe.c	/^} cty_in, cty_out;$/;"	v	typeref:struct:_buffer
cty_reg	PDP10/ks10_cty.c	/^REG  cty_reg[] = {$/;"	v
cty_reg	PDP10/kx10_cty.c	/^REG cty_reg[] = {$/;"	v
cty_reset	PDP10/ks10_cty.c	/^t_stat cty_reset (DEVICE *dptr)$/;"	f
cty_reset	PDP10/kx10_cty.c	/^t_stat cty_reset (DEVICE *dptr)$/;"	f
cty_stop_os	PDP10/ks10_cty.c	/^t_stat cty_stop_os (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
cty_stop_os	PDP10/kx10_cty.c	/^t_stat cty_stop_os (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
cty_unit	PDP10/ks10_cty.c	/^UNIT cty_unit[] = {$/;"	v
cty_unit	PDP10/kx10_cty.c	/^UNIT cty_unit[] = {$/;"	v
cty_wakeup	PDP10/ks10_cty.c	/^cty_wakeup()$/;"	f
ctyi_svc	PDP10/ks10_cty.c	/^t_stat ctyi_svc (UNIT *uptr)$/;"	f
ctyi_svc	PDP10/kx10_cty.c	/^t_stat ctyi_svc (UNIT *uptr)$/;"	f
ctyo_svc	PDP10/ks10_cty.c	/^t_stat ctyo_svc (UNIT *uptr)$/;"	f
ctyo_svc	PDP10/kx10_cty.c	/^t_stat ctyo_svc (UNIT *uptr)$/;"	f
ctyrtc_srv	PDP10/ks10_cty.c	/^ctyrtc_srv(UNIT * uptr)$/;"	f
cur_sect	PDP10/kx10_cpu.c	/^int     cur_sect;                             \/* Current section *\/$/;"	v
curl_cmd	scp.c	/^t_stat curl_cmd (int32 flag, CONST char *cptr)$/;"	f
currd	sim_timer.c	/^    int32 currd;                    \/* current delay *\/$/;"	m	struct:RTC	file:
current_channel	PDP10/ka10_imx.c	/^static int current_channel = 0;$/;"	v	file:
cursor	display/sim_ws.c	/^typedef struct cursor {$/;"	s	file:
curtime	slirp/slirp.c	/^u_int curtime;$/;"	v
cyl	PDP10/ka10_pmp.c	/^     uint16             cyl;     \/* Cylinder head at *\/$/;"	m	struct:pmp_t	file:
cyl	PDP10/ka10_pmp.c	/^    int                 cyl;          \/* Number of cylinders *\/$/;"	m	struct:disk_t	file:
cyl	PDP10/kx10_dp.c	/^    int32       cyl;                                    \/* cylinders *\/$/;"	m	struct:drvtyp	file:
cyl	PDP10/kx10_rc.c	/^    int32       cyl;                                    \/* cylinders *\/$/;"	m	struct:drvtyp	file:
cyl	PDP10/kx10_rp.c	/^    int32       cyl;                                    \/* cylinders *\/$/;"	m	struct:drvtyp	file:
cyl	sim_imd.h	/^    uint8 cyl;$/;"	m	struct:__anon24
data	PDP10/kl10_dn.c	/^    uint16      data[258]; \/* Data packet *\/$/;"	m	struct:_dn_queue	file:
data	PDP10/kl10_fe.c	/^    uint16      data[258]; \/* Data packet *\/$/;"	m	struct:_dte_queue	file:
data	display/sim_ws.c	/^    Uint8 *data;$/;"	m	struct:cursor	file:
data	scp.c	/^    char data[72];$/;"	m	struct:Stack_Element	file:
data	sim_disk.c	/^    uint32 *data;$/;"	m	struct:disk_test_coverage	file:
data	sim_tape.c	/^    uint8 data[1];$/;"	m	struct:TAPE_RECORD	file:
data	slirp_glue/glib.h	/^    gchar *data;$/;"	m	struct:_GArray
data	slirp_glue/glib_qemu_stubs.c	/^    gchar *data;$/;"	m	struct:__anon44	file:
data_offset_and_flags	sim_ether.c	/^  uint16 data_offset_and_flags;$/;"	m	struct:TCPHeader	file:
datagram	sim_tmxr.h	/^    t_bool              datagram;                       \/* Line is datagram packet oriented *\/$/;"	m	struct:tmln
datagram	sim_tmxr.h	/^    t_bool              datagram;                       \/* Lines use datagram packet transport *\/$/;"	m	struct:tmxr
date	sim_tape.c	/^    uint16 date;            \/* (year - 1970) * 1000 + day of year *\/$/;"	m	struct:DOS11_HDR	file:
db_chime	slirp_glue/sim_slirp.c	/^    SOCKET db_chime;            \/* write packet doorbell *\/$/;"	m	struct:sim_slirp	file:
dba	PDP10/kx10_defs.h	/^      uint16         dba;        \/* Input data buffer *\/$/;"	m	struct:rh_if
dbb	PDP10/kx10_defs.h	/^      uint16         dbb;        \/* Output data buffer*\/$/;"	m	struct:rh_if
dbit	sim_defs.h	/^    uint32              dbit;                           \/* Debugging Bit *\/$/;"	m	struct:EXPECT
dbit	sim_defs.h	/^    uint32              dbit;                           \/* Debugging Bit *\/$/;"	m	struct:SEND
dbit	sim_disk.c	/^    uint32              dbit;               \/* debugging bit *\/$/;"	m	struct:disk_context	file:
dbit	sim_ether.h	/^  uint32        dbit;                                   \/* debugging bit *\/$/;"	m	struct:eth_device
dbit	sim_tape.c	/^    uint32              dbit;               \/* debugging bit for trace *\/$/;"	m	struct:tape_context	file:
dbit	slirp_glue/sim_slirp.c	/^    uint32 dbit;$/;"	m	struct:sim_slirp	file:
dbr1	PDP10/kx10_cpu.c	/^uint32  dbr1;                                 \/* User Low Page Table Address *\/$/;"	v
dbr1	PDP10/kx10_cpu.c	274;"	d	file:
dbr1	PDP10/kx10_cpu.c	298;"	d	file:
dbr2	PDP10/kx10_cpu.c	/^uint32  dbr2;                                 \/* User High Page Table Address *\/$/;"	v
dbr2	PDP10/kx10_cpu.c	275;"	d	file:
dbr2	PDP10/kx10_cpu.c	299;"	d	file:
dbr3	PDP10/kx10_cpu.c	/^uint32  dbr3;                                 \/* Exec High Page Table Address *\/$/;"	v
dbr3	PDP10/kx10_cpu.c	276;"	d	file:
dbr3	PDP10/kx10_cpu.c	300;"	d	file:
dbr4	PDP10/kx10_cpu.c	277;"	d	file:
dbr4	PDP10/kx10_cpu.c	301;"	d	file:
dc1	sim_tmxr.c	/^    uint8 dc1;$/;"	m	struct:status_msg_t	file:
dc_attach	PDP10/kx10_dc.c	/^t_stat dc_attach (UNIT *uptr, CONST char *cptr)$/;"	f
dc_clus	sim_disk.c	/^    uint16  dc_clus;$/;"	m	struct:_RSTS_DCMAP	file:
dc_desc	PDP10/kx10_dc.c	/^TMXR     dc_desc = { DC10_LINES, 0, 0, dc_ldsc };$/;"	v
dc_description	PDP10/kx10_dc.c	/^const char *dc_description (DEVICE *dptr)$/;"	f
dc_detach	PDP10/kx10_dc.c	/^t_stat dc_detach (UNIT *uptr)$/;"	f
dc_dev	PDP10/kx10_dc.c	/^DEVICE dc_dev = {$/;"	v
dc_devio	PDP10/kx10_dc.c	/^t_stat dc_devio(uint32 dev, uint64 *data) {$/;"	f
dc_dib	PDP10/kx10_dc.c	/^DIB dc_dib = { DC_DEVNUM, 1, &dc_devio, NULL };$/;"	v
dc_doscan	PDP10/kx10_dc.c	/^t_stat dc_doscan (UNIT *uptr) {$/;"	f
dc_enable	PDP10/kx10_dc.c	/^uint32   dc_enable;                               \/* Enable line *\/$/;"	v
dc_help	PDP10/kx10_dc.c	/^t_stat dc_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
dc_l_count	PDP10/kx10_dc.c	/^int      dc_l_count = 0;                          \/* Scan counter *\/$/;"	v
dc_l_status	PDP10/kx10_dc.c	/^uint64   dc_l_status;                             \/* Line status *\/$/;"	v
dc_ldsc	PDP10/kx10_dc.c	/^TMLN     dc_ldsc[DC10_MLINES] = { 0 };            \/* Line descriptors *\/$/;"	v
dc_map	sim_disk.c	/^    uint16  dc_map[7];$/;"	m	struct:_RSTS_DCMAP	file:
dc_mod	PDP10/kx10_dc.c	/^MTAB dc_mod[] = {$/;"	v
dc_modem	PDP10/kx10_dc.c	/^int      dc_modem = DC10_MLINES;                  \/* Modem base address *\/$/;"	v
dc_reg	PDP10/kx10_dc.c	/^REG dc_reg[] = {$/;"	v
dc_reset	PDP10/kx10_dc.c	/^t_stat dc_reset (DEVICE *dptr)$/;"	f
dc_ring	PDP10/kx10_dc.c	/^uint32   dc_ring;                                 \/* Connection pending *\/$/;"	v
dc_set_log	PDP10/kx10_dc.c	/^t_stat dc_set_log (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dc_set_modem	PDP10/kx10_dc.c	/^t_stat dc_set_modem (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dc_set_nolog	PDP10/kx10_dc.c	/^t_stat dc_set_nolog (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dc_setnl	PDP10/kx10_dc.c	/^t_stat dc_setnl (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dc_show_log	PDP10/kx10_dc.c	/^t_stat dc_show_log (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
dc_show_modem	PDP10/kx10_dc.c	/^t_stat dc_show_modem (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
dc_svc	PDP10/kx10_dc.c	/^t_stat dc_svc (UNIT *uptr)$/;"	f
dc_unit	PDP10/kx10_dc.c	/^UNIT dc_unit = {$/;"	v
dcix_buf	PDP10/kx10_dc.c	/^uint8    dcix_buf[DC10_MLINES] = { 0 };           \/* Input buffers *\/$/;"	v
dcnt	PDP10/kl10_dn.c	/^    uint16      dcnt;      \/* Data count *\/$/;"	m	struct:_dn_queue	file:
dcnt	PDP10/kl10_fe.c	/^    uint16      dcnt;      \/* Data count *\/$/;"	m	struct:_dte_queue	file:
dcox_buf	PDP10/kx10_dc.c	/^uint8    dcox_buf[DC10_MLINES] = { 0 };           \/* Output buffers *\/$/;"	v
dcs_attach	PDP10/pdp6_dcs.c	/^t_stat dcs_attach (UNIT *uptr, CONST char *cptr)$/;"	f
dcs_desc	PDP10/pdp6_dcs.c	/^TMXR     dcs_desc = { DCS_LINES, 0, 0, dcs_ldsc };$/;"	v
dcs_description	PDP10/pdp6_dcs.c	/^const char *dcs_description (DEVICE *dptr)$/;"	f
dcs_detach	PDP10/pdp6_dcs.c	/^t_stat dcs_detach (UNIT *uptr)$/;"	f
dcs_dev	PDP10/pdp6_dcs.c	/^DEVICE dcs_dev = {$/;"	v
dcs_devio	PDP10/pdp6_dcs.c	/^t_stat dcs_devio(uint32 dev, uint64 *data) {$/;"	f
dcs_dib	PDP10/pdp6_dcs.c	/^DIB dcs_dib = { DCS_DEVNUM, 2, &dcs_devio, NULL };$/;"	v
dcs_doscan	PDP10/pdp6_dcs.c	/^t_stat dcs_doscan (UNIT *uptr) {$/;"	f
dcs_enable	PDP10/pdp6_dcs.c	/^uint32   dcs_enable;                             \/* Enable line *\/$/;"	v
dcs_help	PDP10/pdp6_dcs.c	/^t_stat dcs_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
dcs_ldsc	PDP10/pdp6_dcs.c	/^TMLN     dcs_ldsc[DCS_LINES] = { 0 };            \/* Line descriptors *\/$/;"	v
dcs_mod	PDP10/pdp6_dcs.c	/^MTAB dcs_mod[] = {$/;"	v
dcs_reg	PDP10/pdp6_dcs.c	/^REG dcs_reg[] = {$/;"	v
dcs_reset	PDP10/pdp6_dcs.c	/^t_stat dcs_reset (DEVICE *dptr)$/;"	f
dcs_rx_conn	PDP10/pdp6_dcs.c	/^uint32   dcs_rx_conn;                            \/* Connection flags *\/$/;"	v
dcs_rx_rdy	PDP10/pdp6_dcs.c	/^uint32   dcs_tx_enable, dcs_rx_rdy;              \/* Flags *\/$/;"	v
dcs_rx_scan	PDP10/pdp6_dcs.c	/^int      dcs_rx_scan = 0;                        \/* Scan counter *\/$/;"	v
dcs_send_line	PDP10/pdp6_dcs.c	/^int      dcs_send_line = 0;                      \/* Send line number *\/$/;"	v
dcs_set_log	PDP10/pdp6_dcs.c	/^t_stat dcs_set_log (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dcs_set_nolog	PDP10/pdp6_dcs.c	/^t_stat dcs_set_nolog (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dcs_setnl	PDP10/pdp6_dcs.c	/^t_stat dcs_setnl (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dcs_show_log	PDP10/pdp6_dcs.c	/^t_stat dcs_show_log (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
dcs_svc	PDP10/pdp6_dcs.c	/^t_stat dcs_svc (UNIT *uptr)$/;"	f
dcs_tx_enable	PDP10/pdp6_dcs.c	/^uint32   dcs_tx_enable, dcs_rx_rdy;              \/* Flags *\/$/;"	v
dcs_tx_scan	PDP10/pdp6_dcs.c	/^int      dcs_tx_scan = 0;                        \/* Scan counter *\/$/;"	v
dcs_unit	PDP10/pdp6_dcs.c	/^UNIT dcs_unit = {$/;"	v
dcshift	sim_disk.c	/^    int         dcshift;$/;"	m	struct:_rstsContext	file:
dct_acc	PDP10/pdp6_dct.c	/^uint64        dct_acc[NUM_DEVS_DCT];$/;"	v
dct_buf	PDP10/pdp6_dct.c	/^uint64        dct_buf[NUM_DEVS_DCT];$/;"	v
dct_description	PDP10/pdp6_dct.c	/^dct_description (DEVICE *dptr)$/;"	f
dct_dev	PDP10/pdp6_dct.c	/^DEVICE              dct_dev = {$/;"	v
dct_devio	PDP10/pdp6_dct.c	/^dct_devio(uint32 dev, uint64 *data) {$/;"	f
dct_dib	PDP10/pdp6_dct.c	/^DIB                 dct_dib[] = {$/;"	v
dct_help	PDP10/pdp6_dct.c	/^dct_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
dct_is_connect	PDP10/pdp6_dct.c	/^dct_is_connect (int dev)$/;"	f
dct_read	PDP10/pdp6_dct.c	/^dct_read (int dev, uint64 *data, int cnt)$/;"	f
dct_reg	PDP10/pdp6_dct.c	/^REG                 dct_reg[] = {$/;"	v
dct_svc	PDP10/pdp6_dct.c	/^dct_svc (UNIT *uptr)$/;"	f
dct_unit	PDP10/pdp6_dct.c	/^UNIT                dct_unit[] = {$/;"	v
dct_write	PDP10/pdp6_dct.c	/^dct_write (int dev, uint64 *data, int cnt)$/;"	f
dctrl	sim_defs.h	/^    uint32              dctrl;                          \/* debug control *\/$/;"	m	struct:DEVICE
dctrl	sim_defs.h	/^    uint32              dctrl;                          \/* debug control *\/$/;"	m	struct:UNIT
ddcmp_build_ack_packet	PDP10/pdp11_ddcmp.h	/^static void ddcmp_build_ack_packet (uint8 *buf, uint8 ack, uint8 flags)$/;"	f
ddcmp_build_control_packet	PDP10/pdp11_ddcmp.h	/^static void ddcmp_build_control_packet (uint8 *buf, uint8 type, uint8 subtype, uint8 flags, uint8 sndr, uint8 rcvr)$/;"	f
ddcmp_build_data_packet	PDP10/pdp11_ddcmp.h	/^static void ddcmp_build_data_packet (uint8 *buf, size_t size, uint8 flags, uint8 sequence, uint8 ack)$/;"	f
ddcmp_build_maintenance_packet	PDP10/pdp11_ddcmp.h	/^static void ddcmp_build_maintenance_packet (uint8 *buf, size_t size)$/;"	f
ddcmp_build_nak_packet	PDP10/pdp11_ddcmp.h	/^static void ddcmp_build_nak_packet (uint8 *buf, uint8 reason, uint8 nack, uint8 flags)$/;"	f
ddcmp_build_rep_packet	PDP10/pdp11_ddcmp.h	/^static void ddcmp_build_rep_packet (uint8 *buf, uint8 ack, uint8 flags)$/;"	f
ddcmp_build_start_ack_packet	PDP10/pdp11_ddcmp.h	/^static void ddcmp_build_start_ack_packet (uint8 *buf)$/;"	f
ddcmp_build_start_packet	PDP10/pdp11_ddcmp.h	/^static void ddcmp_build_start_packet (uint8 *buf)$/;"	f
ddcmp_crc16	PDP10/pdp11_ddcmp.h	/^static uint16 ddcmp_crc16(uint16 crc, const void* vbuf, size_t len)$/;"	f
ddcmp_feedCorruptionTroll	PDP10/pdp11_ddcmp.h	/^static t_bool ddcmp_feedCorruptionTroll (TMLN *lp, uint8 *msg, t_bool rx, int32 trollHungerLevel)$/;"	f
ddcmp_packet_trace	PDP10/pdp11_ddcmp.h	/^static void ddcmp_packet_trace (uint32 reason, DEVICE *dptr, const char *txt, const uint8 *msg, int32 len)$/;"	f
ddcmp_tmxr_get_packet_ln	PDP10/pdp11_ddcmp.h	/^static t_stat ddcmp_tmxr_get_packet_ln (TMLN *lp, const uint8 **pbuf, uint16 *psize, int32 corruptrate)$/;"	f
ddcmp_tmxr_put_ack_packet_ln	PDP10/pdp11_ddcmp.h	/^static t_stat ddcmp_tmxr_put_ack_packet_ln (TMLN *lp, uint8 *buf, uint8 ack, uint8 flags)$/;"	f
ddcmp_tmxr_put_control_packet_ln	PDP10/pdp11_ddcmp.h	/^static t_stat ddcmp_tmxr_put_control_packet_ln (TMLN *lp, uint8 *buf, uint8 type, uint8 subtype, uint8 flags, uint8 sndr, uint8 rcvr)$/;"	f
ddcmp_tmxr_put_data_packet_ln	PDP10/pdp11_ddcmp.h	/^static t_stat ddcmp_tmxr_put_data_packet_ln (TMLN *lp, uint8 *buf, size_t size, uint8 flags, uint8 sequence, uint8 ack)$/;"	f
ddcmp_tmxr_put_nak_packet_ln	PDP10/pdp11_ddcmp.h	/^static t_stat ddcmp_tmxr_put_nak_packet_ln (TMLN *lp, uint8 *buf, uint8 reason, uint8 nack, uint8 flags)$/;"	f
ddcmp_tmxr_put_packet_crc_ln	PDP10/pdp11_ddcmp.h	/^static t_stat ddcmp_tmxr_put_packet_crc_ln (TMLN *lp, uint8 *buf, size_t size, int32 corruptrate)$/;"	f
ddcmp_tmxr_put_packet_ln	PDP10/pdp11_ddcmp.h	/^static t_stat ddcmp_tmxr_put_packet_ln (TMLN *lp, const uint8 *buf, size_t size, int32 corruptrate)$/;"	f
ddcmp_tmxr_put_rep_packet_ln	PDP10/pdp11_ddcmp.h	/^static t_stat ddcmp_tmxr_put_rep_packet_ln (TMLN *lp, uint8 *buf, uint8 ack, uint8 flags)$/;"	f
ddcmp_tmxr_put_start_ack_packet_ln	PDP10/pdp11_ddcmp.h	/^static t_stat ddcmp_tmxr_put_start_ack_packet_ln (TMLN *lp, uint8 *buf)$/;"	f
ddcmp_tmxr_put_start_packet_ln	PDP10/pdp11_ddcmp.h	/^static t_stat ddcmp_tmxr_put_start_packet_ln (TMLN *lp, uint8 *buf)$/;"	f
de_w_creationdate	sim_disk.c	/^    uint16  de_w_creationdate;$/;"	m	struct:_RT11_DirEntry	file:
de_w_fname1	sim_disk.c	/^    uint16  de_w_fname1;$/;"	m	struct:_RT11_DirEntry	file:
de_w_fname2	sim_disk.c	/^    uint16  de_w_fname2;$/;"	m	struct:_RT11_DirEntry	file:
de_w_ftype	sim_disk.c	/^    uint16  de_w_ftype;$/;"	m	struct:_RT11_DirEntry	file:
de_w_jobchannel	sim_disk.c	/^    uint16  de_w_jobchannel;$/;"	m	struct:_RT11_DirEntry	file:
de_w_length	sim_disk.c	/^    uint16  de_w_length;$/;"	m	struct:_RT11_DirEntry	file:
de_w_status	sim_disk.c	/^    uint16  de_w_status;$/;"	m	struct:_RT11_DirEntry	file:
deassign_cmd	scp.c	/^t_stat deassign_cmd (int32 flag, CONST char *cptr)$/;"	f
deassign_device	scp.c	/^t_stat deassign_device (DEVICE *dptr)$/;"	f
debflags	sim_defs.h	/^    DEBTAB              *debflags;                      \/* debug flags *\/$/;"	m	struct:DEVICE
debug	sim_frontpanel.c	/^    int                     debug;$/;"	m	struct:PANEL	file:
debug_bstates	scp.c	/^const char *debug_bstates = "01_^";$/;"	v
debug_cmd	scp.c	/^t_stat debug_cmd (int32 flg, CONST char *cptr)$/;"	f
debug_line_buf	scp.c	/^char *debug_line_buf = NULL;$/;"	v
debug_line_buf_last	scp.c	/^char *debug_line_buf_last = NULL;$/;"	v
debug_line_buf_last_endprefix_offset	scp.c	/^size_t debug_line_buf_last_endprefix_offset = 0;$/;"	v
debug_line_bufsize	scp.c	/^size_t debug_line_bufsize = 0;$/;"	v
debug_line_count	scp.c	/^size_t debug_line_count = 0;$/;"	v
debug_line_last_prefix	scp.c	/^AIO_TLS char debug_line_last_prefix[256];$/;"	v
debug_line_offset	scp.c	/^size_t debug_line_offset = 0;$/;"	v
debug_line_prefix	scp.c	/^AIO_TLS char debug_line_prefix[256];$/;"	v
debug_unterm	scp.c	/^int32 debug_unterm  = 0;$/;"	v
debugflush_thread	sim_frontpanel.c	/^    pthread_t               debugflush_thread;$/;"	m	struct:PANEL	file:
debugflush_thread_running	sim_frontpanel.c	/^    int                     debugflush_thread_running;$/;"	m	struct:PANEL	file:
debugmask	sim_imd.h	/^    uint32 debugmask;$/;"	m	struct:__anon26
decode	sim_console.c	/^static void decode (char *decoded, const char *encoded)$/;"	f	file:
decode_bit	PDP10/ka10_ai.c	/^static void decode_bit (int bit, FILE *f)$/;"	f	file:
decode_fm	PDP10/ka10_ai.c	/^static void decode_fm (int bit, FILE *f)$/;"	f	file:
decode_image	PDP10/ka10_ai.c	/^static void decode_image (uint64 *data, int n, FILE *f)$/;"	f	file:
delay	PDP10/pdp6_dtc.c	/^int delay[] = { 0, 50, 100, 500 };$/;"	v
delay	display/display.c	/^    delay_t delay;              \/* delta T in DELAY_UNITs *\/$/;"	m	struct:point	file:
delay	sim_defs.h	/^    uint32              delay;                          \/* instruction delay between sent data *\/$/;"	m	struct:SEND
delay_t	display/display.c	/^typedef unsigned short delay_t;$/;"	t	file:
delete_Stack	scp.c	/^void delete_Stack (Stack *sp)$/;"	f
delete_cmd	scp.c	/^t_stat delete_cmd (int32 flg, CONST char *cptr)$/;"	f
deleted_env_var	scp.c	/^static struct deleted_env_var {$/;"	s	file:
delta	display/ng.c	/^void delta (uint16 inst)$/;"	f
dep_addr	scp.c	/^t_stat dep_addr (int32 flag, const char *cptr, t_addr addr, DEVICE *dptr,$/;"	f
dep_reg	scp.c	/^t_stat dep_reg (int32 flag, CONST char *cptr, REG *rptr, uint32 idx)$/;"	f
deposit	sim_defs.h	/^    t_stat              (*deposit)(t_value v, t_addr a, UNIT *up,$/;"	m	struct:DEVICE
depth	sim_console.c	/^    int             depth;          \/* number of values *\/$/;"	m	struct:BITSAMPLE	file:
depth	sim_defs.h	/^    uint32              depth;                          \/* save depth *\/$/;"	m	struct:REG
depth_cue_proc	display/vt11.c	487;"	d	file:
desc	sim_defs.h	/^    const char          *desc;                          \/* description *\/$/;"	m	struct:DEBTAB
desc	sim_defs.h	/^    const char          *desc;                          \/* description *\/$/;"	m	struct:REG
desc	sim_defs.h	/^    const char *desc;                                   \/* description *\/$/;"	m	struct:BRKTYPTAB
desc	sim_defs.h	/^    void                *desc;                          \/* value descriptor *\/$/;"	m	struct:MTAB
desc	sim_disk.c	/^    const char *desc;$/;"	m	struct:_device_type	file:
desc	sim_ether.h	/^  char    desc[ETH_DEV_DESC_MAX];$/;"	m	struct:eth_list
desc	sim_serial.c	/^    char    desc[SER_DEV_DESC_MAX];$/;"	m	struct:serial_list	file:
description	scp.c	/^    const char *description;$/;"	m	struct:Operator	file:
description	sim_defs.h	/^    const char          *(*description)(DEVICE *dptr);  \/* Device Description *\/$/;"	m	struct:DEVICE
dest	PDP10/kl10_nia.c	/^    ETH_MAC    dest;$/;"	m	struct:nia_eth_hdr	file:
dest	PDP10/kx10_imp.c	/^    ETH_MAC    dest;$/;"	m	struct:imp_eth_hdr	file:
dest	PDP10/kx10_imp.c	/^    in_addr_T         dest;                    \/* Destination IP address *\/$/;"	m	struct:imp_packet	file:
dest_ip	sim_ether.c	/^  uint32 dest_ip;         \/* Destination Address *\/$/;"	m	struct:IPHeader	file:
dest_port	sim_ether.c	/^  uint16 dest_port;$/;"	m	struct:TCPHeader	file:
dest_port	sim_ether.c	/^  uint16 dest_port;$/;"	m	struct:UDPHeader	file:
destination	sim_tmxr.h	/^    char                *destination;                   \/* Outgoing destination address:port *\/$/;"	m	struct:tmln
destname	scp.c	/^    char destname[CBUFSIZE];$/;"	m	struct:__anon7	file:
detach	sim_defs.h	/^    t_stat              (*detach)(UNIT *up);            \/* detach routine *\/$/;"	m	struct:DEVICE
detach_all	scp.c	/^t_stat detach_all (int32 start, t_bool shutdown)$/;"	f
detach_cmd	scp.c	/^t_stat detach_cmd (int32 flag, CONST char *cptr)$/;"	f
detach_unit	scp.c	/^t_stat detach_unit (UNIT *uptr)$/;"	f
dev	PDP10/kl10_dn.c	/^    uint16      dev;       \/* Dev code *\/$/;"	m	struct:_dn_queue	file:
dev	PDP10/kl10_fe.c	/^    uint16      dev;       \/* Dev code *\/$/;"	m	struct:_dte_queue	file:
dev	PDP10/kx10_defs.h	/^    DEVICE             *dev;$/;"	m	struct:rh_dev
dev	sim_scsi.h	/^    UNIT *dev[8];                                       \/* target units *\/$/;"	m	struct:scsi_bus_t
dev	sim_video.h	/^    DEVICE *dev;                                          \/* which device *\/$/;"	m	struct:key_event
dev	sim_video.h	/^    DEVICE *dev;                                          \/* which device *\/$/;"	m	struct:mouse_event
dev420_cono	PDP10/kx10_dpy.c	/^static uint64 dev420_cono = 0;$/;"	v	file:
dev_apr	PDP10/kx10_cpu.c	/^t_stat dev_apr(uint32 dev, uint64 *data) {$/;"	f
dev_cca	PDP10/kx10_cpu.c	/^t_stat dev_cca(uint32 dev, uint64 *data) {$/;"	f
dev_debug	PDP10/kx10_sys.c	/^DEBTAB              dev_debug[] = {$/;"	v
dev_irq	PDP10/kx10_cpu.c	/^uint16  dev_irq[128];                         \/* Pending irq by device *\/$/;"	v
dev_irqv	PDP10/kx10_cpu.c	/^t_addr  (*dev_irqv[128])(uint32 dev, t_addr addr);$/;"	v
dev_mtr	PDP10/kx10_cpu.c	/^t_stat dev_mtr(uint32 dev, uint64 *data) {$/;"	f
dev_name_len	scp.c	/^static size_t dev_name_len;$/;"	v	file:
dev_num	PDP10/kx10_defs.h	/^    uint32              dev_num;                        \/* device address *\/$/;"	m	struct:pdp_dib
dev_num	PDP10/kx10_defs.h	/^    uint32              dev_num;$/;"	m	struct:rh_dev
dev_pag	PDP10/kx10_cpu.c	/^t_stat dev_pag(uint32 dev, uint64 *data) {$/;"	f
dev_pi	PDP10/kx10_cpu.c	/^t_stat dev_pi(uint32 dev, uint64 *data) {$/;"	f
dev_read	PDP10/kx10_defs.h	/^      int            (*dev_read)(DEVICE *dptr, struct rh_if *rh, int reg, uint32 *data);$/;"	m	struct:rh_if
dev_reset	PDP10/kx10_defs.h	/^      void           (*dev_reset)(DEVICE *dptr);$/;"	m	struct:rh_if
dev_status	sim_console.c	/^    unsigned int dev_status; } IOSB;$/;"	m	struct:__anon10	file:
dev_status	sim_serial.c	/^    unsigned int dev_status; } IOSB;$/;"	m	struct:__anon28	file:
dev_status	sim_tmxr.c	/^    unsigned int dev_status; } IOSB;$/;"	m	struct:__anon31	file:
dev_tab	PDP10/kx10_cpu.c	/^t_stat  (*dev_tab[128])(uint32 dev, uint64 *data);$/;"	v
dev_tim	PDP10/kx10_cpu.c	/^t_stat dev_tim(uint32 dev, uint64 *data) {$/;"	f
dev_type	PDP10/ka10_pmp.c	/^    uint8               dev_type;     \/* Device type code *\/$/;"	m	struct:disk_t	file:
dev_write	PDP10/kx10_defs.h	/^      int            (*dev_write)(DEVICE *dptr, struct rh_if *rh, int reg, uint32 data);$/;"	m	struct:rh_if
device	display/display.c	/^static void *device = NULL;  \/* Current display device. *\/$/;"	v	file:
device	sim_imd.h	/^    DEVICE *device;$/;"	m	struct:__anon26
device_count	sim_frontpanel.c	/^    size_t                  device_count;$/;"	m	struct:PANEL	file:
device_name	sim_frontpanel.c	/^    char                    *device_name;   \/* device name *\/$/;"	m	struct:PANEL	file:
device_name	sim_frontpanel.c	/^    char *device_name;$/;"	m	struct:__anon22	file:
devices	sim_frontpanel.c	/^    PANEL                   **devices;$/;"	m	struct:PANEL	file:
devid	PDP10/ka10_pmp.c	/^       uint8    devid[8];      \/* device header. *\/$/;"	m	struct:pmp_header	file:
devnam	PDP10/kx10_sys.c	/^static const char *devnam[NUMDEV] = {$/;"	v	file:
devnum	PDP10/kx10_defs.h	/^      uint32         devnum;     \/* Device number *\/$/;"	m	struct:df10
devnum	PDP10/kx10_defs.h	/^      uint32         devnum;     \/* Device number *\/$/;"	m	struct:rh_if
devtype	PDP10/ka10_pmp.c	/^       uint8    devtype;       \/* Hex code of last two digits of device type. *\/$/;"	m	struct:pmp_header	file:
devtype	PDP10/kx10_dp.c	/^    int32       devtype;                                \/* device type *\/$/;"	m	struct:drvtyp	file:
devtype	PDP10/kx10_rc.c	/^    int32       devtype;                                \/* device type *\/$/;"	m	struct:drvtyp	file:
devtype	PDP10/kx10_rp.c	/^    int32       devtype;                                \/* device type *\/$/;"	m	struct:drvtyp	file:
devtype	PDP10/kx10_rs.c	/^    int32       devtype;                                \/* device type *\/$/;"	m	struct:drvtyp	file:
devtype	sim_scsi.h	/^    uint8 devtype;                                      \/* device type *\/$/;"	m	struct:scsi_dev_t
df	display/vttest.c	/^static unsigned short *df;              \/* -> start of current display file *\/$/;"	v	file:
df10	PDP10/kx10_defs.h	/^struct df10 {$/;"	s
df10_fetch	PDP10/kx10_df.c	/^int df10_fetch(struct df10 *df) {$/;"	f
df10_finish_op	PDP10/kx10_df.c	/^void df10_finish_op(struct df10 *df, int flags) {$/;"	f
df10_read	PDP10/kx10_df.c	/^int df10_read(struct df10 *df) {$/;"	f
df10_setirq	PDP10/kx10_df.c	/^void df10_setirq(struct df10 *df) {$/;"	f
df10_setup	PDP10/kx10_df.c	/^void df10_setup(struct df10 *df, uint32 addr) {$/;"	f
df10_write	PDP10/kx10_df.c	/^int df10_write(struct df10 *df) {$/;"	f
df10_writecw	PDP10/kx10_df.c	/^void df10_writecw(struct df10 *df) {$/;"	f
dfd	slirp/debug.h	21;"	d
dh_w_count	sim_disk.c	/^    uint16  dh_w_count;$/;"	m	struct:_RT11_DirHeader	file:
dh_w_extra	sim_disk.c	/^    uint16  dh_w_extra;$/;"	m	struct:_RT11_DirHeader	file:
dh_w_highest	sim_disk.c	/^    uint16  dh_w_highest;$/;"	m	struct:_RT11_DirHeader	file:
dh_w_next	sim_disk.c	/^    uint16  dh_w_next;$/;"	m	struct:_RT11_DirHeader	file:
dh_w_start	sim_disk.c	/^    uint16  dh_w_start;$/;"	m	struct:_RT11_DirHeader	file:
dhcp	PDP10/kx10_imp.c	/^struct dhcp {$/;"	s	file:
dhcp_decode	slirp/bootp.c	/^static void dhcp_decode(const struct bootp_t *bp, int *pmsg_type,$/;"	f	file:
dhcp_lease	PDP10/kx10_imp.c	/^    uint32            dhcp_lease;              \/* DHCP lease time *\/$/;"	m	struct:imp_device	file:
dhcp_opr_names	PDP10/kx10_imp.c	/^static const char  *dhcp_opr_names[16] = {$/;"	v	file:
dhcp_rebind	PDP10/kx10_imp.c	/^    int               dhcp_rebind;             \/* DHCP rebind time *\/$/;"	m	struct:imp_device	file:
dhcp_renew	PDP10/kx10_imp.c	/^    int               dhcp_renew;              \/* DHCP renew time *\/$/;"	m	struct:imp_device	file:
dhcp_retry_after	PDP10/kx10_imp.c	/^    int               dhcp_retry_after;        \/* timeout time *\/$/;"	m	struct:imp_device	file:
dhcp_state	PDP10/kx10_imp.c	/^    uint8             dhcp_state;              \/* State of DHCP *\/$/;"	m	struct:imp_device	file:
dhcp_state_names	PDP10/kx10_imp.c	/^static const char  *dhcp_state_names[] = {$/;"	v	file:
dhcp_wait_time	PDP10/kx10_imp.c	/^    int               dhcp_wait_time;          \/* seconds waiting for response *\/$/;"	m	struct:imp_device	file:
dhcp_xid	PDP10/kx10_imp.c	/^    uint32            dhcp_xid;                \/* Transaction ID *\/$/;"	m	struct:imp_device	file:
dhcpip	PDP10/kx10_imp.c	/^    in_addr_T         dhcpip;                  \/* DHCP server address *\/$/;"	m	struct:imp_device	file:
dhcpmgmt	slirp_glue/sim_slirp.c	/^    int dhcpmgmt;$/;"	m	struct:sim_slirp	file:
dhwaddr	PDP10/kl10_nia.c	/^    ETH_MAC             dhwaddr;$/;"	m	struct:arp_hdr	file:
dhwaddr	PDP10/kx10_imp.c	/^    ETH_MAC             dhwaddr;$/;"	m	struct:arp_hdr	file:
dib	PDP10/kx10_defs.h	/^      struct pdp_dib *dib;       \/* Pointer back to DIB *\/$/;"	m	struct:rh_if	typeref:struct:rh_if::pdp_dib
dintens	display/vt11.c	/^dintens(int32 z)$/;"	f
dipaddr	PDP10/kl10_nia.c	/^    in_addr_T           dipaddr;$/;"	m	struct:arp_hdr	file:
dipaddr	PDP10/kx10_imp.c	/^    in_addr_T           dipaddr;$/;"	m	struct:arp_hdr	file:
dir_cmd	scp.c	/^t_stat dir_cmd (int32 flg, CONST char *cptr)$/;"	f
diskClose	sim_imd.c	/^t_stat diskClose(DISK_INFO **myDisk)$/;"	f
diskCreate	sim_imd.c	/^t_stat diskCreate(FILE *fileref, const char *ctlr_comment)$/;"	f
diskFormat	sim_imd.c	/^static t_stat diskFormat(DISK_INFO *myDisk)$/;"	f	file:
diskOpen	sim_imd.c	/^DISK_INFO *diskOpen(FILE *fileref, uint32 isVerbose)$/;"	f
diskOpenEx	sim_imd.c	/^DISK_INFO *diskOpenEx(FILE *fileref, uint32 isVerbose, DEVICE *device, uint32 debugmask, uint32 verbosedebugmask)$/;"	f
diskParse	sim_imd.c	/^static t_stat diskParse(DISK_INFO *myDisk, uint32 isVerbose)$/;"	f	file:
disk_attach	PDP10/kx10_disk.c	/^t_stat disk_attach (UNIT *uptr, CONST char *cptr)$/;"	f
disk_attach_help	PDP10/kx10_disk.c	/^t_stat disk_attach_help(FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
disk_context	sim_disk.c	/^struct disk_context {$/;"	s	file:
disk_ctx	sim_disk.c	192;"	d	file:
disk_detach	PDP10/kx10_disk.c	/^t_stat disk_detach (UNIT *uptr)$/;"	f
disk_formats	PDP10/kx10_disk.c	/^struct disk_formats {$/;"	s	file:
disk_handle	sim_disk.c	/^    HANDLE              disk_handle;        \/* OS specific Raw device handle *\/$/;"	m	struct:disk_context	file:
disk_read	PDP10/kx10_disk.c	/^disk_read(UNIT *uptr, uint64 *buffer, int sector, int wps)$/;"	f
disk_set_fmt	PDP10/kx10_disk.c	/^t_stat disk_set_fmt (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
disk_show_fmt	PDP10/kx10_disk.c	/^t_stat disk_show_fmt (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
disk_t	PDP10/ka10_pmp.c	/^struct disk_t$/;"	s	file:
disk_test_coverage	sim_disk.c	/^struct disk_test_coverage {$/;"	s	file:
disk_type	PDP10/ka10_pmp.c	/^disk_type[] =$/;"	v	typeref:struct:disk_t
disk_type	sim_defs.h	/^    uint32              disk_type;                      \/* Disk specific info *\/$/;"	m	struct:UNIT
disk_write	PDP10/kx10_disk.c	/^disk_write(UNIT *uptr, uint64 *buffer, int sector, int wps)$/;"	f
disp	sim_defs.h	/^    t_stat              (*disp)(FILE *st, UNIT *up, int32 v, CONST void *dp);$/;"	m	struct:MTAB
display	display/display.c	/^struct display {$/;"	s	file:
displayFlatHelp	scp.c	/^static t_stat displayFlatHelp (FILE *st, DEVICE *dptr,$/;"	f	file:
displayMagicTopic	scp.c	/^static void displayMagicTopic (FILE *st, DEVICE *dptr, TOPIC *topic)$/;"	f	file:
display_age	display/display.c	/^display_age(int t,          \/* simulated us since last call *\/$/;"	f
display_beep	display/display.c	/^display_beep(void)$/;"	f
display_close	display/display.c	/^display_close(void *dptr)$/;"	f
display_delay	display/display.c	/^display_delay(int t, int slowdown)$/;"	f	file:
display_init	display/display.c	/^display_init(enum display_type type, int sf, void *dptr)$/;"	f
display_is_blank	display/display.c	/^display_is_blank(void)$/;"	f
display_keydown	display/display.c	/^display_keydown(int k)$/;"	f
display_keyup	display/display.c	/^display_keyup(int k)$/;"	f
display_last_char	display/display.c	/^unsigned char display_last_char;$/;"	v
display_line	display/display.c	/^display_line(int x1,        \/* 0..xpixels (unscaled) *\/$/;"	f
display_lp_radius	display/display.c	/^display_lp_radius(int r)$/;"	f
display_lp_sw	display/display.c	/^unsigned char display_lp_sw = 0;$/;"	v
display_point	display/display.c	/^display_point(int x,        \/* 0..xpixels (unscaled) *\/$/;"	f
display_repaint	display/display.c	/^display_repaint(void) {$/;"	f
display_reset	display/display.c	/^display_reset(void)$/;"	f
display_scale	display/display.c	/^display_scale(void)$/;"	f
display_sync	display/display.c	/^display_sync(void)$/;"	f
display_tablet	display/display.c	/^unsigned char display_tablet = 0;$/;"	v
display_type	display/display.c	/^static enum display_type display_type;$/;"	v	typeref:enum:display_type	file:
display_type	display/display.h	/^enum display_type {$/;"	g
display_xpoints	display/display.c	/^display_xpoints(void)$/;"	f
display_ypoints	display/display.c	/^display_ypoints(void)$/;"	f
displays	display/display.c	/^static struct display displays[] = {$/;"	v	typeref:struct:display	file:
dk_description	PDP10/kx10_dk.c	/^const char *dk_description (DEVICE *dptr)$/;"	f
dk_dev	PDP10/kx10_dk.c	/^DEVICE dk_dev = {$/;"	v
dk_devio	PDP10/kx10_dk.c	/^t_stat dk_devio(uint32 dev, uint64 *data) {$/;"	f
dk_dib	PDP10/kx10_dk.c	/^DIB dk_dib[] = {$/;"	v
dk_svc	PDP10/kx10_dk.c	/^t_stat dk_svc (UNIT *uptr)$/;"	f
dk_test	PDP10/kx10_dk.c	/^void dk_test (UNIT *uptr)$/;"	f
dk_unit	PDP10/kx10_dk.c	/^UNIT dk_unit[] = {$/;"	v
dkb_description	PDP10/ka10_dkb.c	/^const char *dkb_description (DEVICE *dptr)$/;"	f
dkb_dev	PDP10/ka10_dkb.c	/^DEVICE dkb_dev = {$/;"	v
dkb_devio	PDP10/ka10_dkb.c	/^t_stat dkb_devio(uint32 dev, uint64 *data) {$/;"	f
dkb_dib	PDP10/ka10_dkb.c	/^DIB dkb_dib = { DKB_DEVNUM, 1, dkb_devio, NULL};$/;"	v
dkb_help	PDP10/ka10_dkb.c	/^t_stat dkb_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
dkb_keyboard	PDP10/ka10_dkb.c	/^int dkb_keyboard (SIM_KEY_EVENT *kev)$/;"	f
dkb_keys	PDP10/ka10_dkb.c	/^int dkb_keys (SIM_KEY_EVENT *kev, UNIT *uptr)$/;"	f
dkb_kmod	PDP10/ka10_dkb.c	/^int dkb_kmod = 0;$/;"	v
dkb_mod	PDP10/ka10_dkb.c	/^MTAB dkb_mod[] = {$/;"	v
dkb_modifiers	PDP10/ka10_dkb.c	/^int dkb_modifiers (SIM_KEY_EVENT *kev)$/;"	f
dkb_reset	PDP10/ka10_dkb.c	/^t_stat dkb_reset( DEVICE *dptr)$/;"	f
dkb_unit	PDP10/ka10_dkb.c	/^UNIT dkb_unit[] = {$/;"	v
dlen	PDP10/ka10_pmp.c	/^     uint16             dlen;    \/* remaining in data *\/$/;"	m	struct:pmp_t	file:
dn_base	PDP10/kl10_dn.c	/^int32 dn_base;            \/* Base *\/$/;"	v
dn_description	PDP10/kl10_dn.c	/^const char *dn_description (DEVICE *dptr)$/;"	f
dn_dev	PDP10/kl10_dn.c	/^DEVICE dn_dev = {$/;"	v
dn_devio	PDP10/kl10_dn.c	/^t_stat dn_devio(uint32 dev, uint64 *data) {$/;"	f
dn_devirq	PDP10/kl10_dn.c	/^dn_devirq(uint32 dev, t_addr addr) {$/;"	f
dn_dib	PDP10/kl10_dn.c	/^DIB dn_dib[] = {$/;"	v
dn_dt10_off	PDP10/kl10_dn.c	/^int32 dn_dt10_off;        \/* Offset to 10 deposit region *\/$/;"	v
dn_et10_off	PDP10/kl10_dn.c	/^int32 dn_et10_off;        \/* Offset to 10 examine region *\/$/;"	v
dn_et11_off	PDP10/kl10_dn.c	/^int32 dn_et11_off;        \/* Offset to 11 examine region *\/$/;"	v
dn_function	PDP10/kl10_dn.c	/^dn_function(UNIT *uptr)$/;"	f
dn_help	PDP10/kl10_dn.c	/^t_stat dn_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
dn_in	PDP10/kl10_dn.c	/^} dn_in[32], dn_out[32];$/;"	v	typeref:struct:_dn_queue
dn_in_cmd	PDP10/kl10_dn.c	/^int32 dn_in_cmd;$/;"	v
dn_in_ptr	PDP10/kl10_dn.c	/^int32 dn_in_ptr;$/;"	v
dn_input	PDP10/kl10_dn.c	/^dn_input()$/;"	f
dn_mod	PDP10/kl10_dn.c	/^MTAB dn_mod[] = {$/;"	v
dn_off	PDP10/kl10_dn.c	/^int32 dn_off;             \/* Our offset *\/$/;"	v
dn_out	PDP10/kl10_dn.c	/^} dn_in[32], dn_out[32];$/;"	v	typeref:struct:_dn_queue
dn_out_ptr	PDP10/kl10_dn.c	/^int32 dn_out_ptr;$/;"	v
dn_out_res	PDP10/kl10_dn.c	/^int32 dn_out_res;$/;"	v
dn_primary	PDP10/kl10_dn.c	/^void dn_primary(UNIT *uptr) {$/;"	f
dn_proc_num	PDP10/kl10_dn.c	/^int32 dn_proc_num;        \/* Our processor number *\/$/;"	v
dn_queue	PDP10/kl10_dn.c	/^dn_queue(int func, int dev, int dcnt, uint16 *data)$/;"	f
dn_reg	PDP10/kl10_dn.c	/^REG  dn_reg[] = {$/;"	v
dn_reset	PDP10/kl10_dn.c	/^t_stat dn_reset (DEVICE *dptr)$/;"	f
dn_second	PDP10/kl10_dn.c	/^void dn_second(UNIT *uptr) {$/;"	f
dn_set_type	PDP10/kl10_dn.c	/^dn_set_type(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dn_show_type	PDP10/kl10_dn.c	/^dn_show_type (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
dn_start	PDP10/kl10_dn.c	/^dn_start(UNIT *uptr)$/;"	f
dn_svc	PDP10/kl10_dn.c	/^t_stat dn_svc (UNIT *uptr)$/;"	f
dn_transfer	PDP10/kl10_dn.c	/^void dn_transfer(UNIT *uptr) {$/;"	f
dn_unit	PDP10/kl10_dn.c	/^UNIT dn_unit[] = {$/;"	v
dni_svc	PDP10/kl10_dn.c	/^t_stat dni_svc (UNIT *uptr)$/;"	f
dno_svc	PDP10/kl10_dn.c	/^t_stat dno_svc (UNIT *uptr)$/;"	f
dnrtc_srv	PDP10/kl10_dn.c	/^dnrtc_srv(UNIT * uptr)$/;"	f
dns_addr	slirp/slirp.c	/^static struct in_addr dns_addr;$/;"	v	typeref:struct:in_addr	file:
dns_addr_stat	slirp/slirp.c	/^static struct stat dns_addr_stat;$/;"	v	typeref:struct:stat	file:
dns_addr_time	slirp/slirp.c	/^static u_int dns_addr_time;$/;"	v	file:
dns_search	slirp_glue/sim_slirp.c	/^    char *dns_search;$/;"	m	struct:sim_slirp	file:
dns_search_domains	slirp_glue/sim_slirp.c	/^    char **dns_search_domains;$/;"	m	struct:sim_slirp	file:
doKbdEvent	display/carbon.c	/^static pascal OSStatus doKbdEvent (     EventHandlerCallRef     handlerRef,$/;"	f	file:
doMouseEvent	display/carbon.c	/^static pascal OSStatus doMouseEvent (   EventHandlerCallRef     handlerRef,$/;"	f	file:
do_byte_setup	PDP10/kx10_cpu.c	/^do_byte_setup(int n, int wr, int *pos, int *sz)$/;"	f
do_cmd	scp.c	/^t_stat do_cmd (int32 flag, CONST char *fcptr)$/;"	f
do_cmd_label	scp.c	/^t_stat do_cmd_label (int32 flag, CONST char *fcptr, CONST char *label)$/;"	f
do_extend	PDP10/kx10_cpu.c	/^do_extend(uint32 ia)$/;"	f
do_position	scp.c	/^static char *do_position(void)$/;"	f	file:
do_slowtimo	slirp/slirp.h	/^    bool do_slowtimo;$/;"	m	struct:Slirp
do_xlate	PDP10/kx10_cpu.c	/^do_xlate(uint32 tbl, uint64 val, int mask)$/;"	f
domain_common_label	slirp/dnssearch.c	/^static size_t domain_common_label(CompactDomain *a, CompactDomain *b)$/;"	f	file:
domain_compactify	slirp/dnssearch.c	/^static size_t domain_compactify(CompactDomain *domains, size_t n)$/;"	f	file:
domain_fixup_order	slirp/dnssearch.c	/^static void domain_fixup_order(CompactDomain *cd, size_t n)$/;"	f	file:
domain_mklabels	slirp/dnssearch.c	/^static void domain_mklabels(CompactDomain *cd, const char *input)$/;"	f	file:
domain_mkxrefs	slirp/dnssearch.c	/^domain_mkxrefs(CompactDomain *doms, CompactDomain *last, size_t depth)$/;"	f	file:
domain_suffix_diffoff	slirp/dnssearch.c	/^domain_suffix_diffoff(const CompactDomain *a, const CompactDomain *b)$/;"	f	file:
domain_suffix_ord	slirp/dnssearch.c	/^static int domain_suffix_ord(const void *cva, const void *cvb)$/;"	f	file:
dos11_ascR50	sim_tape.c	/^static uint16 dos11_ascR50(char *inbuf)$/;"	f	file:
dos11_copy_ascii_file	sim_tape.c	/^static int dos11_copy_ascii_file (FILE *f, MEMORY_TAPE *tape, char *buf, size_t bufSize)$/;"	f	file:
dos11_sanitize	sim_tape.c	/^static void dos11_sanitize(char *buf, int len, const char *inbuf)$/;"	f	file:
dot	PDP10/kx10_dpy.c	/^static uint32 dot[7 * 7];$/;"	v	file:
dots	display/vt11.c	/^static const unsigned char dots[0200][6] = {$/;"	v	file:
dp_attach	PDP10/kx10_dp.c	/^t_stat dp_attach (UNIT *uptr, CONST char *cptr)$/;"	f
dp_boot	PDP10/kx10_dp.c	/^dp_boot(int32 unit_num, DEVICE * dptr)$/;"	f
dp_buf	PDP10/kx10_dp.c	/^uint64        dp_buf[NUM_DEVS_DP][RP_NUMWD];$/;"	v
dp_cur_unit	PDP10/kx10_dp.c	/^uint32        dp_cur_unit[NUM_DEVS_DP];$/;"	v
dp_description	PDP10/kx10_dp.c	/^const char *dp_description (DEVICE *dptr)$/;"	f
dp_detach	PDP10/kx10_dp.c	/^t_stat dp_detach (UNIT *uptr)$/;"	f
dp_devio	PDP10/kx10_dp.c	/^t_stat dp_devio(uint32 dev, uint64 *data) {$/;"	f
dp_devs	PDP10/kx10_dp.c	/^DEVICE *dp_devs[] = {$/;"	v
dp_df10	PDP10/kx10_dp.c	/^struct df10   dp_df10[NUM_DEVS_DP];$/;"	v	typeref:struct:df10
dp_dib	PDP10/kx10_dp.c	/^DIB dp_dib[] = {$/;"	v
dp_drv_tab	PDP10/kx10_dp.c	/^struct drvtyp dp_drv_tab[] = {$/;"	v	typeref:struct:drvtyp
dp_help	PDP10/kx10_dp.c	/^t_stat dp_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
dp_mod	PDP10/kx10_dp.c	/^MTAB                dp_mod[] = {$/;"	v
dp_reset	PDP10/kx10_dp.c	/^dp_reset(DEVICE * dptr)$/;"	f
dp_set_hdr	PDP10/kx10_dp.c	/^dp_set_hdr(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dp_set_type	PDP10/kx10_dp.c	/^dp_set_type(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dp_show_hdr	PDP10/kx10_dp.c	/^t_stat dp_show_hdr (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
dp_svc	PDP10/kx10_dp.c	/^t_stat dp_svc (UNIT *uptr)$/;"	f
dp_unit	PDP10/kx10_dp.c	/^UNIT                dp_unit[] = {$/;"	v
dpa_dev	PDP10/kx10_dp.c	/^DEVICE              dpa_dev = {$/;"	v
dpa_reg	PDP10/kx10_dp.c	/^REG                 dpa_reg[] = {$/;"	v
dpb_dev	PDP10/kx10_dp.c	/^DEVICE              dpb_dev = {$/;"	v
dpb_reg	PDP10/kx10_dp.c	/^REG                 dpb_reg[] = {$/;"	v
dpc	display/ng.c	/^static int dpc[8];$/;"	v	file:
dpc_dev	PDP10/kx10_dp.c	/^DEVICE              dpc_dev = {$/;"	v
dpc_reg	PDP10/kx10_dp.c	/^REG                 dpc_reg[] = {$/;"	v
dpd_dev	PDP10/kx10_dp.c	/^DEVICE              dpd_dev = {$/;"	v
dpd_reg	PDP10/kx10_dp.c	/^REG                 dpd_reg[] = {$/;"	v
dpk_attach	PDP10/ka10_dpk.c	/^static t_stat dpk_attach (UNIT *uptr, CONST char *cptr)$/;"	f	file:
dpk_base	PDP10/ka10_dpk.c	/^static int dpk_base = 0;$/;"	v	file:
dpk_desc	PDP10/ka10_dpk.c	/^TMXR dpk_desc = { DPK_LINES, 0, 0, dpk_ldsc };$/;"	v
dpk_description	PDP10/ka10_dpk.c	/^static const char *dpk_description (DEVICE *dptr)$/;"	f	file:
dpk_detach	PDP10/ka10_dpk.c	/^static t_stat dpk_detach (UNIT *uptr)$/;"	f	file:
dpk_dev	PDP10/ka10_dpk.c	/^DEVICE dpk_dev = {$/;"	v
dpk_devio	PDP10/ka10_dpk.c	/^static t_stat dpk_devio(uint32 dev, uint64 *data)$/;"	f	file:
dpk_dib	PDP10/ka10_dpk.c	/^DIB dpk_dib = {DPK_DEVNUM, 1, &dpk_devio, NULL};$/;"	v
dpk_help	PDP10/ka10_dpk.c	/^static t_stat dpk_help (FILE *st, DEVICE *dptr, UNIT *uptr,$/;"	f	file:
dpk_ibuf	PDP10/ka10_dpk.c	/^static int dpk_ibuf[16];$/;"	v	file:
dpk_ien	PDP10/ka10_dpk.c	/^static int dpk_ien = 0;$/;"	v	file:
dpk_input_svc	PDP10/ka10_dpk.c	/^static t_stat dpk_input_svc (UNIT *uptr)$/;"	f	file:
dpk_ird	PDP10/ka10_dpk.c	/^static int dpk_ird = 0;$/;"	v	file:
dpk_iwr	PDP10/ka10_dpk.c	/^static int dpk_iwr = 0;$/;"	v	file:
dpk_ldsc	PDP10/ka10_dpk.c	/^TMLN dpk_ldsc[DPK_LINES] = { 0 };$/;"	v
dpk_mod	PDP10/ka10_dpk.c	/^MTAB dpk_mod[] = {$/;"	v
dpk_output	PDP10/ka10_dpk.c	/^static void dpk_output (int port, TMLN *lp)$/;"	f	file:
dpk_output_svc	PDP10/ka10_dpk.c	/^static t_stat dpk_output_svc (UNIT *uptr)$/;"	f	file:
dpk_port	PDP10/ka10_dpk.c	/^static int dpk_port[16];$/;"	v	file:
dpk_port_done	PDP10/ka10_dpk.c	/^static int dpk_port_done = 0;$/;"	v	file:
dpk_reset	PDP10/ka10_dpk.c	/^static t_stat dpk_reset (DEVICE *dptr)$/;"	f	file:
dpk_set_ospeed	PDP10/ka10_dpk.c	/^static void dpk_set_ospeed (int port, uint64 data)$/;"	f	file:
dpk_status	PDP10/ka10_dpk.c	/^static int dpk_status = 0;$/;"	v	file:
dpk_unit	PDP10/ka10_dpk.c	/^UNIT                dpk_unit[] = {$/;"	v
dport	PDP10/kx10_imp.c	/^    uint16            dport;                   \/* Port to fix *\/$/;"	m	struct:imp_map	file:
dptr	PDP10/kl10_dn.c	/^    int         dptr;      \/* Pointer to working item *\/$/;"	m	struct:_dn_queue	file:
dptr	PDP10/kl10_fe.c	/^    int         dptr;      \/* Pointer to working item *\/$/;"	m	struct:_dte_queue	file:
dptr	sim_console.c	/^    DEVICE          *dptr;          \/* Device register is part of *\/$/;"	m	struct:BITSAMPLE_REG	file:
dptr	sim_defs.h	/^    DEVICE              *dptr;                          \/* DEVICE linkage (backpointer) *\/$/;"	m	struct:UNIT
dptr	sim_defs.h	/^    DEVICE              *dptr;                          \/* Device (for Debug) *\/$/;"	m	struct:EXPECT
dptr	sim_defs.h	/^    DEVICE              *dptr;                          \/* Device (for Debug) *\/$/;"	m	struct:SEND
dptr	sim_disk.c	/^    DEVICE              *dptr;              \/* Device for unit (access to debug flags) *\/$/;"	m	struct:disk_context	file:
dptr	sim_ether.h	/^  DEVICE*       dptr;                                   \/* device ethernet is attached to *\/$/;"	m	struct:eth_device
dptr	sim_scsi.h	/^    DEVICE *dptr;                                       \/* SCSI device *\/$/;"	m	struct:scsi_bus_t
dptr	sim_tape.c	/^    DEVICE              *dptr;              \/* Device for unit (access to debug flags) *\/$/;"	m	struct:tape_context	file:
dptr	sim_tmxr.h	/^    DEVICE              *dptr;                          \/* line specific device *\/$/;"	m	struct:tmln
dptr	sim_tmxr.h	/^    DEVICE              *dptr;                          \/* multiplexer device *\/$/;"	m	struct:tmxr
dptr	slirp_glue/sim_slirp.c	/^    DEVICE *dptr;$/;"	m	struct:sim_slirp	file:
dpy	display/x11.c	/^static Display* dpy;            \/* its display *\/$/;"	v	file:
dpy_description	PDP10/kx10_dpy.c	/^const char *dpy_description (DEVICE *dptr)$/;"	f
dpy_dev	PDP10/kx10_dpy.c	/^DEVICE dpy_dev = {$/;"	v
dpy_devio	PDP10/kx10_dpy.c	/^t_stat dpy_devio(uint32 dev, uint64 *data) {$/;"	f
dpy_dib	PDP10/kx10_dpy.c	/^DIB dpy_dib[] = {$/;"	v
dpy_joy_button	PDP10/kx10_dpy.c	/^static void dpy_joy_button(int which, int button, int state)$/;"	f	file:
dpy_joy_motion	PDP10/kx10_dpy.c	/^static void dpy_joy_motion(int which, int axis, int value)$/;"	f	file:
dpy_keyboard	PDP10/kx10_dpy.c	/^static int dpy_keyboard (SIM_KEY_EVENT *ev)$/;"	f	file:
dpy_mod	PDP10/kx10_dpy.c	/^MTAB dpy_mod[] = {$/;"	v
dpy_reset	PDP10/kx10_dpy.c	/^t_stat dpy_reset (DEVICE *dptr)$/;"	f
dpy_scale	display/type340.c	/^int dpy_scale=1;$/;"	v
dpy_set_int_done	PDP10/kx10_dpy.c	/^static void dpy_set_int_done(UNIT *uptr)$/;"	f	file:
dpy_set_scale	PDP10/kx10_dpy.c	/^dpy_set_scale(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dpy_show_scale	PDP10/kx10_dpy.c	/^dpy_show_scale(FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
dpy_svc	PDP10/kx10_dpy.c	/^t_stat dpy_svc (UNIT *uptr)$/;"	f
dpy_unit	PDP10/kx10_dpy.c	/^UNIT dpy_unit[] = {$/;"	v
dpy_update_status	PDP10/kx10_dpy.c	/^int dpy_update_status (UNIT *uptr, ty340word status, int done)$/;"	f
dradix	sim_defs.h	/^    uint32              dradix;                         \/* data radix *\/$/;"	m	struct:DEVICE
dram	PDP10/ks10_kmc.c	435;"	d	file:
draw_line	PDP10/ka10_iii.c	/^draw_line(int x1, int y1, int x2, int y2, int b, UNIT *uptr)$/;"	f	file:
draw_point	PDP10/ka10_iii.c	/^draw_point(int x, int y, int b, UNIT *uptr)$/;"	f	file:
drive	PDP10/kx10_defs.h	/^      int            drive;      \/* Last drive selected *\/$/;"	m	struct:rh_if
dropped	PDP10/kx10_imp.c	/^    int               dropped;                 \/* received packets dropped *\/$/;"	m	struct:imp_stats	file:
drvtyp	PDP10/kx10_dp.c	/^struct drvtyp {$/;"	s	file:
drvtyp	PDP10/kx10_rc.c	/^struct drvtyp {$/;"	s	file:
drvtyp	PDP10/kx10_rp.c	/^struct drvtyp {$/;"	s	file:
drvtyp	PDP10/kx10_rs.c	/^struct drvtyp {$/;"	s	file:
dsk_addr	PDP10/pdp6_dsk.c	/^uint32          dsk_addr;$/;"	v
dsk_attach	PDP10/pdp6_dsk.c	/^dsk_attach (UNIT *uptr, CONST char *cptr)$/;"	f
dsk_boot	PDP10/pdp6_dsk.c	/^dsk_boot(int32 unit_num, DEVICE * dptr)$/;"	f
dsk_buf	PDP10/pdp6_dsk.c	/^uint64          dsk_buf[DSK_WDS];$/;"	v
dsk_cmd	PDP10/pdp6_dsk.c	/^uint32          dsk_cmd;$/;"	v
dsk_dct	PDP10/pdp6_dsk.c	/^int             dsk_dct = 0;$/;"	v
dsk_description	PDP10/pdp6_dsk.c	/^const char *dsk_description (DEVICE *dptr)$/;"	f
dsk_detach	PDP10/pdp6_dsk.c	/^dsk_detach (UNIT *uptr)$/;"	f
dsk_dev	PDP10/pdp6_dsk.c	/^DEVICE              dsk_dev = {$/;"	v
dsk_devio	PDP10/pdp6_dsk.c	/^dsk_devio(uint32 dev, uint64 *data) {$/;"	f
dsk_dib	PDP10/pdp6_dsk.c	/^DIB dsk_dib[] = {$/;"	v
dsk_help	PDP10/pdp6_dsk.c	/^dsk_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
dsk_mod	PDP10/pdp6_dsk.c	/^MTAB                dsk_mod[] = {$/;"	v
dsk_octflp	PDP10/pdp6_dsk.c	/^uint8           dsk_octflp;$/;"	v
dsk_reg	PDP10/pdp6_dsk.c	/^REG                 dsk_reg[] = {$/;"	v
dsk_reset	PDP10/pdp6_dsk.c	/^dsk_reset(DEVICE * dptr)$/;"	f
dsk_set_dct	PDP10/pdp6_dsk.c	/^dsk_set_dct (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dsk_show_dct	PDP10/pdp6_dsk.c	/^dsk_show_dct (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
dsk_status	PDP10/pdp6_dsk.c	/^uint32          dsk_status;$/;"	v
dsk_svc	PDP10/pdp6_dsk.c	/^dsk_svc (UNIT *uptr)$/;"	f
dsk_unit	PDP10/pdp6_dsk.c	/^UNIT                dsk_unit[] = {$/;"	v
dstb	sim_tmxr.h	/^    int32               dstb;                           \/* disable Telnet binary mode *\/$/;"	m	struct:tmln
dt_attach	PDP10/kx10_dt.c	/^t_stat dt_attach (UNIT *uptr, CONST char *cptr)$/;"	f
dt_boot	PDP10/kx10_dt.c	/^dt_boot(int32 unit_num, DEVICE * dptr)$/;"	f
dt_deb	PDP10/kx10_dt.c	/^DEBTAB dt_deb[] = {$/;"	v
dt_detach	PDP10/kx10_dt.c	/^t_stat dt_detach (UNIT* uptr)$/;"	f
dt_dev	PDP10/kx10_dt.c	/^DEVICE dt_dev = {$/;"	v
dt_devio	PDP10/kx10_dt.c	/^t_stat dt_devio(uint32 dev, uint64 *data) {$/;"	f
dt_dib	PDP10/kx10_dt.c	/^DIB dt_dib = { DT_DEVNUM, 2, &dt_devio, NULL};$/;"	v
dt_flush	PDP10/kx10_dt.c	/^void dt_flush (UNIT* uptr)$/;"	f
dt_getword	PDP10/kx10_dt.c	/^void dt_getword(uint64 *data, int req) {$/;"	f
dt_mod	PDP10/kx10_dt.c	/^MTAB dt_mod[] = {$/;"	v
dt_mpx_lvl	PDP10/kx10_dt.c	/^int dt_mpx_lvl;$/;"	v
dt_putword	PDP10/kx10_dt.c	/^void dt_putword(uint64 *data) {$/;"	f
dt_reg	PDP10/kx10_dt.c	/^REG dt_reg[] = {$/;"	v
dt_reset	PDP10/kx10_dt.c	/^t_stat dt_reset (DEVICE *dptr)$/;"	f
dt_set_mpx	PDP10/kx10_dt.c	/^t_stat dt_set_mpx (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dt_show_mpx	PDP10/kx10_dt.c	/^t_stat dt_show_mpx (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
dt_svc	PDP10/kx10_dt.c	/^t_stat dt_svc (UNIT *uptr)$/;"	f
dt_unit	PDP10/kx10_dt.c	/^UNIT dt_unit[] = {$/;"	v
dtc_attach	PDP10/pdp6_dtc.c	/^dtc_attach (UNIT *uptr, CONST char *cptr)$/;"	f
dtc_boot	PDP10/pdp6_dtc.c	/^dtc_boot(int32 unit_num, DEVICE * dptr)$/;"	f
dtc_dct	PDP10/pdp6_dtc.c	/^int   dtc_dct = 0;$/;"	v
dtc_deb	PDP10/pdp6_dtc.c	/^DEBTAB dtc_deb[] = {$/;"	v
dtc_detach	PDP10/pdp6_dtc.c	/^dtc_detach (UNIT* uptr)$/;"	f
dtc_dev	PDP10/pdp6_dtc.c	/^DEVICE dtc_dev = {$/;"	v
dtc_devio	PDP10/pdp6_dtc.c	/^dtc_devio(uint32 dev, uint64 *data) {$/;"	f
dtc_dib	PDP10/pdp6_dtc.c	/^DIB dtc_dib = { DTC_DEVNUM, 2, &dtc_devio, NULL};$/;"	v
dtc_dtsa	PDP10/pdp6_dtc.c	/^int32 dtc_dtsa = 0;                           \/* status A *\/$/;"	v
dtc_dtsb	PDP10/pdp6_dtc.c	/^int32 dtc_dtsb = 0;                           \/* status B *\/$/;"	v
dtc_flush	PDP10/pdp6_dtc.c	/^dtc_flush (UNIT* uptr)$/;"	f
dtc_mod	PDP10/pdp6_dtc.c	/^MTAB dtc_mod[] = {$/;"	v
dtc_reg	PDP10/pdp6_dtc.c	/^REG dtc_reg[] = {$/;"	v
dtc_reset	PDP10/pdp6_dtc.c	/^dtc_reset (DEVICE *dptr)$/;"	f
dtc_set_dct	PDP10/pdp6_dtc.c	/^dtc_set_dct (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dtc_show_dct	PDP10/pdp6_dtc.c	/^dtc_show_dct (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
dtc_svc	PDP10/pdp6_dtc.c	/^dtc_svc (UNIT *uptr)$/;"	f
dtc_unit	PDP10/pdp6_dtc.c	/^UNIT dtc_unit[] = {$/;"	v
dtdb	PDP10/kx10_dt.c	/^uint64 dtdb = 0;                                        \/* data buffer *\/$/;"	v
dte_base	PDP10/kl10_fe.c	/^int32 dte_base;            \/* Base *\/$/;"	v
dte_description	PDP10/kl10_fe.c	/^const char *dte_description (DEVICE *dptr)$/;"	f
dte_dev	PDP10/kl10_fe.c	/^DEVICE dte_dev = {$/;"	v
dte_devio	PDP10/kl10_fe.c	/^t_stat dte_devio(uint32 dev, uint64 *data) {$/;"	f
dte_devirq	PDP10/kl10_fe.c	/^dte_devirq(uint32 dev, t_addr addr) {$/;"	f
dte_dib	PDP10/kl10_fe.c	/^DIB dte_dib[] = {$/;"	v
dte_dt10_off	PDP10/kl10_fe.c	/^int32 dte_dt10_off;        \/* Offset to 10 deposit region *\/$/;"	v
dte_et10_off	PDP10/kl10_fe.c	/^int32 dte_et10_off;        \/* Offset to 10 examine region *\/$/;"	v
dte_et11_off	PDP10/kl10_fe.c	/^int32 dte_et11_off;        \/* Offset to 11 examine region *\/$/;"	v
dte_function	PDP10/kl10_fe.c	/^dte_function(UNIT *uptr)$/;"	f
dte_help	PDP10/kl10_fe.c	/^t_stat dte_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
dte_in	PDP10/kl10_fe.c	/^} dte_in[16], dte_out[16];$/;"	v	typeref:struct:_dte_queue
dte_in_cmd	PDP10/kl10_fe.c	/^int32 dte_in_cmd;$/;"	v
dte_in_ptr	PDP10/kl10_fe.c	/^int32 dte_in_ptr;$/;"	v
dte_input	PDP10/kl10_fe.c	/^dte_input()$/;"	f
dte_its	PDP10/kl10_fe.c	/^void dte_its(UNIT *uptr) {$/;"	f
dte_mod	PDP10/kl10_fe.c	/^MTAB dte_mod[] = {$/;"	v
dte_off	PDP10/kl10_fe.c	/^int32 dte_off;             \/* Our offset *\/$/;"	v
dte_out	PDP10/kl10_fe.c	/^} dte_in[16], dte_out[16];$/;"	v	typeref:struct:_dte_queue
dte_out_ptr	PDP10/kl10_fe.c	/^int32 dte_out_ptr;$/;"	v
dte_out_res	PDP10/kl10_fe.c	/^int32 dte_out_res;$/;"	v
dte_primary	PDP10/kl10_fe.c	/^void dte_primary(UNIT *uptr) {$/;"	f
dte_proc_num	PDP10/kl10_fe.c	/^int32 dte_proc_num;        \/* Our processor number *\/$/;"	v
dte_queue	PDP10/kl10_fe.c	/^dte_queue(int func, int dev, int dcnt, uint16 *data)$/;"	f
dte_reg	PDP10/kl10_fe.c	/^REG  dte_reg[] = {$/;"	v
dte_reset	PDP10/kl10_fe.c	/^t_stat dte_reset (DEVICE *dptr)$/;"	f
dte_second	PDP10/kl10_fe.c	/^void dte_second(UNIT *uptr) {$/;"	f
dte_set_type	PDP10/kl10_fe.c	/^dte_set_type(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dte_show_type	PDP10/kl10_fe.c	/^dte_show_type (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
dte_start	PDP10/kl10_fe.c	/^dte_start(UNIT *uptr)$/;"	f
dte_stop_os	PDP10/kl10_fe.c	/^t_stat dte_stop_os (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dte_svc	PDP10/kl10_fe.c	/^t_stat dte_svc (UNIT *uptr)$/;"	f
dte_transfer	PDP10/kl10_fe.c	/^void dte_transfer(UNIT *uptr) {$/;"	f
dte_unit	PDP10/kl10_fe.c	/^UNIT dte_unit[] = {$/;"	v
dtei_svc	PDP10/kl10_fe.c	/^t_stat dtei_svc (UNIT *uptr)$/;"	f
dteo_svc	PDP10/kl10_fe.c	/^t_stat dteo_svc (UNIT *uptr)$/;"	f
dtertc_srv	PDP10/kl10_fe.c	/^dtertc_srv(UNIT * uptr)$/;"	f
dtom	slirp/mbuf.c	/^dtom(Slirp *slirp, void *dat)$/;"	f
dtsa	PDP10/kx10_dt.c	/^int32 dtsa = 0;                                         \/* status A *\/$/;"	v
dtsb	PDP10/kx10_dt.c	/^uint64 dtsb = 0;                                        \/* status B *\/$/;"	v
dummy	slirp/ip.h	/^        uint32_t dummy;$/;"	m	struct:mbuf_ptr
dummy	slirp/tcpip.h	/^        struct tcpiphdr dummy;$/;"	m	struct:tcpiphdr_2	typeref:struct:tcpiphdr_2::tcpiphdr
dummy	slirp_glue/glib.h	/^typedef struct _GSource {int dummy;} GSource;$/;"	m	struct:_GSource
dump	display/tst340.c	/^dump(int *ip)$/;"	f
dump1	display/tst340.c	/^dump1(int *mp, int word)$/;"	f
dumpREG	PDP10/pidp10panel.c	/^void dumpREG(void)$/;"	f
dupState	PDP10/ks10_kmc.c	/^static dupstate dupState[DUP_LINES] = {{ 0 }};$/;"	v	file:
dup_W3	PDP10/ks10_dup.c	/^static t_bool dup_W3[NUM_DEVS_DUP];$/;"	v	file:
dup_W5	PDP10/ks10_dup.c	/^static t_bool dup_W5[NUM_DEVS_DUP];$/;"	v	file:
dup_W6	PDP10/ks10_dup.c	/^static t_bool dup_W6[NUM_DEVS_DUP];$/;"	v	file:
dup_attach	PDP10/ks10_dup.c	/^static t_stat dup_attach (UNIT *uptr, CONST char *cptr)$/;"	f	file:
dup_clear	PDP10/ks10_dup.c	/^static t_stat dup_clear (int32 dup, t_bool flag)$/;"	f	file:
dup_clr_rxint	PDP10/ks10_dup.c	/^static void dup_clr_rxint (int32 dup)$/;"	f	file:
dup_clr_txint	PDP10/ks10_dup.c	/^static void dup_clr_txint (int32 dup)$/;"	f	file:
dup_corruption	PDP10/ks10_dup.c	/^static int32 dup_corruption[NUM_DEVS_DUP];              \/* data corrupting troll hunger value *\/$/;"	v	file:
dup_csr_to_linenum	PDP10/ks10_dup.c	/^int32 dup_csr_to_linenum (int32 CSRPA)$/;"	f
dup_debug	PDP10/ks10_dup.c	/^static DEBTAB dup_debug[] = {$/;"	v	file:
dup_desc	PDP10/ks10_dup.c	/^static TMXR dup_desc = { NUM_DEVS_DUP, 0, 0, NULL };           \/* mux descriptor *\/$/;"	v	file:
dup_description	PDP10/ks10_dup.c	/^static const char *dup_description (DEVICE *dptr)$/;"	f	file:
dup_detach	PDP10/ks10_dup.c	/^static t_stat dup_detach (UNIT *uptr)$/;"	f	file:
dup_dev	PDP10/ks10_dup.c	/^DEVICE dup_dev = {$/;"	v
dup_dib	PDP10/ks10_dup.c	/^DIB dup_dib = { 0760300, 017, 0570, 5, 3, &dup_rd, &dup_wr, 0, 0, 0};$/;"	v
dup_get_CTS	PDP10/ks10_dup.c	/^int32 dup_get_CTS (int32 dup)$/;"	f
dup_get_DCD	PDP10/ks10_dup.c	/^int32 dup_get_DCD (int32 dup)$/;"	f
dup_get_DSR	PDP10/ks10_dup.c	/^int32 dup_get_DSR (int32 dup)$/;"	f
dup_get_RCVEN	PDP10/ks10_dup.c	/^int32 dup_get_RCVEN (int32 dup)$/;"	f
dup_get_RING	PDP10/ks10_dup.c	/^int32 dup_get_RING (int32 dup)$/;"	f
dup_get_modem	PDP10/ks10_dup.c	/^static t_stat dup_get_modem (int32 dup)$/;"	f	file:
dup_get_packet	PDP10/ks10_dup.c	/^t_stat dup_get_packet (int32 dup, const uint8 **pbuf, uint16 *psize)$/;"	f
dup_help	PDP10/ks10_dup.c	/^static t_stat dup_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f	file:
dup_help_attach	PDP10/ks10_dup.c	/^static t_stat dup_help_attach (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f	file:
dup_ldsc	PDP10/ks10_dup.c	/^static TMLN *dup_ldsc = NULL;                                  \/* line descriptors *\/$/;"	v	file:
dup_mod	PDP10/ks10_dup.c	/^static MTAB dup_mod[] = {$/;"	v	file:
dup_modem_change_callback	PDP10/ks10_dup.c	/^static MODEM_CHANGE_CALLBACK dup_modem_change_callback[NUM_DEVS_DUP];$/;"	v	file:
dup_parcsr	PDP10/ks10_dup.c	/^static uint16 dup_parcsr[NUM_DEVS_DUP];$/;"	v	file:
dup_parcsr_bits	PDP10/ks10_dup.c	/^static BITFIELD dup_parcsr_bits[] = {$/;"	v	file:
dup_poll_svc	PDP10/ks10_dup.c	/^static t_stat dup_poll_svc (UNIT *uptr)$/;"	f	file:
dup_poll_unit_template	PDP10/ks10_dup.c	/^static UNIT dup_poll_unit_template = {$/;"	v	file:
dup_put_msg_bytes	PDP10/ks10_dup.c	/^t_bool dup_put_msg_bytes (int32 dup, uint8 *bytes, size_t len, t_bool start, t_bool end)$/;"	f
dup_rcv_byte	PDP10/ks10_dup.c	/^static t_stat dup_rcv_byte (int32 dup)$/;"	f	file:
dup_rcv_packet_data_callback	PDP10/ks10_dup.c	/^static PACKET_DATA_AVAILABLE_CALLBACK dup_rcv_packet_data_callback[NUM_DEVS_DUP];$/;"	v	file:
dup_rcvpacket	PDP10/ks10_dup.c	/^static uint8 *dup_rcvpacket[NUM_DEVS_DUP];              \/* rcv buffer *\/$/;"	v	file:
dup_rcvpkbytes	PDP10/ks10_dup.c	/^static uint16 dup_rcvpkbytes[NUM_DEVS_DUP];             \/* rcv buffer size of packet *\/$/;"	v	file:
dup_rcvpkinoff	PDP10/ks10_dup.c	/^static uint16 dup_rcvpkinoff[NUM_DEVS_DUP];             \/* rcv packet in offset *\/$/;"	v	file:
dup_rcvpksize	PDP10/ks10_dup.c	/^static uint16 dup_rcvpksize[NUM_DEVS_DUP];              \/* rcv buffer size *\/$/;"	v	file:
dup_rd	PDP10/ks10_dup.c	/^static int dup_rd (DEVICE *dptr, t_addr PA, uint16 *data, int32 access)$/;"	f	file:
dup_rd_regs	PDP10/ks10_dup.c	/^static const char *dup_rd_regs[] =$/;"	v	file:
dup_reg	PDP10/ks10_dup.c	/^static REG dup_reg[] = {$/;"	v	file:
dup_reset	PDP10/ks10_dup.c	/^static t_stat dup_reset (DEVICE *dptr)$/;"	f	file:
dup_reset_dup	PDP10/ks10_dup.c	/^t_stat dup_reset_dup (int32 dup)$/;"	f
dup_rxcsr	PDP10/ks10_dup.c	/^static uint16 dup_rxcsr[NUM_DEVS_DUP];$/;"	v	file:
dup_rxcsr_bits	PDP10/ks10_dup.c	/^static BITFIELD dup_rxcsr_bits[] = {$/;"	v	file:
dup_rxdbuf	PDP10/ks10_dup.c	/^static uint16 dup_rxdbuf[NUM_DEVS_DUP];$/;"	v	file:
dup_rxdbuf_bits	PDP10/ks10_dup.c	/^static BITFIELD dup_rxdbuf_bits[] = {$/;"	v	file:
dup_rxi	PDP10/ks10_dup.c	/^static uint32 dup_rxi = 0;                              \/* rcv interrupts *\/$/;"	v	file:
dup_set_DTR	PDP10/ks10_dup.c	/^t_stat dup_set_DTR (int32 dup, t_bool state)$/;"	f
dup_set_RCVEN	PDP10/ks10_dup.c	/^t_stat dup_set_RCVEN (int32 dup, t_bool state)$/;"	f
dup_set_RTS	PDP10/ks10_dup.c	/^t_stat dup_set_RTS (int32 dup, t_bool state)$/;"	f
dup_set_W3	PDP10/ks10_dup.c	/^static t_stat dup_set_W3 (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f	file:
dup_set_W3_option	PDP10/ks10_dup.c	/^t_stat dup_set_W3_option (int32 dup, t_bool state)$/;"	f
dup_set_W5	PDP10/ks10_dup.c	/^static t_stat dup_set_W5 (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f	file:
dup_set_W5_option	PDP10/ks10_dup.c	/^t_stat dup_set_W5_option (int32 dup, t_bool state)$/;"	f
dup_set_W6	PDP10/ks10_dup.c	/^static t_stat dup_set_W6 (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f	file:
dup_set_W6_option	PDP10/ks10_dup.c	/^t_stat dup_set_W6_option (int32 dup, t_bool state)$/;"	f
dup_set_callback_mode	PDP10/ks10_dup.c	/^void dup_set_callback_mode (int32 dup, PACKET_DATA_AVAILABLE_CALLBACK receive, PACKET_TRANSMIT_COMPLETE_CALLBACK transmit, MODEM_CHANGE_CALLBACK modem)$/;"	f
dup_set_modem	PDP10/ks10_dup.c	/^static t_stat dup_set_modem (int32 dup, int32 rxcsr_bits)$/;"	f	file:
dup_set_rxint	PDP10/ks10_dup.c	/^static void dup_set_rxint (int32 dup)$/;"	f	file:
dup_set_txint	PDP10/ks10_dup.c	/^static void dup_set_txint (int32 dup)$/;"	f	file:
dup_setcorrupt	PDP10/ks10_dup.c	/^static t_stat dup_setcorrupt (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f	file:
dup_setnl	PDP10/ks10_dup.c	/^static t_stat dup_setnl (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f	file:
dup_setspeed	PDP10/ks10_dup.c	/^static t_stat dup_setspeed (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f	file:
dup_setup_dup	PDP10/ks10_dup.c	/^t_stat dup_setup_dup (int32 dup, t_bool enable, t_bool protocol_DDCMP, t_bool crc_inhibit, t_bool halfduplex, uint8 station)$/;"	f
dup_show_W3	PDP10/ks10_dup.c	/^static t_stat dup_show_W3 (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f	file:
dup_show_W5	PDP10/ks10_dup.c	/^static t_stat dup_show_W5 (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f	file:
dup_show_W6	PDP10/ks10_dup.c	/^static t_stat dup_show_W6 (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f	file:
dup_showcorrupt	PDP10/ks10_dup.c	/^static t_stat dup_showcorrupt (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f	file:
dup_showspeed	PDP10/ks10_dup.c	/^static t_stat dup_showspeed (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f	file:
dup_speed	PDP10/ks10_dup.c	/^static uint32 dup_speed[NUM_DEVS_DUP];                  \/* line speed (bits\/sec) *\/$/;"	v	file:
dup_svc	PDP10/ks10_dup.c	/^static t_stat dup_svc (UNIT *uptr)$/;"	f	file:
dup_txcsr	PDP10/ks10_dup.c	/^static uint16 dup_txcsr[NUM_DEVS_DUP];$/;"	v	file:
dup_txcsr_bits	PDP10/ks10_dup.c	/^static BITFIELD dup_txcsr_bits[] = {$/;"	v	file:
dup_txdbuf	PDP10/ks10_dup.c	/^static uint16 dup_txdbuf[NUM_DEVS_DUP];$/;"	v	file:
dup_txdbuf_bits	PDP10/ks10_dup.c	/^static BITFIELD dup_txdbuf_bits[] = {$/;"	v	file:
dup_txi	PDP10/ks10_dup.c	/^static uint32 dup_txi = 0;                              \/* xmt interrupts *\/$/;"	v	file:
dup_unit_template	PDP10/ks10_dup.c	/^static UNIT dup_unit_template = {$/;"	v	file:
dup_units	PDP10/ks10_dup.c	/^static UNIT dup_units[NUM_DEVS_DUP+1];    \/* One unit per line and a polling unit *\/$/;"	v	file:
dup_wait	PDP10/ks10_dup.c	/^static uint32 dup_wait[NUM_DEVS_DUP];                   \/* rcv\/xmt byte delay *\/$/;"	v	file:
dup_wr	PDP10/ks10_dup.c	/^static int dup_wr (DEVICE *dptr, t_addr PA, uint16 data, int32 access)$/;"	f	file:
dup_wr_regs	PDP10/ks10_dup.c	/^static const char *dup_wr_regs[] =$/;"	v	file:
dup_xmt_complete_callback	PDP10/ks10_dup.c	/^static PACKET_TRANSMIT_COMPLETE_CALLBACK dup_xmt_complete_callback[NUM_DEVS_DUP];$/;"	v	file:
dup_xmtpacket	PDP10/ks10_dup.c	/^static uint8 *dup_xmtpacket[NUM_DEVS_DUP];              \/* xmt buffer *\/$/;"	v	file:
dup_xmtpkbytes	PDP10/ks10_dup.c	/^static uint16 dup_xmtpkbytes[NUM_DEVS_DUP];             \/* xmt packet size of packet *\/$/;"	v	file:
dup_xmtpkdelaying	PDP10/ks10_dup.c	/^static uint16 dup_xmtpkdelaying[NUM_DEVS_DUP];          \/* xmt packet speed delaying completion *\/$/;"	v	file:
dup_xmtpkoffset	PDP10/ks10_dup.c	/^static uint16 dup_xmtpkoffset[NUM_DEVS_DUP];            \/* xmt buffer offset *\/$/;"	v	file:
dup_xmtpksize	PDP10/ks10_dup.c	/^static uint16 dup_xmtpksize[NUM_DEVS_DUP];              \/* xmt buffer size *\/$/;"	v	file:
dup_xmtpkstart	PDP10/ks10_dup.c	/^static uint32 dup_xmtpkstart[NUM_DEVS_DUP];             \/* xmt packet start time *\/$/;"	v	file:
dupcsr	PDP10/ks10_kmc.c	/^    uint32 dupcsr;$/;"	m	struct:dupstate	file:
dupidx	PDP10/ks10_kmc.c	/^    int32  dupidx;                              \/* DUP API Number amongst all DUP11's on Unibus (-1 == unassigned) *\/$/;"	m	struct:dupstate	file:
dupstate	PDP10/ks10_kmc.c	/^struct dupstate {$/;"	s	file:
dupstate	PDP10/ks10_kmc.c	/^typedef struct dupstate dupstate;$/;"	t	typeref:struct:dupstate	file:
dwEvtMask	sim_serial.c	/^    DWORD dwEvtMask;$/;"	m	struct:SERPORT	file:
dwProcessId	sim_frontpanel.c	/^    DWORD                   dwProcessId;$/;"	m	struct:PANEL	file:
dwidth	sim_defs.h	/^    uint32              dwidth;                         \/* data width *\/$/;"	m	struct:DEVICE
dynflags	sim_defs.h	/^    uint32              dynflags;                       \/* dynamic flags *\/$/;"	m	struct:UNIT
dz_attach	PDP10/ks10_dz.c	/^dz_attach (UNIT *uptr, CONST char *cptr)$/;"	f
dz_checkirq	PDP10/ks10_dz.c	/^dz_checkirq(struct pdp_dib   *dibp)$/;"	f
dz_csr	PDP10/ks10_dz.c	/^uint16         dz_csr[NUM_DEVS_DZ];$/;"	v
dz_desc	PDP10/ks10_dz.c	/^TMXR           dz_desc = { DZ11_LINES, 0, 0, dz_ldsc };$/;"	v
dz_description	PDP10/ks10_dz.c	/^const char *dz_description (DEVICE *dptr)$/;"	f
dz_detach	PDP10/ks10_dz.c	/^dz_detach (UNIT *uptr)$/;"	f
dz_dev	PDP10/ks10_dz.c	/^DEVICE dz_dev = {$/;"	v
dz_dib	PDP10/ks10_dz.c	/^DIB dz_dib = { 0760000, 077, 0340, 5, 3, &dz_read, &dz_write, 0, 0, 0 };$/;"	v
dz_flags	PDP10/ks10_dz.c	/^uint8          dz_flags[DZ11_LINES];$/;"	v
dz_help	PDP10/ks10_dz.c	/^t_stat dz_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
dz_ldsc	PDP10/ks10_dz.c	/^TMLN           dz_ldsc[DZ11_LINES] = { 0 };     \/* Line descriptors *\/$/;"	v
dz_mod	PDP10/ks10_dz.c	/^MTAB dz_mod[] = {$/;"	v
dz_read	PDP10/ks10_dz.c	/^dz_read(DEVICE *dptr, t_addr addr, uint16 *data, int32 access)$/;"	f
dz_recv	PDP10/ks10_dz.c	/^struct _buffer dz_recv[NUM_DEVS_DZ];$/;"	v	typeref:struct:_buffer
dz_reg	PDP10/ks10_dz.c	/^REG dz_reg[] = {$/;"	v
dz_reset	PDP10/ks10_dz.c	/^dz_reset (DEVICE *dptr)$/;"	f
dz_ring	PDP10/ks10_dz.c	/^uint8          dz_ring[NUM_DEVS_DZ];$/;"	v
dz_set_log	PDP10/ks10_dz.c	/^dz_set_log (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dz_set_nolog	PDP10/ks10_dz.c	/^dz_set_nolog (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dz_setnl	PDP10/ks10_dz.c	/^dz_setnl (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
dz_show_log	PDP10/ks10_dz.c	/^t_stat dz_show_log (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
dz_svc	PDP10/ks10_dz.c	/^t_stat dz_svc (UNIT *uptr)$/;"	f
dz_unit	PDP10/ks10_dz.c	/^UNIT dz_unit = {$/;"	v
dz_write	PDP10/ks10_dz.c	/^dz_write(DEVICE *dptr, t_addr addr, uint16 data, int32 access)$/;"	f
dz_xmit	PDP10/ks10_dz.c	/^uint16         dz_xmit[DZ11_LINES];$/;"	v
e_tlb	PDP10/kx10_cpu.c	/^uint32  e_tlb[512];                           \/* Executive TLB *\/$/;"	v
ea	PDP10/kx10_cpu.c	/^    uint32      ea;$/;"	m	struct:__anon1	file:
eb_ptr	PDP10/kx10_cpu.c	/^t_addr  eb_ptr;                               \/* Executive base pointer *\/$/;"	v
ebcdic_to_hol	sim_card.c	/^static uint16 ebcdic_to_hol[256] = {$/;"	v	file:
ebuf	PDP10/kl10_nia.c	/^    uint64            ebuf;$/;"	m	struct:nia_device	file:
echo_cmd	scp.c	/^t_stat echo_cmd (int32 flag, CONST char *cptr)$/;"	f
echof_cmd	scp.c	/^t_stat echof_cmd (int32 flag, CONST char *cptr)$/;"	f
edge_flag	display/vt11.c	/^static unsigned char edge_flag = 0;     \/* 1 bit: edge intr if enabled (VS60) *\/$/;"	v	file:
edge_indic	display/vt11.c	/^static unsigned char edge_indic = 0;    \/* 1 bit: crossing visible area edge *\/$/;"	v	file:
edge_intr_ena	display/vt11.c	482;"	d	file:
edge_irq	display/vt11.c	/^static unsigned char edge_irq = 0;      \/* intr. on edge transition *\/$/;"	v	file:
edge_xpos	display/vt11.c	/^static int           edge_xpos;         \/* (normalized) *\/$/;"	v	file:
edge_ypos	display/vt11.c	/^static int           edge_ypos;         \/* (normalized) *\/$/;"	v	file:
edge_zpos	display/vt11.c	/^static int32 edge_zpos;                 \/* (scaled) *\/$/;"	v	file:
elapsed	display/carbon.c	/^elapsed(struct elapsed_state *ep)$/;"	f	file:
elapsed	display/x11.c	/^elapsed(struct elapsed_state *ep)$/;"	f	file:
elapsed	sim_timer.c	/^    uint32 elapsed;                 \/* seconds since init *\/$/;"	m	struct:RTC	file:
elapsed_state	display/carbon.c	/^struct elapsed_state {$/;"	s	file:
elapsed_state	display/x11.c	/^struct elapsed_state {$/;"	s	file:
ele_size	sim_defs.h	/^    size_t              ele_size;                       \/* sizeof(**loc) or sizeof(*loc) if depth == 1 *\/$/;"	m	struct:REG
element_count	sim_frontpanel.c	/^    size_t element_count;$/;"	m	struct:__anon22	file:
elements	scp.c	/^    Stack_Element *elements;$/;"	m	struct:Stack	file:
empty	PDP10/kl10_dn.c	235;"	d	file:
empty	PDP10/kl10_fe.c	260;"	d	file:
empty	PDP10/ks10_dz.c	93;"	d	file:
emu	slirp/misc.h	/^    uint8_t emu;$/;"	m	struct:emu_t
emu	slirp/misc.h	/^    uint8_t emu;$/;"	m	struct:tos_t
emu_t	slirp/misc.h	/^struct emu_t {$/;"	s
end_char	scp.c	/^    char end_char;$/;"	m	struct:function_test_data	file:
entry	slirp/slirp.h	/^    QTAILQ_ENTRY(Slirp) entry;$/;"	m	struct:Slirp
eom_remnant	sim_tape.c	/^    t_addr              eom_remnant;                    \/* potentially unprocessed data *\/$/;"	m	struct:sim_tape_fmt	file:
errno	slirp/slirp.h	362;"	d
errno	slirp/slirp.h	363;"	d
error	PDP10/ka10_auxcpu.c	/^static int error (const char *message)$/;"	f	file:
error	PDP10/ka10_ten11.c	/^static int error (const char *message)$/;"	f	file:
error	PDP10/kx10_defs.h	/^      uint16         error;      \/* Controller Error register *\/$/;"	m	struct:rh_if
error	PDP10/pdp6_slave.c	/^static int error (const char *message)$/;"	f	file:
error	scp.c	/^    const char *error;$/;"	m	struct:__anon8	file:
error_needs_reset	sim_ether.h	/^  ETH_BOOL      error_needs_reset;                      \/* Flag indicating to force reset *\/$/;"	m	struct:eth_device
error_reopen_count	sim_ether.h	/^  uint32        error_reopen_count;                     \/* Count of ReOpen Attempts *\/$/;"	m	struct:eth_device
error_report	slirp_glue/config-host.h	54;"	d
error_waiting_threads	sim_ether.h	/^  int32         error_waiting_threads;                  \/* Count of threads currently waiting after an error *\/$/;"	m	struct:eth_device
escpinsfy	display/tst340.c	/^escpinsfy(int word)$/;"	f	file:
eth	sim_tmxr.c	/^    ETH_DEV *eth;                   \/* Ethernet device pointer if framer *\/$/;"	m	struct:framer_data	file:
eth_add_packet_crc32	sim_ether.c	/^int eth_add_packet_crc32(uint8 *msg, int len)$/;"	f
eth_api	sim_ether.h	/^  int           eth_api;                                \/* Designator for which API is being used to move packets *\/$/;"	m	struct:eth_device
eth_api	sim_ether.h	/^  int     eth_api;$/;"	m	struct:eth_list
eth_attach_help	sim_ether.c	/^t_stat eth_attach_help(FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
eth_bpf_filter	sim_ether.c	/^t_stat eth_bpf_filter (ETH_DEV* dev, int addr_count, ETH_MAC* const filter_address,$/;"	f
eth_capabilities	sim_ether.c	/^const char *eth_capabilities(void)$/;"	f
eth_check_address_conflict	sim_ether.c	/^t_stat eth_check_address_conflict (ETH_DEV* dev, $/;"	f
eth_check_address_conflict_ex	sim_ether.c	/^t_stat eth_check_address_conflict_ex (ETH_DEV* dev, $/;"	f
eth_close	sim_ether.c	/^t_stat eth_close (ETH_DEV* dev)$/;"	f
eth_close	sim_ether.c	/^t_stat eth_close(ETH_DEV* dev)$/;"	f
eth_clr_async	sim_ether.c	/^t_stat eth_clr_async (ETH_DEV *dev)$/;"	f
eth_crc32	sim_ether.c	/^uint32 eth_crc32(uint32 crc, const void* vbuf, size_t len)$/;"	f
eth_device	sim_ether.h	/^struct eth_device {$/;"	s
eth_devices	sim_ether.c	/^int eth_devices(int max, ETH_LIST* list, ETH_BOOL framers)$/;"	f
eth_filter	sim_ether.c	/^t_stat eth_filter (ETH_DEV* dev, int addr_count, ETH_MAC* const addresses,$/;"	f
eth_filter	sim_ether.c	/^t_stat eth_filter(ETH_DEV* dev, int addr_count, ETH_MAC* const addresses,$/;"	f
eth_filter_hash	sim_ether.c	/^t_stat eth_filter_hash (ETH_DEV* dev, int addr_count, ETH_MAC* const addresses,$/;"	f
eth_filter_hash	sim_ether.c	/^t_stat eth_filter_hash(ETH_DEV* dev, int addr_count, ETH_MAC* const addresses,$/;"	f
eth_filter_hash_ex	sim_ether.c	/^t_stat eth_filter_hash_ex(ETH_DEV* dev, int addr_count, ETH_MAC* const addresses,$/;"	f
eth_get_nic_hw_addr	sim_ether.c	/^static void eth_get_nic_hw_addr(ETH_DEV* dev, const char *devname, int set_on)$/;"	f	file:
eth_get_packet_crc32_data	sim_ether.c	/^int eth_get_packet_crc32_data(const uint8 *msg, int len, uint8 *crcdata)$/;"	f
eth_getdesc_byname	sim_ether.c	/^char* eth_getdesc_byname(char* name, char* temp)$/;"	f
eth_getname_bydesc	sim_ether.c	/^const char* eth_getname_bydesc(const char* desc, char* name, char *ndesc)$/;"	f
eth_getname_byname	sim_ether.c	/^char* eth_getname_byname(const char* name, char* temp, char *desc)$/;"	f
eth_host_pcap_devices	sim_ether.c	/^static int eth_host_pcap_devices(int used, int max, ETH_LIST* list)$/;"	f	file:
eth_item	sim_ether.h	/^struct eth_item {$/;"	s
eth_list	sim_ether.h	/^struct eth_list {$/;"	s
eth_mac_fmt	sim_ether.c	/^void eth_mac_fmt(ETH_MAC* const mac, char* buff)$/;"	f
eth_mac_scan	sim_ether.c	/^t_stat eth_mac_scan (ETH_MAC* mac, const char* strmac)$/;"	f
eth_mac_scan_ex	sim_ether.c	/^t_stat eth_mac_scan_ex (ETH_MAC* mac, const char* strmac, UNIT *uptr)$/;"	f
eth_open	sim_ether.c	/^t_stat eth_open(ETH_DEV* dev, const char* name, DEVICE* dptr, uint32 dbit)$/;"	f
eth_open_device_count	sim_ether.c	/^static int eth_open_device_count = 0;$/;"	v	file:
eth_open_devices	sim_ether.c	/^static ETH_DEV **eth_open_devices = NULL;$/;"	v	file:
eth_packet	sim_ether.h	/^struct eth_packet {$/;"	s
eth_packet_trace	sim_ether.c	/^void eth_packet_trace(ETH_DEV* dev, const uint8 *msg, int len, const char* txt)$/;"	f
eth_packet_trace_detail	sim_ether.c	/^void eth_packet_trace_detail(ETH_DEV* dev, const uint8 *msg, int len, const char* txt)$/;"	f
eth_packet_trace_ex	sim_ether.c	/^void eth_packet_trace_ex(ETH_DEV* dev, const uint8 *msg, int len, const char* txt, int detail, uint32 reason)$/;"	f
eth_queue	sim_ether.h	/^struct eth_queue {$/;"	s
eth_read	sim_ether.c	/^int eth_read (ETH_DEV* dev, ETH_PACK* packet, ETH_PCALLBACK routine)$/;"	f
eth_read	sim_ether.c	/^int eth_read(ETH_DEV* dev, ETH_PACK* packet, ETH_PCALLBACK routine)$/;"	f
eth_reflect	sim_ether.c	/^t_stat eth_reflect(ETH_DEV* dev)$/;"	f
eth_set_async	sim_ether.c	/^t_stat eth_set_async (ETH_DEV *dev, int latency)$/;"	f
eth_set_throttle	sim_ether.c	/^t_stat eth_set_throttle (ETH_DEV* dev, uint32 time, uint32 burst, uint32 delay)$/;"	f
eth_setcrc	sim_ether.c	/^void eth_setcrc(ETH_DEV* dev, int need_crc)$/;"	f
eth_show	sim_ether.c	/^t_stat eth_show (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f
eth_show_dev	sim_ether.c	/^void eth_show_dev (FILE *st, ETH_DEV* dev)$/;"	f
eth_show_dev	sim_ether.c	/^void eth_show_dev (FILE* st, ETH_DEV* dev)$/;"	f
eth_show_devices	sim_ether.c	/^t_stat eth_show_devices (FILE* st, DEVICE *dptr, UNIT* uptr, int32 val, CONST char *desc)$/;"	f
eth_test_bpf	sim_ether.c	/^t_stat eth_test_bpf (DEVICE *dptr)$/;"	f	file:
eth_test_crc32	sim_ether.c	/^t_stat eth_test_crc32 (DEVICE *dptr)$/;"	f	file:
eth_version	sim_ether.c	/^const char *eth_version (void)$/;"	f
eth_write	sim_ether.c	/^t_stat eth_write (ETH_DEV* dev, ETH_PACK* packet, ETH_PCALLBACK routine)$/;"	f
eth_write	sim_ether.c	/^t_stat eth_write(ETH_DEV* dev, ETH_PACK* packet, ETH_PCALLBACK routine)$/;"	f
eth_write_request	sim_ether.h	/^struct eth_write_request {$/;"	s
eth_zero	sim_ether.c	/^void eth_zero(ETH_DEV* dev)$/;"	f
ethaddr	PDP10/kx10_imp.c	/^    ETH_MAC    ethaddr;$/;"	m	struct:arp_entry	file:
etherface	PDP10/kl10_nia.c	/^    ETH_DEV           etherface;$/;"	m	struct:nia_device	file:
etherface	PDP10/kx10_imp.c	/^    ETH_DEV           etherface;$/;"	m	struct:imp_device	file:
ethhdr	PDP10/kl10_nia.c	/^    struct nia_eth_hdr  ethhdr;$/;"	m	struct:arp_hdr	typeref:struct:arp_hdr::nia_eth_hdr	file:
ethhdr	PDP10/kl10_nia.c	/^    struct nia_eth_hdr  ethhdr;$/;"	m	struct:ip_hdr	typeref:struct:ip_hdr::nia_eth_hdr	file:
ethhdr	PDP10/kx10_imp.c	/^    struct imp_eth_hdr  ethhdr;$/;"	m	struct:arp_hdr	typeref:struct:arp_hdr::imp_eth_hdr	file:
ethhdr	PDP10/kx10_imp.c	/^    struct imp_eth_hdr  ethhdr;$/;"	m	struct:ip_hdr	typeref:struct:ip_hdr::imp_eth_hdr	file:
ethhdr	slirp/slirp.h	/^struct ethhdr {$/;"	s
ethq_clear	sim_ether.c	/^void ethq_clear(ETH_QUE* que)$/;"	f
ethq_destroy	sim_ether.c	/^t_stat ethq_destroy(ETH_QUE* que)$/;"	f
ethq_init	sim_ether.c	/^t_stat ethq_init(ETH_QUE* que, int max)$/;"	f
ethq_insert	sim_ether.c	/^void ethq_insert(ETH_QUE* que, int32 type, ETH_PACK* pack, int32 status)$/;"	f
ethq_insert_data	sim_ether.c	/^void ethq_insert_data(ETH_QUE* que, int32 type, const uint8 *data, int used, size_t len, size_t crc_len, const uint8 *crc_data, int32 status)$/;"	f
ethq_remove	sim_ether.c	/^void ethq_remove(ETH_QUE* que)$/;"	f
eval_cmd	scp.c	/^t_stat eval_cmd (int32 flg, CONST char *cptr)$/;"	f
events	sim_video.c	/^    SIM_KEY_EVENT events[MAX_EVENTS];$/;"	m	struct:__anon33	file:
events	sim_video.c	/^    SIM_MOUSE_EVENT events[MAX_EVENTS];$/;"	m	struct:__anon34	file:
events	slirp_glue/glib.h	/^  gushort   events;$/;"	m	struct:GPollFD
ex_addr	scp.c	/^t_stat ex_addr (FILE *ofile, int32 flag, t_addr addr, DEVICE *dptr, UNIT *uptr)$/;"	f
ex_addr	slirp/misc.h	/^        struct in_addr ex_addr;         \/* Server address *\/$/;"	m	struct:ex_list	typeref:struct:ex_list::in_addr
ex_exec	slirp/misc.h	/^        const char *ex_exec;            \/* Command line of what to exec *\/$/;"	m	struct:ex_list
ex_fport	slirp/misc.h	/^        int ex_fport;                   \/* Port to telnet to *\/$/;"	m	struct:ex_list
ex_list	slirp/misc.h	/^struct ex_list {$/;"	s
ex_next	slirp/misc.h	/^        struct ex_list *ex_next;$/;"	m	struct:ex_list	typeref:struct:ex_list::ex_list
ex_pty	slirp/misc.h	/^        int ex_pty;                     \/* Do we want a pty? *\/$/;"	m	struct:ex_list
ex_reg	scp.c	/^t_stat ex_reg (FILE *ofile, t_value val, int32 flag, REG *rptr, uint32 idx)$/;"	f
ex_uuo_sync	PDP10/kx10_cpu.c	/^int     ex_uuo_sync;                          \/* Execute a UUO op *\/$/;"	v
examine	sim_defs.h	/^    t_stat              (*examine)(t_value *v, t_addr a, UNIT *up,$/;"	m	struct:DEVICE
exb_pos	PDP10/kx10_sys.c	/^static int     exb_pos = -1;$/;"	v	file:
exdep_addr_loop	scp.c	/^t_stat exdep_addr_loop (FILE *ofile, SCHTAB *schptr, int32 flag, const char *cptr,$/;"	f
exdep_cmd	scp.c	/^t_stat exdep_cmd (int32 flag, CONST char *cptr)$/;"	f
exdep_reg_loop	scp.c	/^t_stat exdep_reg_loop (FILE *ofile, SCHTAB *schptr, int32 flag, CONST char *cptr,$/;"	f
exec_list	slirp/slirp.h	/^    struct ex_list *exec_list;$/;"	m	struct:Slirp	typeref:struct:Slirp::ex_list
exec_map	PDP10/kx10_cpu.c	/^int     exec_map;                             \/* Enable executive mapping *\/$/;"	v
exec_page_lookup	PDP10/kx10_cpu.c	/^int exec_page_lookup(t_addr addr, int wr, t_addr *loc)$/;"	f
exit_cmd	scp.c	/^t_stat exit_cmd (int32 flag, CONST char *cptr)$/;"	f
expect	sim_tmxr.h	/^    EXPECT              expect;                         \/* Expect rules *\/$/;"	m	struct:tmln
expect_cmd	scp.c	/^t_stat expect_cmd (int32 flag, CONST char *cptr)$/;"	f
expect_svc	scp.c	/^t_stat expect_svc (UNIT *uptr)$/;"	f
expected_crlf_lines	sim_tape.c	/^    t_bool expected_crlf_lines;$/;"	m	struct:classify_test	file:
expected_lf_lines	sim_tape.c	/^    t_bool expected_lf_lines;$/;"	m	struct:classify_test	file:
expected_mrs	sim_tape.c	/^    size_t expected_mrs;$/;"	m	struct:classify_test	file:
expected_orderlist	sim_tmxr.c	/^    int32 expected_orderlist[8];$/;"	m	struct:lnorder_test	file:
expected_remainder	scp.c	/^    const char *expected_remainder;$/;"	m	struct:function_test_data	file:
expected_result	scp.c	/^    const char *expected_result;$/;"	m	struct:function_test_data	file:
expected_result	scp.c	/^    t_stat expected_result;$/;"	m	struct:validation_test	file:
expected_size	sim_BuildROMs.c	/^    const char *BinaryName;             const char *IncludeFileName; size_t expected_size; unsigned int checksum;  const char *ArrayName;            const char *Comments;} ROMs[] = {$/;"	m	struct:ROM_File_Descriptor	file:
expected_stat	sim_tmxr.c	/^    t_stat expected_stat;$/;"	m	struct:lnorder_test	file:
expiration_date	sim_tape.c	/^    char expiration_date[6];$/;"	m	struct:HDR1	file:
expiration_date	slirp/mbuf.h	/^        uint64_t expiration_date;$/;"	m	struct:mbuf
ext	sim_tape.c	/^    uint16 ext;             \/* Extension (RAD50 - 3 characters) *\/$/;"	m	struct:DOS11_HDR	file:
ext_ac	PDP10/kx10_cpu.c	/^int     ext_ac;                               \/* Extended instruction AC *\/$/;"	v
ext_stop	display/vt11.c	/^static unsigned char ext_stop = 0;      \/* 1 bit: stop display *\/$/;"	v	file:
extend	PDP10/kx10_cpu.c	/^int     extend = 0;                           \/* Process extended instruction *\/$/;"	v
extoff	sim_defs.h	/^    int32               extoff;                         \/* extra offset *\/$/;"	m	struct:SEND
extra	slirp/socket.h	/^  void * extra;                 \/* Extra pointer *\/$/;"	m	struct:socket
extra_name	sim_tape.c	/^    char extra_name[62];        \/*  *\/$/;"	m	struct:HDR4	file:
extra_name_used	sim_tape.c	/^    char extra_name_used[2];    \/* 99 *\/$/;"	m	struct:HDR4	file:
f	slirp/tftp.h	/^    FILE *f;$/;"	m	struct:tftp_session
fade	PDP10/kx10_dpy.c	/^static uint32 fade[512 * 512];$/;"	v	file:
fail	PDP10/kx10_imp.c	/^    int               fail;                    \/* transmit failed *\/$/;"	m	struct:imp_stats	file:
fail_attach_args	sim_tape.c	/^    const char *fail_attach_args;$/;"	m	struct:classify_test	file:
false	slirp_glue/qemu/win32/stdbool.h	5;"	d
fault_addr	PDP10/kx10_cpu.c	/^uint32  fault_addr;                           \/* Fault address *\/$/;"	v
fault_data	PDP10/kx10_cpu.c	/^uint64  fault_data;                           \/* Fault data from last fault *\/$/;"	v
fc	sim_tape.c	/^    uint32              *fc;$/;"	m	struct:tape_context	file:
fd	slirp_glue/glib.h	/^  SOCKET        fd;$/;"	m	struct:GPollFD
fd_handle	sim_ether.h	/^  SOCKET        fd_handle;                              \/* fd to kernel device (where needed) *\/$/;"	m	struct:eth_device
fe_xct	PDP10/kx10_cpu.c	/^int     fe_xct = 0;                           \/* Execute instruction at address *\/$/;"	v
fetch	display/ng.c	/^static int fetch (int a, uint16 *x)$/;"	f	file:
fh1_b_fill_1	sim_disk.c	/^    uint8   fh1_b_fill_1[494];$/;"	m	struct:_ODS1_FileHeader	file:
fh1_b_idoffset	sim_disk.c	/^    uint8   fh1_b_idoffset;$/;"	m	struct:_ODS1_FileHeader	file:
fh1_b_mpoffset	sim_disk.c	/^    uint8   fh1_b_mpoffset;$/;"	m	struct:_ODS1_FileHeader	file:
fh1_w_checksum	sim_disk.c	/^    uint16  fh1_w_checksum;$/;"	m	struct:_ODS1_FileHeader	file:
fh1_w_fid_num	sim_disk.c	/^    uint16  fh1_w_fid_num;$/;"	m	struct:_ODS1_FileHeader	file:
fh1_w_fid_seq	sim_disk.c	/^    uint16  fh1_w_fid_seq;$/;"	m	struct:_ODS1_FileHeader	file:
fh1_w_filechar	sim_disk.c	/^    uint16  fh1_w_filechar;$/;"	m	struct:_ODS1_FileHeader	file:
fh1_w_fileowner	sim_disk.c	/^    uint16  fh1_w_fileowner;$/;"	m	struct:_ODS1_FileHeader	file:
fh1_w_fileprot	sim_disk.c	/^    uint16  fh1_w_fileprot;$/;"	m	struct:_ODS1_FileHeader	file:
fh1_w_recattr	sim_disk.c	/^    uint16  fh1_w_recattr;$/;"	m	struct:_ODS1_FileHeader	file:
fh1_w_struclev	sim_disk.c	/^    uint16  fh1_w_struclev;$/;"	m	struct:_ODS1_FileHeader	file:
fh2_b_acoffset	sim_disk.c	/^    uint8  fh2_b_acoffset;$/;"	m	struct:_ODS2_FileHeader	file:
fh2_b_idoffset	sim_disk.c	/^    uint8  fh2_b_idoffset;$/;"	m	struct:_ODS2_FileHeader	file:
fh2_b_mpoffset	sim_disk.c	/^    uint8  fh2_b_mpoffset;$/;"	m	struct:_ODS2_FileHeader	file:
fh2_b_rsoffset	sim_disk.c	/^    uint8  fh2_b_rsoffset;$/;"	m	struct:_ODS2_FileHeader	file:
fh2_l_filechar	sim_disk.c	/^    uint32 fh2_l_filechar;$/;"	m	struct:_ODS2_FileHeader	file:
fh2_w_ext_fid	sim_disk.c	/^    uint16 fh2_w_ext_fid[3];$/;"	m	struct:_ODS2_FileHeader	file:
fh2_w_fid	sim_disk.c	/^    uint16 fh2_w_fid[3];$/;"	m	struct:_ODS2_FileHeader	file:
fh2_w_recattr	sim_disk.c	/^    uint16 fh2_w_recattr[16];$/;"	m	struct:_ODS2_FileHeader	file:
fh2_w_remaining	sim_disk.c	/^    uint16 fh2_w_remaining[228];$/;"	m	struct:_ODS2_FileHeader	file:
fh2_w_seg_num	sim_disk.c	/^    uint16 fh2_w_seg_num;$/;"	m	struct:_ODS2_FileHeader	file:
fh2_w_structlev	sim_disk.c	/^    uint16 fh2_w_structlev;$/;"	m	struct:_ODS2_FileHeader	file:
fields	sim_defs.h	/^    BITFIELD            *fields;                        \/* bit fields *\/$/;"	m	struct:REG
file	PDP10/kx10_imp.c	/^    uint8             file[DHCP_FILE_LEN];$/;"	m	struct:dhcp	file:
file	sim_defs.h	/^    FILE                *file;                          \/* file handle *\/$/;"	m	struct:FILEREF
file	sim_imd.h	/^    FILE *file;$/;"	m	struct:__anon26
file_count	sim_tape.c	/^    uint32 file_count;      \/* number of labeled files *\/$/;"	m	struct:MEMORY_TAPE	file:
file_i2c	PDP10/pidp10panel.c	/^int file_i2c;							\/\/ i2c channel$/;"	v
file_ident	sim_tape.c	/^    char file_ident[17];        \/* filename *\/$/;"	m	struct:HDR1	file:
file_section	sim_tape.c	/^    char file_section[4];       \/* 0001 *\/$/;"	m	struct:HDR1	file:
file_sequence	sim_tape.c	/^    char file_sequence[4];      \/* 0001 *\/$/;"	m	struct:HDR1	file:
file_set	sim_tape.c	/^    char file_set[6];           \/* label ident *\/$/;"	m	struct:HDR1	file:
file_z_data	display/vt11.c	486;"	d	file:
filebuf	sim_defs.h	/^    void                *filebuf;                       \/* memory buffer *\/$/;"	m	struct:UNIT
filebuf2	sim_defs.h	/^    void                *filebuf2;                      \/* copy of initial memory buffer *\/$/;"	m	struct:UNIT
filemsk	PDP10/ka10_pmp.c	/^     uint8              filemsk; \/* Current file mask *\/$/;"	m	struct:pmp_t	file:
filename	sim_defs.h	/^    char                *filename;                      \/* open file name *\/$/;"	m	struct:UNIT
filename	slirp/tftp.h	/^    char *filename;$/;"	m	struct:tftp_session
fileref	sim_defs.h	/^    FILE                *fileref;                       \/* file reference *\/$/;"	m	struct:UNIT
fileseq	PDP10/ka10_pmp.c	/^       uint8    fileseq;       \/* always 0. *\/$/;"	m	struct:pmp_header	file:
filter_address	sim_ether.h	/^  ETH_MAC       filter_address[ETH_FILTER_MAX];         \/* filtering addresses *\/$/;"	m	struct:eth_device
find_addr	slirp/bootp.c	/^static BOOTPClient *find_addr(Slirp *slirp, struct in_addr *paddr,$/;"	f	file:
find_c1tab	scp.c	/^C1TAB *find_c1tab (C1TAB *tab, const char *gbuf)$/;"	f
find_cmd	scp.c	/^CTAB *find_cmd (const char *gbuf)$/;"	f
find_ctab	scp.c	/^CTAB *find_ctab (CTAB *tab, const char *gbuf)$/;"	f
find_dev	scp.c	/^DEVICE *find_dev (const char *cptr)$/;"	f
find_dev_from_unit	scp.c	/^DEVICE *find_dev_from_unit (UNIT *uptr)$/;"	f
find_reg	scp.c	/^REG *find_reg (CONST char *cptr, CONST char **optr, DEVICE *dptr)$/;"	f
find_reg_glob	scp.c	/^REG *find_reg_glob (CONST char *cptr, CONST char **optr, DEVICE **gdptr)$/;"	f
find_reg_glob_reason	scp.c	/^REG *find_reg_glob_reason (CONST char *cptr, CONST char **optr, DEVICE **gdptr, t_stat *stat)$/;"	f
find_shtab	scp.c	/^SHTAB *find_shtab (SHTAB *tab, const char *gbuf)$/;"	f
find_type	display/display.c	/^find_type(enum display_type type)$/;"	f	file:
find_unit	scp.c	/^DEVICE *find_unit (const char *cptr, UNIT **uptr)$/;"	f
finish_jmpa	display/vt11.c	/^static unsigned char finish_jmpa = 0;   \/* reminder to fetch JMPA address *\/$/;"	v	file:
finish_jsra	display/vt11.c	/^static unsigned char finish_jsra = 0;   \/* reminder to fetch JSRA address *\/$/;"	v	file:
first	PDP10/ks10_kmc.c	/^   t_bool    first;$/;"	m	struct:workblock	file:
first_char	slirp/tcpip.h	/^        char first_char;$/;"	m	struct:tcpiphdr_2
fix_writelock_mtab	scp.c	/^static void fix_writelock_mtab (DEVICE *dptr)$/;"	f	file:
fixed_text	sim_tape.c	/^    t_bool              fixed_text;             \/*  *\/$/;"	m	struct:ansi_tape_parameters	file:
flag	sim_disk.c	/^    int32 flag;$/;"	m	struct:__anon21	file:
flags	PDP10/kl10_nia.c	/^    uint16          flags;              \/* Flags *\/$/;"	m	struct:tcp	file:
flags	PDP10/kx10_cpu.c	/^    uint32      flags;$/;"	m	struct:__anon1	file:
flags	PDP10/kx10_imp.c	/^    uint16            flags;$/;"	m	struct:dhcp	file:
flags	PDP10/kx10_imp.c	/^    uint16          flags;              \/* Flags *\/$/;"	m	struct:tcp	file:
flags	scp.c	/^    uint32         flags;$/;"	m	struct:topic	file:
flags	sim_defs.h	/^    uint32              flags;                          \/* flags *\/$/;"	m	struct:DEVICE
flags	sim_defs.h	/^    uint32              flags;                          \/* flags *\/$/;"	m	struct:REG
flags	sim_defs.h	/^    uint32              flags;                          \/* flags *\/$/;"	m	struct:UNIT
flags	sim_ether.c	/^  uint16 flags;           \/* Fragmentation Flags *\/$/;"	m	struct:IPHeader	file:
flags	sim_imd.h	/^    uint8 flags;$/;"	m	struct:__anon26
flush_svc	scp.c	/^flush_svc (UNIT *uptr)$/;"	f
fm1_b_avail	sim_disk.c	/^    uint8   fm1_b_avail;$/;"	m	struct:_ODS1_Retreval	file:
fm1_b_count	sim_disk.c	/^            uint8 fm1_b_count;$/;"	m	struct:_ODS1_Retreval::__anon18::__anon19	file:
fm1_b_count	sim_disk.c	/^            uint8 fm1_b_count;$/;"	m	struct:_ODS1_Retreval::__anon18::__anon20	file:
fm1_b_countsize	sim_disk.c	/^    uint8   fm1_b_countsize;$/;"	m	struct:_ODS1_Retreval	file:
fm1_b_ex_rvn	sim_disk.c	/^    uint8   fm1_b_ex_rvn;$/;"	m	struct:_ODS1_Retreval	file:
fm1_b_ex_segnum	sim_disk.c	/^    uint8   fm1_b_ex_segnum;$/;"	m	struct:_ODS1_Retreval	file:
fm1_b_highlbn	sim_disk.c	/^            uint8 fm1_b_highlbn;$/;"	m	struct:_ODS1_Retreval::__anon18::__anon19	file:
fm1_b_highlbn	sim_disk.c	/^            uint8 fm1_b_highlbn;$/;"	m	struct:_ODS1_Retreval::__anon18::__anon20	file:
fm1_b_inuse	sim_disk.c	/^    uint8   fm1_b_inuse;$/;"	m	struct:_ODS1_Retreval	file:
fm1_b_lbnsize	sim_disk.c	/^    uint8   fm1_b_lbnsize;$/;"	m	struct:_ODS1_Retreval	file:
fm1_pointers	sim_disk.c	/^        } fm1_pointers[4];$/;"	m	struct:_ODS1_Retreval	typeref:union:_ODS1_Retreval::__anon18	file:
fm1_s_fm1def1	sim_disk.c	/^            } fm1_s_fm1def1;$/;"	m	union:_ODS1_Retreval::__anon18	typeref:struct:_ODS1_Retreval::__anon18::__anon19	file:
fm1_s_fm1def2	sim_disk.c	/^            } fm1_s_fm1def2;$/;"	m	union:_ODS1_Retreval::__anon18	typeref:struct:_ODS1_Retreval::__anon18::__anon20	file:
fm1_w_ex_filnum	sim_disk.c	/^    uint16  fm1_w_ex_filnum;$/;"	m	struct:_ODS1_Retreval	file:
fm1_w_ex_filseq	sim_disk.c	/^    uint16  fm1_w_ex_filseq;$/;"	m	struct:_ODS1_Retreval	file:
fm1_w_lowlbn	sim_disk.c	/^            uint16 fm1_w_lowlbn;$/;"	m	struct:_ODS1_Retreval::__anon18::__anon19	file:
fm1_w_lowlbn	sim_disk.c	/^            uint16 fm1_w_lowlbn;$/;"	m	struct:_ODS1_Retreval::__anon18::__anon20	file:
fm2___fill	sim_disk.c	/^            unsigned fm2___fill     : 10;$/;"	m	struct:_ODS2_Retreval::__anon12	file:
fm2___fill	sim_disk.c	/^            unsigned fm2___fill   : 14;       \/* type specific data               *\/$/;"	m	struct:_ODS2_Retreval::__anon11	file:
fm2_b_count1	sim_disk.c	/^            unsigned fm2_b_count1   : 8;      \/* low byte described below         *\/$/;"	m	struct:_ODS2_Retreval::__anon13	file:
fm2_l_highlbn2	sim_disk.c	/^            uint16 fm2_l_highlbn2;            \/* high order LBN                   *\/$/;"	m	struct:_ODS2_Retreval::__anon14	file:
fm2_l_lbn3	sim_disk.c	/^            uint32 fm2_l_lbn3;$/;"	m	struct:_ODS2_Retreval::__anon16	file:
fm2_l_lowlbn2	sim_disk.c	/^                unsigned fm2_l_lowlbn2  : 16; \/* low order LBN                    *\/$/;"	m	struct:_ODS2_Retreval::__anon14::__anon15	file:
fm2_r_map2_long0	sim_disk.c	/^                } fm2_r_map2_long0;$/;"	m	struct:_ODS2_Retreval::__anon14	typeref:struct:_ODS2_Retreval::__anon14::__anon15	file:
fm2_r_map3_long0	sim_disk.c	/^                } fm2_r_map3_long0;$/;"	m	struct:_ODS2_Retreval::__anon16	typeref:struct:_ODS2_Retreval::__anon16::__anon17	file:
fm2_r_map_bits0	sim_disk.c	/^            } fm2_r_map_bits0;$/;"	m	union:_ODS2_Retreval	typeref:struct:_ODS2_Retreval::__anon12	file:
fm2_r_map_bits1	sim_disk.c	/^            } fm2_r_map_bits1;$/;"	m	union:_ODS2_Retreval	typeref:struct:_ODS2_Retreval::__anon13	file:
fm2_r_map_bits2	sim_disk.c	/^            } fm2_r_map_bits2;$/;"	m	union:_ODS2_Retreval	typeref:struct:_ODS2_Retreval::__anon14	file:
fm2_r_map_bits3	sim_disk.c	/^            } fm2_r_map_bits3;$/;"	m	union:_ODS2_Retreval	typeref:struct:_ODS2_Retreval::__anon16	file:
fm2_r_word0_bits	sim_disk.c	/^            } fm2_r_word0_bits;$/;"	m	union:_ODS2_Retreval	typeref:struct:_ODS2_Retreval::__anon11	file:
fm2_v_count2	sim_disk.c	/^                unsigned fm2_v_count2   : 14; \/* count field                      *\/$/;"	m	struct:_ODS2_Retreval::__anon14::__anon15	file:
fm2_v_exact	sim_disk.c	/^            unsigned fm2_v_exact    : 1;      \/* exact placement specified        *\/$/;"	m	struct:_ODS2_Retreval::__anon12	file:
fm2_v_format	sim_disk.c	/^            unsigned fm2_v_format : 2;        \/* format type code                 *\/$/;"	m	struct:_ODS2_Retreval::__anon11	file:
fm2_v_format0	sim_disk.c	/^            unsigned fm2_v_format0  : 2;$/;"	m	struct:_ODS2_Retreval::__anon12	file:
fm2_v_format1	sim_disk.c	/^            unsigned fm2_v_format1  : 2;$/;"	m	struct:_ODS2_Retreval::__anon13	file:
fm2_v_format2	sim_disk.c	/^                unsigned fm2_v_format2  : 2;$/;"	m	struct:_ODS2_Retreval::__anon14::__anon15	file:
fm2_v_format3	sim_disk.c	/^                unsigned fm2_v_format3  : 2;$/;"	m	struct:_ODS2_Retreval::__anon16::__anon17	file:
fm2_v_highcount3	sim_disk.c	/^                unsigned fm2_v_highcount3 : 14; \/* low order count field          *\/$/;"	m	struct:_ODS2_Retreval::__anon16::__anon17	file:
fm2_v_highlbn1	sim_disk.c	/^            unsigned fm2_v_highlbn1 : 6;      \/* high order LBN                   *\/$/;"	m	struct:_ODS2_Retreval::__anon13	file:
fm2_v_lbn	sim_disk.c	/^            unsigned fm2_v_lbn      : 1;      \/* use LBN of next map pointer      *\/$/;"	m	struct:_ODS2_Retreval::__anon12	file:
fm2_v_oncyl	sim_disk.c	/^            unsigned fm2_v_oncyl    : 1;      \/* on cylinder allocation desired   *\/$/;"	m	struct:_ODS2_Retreval::__anon12	file:
fm2_v_rvn	sim_disk.c	/^            unsigned fm2_v_rvn      : 1;      \/* place on specified RVN           *\/$/;"	m	struct:_ODS2_Retreval::__anon12	file:
fm2_w_lowcount3	sim_disk.c	/^                unsigned fm2_w_lowcount3 : 16;  \/* high order count field         *\/$/;"	m	struct:_ODS2_Retreval::__anon16::__anon17	file:
fm2_w_lowlbn1	sim_disk.c	/^            unsigned fm2_w_lowlbn1  : 16;     \/* low order LBN                    *\/$/;"	m	struct:_ODS2_Retreval::__anon13	file:
fm_sel	PDP10/kx10_cpu.c	/^uint8   fm_sel;                               \/* User fast memory block *\/$/;"	v
fmb	PDP10/kx10_cpu.c	/^    uint64      fmb;$/;"	m	struct:__anon1	file:
fmode	sim_tmxr.c	/^    uint16 fmode;                   \/* Framer mode from attach command *\/$/;"	m	struct:framer_data	file:
fmts	PDP10/kx10_disk.c	/^static struct disk_formats fmts[] = {$/;"	v	typeref:struct:disk_formats	file:
fmts	sim_card.c	/^static struct card_formats fmts[] = {$/;"	v	typeref:struct:card_formats	file:
fmts	sim_disk.c	/^static struct sim_disk_fmt fmts[] = {$/;"	v	typeref:struct:sim_disk_fmt	file:
fmts	sim_tape.c	/^    } fmts[] = {$/;"	v	typeref:struct:sim_tape_fmt	file:
fmtval	sim_disk.c	/^    int32               fmtval;                         \/* Format type value *\/$/;"	m	struct:sim_disk_fmt	file:
fn_uaa	sim_disk.c	/^    uint16  fn_uaa;$/;"	m	struct:_RSTS_FNAME	file:
fn_uacnt	sim_disk.c	/^    uint16  fn_uacnt;$/;"	m	struct:_RSTS_FNAME	file:
fn_uar	sim_disk.c	/^    uint16  fn_uar;$/;"	m	struct:_RSTS_FNAME	file:
fn_ulnk	sim_disk.c	/^    uint16  fn_ulnk;$/;"	m	struct:_RSTS_FNAME	file:
fn_unam	sim_disk.c	/^    uint16  fn_unam[3];$/;"	m	struct:_RSTS_FNAME	file:
fn_ustat	sim_disk.c	/^    uint16  fn_ustat;$/;"	m	struct:_RSTS_FNAME	file:
fname	sim_tape.c	/^    uint16 fname[2];        \/* File name (RAD50 - 6 characters) *\/$/;"	m	struct:DOS11_HDR	file:
fname3	sim_tape.c	/^    uint16 fname3;          \/* File name (RAD50 - 3 characters) *\/$/;"	m	struct:DOS11_HDR	file:
footer	sim_disk.c	/^                        *footer;$/;"	m	struct:disk_context	typeref:struct:disk_context::simh_disk_footer	file:
fork_exec	slirp/misc.c	/^fork_exec(struct socket *so, const char *ex, int do_pty)$/;"	f
format	sim_defs.h	/^    const char      *format;                            \/* value format string *\/$/;"	m	struct:BITFIELD
fov_irq	PDP10/kx10_cpu.c	/^int     fov_irq;                              \/* Trap floating overflow *\/$/;"	v
fport	slirp/misc.h	/^    uint16_t fport;$/;"	m	struct:emu_t
fport	slirp/misc.h	/^    uint16_t fport;$/;"	m	struct:tos_t
fprint_attach_help_ex	scp.c	/^void fprint_attach_help_ex (FILE *st, DEVICE *dptr, t_bool silent)$/;"	f
fprint_brk_help_ex	scp.c	/^void fprint_brk_help_ex (FILE *st, DEVICE *dptr, t_bool silent)$/;"	f
fprint_buffer_string	scp.c	/^void fprint_buffer_string (FILE *st, const uint8 *buf, uint32 size)$/;"	f
fprint_capac	scp.c	/^void fprint_capac (FILE *st, DEVICE *dptr, UNIT *uptr)$/;"	f
fprint_fields	scp.c	/^void fprint_fields (FILE *stream, t_value before, t_value after, BITFIELD* bitdefs)$/;"	f
fprint_header	scp.c	/^static void fprint_header (FILE *st, t_bool *pdone, char *context)$/;"	f	file:
fprint_help	scp.c	/^void fprint_help (FILE *st)$/;"	f
fprint_reg_help	scp.c	/^void fprint_reg_help (FILE *st, DEVICE *dptr)$/;"	f
fprint_reg_help_ex	scp.c	/^void fprint_reg_help_ex (FILE *st, DEVICE *dptr, t_bool silent)$/;"	f
fprint_sep	scp.c	/^void fprint_sep (FILE *st, int32 *tokens)$/;"	f
fprint_set_help	scp.c	/^void fprint_set_help (FILE *st, DEVICE *dptr)$/;"	f
fprint_set_help_ex	scp.c	/^void fprint_set_help_ex (FILE *st, DEVICE *dptr, t_bool silent)$/;"	f
fprint_show_help	scp.c	/^void fprint_show_help (FILE *st, DEVICE *dptr)$/;"	f
fprint_show_help_ex	scp.c	/^void fprint_show_help_ex (FILE *st, DEVICE *dptr, t_bool silent)$/;"	f
fprint_stopped	scp.c	/^void fprint_stopped (FILE *st, t_stat v)$/;"	f
fprint_stopped_gen	scp.c	/^void fprint_stopped_gen (FILE *st, t_stat v, REG *pc, DEVICE *dptr)$/;"	f
fprint_sym	PDP10/kx10_sys.c	/^t_stat fprint_sym (FILE *of, t_addr addr, t_value *val,$/;"	f
fprint_val	scp.c	/^t_stat fprint_val (FILE *stream, t_value val, uint32 radix,$/;"	f
fprint_wrapped	scp.c	/^static void fprint_wrapped (FILE *st, const char *buf, size_t width, const char *gap, const char *extra, size_t max_width)$/;"	f	file:
fprintf	scp.h	193;"	d
fprintf	sim_fio.c	82;"	d	file:
fputc	scp.h	195;"	d
fputc	sim_fio.c	84;"	d	file:
fputs	scp.h	194;"	d
fputs	sim_fio.c	83;"	d	file:
frag_link	slirp/ip.h	/^        struct qlink frag_link;                 \/* to ip headers of fragments *\/$/;"	m	struct:ipq	typeref:struct:ipq::qlink
fragtoip	slirp/ip_input.c	219;"	d	file:
frame	display/vt11.c	/^static struct frame$/;"	s	file:
framer	sim_tmxr.h	/^    struct framer_data  *framer;                        \/* ddcmp framer data *\/$/;"	m	struct:tmln	typeref:struct:tmln::framer_data
framer_await_status	sim_tmxr.c	/^static int framer_await_status (TMLN *line, int cnt)$/;"	f	file:
framer_data	sim_tmxr.c	/^typedef struct framer_data {$/;"	s	file:
framer_oui	sim_ether.c	/^static const unsigned char framer_oui[3] = { 0xaa, 0x00, 0x03 };$/;"	v	file:
freeaddrinfo_func	sim_sock.c	/^typedef void    (WSAAPI *freeaddrinfo_func) (struct addrinfo *ai);$/;"	t	file:
freecqCount	PDP10/ks10_kmc.c	462;"	d	file:
freecqHead	PDP10/ks10_kmc.c	460;"	d	file:
freeq	PDP10/kx10_imp.c	/^    struct imp_packet *freeq;                  \/* Free queue *\/$/;"	m	struct:imp_device	typeref:struct:imp_device::imp_packet	file:
freq	sim_tmxr.c	/^    uint32 freq;                  \/* Measured frequency *\/$/;"	m	struct:status_msg_t	file:
fspeed	sim_tmxr.c	/^    uint32 fspeed;                  \/* Framer link speed from attach command *\/$/;"	m	struct:framer_data	file:
full	PDP10/kl10_dn.c	234;"	d	file:
full	PDP10/kl10_fe.c	259;"	d	file:
full	PDP10/ks10_dz.c	92;"	d	file:
func	PDP10/kl10_dn.c	/^    uint16      func;      \/* Function code *\/$/;"	m	struct:_dn_queue	file:
func	PDP10/kl10_fe.c	/^    uint16      func;      \/* Function code *\/$/;"	m	struct:_dte_queue	file:
function	scp.c	/^                function;$/;"	m	struct:Operator	file:
function	scp.c	/^    parse_function function;$/;"	m	struct:parse_function_test	file:
function_name	scp.c	/^    const char *function_name;$/;"	m	struct:parse_function_test	file:
function_test_data	scp.c	/^struct function_test_data {$/;"	s	file:
fxread	sim_fio.h	43;"	d
fxwrite	sim_fio.h	44;"	d
g_array_append_val	slirp_glue/glib.h	76;"	d
g_array_append_vals	slirp_glue/glib_qemu_stubs.c	/^g_array_append_vals (GArray *array,$/;"	f
g_array_free	slirp_glue/glib_qemu_stubs.c	/^g_array_free (GArray *array,$/;"	f
g_array_get_element_size	slirp_glue/glib_qemu_stubs.c	/^g_array_get_element_size (GArray *array)$/;"	f
g_array_index	slirp_glue/glib.h	88;"	d
g_array_new	slirp_glue/glib.h	77;"	d
g_array_set_size	slirp_glue/glib_qemu_stubs.c	/^g_array_set_size (GArray *array,$/;"	f
g_array_sized_new	slirp_glue/glib_qemu_stubs.c	/^g_array_sized_new (gboolean zero_terminated,$/;"	f
g_free	slirp_glue/glib_qemu_stubs.c	/^g_free (gpointer mem)$/;"	f
g_log	slirp_glue/glib_qemu_stubs.c	/^void g_log (const gchar *log_domain,$/;"	f
g_malloc	slirp_glue/glib_qemu_stubs.c	/^g_malloc (gsize n_bytes)$/;"	f
g_malloc0	slirp_glue/glib_qemu_stubs.c	/^g_malloc0 (gsize n_bytes)$/;"	f
g_new	slirp_glue/glib.h	73;"	d
g_realloc	slirp_glue/glib_qemu_stubs.c	/^g_realloc (gpointer mem, gsize n_bytes)$/;"	f
g_strdup	slirp_glue/glib_qemu_stubs.c	/^g_strdup (const gchar *str)$/;"	f
g_warning	slirp_glue/glib.h	71;"	d
gaplen	sim_scsi.h	/^    uint32 gaplen;$/;"	m	struct:scsi_dev_t
gaplen	sim_tape.c	/^    uint32              gaplen;$/;"	m	struct:tape_context	file:
gb_lid	sim_disk.c	/^    uint16  gb_lid;$/;"	m	struct:_RSTS_GFDBLOCKETTE	file:
gb_lppn	sim_disk.c	/^    uint16  gb_lppn;$/;"	m	struct:_RSTS_GFDBLOCKETTE	file:
gb_mbm1	sim_disk.c	/^    uint16  gb_mbm1;$/;"	m	struct:_RSTS_GFDBLOCKETTE	file:
gb_reserved1	sim_disk.c	/^    uint16  gb_reserved1;$/;"	m	struct:_RSTS_GFDBLOCKETTE	file:
gb_reserved2	sim_disk.c	/^    uint16  gb_reserved2;$/;"	m	struct:_RSTS_GFDBLOCKETTE	file:
gb_reserved3	sim_disk.c	/^    uint16  gb_reserved3;$/;"	m	struct:_RSTS_GFDBLOCKETTE	file:
gb_reserved4	sim_disk.c	/^    uint16  gb_reserved4;$/;"	m	struct:_RSTS_GFDBLOCKETTE	file:
gb_ulnk	sim_disk.c	/^    uint16  gb_ulnk;$/;"	m	struct:_RSTS_GFDBLOCKETTE	file:
gboolean	slirp_glue/glib.h	/^typedef gint gboolean;$/;"	t
gchar	slirp_glue/glib.h	/^typedef char gchar;$/;"	t
gconstpointer	slirp_glue/glib.h	/^typedef const void *gconstpointer;$/;"	t
generation_number	sim_tape.c	/^    char generation_number[4];  \/* 0001 *\/$/;"	m	struct:HDR1	file:
getPIDPAdressSwitches	PDP10/pidp10panel.c	/^uint64 getPIDPAdressSwitches()$/;"	f
getPIDPSwitchRegister	PDP10/pidp10panel.c	/^uint64 getPIDPSwitchRegister()$/;"	f
getSWITCH	PDP10/pidp10panel.c	/^u_int16_t getSWITCH(uint8_t row)$/;"	f
get_asearch	scp.c	/^SCHTAB *get_asearch (CONST char *cptr, int32 radix, SCHTAB *schptr)$/;"	f
get_aval	scp.c	/^t_stat get_aval (t_addr addr, DEVICE *dptr, UNIT *uptr)$/;"	f
get_default_env_parameter	scp.c	/^static uint32 get_default_env_parameter (const char *dev_name, const char *param_name, uint32 default_value)$/;"	f	file:
get_disk_footer	sim_disk.c	/^static t_stat get_disk_footer (UNIT *uptr)$/;"	f	file:
get_dns_addr	slirp/slirp.c	/^int get_dns_addr(struct in_addr *pdns_addr)$/;"	f
get_dt_ranges	PDP10/pidp10panel.c	/^static unsigned get_dt_ranges(const char *filename, unsigned offset)$/;"	f	file:
get_evac	PDP10/kx10_sys.c	/^int get_evac(FILE *fileref, uint64 *word)$/;"	f
get_exb_byte	PDP10/kx10_sys.c	/^int get_exb_byte (FILE *fileref, int *byt, int ftype)$/;"	f
get_filesystem_size	sim_disk.c	/^static t_offset get_filesystem_size (UNIT *uptr)$/;"	f	file:
get_glyph	scp.c	/^CONST char *get_glyph (const char *iptr, char *optr, char mchar)$/;"	f
get_glyph_cmd	scp.c	/^CONST char *get_glyph_cmd (const char *iptr, char *optr)$/;"	f
get_glyph_exp	scp.c	/^static const char *get_glyph_exp (const char *cptr, char *buf, Operator **oper, t_stat *stat)$/;"	f	file:
get_glyph_gen	scp.c	/^static const char *get_glyph_gen (const char *iptr, char *optr, char mchar, t_bool uc, t_bool quote, char escape_char)$/;"	f	file:
get_glyph_nc	scp.c	/^CONST char *get_glyph_nc (const char *iptr, char *optr, char mchar)$/;"	f
get_glyph_quoted	scp.c	/^CONST char *get_glyph_quoted (const char *iptr, char *optr, char mchar)$/;"	f
get_mask	PDP10/kx10_cpu.c	/^get_mask(int n, uint64 *msk)$/;"	f
get_new_addr	slirp/bootp.c	/^static BOOTPClient *get_new_addr(Slirp *slirp, struct in_addr *paddr,$/;"	f	file:
get_ods1_filesystem_size	sim_disk.c	/^static t_offset get_ods1_filesystem_size (UNIT *uptr, uint32 physsectsz)$/;"	f	file:
get_ods2_filesystem_size	sim_disk.c	/^static t_offset get_ods2_filesystem_size (UNIT *uptr, uint32 physsectsz)$/;"	f	file:
get_opnd	PDP10/kx10_sys.c	/^t_value get_opnd (const char *cptr, t_stat *status)$/;"	f
get_panda_handle	PDP10/kx10_lights.c	/^static libusb_device_handle *get_panda_handle(libusb_device **devs)$/;"	f	file:
get_quantum	PDP10/kx10_cpu.c	/^get_quantum()$/;"	f
get_range	scp.c	/^CONST char *get_range (DEVICE *dptr, CONST char *cptr, t_addr *lo, t_addr *hi,$/;"	f
get_reg	PDP10/kx10_cpu.c	/^uint64 get_reg(int reg) {$/;"	f
get_reg	PDP10/kx10_cpu.c	2240;"	d	file:
get_reg	PDP10/kx10_cpu.c	2776;"	d	file:
get_reg	PDP10/kx10_cpu.c	3280;"	d	file:
get_reg	PDP10/kx10_cpu.c	4210;"	d	file:
get_rsearch	scp.c	/^SCHTAB *get_rsearch (CONST char *cptr, int32 radix, SCHTAB *schptr)$/;"	f
get_rsts_filesystem_size	sim_disk.c	/^static t_offset get_rsts_filesystem_size (UNIT *uptr, uint32 physsectsz)$/;"	f	file:
get_rt11_filesystem_size	sim_disk.c	/^static t_offset get_rt11_filesystem_size (UNIT *uptr, uint32 physsectsz)$/;"	f	file:
get_rval	scp.c	/^t_value get_rval (REG *rptr, uint32 idx)$/;"	f
get_sim_opt	scp.c	/^CONST char *get_sim_opt (int32 opt, CONST char *cptr, t_stat *st)$/;"	f
get_sim_sw	scp.c	/^CONST char *get_sim_sw (CONST char *cptr)$/;"	f
get_switches	scp.c	/^SWITCH_PARSE get_switches (const char *cptr, int32 *sw, int32 *number)$/;"	f
get_uint	scp.c	/^t_value get_uint (const char *cptr, uint32 radix, t_value max, t_stat *status)$/;"	f
get_ultrix_filesystem_size	sim_disk.c	/^static t_offset get_ultrix_filesystem_size (UNIT *uptr, uint32 physsectsz)$/;"	f	file:
get_word	PDP10/kx10_sys.c	/^int get_word(FILE *fileref, uint64 *word, int ftype)$/;"	f
get_yn	scp.c	/^t_stat get_yn (const char *ques, t_stat deflt)$/;"	f
getaddrinfo_func	sim_sock.c	/^typedef int     (WSAAPI *getaddrinfo_func) (const char *hostname,$/;"	t	file:
getnameinfo_func	sim_sock.c	/^typedef int (WSAAPI *getnameinfo_func) (const struct sockaddr *sa, socklen_t salen, char *host, size_t hostlen, char *serv, size_t servlen, int flags);$/;"	t	file:
getrimw	PDP10/kx10_sys.c	/^uint64 getrimw (FILE *fileref)$/;"	f
gflags	PDP10/ks10_kmc.c	442;"	d	file:
giaddr	PDP10/kx10_imp.c	/^    in_addr_T         giaddr;                  \/* Gateway IP address *\/$/;"	m	struct:dhcp	file:
giant	PDP10/kx10_imp.c	/^    int               giant;                   \/* oversize packets *\/$/;"	m	struct:imp_stats	file:
gint	slirp_glue/glib.h	/^typedef int gint;$/;"	t
glb_sect	PDP10/kx10_cpu.c	/^int     glb_sect;                             \/* Global section access *\/$/;"	v
gmask	sim_video.c	161;"	d	file:
gmask	sim_video.c	166;"	d	file:
gmode	display/vt11.c	/^enum gmode { CHAR=0, SVECTOR, LVECTOR, POINT, GRAPHX, GRAPHY, RELPOINT, \/* all *\/$/;"	g	file:
gmtime_r	slirp_glue/qemu/sysemu/os-win32.h	85;"	d
goto_cmd	scp.c	/^t_stat goto_cmd (int32 flag, CONST char *fcptr)$/;"	f
gpio	PDP10/pidp10panel.c	/^struct bcm2835_peripheral gpio; \/\/ needs initialisation$/;"	v	typeref:struct:bcm2835_peripheral
gpio_ledstatus	PDP10/pidp10panel.c	/^volatile u_int16_t gpio_ledstatus[8] ;	\/\/ bitfields: 8 ledrows of up to 16 LEDs$/;"	v
gpio_mux_thread_start	PDP10/pidp10panel.c	/^void gpio_mux_thread_start()$/;"	f
gpio_switchstatus	PDP10/pidp10panel.c	/^volatile u_int16_t gpio_switchstatus[5] ; \/\/ bitfields: 5 rows of up to 16 switches$/;"	v
gpointer	slirp_glue/glib.h	/^typedef void* gpointer;$/;"	t
gpollfds	slirp_glue/sim_slirp.c	/^    GArray *gpollfds;$/;"	m	struct:sim_slirp	file:
graphic_mode	display/vt11.c	257;"	d	file:
graphplot_step	display/vt11.c	/^static int32         graphplot_step = 0;\/* (scaled) graphplot step increment *\/$/;"	v	file:
green	display/display.c	/^    double red, green, blue;$/;"	m	struct:phosphor	file:
growstring	sim_tmxr.c	/^static char *growstring(char **string, size_t growth)$/;"	f	file:
gsize	slirp_glue/glib.h	/^typedef unsigned long gsize;$/;"	t
gtime	sim_timer.c	/^    double gtime;                   \/* instruction time *\/$/;"	m	struct:RTC	file:
guint	slirp_glue/glib.h	/^typedef unsigned int guint;$/;"	t
gushort	slirp_glue/glib.h	/^typedef unsigned short gushort;$/;"	t
gwip	PDP10/kx10_imp.c	/^    in_addr_T         gwip;                    \/* Gateway IP address *\/$/;"	m	struct:imp_device	file:
h4000	PDP10/kl10_nia.c	/^    int               h4000;                   \/* Heart beat detection *\/$/;"	m	struct:nia_device	file:
hLib	sim_ether.c	/^static HINSTANCE hLib = NULL;               \/* handle to DLL *\/$/;"	v	file:
hLib	sim_ether.c	/^static void *hLib = 0;                      \/* handle to Library *\/$/;"	v	file:
hLib	sim_sock.c	/^static HINSTANCE hLib = 0;                      \/* handle to DLL *\/$/;"	v	file:
hLib	sim_sock.c	/^static void *hLib = NULL;                       \/* handle to Library *\/$/;"	v	file:
hMapping	sim_fio.c	/^    HANDLE hMapping;$/;"	m	struct:SHMEM	file:
hPort	sim_serial.c	/^    HANDLE hPort;$/;"	m	struct:SERPORT	file:
hProcess	sim_frontpanel.c	/^    HANDLE                  hProcess;$/;"	m	struct:PANEL	file:
h_dest	slirp/slirp.h	/^    unsigned char  h_dest[ETH_ALEN];   \/* destination eth addr *\/$/;"	m	struct:ethhdr
h_proto	slirp/slirp.h	/^    unsigned short h_proto;            \/* packet type ID field *\/$/;"	m	struct:ethhdr
h_source	slirp/slirp.h	/^    unsigned char  h_source[ETH_ALEN]; \/* source ether addr    *\/$/;"	m	struct:ethhdr
half_life	display/display.c	/^    int half_life;          \/* for refresh calc *\/$/;"	m	struct:color	file:
halfduplex	sim_tmxr.h	/^    t_bool              halfduplex;                     \/* Line in half-duplex mode *\/$/;"	m	struct:tmln
halt_reason	sim_frontpanel.c	/^    char                    *halt_reason;$/;"	m	struct:PANEL	file:
handle	sim_ether.h	/^  void*         handle;                                 \/* handle of implementation-specific device *\/$/;"	m	struct:eth_device
handle_button_press	display/x11.c	/^handle_button_press(w, d, e, b)$/;"	f	file:
handle_button_release	display/x11.c	/^handle_button_release(w, d, e, b)$/;"	f	file:
handle_exposure	display/x11.c	/^handle_exposure(w, d, e, b)$/;"	f	file:
handle_key_press	display/x11.c	/^handle_key_press(w, d, e, b)$/;"	f	file:
handle_key_release	display/x11.c	/^handle_key_release(w, d, e, b)$/;"	f	file:
hash	sim_ether.h	/^  ETH_MULTIHASH hash;                                   \/* AUTODIN II multicast hash *\/$/;"	m	struct:eth_device
hash_filter	sim_ether.h	/^  ETH_BOOL      hash_filter;                            \/* filter using AUTODIN II multicast hash *\/$/;"	m	struct:eth_device
have_host_nic_phy_addr	sim_ether.h	/^  int32         have_host_nic_phy_addr;                 \/* flag indicating that the host_nic_phy_hw_addr is valid *\/$/;"	m	struct:eth_device
hb_b_bbtable	sim_disk.c	/^    uint8   hb_b_bbtable[130];$/;"	m	struct:_RT11_HomeBlock	file:
hb_b_bup	sim_disk.c	/^    uint8   hb_b_bup[18];$/;"	m	struct:_RT11_HomeBlock	file:
hb_b_initrestore	sim_disk.c	/^    uint8   hb_b_initrestore[38];$/;"	m	struct:_RT11_HomeBlock	file:
hb_b_owner	sim_disk.c	/^    uint8   hb_b_owner[12];$/;"	m	struct:_RT11_HomeBlock	file:
hb_b_sysid	sim_disk.c	/^    uint8   hb_b_sysid[12];$/;"	m	struct:_RT11_HomeBlock	file:
hb_b_unused1	sim_disk.c	/^    uint8   hb_b_unused1[2];$/;"	m	struct:_RT11_HomeBlock	file:
hb_b_unused2	sim_disk.c	/^    uint8   hb_b_unused2[260];$/;"	m	struct:_RT11_HomeBlock	file:
hb_b_unused3	sim_disk.c	/^    uint8   hb_b_unused3[14];$/;"	m	struct:_RT11_HomeBlock	file:
hb_b_unused4	sim_disk.c	/^    uint8   hb_b_unused4[2];$/;"	m	struct:_RT11_HomeBlock	file:
hb_b_volid	sim_disk.c	/^    uint8   hb_b_volid[12];$/;"	m	struct:_RT11_HomeBlock	file:
hb_w_checksum	sim_disk.c	/^    uint16  hb_w_checksum;$/;"	m	struct:_RT11_HomeBlock	file:
hb_w_clustersize	sim_disk.c	/^    uint16  hb_w_clustersize;$/;"	m	struct:_RT11_HomeBlock	file:
hb_w_firstdir	sim_disk.c	/^    uint16  hb_w_firstdir;$/;"	m	struct:_RT11_HomeBlock	file:
hb_w_reserved1	sim_disk.c	/^    uint16  hb_w_reserved1;$/;"	m	struct:_RT11_HomeBlock	file:
hb_w_reserved2	sim_disk.c	/^    uint16  hb_w_reserved2;$/;"	m	struct:_RT11_HomeBlock	file:
hb_w_sysver	sim_disk.c	/^    uint16  hb_w_sysver;$/;"	m	struct:_RT11_HomeBlock	file:
hcrc_err	sim_tmxr.c	/^    uint32 hcrc_err;$/;"	m	struct:status_msg_t	file:
hdr	PDP10/ks10_kmc.c	/^      QH     hdr;$/;"	m	struct:buffer_list	file:
hdr	PDP10/ks10_kmc.c	/^  QH                  hdr;$/;"	m	struct:cqueue	file:
hdr3_crlf_line_endings	sim_tape.c	/^    const char          *hdr3_crlf_line_endings;\/* HDR3 template for text with CRLF line ending files *\/$/;"	m	struct:ansi_tape_parameters	file:
hdr3_fixed	sim_tape.c	/^    const char          *hdr3_fixed;            \/* HDR3 template for Fixed format files *\/$/;"	m	struct:ansi_tape_parameters	file:
hdr3_lf_line_endings	sim_tape.c	/^    const char          *hdr3_lf_line_endings;  \/* HDR3 template for text with LF line ending files *\/$/;"	m	struct:ansi_tape_parameters	file:
head	display/display.c	371;"	d	file:
head	sim_ether.h	/^  int                 head;$/;"	m	struct:eth_queue
head	sim_imd.h	/^    uint8 head;$/;"	m	struct:__anon24
head	sim_video.c	/^    int32 head;$/;"	m	struct:__anon33	file:
head	sim_video.c	/^    int32 head;$/;"	m	struct:__anon34	file:
headerOk	sim_imd.c	/^static uint32 headerOk(IMD_HEADER imd) {$/;"	f	file:
heads	PDP10/ka10_pmp.c	/^       uint32   heads;         \/* number of heads per cylinder *\/$/;"	m	struct:pmp_header	file:
heads	PDP10/ka10_pmp.c	/^    uint32              heads;        \/* Number of heads\/cylinder *\/$/;"	m	struct:disk_t	file:
height	display/sim_ws.c	/^    int height;$/;"	m	struct:cursor	file:
height	display/type340.c	/^    unsigned char height;       \/* character grid height *\/$/;"	m	struct:type340	file:
help	sim_defs.h	/^    const char          *help;                          \/* help string *\/$/;"	m	struct:C1TAB
help	sim_defs.h	/^    const char          *help;                          \/* help string *\/$/;"	m	struct:MTAB
help	sim_defs.h	/^    const char          *help;                          \/* help string *\/$/;"	m	struct:SHTAB
help	sim_defs.h	/^    const char          *help;                          \/* help string\/structured locator *\/$/;"	m	struct:CTAB
help	sim_defs.h	/^    t_stat              (*help)(FILE *st, DEVICE *dptr,$/;"	m	struct:DEVICE
helpPrompt	scp.c	/^static char *helpPrompt ( TOPIC *topic, const char *pstring, t_bool oneword )$/;"	f	file:
help_base	sim_defs.h	/^    const char          *help_base;                     \/* structured help base*\/$/;"	m	struct:CTAB
help_cmd	scp.c	/^t_stat help_cmd (int32 flag, CONST char *cptr)$/;"	f
help_cmd_output	scp.c	/^t_stat help_cmd_output (int32 flag, const char *help, const char *help_base)$/;"	f
help_ctx	sim_defs.h	/^    void                *help_ctx;                      \/* Context available to help routines *\/$/;"	m	struct:DEVICE
help_dev_help	scp.c	/^t_stat help_dev_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
help_env	scp.c	/^jmp_buf help_env;$/;"	v
help_where	scp.c	/^    } help_where = { "", NULL, 0, 0 };$/;"	v	typeref:struct:__anon8	file:
high	sim_ether.h	/^  int                 high;$/;"	m	struct:eth_queue
highcyl	PDP10/ka10_pmp.c	/^       uint16   highcyl;       \/* highest cylinder. *\/$/;"	m	struct:pmp_header	file:
highwater	sim_disk.c	/^    t_offset            highwater;          \/* Furthest written sector in the disk *\/$/;"	m	struct:disk_context	file:
hlen	PDP10/kl10_nia.c	/^    uint16          hlen;               \/* Length of header and data *\/$/;"	m	struct:udp_hdr	file:
hlen	PDP10/kx10_imp.c	/^    uint16          hlen;               \/* Length of header and data *\/$/;"	m	struct:udp_hdr	file:
hlen	PDP10/kx10_imp.c	/^    uint8             hlen;                    \/* Ether Header len *\/$/;"	m	struct:dhcp	file:
hm1_b_extend	sim_disk.c	/^    uint8   hm1_b_extend;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_b_fill_1	sim_disk.c	/^    uint8   hm1_b_fill_1[4];$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_b_fill_2	sim_disk.c	/^    uint8   hm1_b_fill_2[6];$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_b_fill_3	sim_disk.c	/^    uint8   hm1_b_fill_3[11];$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_b_fill_4	sim_disk.c	/^    uint8   hm1_b_fill_4[382];$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_b_fill_5	sim_disk.c	/^    uint8   hm1_b_fill_5[12];$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_b_lru_lim	sim_disk.c	/^    uint8   hm1_b_lru_lim;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_b_window	sim_disk.c	/^    uint8   hm1_b_window;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_l_ibmaplbn	sim_disk.c	/^    uint32  hm1_l_ibmaplbn;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_l_serialnum	sim_disk.c	/^    uint32  hm1_l_serialnum;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_t_credate	sim_disk.c	/^    uint8   hm1_t_credate[14];$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_t_fill_6	sim_disk.c	/^    uint8   hm1_t_fill_6[2];$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_t_format	sim_disk.c	/^    uint8   hm1_t_format[12];$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_t_ownername	sim_disk.c	/^    uint8   hm1_t_ownername[12];$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_t_volname	sim_disk.c	/^    uint8   hm1_t_volname[12];$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_t_volname2	sim_disk.c	/^    uint8   hm1_t_volname2[12];$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_w_checksum1	sim_disk.c	/^    uint16  hm1_w_checksum1;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_w_checksum2	sim_disk.c	/^    uint16  hm1_w_checksum2;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_w_cluster	sim_disk.c	/^    uint16  hm1_w_cluster;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_w_devtype	sim_disk.c	/^    uint16  hm1_w_devtype;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_w_fileprot	sim_disk.c	/^    uint16  hm1_w_fileprot;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_w_ibmapsize	sim_disk.c	/^    uint16  hm1_w_ibmapsize;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_w_maxfiles	sim_disk.c	/^    uint16  hm1_w_maxfiles;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_w_protect	sim_disk.c	/^    uint16  hm1_w_protect;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_w_structlev	sim_disk.c	/^    uint16  hm1_w_structlev;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_w_volchar	sim_disk.c	/^    uint16  hm1_w_volchar;$/;"	m	struct:_ODS1_HomeBlock	file:
hm1_w_volowner	sim_disk.c	/^    uint16  hm1_w_volowner;$/;"	m	struct:_ODS1_HomeBlock	file:
hm2_b_lru_lim	sim_disk.c	/^    uint8  hm2_b_lru_lim;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_b_struclev	sim_disk.c	/^    uint8  hm2_b_struclev;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_b_strucver	sim_disk.c	/^    uint8  hm2_b_strucver;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_b_window	sim_disk.c	/^    uint8  hm2_b_window;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_l_alhomelbn	sim_disk.c	/^    uint32 hm2_l_alhomelbn;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_l_altidxlbn	sim_disk.c	/^    uint32 hm2_l_altidxlbn;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_l_homelbn	sim_disk.c	/^    uint32 hm2_l_homelbn;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_l_ibmaplbn	sim_disk.c	/^    uint32 hm2_l_ibmaplbn;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_l_maxfiles	sim_disk.c	/^    uint32 hm2_l_maxfiles;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_l_reserved	sim_disk.c	/^    uint32 hm2_l_reserved;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_l_serialnum	sim_disk.c	/^    uint32 hm2_l_serialnum;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_l_volowner	sim_disk.c	/^    uint32 hm2_l_volowner;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_q_credate	sim_disk.c	/^    uint32 hm2_q_credate[2];$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_q_retainmax	sim_disk.c	/^    uint32 hm2_q_retainmax[2];$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_q_retainmin	sim_disk.c	/^    uint32 hm2_q_retainmin[2];$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_q_revdate	sim_disk.c	/^    uint32 hm2_q_revdate[2];$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_r_max_class	sim_disk.c	/^    uint8  hm2_r_max_class[20];$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_r_min_class	sim_disk.c	/^    uint8  hm2_r_min_class[20];$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_r_reserved	sim_disk.c	/^    uint8  hm2_r_reserved[320];$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_t_format	sim_disk.c	/^    uint8  hm2_t_format[12];$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_t_ownername	sim_disk.c	/^    uint8  hm2_t_ownername[12];$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_t_strucname	sim_disk.c	/^    uint8  hm2_t_strucname[12];$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_t_volname	sim_disk.c	/^    uint8  hm2_t_volname[12];$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_alhomevbn	sim_disk.c	/^    uint16 hm2_w_alhomevbn;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_altidxvbn	sim_disk.c	/^    uint16 hm2_w_altidxvbn;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_checksum1	sim_disk.c	/^    uint16 hm2_w_checksum1;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_checksum2	sim_disk.c	/^    uint16 hm2_w_checksum2;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_cluster	sim_disk.c	/^    uint16 hm2_w_cluster;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_devtype	sim_disk.c	/^    uint16 hm2_w_devtype;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_extend	sim_disk.c	/^    uint16 hm2_w_extend;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_fileprot	sim_disk.c	/^    uint16 hm2_w_fileprot;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_homevbn	sim_disk.c	/^    uint16 hm2_w_homevbn;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_ibmapsize	sim_disk.c	/^    uint16 hm2_w_ibmapsize;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_ibmapvbn	sim_disk.c	/^    uint16 hm2_w_ibmapvbn;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_protect	sim_disk.c	/^    uint16 hm2_w_protect;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_reserved	sim_disk.c	/^    uint16 hm2_w_reserved;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_reserved2	sim_disk.c	/^    uint16 hm2_w_reserved2;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_resfiles	sim_disk.c	/^    uint16 hm2_w_resfiles;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_rvn	sim_disk.c	/^    uint16 hm2_w_rvn;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_setcount	sim_disk.c	/^    uint16 hm2_w_setcount;$/;"	m	struct:_ODS2_HomeBlock	file:
hm2_w_volchar	sim_disk.c	/^    uint16 hm2_w_volchar;$/;"	m	struct:_ODS2_HomeBlock	file:
hol_to_ascii	sim_card.c	/^    uint8               hol_to_ascii[4096]; \/* Back conversion table *\/$/;"	m	struct:card_context	file:
hol_to_ebcdic	sim_card.c	/^static uint16 hol_to_ebcdic[4096];$/;"	v	file:
hopper_cards	sim_card.c	/^    t_addr              hopper_cards;    \/* Number of cards in hopper *\/$/;"	m	struct:card_context	file:
hopper_size	sim_card.c	/^    t_addr              hopper_size;     \/* Size of hopper *\/$/;"	m	struct:card_context	file:
hops	PDP10/kx10_imp.c	/^    uint8             hops;                    \/*  ops? *\/$/;"	m	struct:dhcp	file:
host_error	PDP10/kx10_imp.c	/^    int               host_error;$/;"	m	struct:imp_device	file:
host_nic_phy_hw_addr	sim_ether.h	/^  ETH_MAC       host_nic_phy_hw_addr;                   \/* MAC address of the attached NIC *\/$/;"	m	struct:eth_device
hostip	PDP10/kx10_imp.c	/^    in_addr_T         hostip;                  \/* IP address of local host *\/$/;"	m	struct:imp_device	file:
hostport	sim_frontpanel.c	/^    char                    hostport[64];$/;"	m	struct:PANEL	file:
hot_x	display/sim_ws.c	/^    int hot_x;$/;"	m	struct:cursor	file:
hot_y	display/sim_ws.c	/^    int hot_y;$/;"	m	struct:cursor	file:
hri_mode	PDP10/kx10_mt.c	/^int             hri_mode; \/* Read in mode for TM10B *\/$/;"	v
hsb	PDP10/kx10_cpu.c	/^uint64 hsb;$/;"	v
hst	PDP10/kx10_cpu.c	/^InstHistory *hst = NULL;                 \/* instruction history *\/$/;"	v
hst_lnt	PDP10/kx10_cpu.c	/^int32 hst_lnt = 0;                       \/* history length *\/$/;"	v
hst_p	PDP10/kx10_cpu.c	/^int32 hst_p = 0;                         \/* history pointer *\/$/;"	v
htype	PDP10/kx10_imp.c	/^    uint8             htype;                   \/* Header type *\/$/;"	m	struct:dhcp	file:
hwlen	PDP10/kl10_nia.c	/^    uint8               hwlen;$/;"	m	struct:arp_hdr	file:
hwlen	PDP10/kx10_imp.c	/^    uint8               hwlen;$/;"	m	struct:arp_hdr	file:
hwmark	sim_defs.h	/^    uint32              hwmark;                         \/* high water mark *\/$/;"	m	struct:UNIT
hwtype	PDP10/kl10_nia.c	/^    uint16              hwtype;$/;"	m	struct:arp_hdr	file:
hwtype	PDP10/kx10_imp.c	/^    uint16              hwtype;$/;"	m	struct:arp_hdr	file:
hz	sim_timer.c	/^    uint32 hz;                      \/* tick rate *\/$/;"	m	struct:RTC	file:
iBeamCursorH	sim_console.c	/^static CursHandle iBeamCursorH = NULL;                  \/* contains the iBeamCursor *\/$/;"	v	file:
ibits	PDP10/kx10_imp.c	/^    int               ibits;                   \/* Input bits *\/$/;"	m	struct:imp_device	file:
ibuf	PDP10/kx10_imp.c	/^    uint64            ibuf;                    \/* Input buffer *\/$/;"	m	struct:imp_device	file:
icd_id	slirp/ip_icmp.h	/^                        u_short icd_id;$/;"	m	struct:icmp::__anon35::ih_idseq
icd_seq	slirp/ip_icmp.h	/^                        u_short icd_seq;$/;"	m	struct:icmp::__anon35::ih_idseq
icmp	PDP10/kl10_nia.c	/^struct icmp {$/;"	s	file:
icmp	PDP10/kx10_imp.c	/^struct icmp {$/;"	s	file:
icmp	slirp/ip_icmp.h	/^struct icmp {$/;"	s
icmp	slirp/slirp.h	/^    struct socket icmp;$/;"	m	struct:Slirp	typeref:struct:Slirp::socket
icmp_cksum	slirp/ip_icmp.h	/^        u_short icmp_cksum;             \/* ones complement cksum of struct *\/$/;"	m	struct:icmp
icmp_cleanup	slirp/ip_icmp.c	/^void icmp_cleanup(Slirp *slirp)$/;"	f
icmp_code	slirp/ip_icmp.h	/^        u_char  icmp_code;              \/* type sub code *\/$/;"	m	struct:icmp
icmp_data	slirp/ip_icmp.h	90;"	d
icmp_detach	slirp/ip_icmp.c	/^void icmp_detach(struct socket *so)$/;"	f
icmp_dun	slirp/ip_icmp.h	/^        } icmp_dun;$/;"	m	struct:icmp	typeref:union:icmp::__anon36
icmp_error	slirp/ip_icmp.c	/^icmp_error(struct mbuf *msrc, u_char type, u_char code, int minsize,$/;"	f
icmp_flush	slirp/ip_icmp.c	/^static const int icmp_flush[19] = {$/;"	v	file:
icmp_gwaddr	slirp/ip_icmp.h	66;"	d
icmp_hun	slirp/ip_icmp.h	/^        } icmp_hun;$/;"	m	struct:icmp	typeref:union:icmp::__anon35
icmp_id	slirp/ip_icmp.h	67;"	d
icmp_init	slirp/ip_icmp.c	/^void icmp_init(Slirp *slirp)$/;"	f
icmp_input	slirp/ip_icmp.c	/^icmp_input(struct mbuf *m, int hlen)$/;"	f
icmp_ip	slirp/ip_icmp.h	88;"	d
icmp_last_so	slirp/slirp.h	/^    struct socket *icmp_last_so;$/;"	m	struct:Slirp	typeref:struct:Slirp::socket
icmp_mask	slirp/ip_icmp.h	89;"	d
icmp_nextmtu	slirp/ip_icmp.h	71;"	d
icmp_otime	slirp/ip_icmp.h	85;"	d
icmp_ping_msg	slirp/ip_icmp.c	/^static const char icmp_ping_msg[] = "This is a pseudo-PING packet used by Slirp to emulate ICMP ECHO-REQUEST packets.\\n";$/;"	v	file:
icmp_pmvoid	slirp/ip_icmp.h	70;"	d
icmp_pptr	slirp/ip_icmp.h	65;"	d
icmp_receive	slirp/ip_icmp.c	/^void icmp_receive(struct socket *so)$/;"	f
icmp_reflect	slirp/ip_icmp.c	/^icmp_reflect(struct mbuf *m)$/;"	f
icmp_rtime	slirp/ip_icmp.h	86;"	d
icmp_send	slirp/ip_icmp.c	/^static int icmp_send(struct socket *so, struct mbuf *m, int hlen)$/;"	f	file:
icmp_seq	slirp/ip_icmp.h	68;"	d
icmp_ttime	slirp/ip_icmp.h	87;"	d
icmp_type	slirp/ip_icmp.h	/^        u_char  icmp_type;              \/* type of message, see below *\/$/;"	m	struct:icmp
icmp_void	slirp/ip_icmp.h	69;"	d
id	scp.c	/^    int id;$/;"	m	struct:Stack	file:
id_data	slirp/ip_icmp.h	/^                char            id_data[1];$/;"	m	union:icmp::__anon36
id_ip	slirp/ip_icmp.h	/^                struct id_ip  {$/;"	s	union:icmp::__anon36
id_ip	slirp/ip_icmp.h	/^                } id_ip;$/;"	m	union:icmp::__anon36	typeref:struct:icmp::__anon36::id_ip
id_mask	slirp/ip_icmp.h	/^                uint32_t        id_mask;$/;"	m	union:icmp::__anon36
id_ts	slirp/ip_icmp.h	/^                struct id_ts {$/;"	s	union:icmp::__anon36
id_ts	slirp/ip_icmp.h	/^                } id_ts;$/;"	m	union:icmp::__anon36	typeref:struct:icmp::__anon36::id_ts
ident	sim_ether.c	/^  uint16 ident;           \/* unique identifier *\/$/;"	m	struct:IPHeader	file:
ident	sim_tape.c	/^    char ident[6];              \/* <ansi <a> characters blank padded > *\/$/;"	m	struct:VOL1	file:
idi_ip	slirp/ip_icmp.h	/^                        struct ip idi_ip;$/;"	m	struct:icmp::__anon36::id_ip	typeref:struct:icmp::__anon36::id_ip::ip
idx	sim_console.c	/^    uint32           idx;           \/* Register index *\/$/;"	m	struct:BITSAMPLE_REG	file:
if_batchq	slirp/slirp.h	/^    struct mbuf if_batchq;  \/* queue for non-interactive data *\/$/;"	m	struct:Slirp	typeref:struct:Slirp::mbuf
if_encap	slirp/slirp.c	/^int if_encap(Slirp *slirp, struct mbuf *ifm)$/;"	f
if_fastq	slirp/slirp.h	/^    struct mbuf if_fastq;   \/* fast queue (for interactive data) *\/$/;"	m	struct:Slirp	typeref:struct:Slirp::mbuf
if_init	slirp/if.c	/^if_init(Slirp *slirp)$/;"	f
if_output	slirp/if.c	/^if_output(struct socket *so, struct mbuf *ifm)$/;"	f
if_start	slirp/if.c	/^void if_start(Slirp *slirp)$/;"	f
if_start_busy	slirp/slirp.h	/^    bool if_start_busy;     \/* avoid if_start recursion *\/$/;"	m	struct:Slirp
ifq_next	slirp/mbuf.h	92;"	d
ifq_prev	slirp/mbuf.h	91;"	d
ifq_so	slirp/mbuf.h	95;"	d
ifs_init	slirp/mbuf.h	/^static inline void ifs_init(struct mbuf *ifm)$/;"	f
ifs_insque	slirp/if.c	/^ifs_insque(struct mbuf *ifm, struct mbuf *ifmhead)$/;"	f	file:
ifs_next	slirp/mbuf.h	94;"	d
ifs_prev	slirp/mbuf.h	93;"	d
ifs_remque	slirp/if.c	/^ifs_remque(struct mbuf *ifm)$/;"	f	file:
ih_dst	slirp/ip.h	/^        struct  in_addr ih_dst;         \/* destination internet address *\/$/;"	m	struct:ipovly	typeref:struct:ipovly::in_addr
ih_gwaddr	slirp/ip_icmp.h	/^                struct in_addr ih_gwaddr;       \/* ICMP_REDIRECT *\/$/;"	m	union:icmp::__anon35	typeref:struct:icmp::__anon35::in_addr
ih_idseq	slirp/ip_icmp.h	/^                struct ih_idseq {$/;"	s	union:icmp::__anon35
ih_idseq	slirp/ip_icmp.h	/^                } ih_idseq;$/;"	m	union:icmp::__anon35	typeref:struct:icmp::__anon35::ih_idseq
ih_len	slirp/ip.h	/^        uint16_t        ih_len;                 \/* protocol length *\/$/;"	m	struct:ipovly
ih_mbuf	slirp/ip.h	/^        struct mbuf_ptr ih_mbuf;        \/* backpointer to mbuf *\/$/;"	m	struct:ipovly	typeref:struct:ipovly::mbuf_ptr
ih_pmtu	slirp/ip_icmp.h	/^                struct ih_pmtu {$/;"	s	union:icmp::__anon35
ih_pmtu	slirp/ip_icmp.h	/^                } ih_pmtu;$/;"	m	union:icmp::__anon35	typeref:struct:icmp::__anon35::ih_pmtu
ih_pptr	slirp/ip_icmp.h	/^                u_char ih_pptr;                 \/* ICMP_PARAMPROB *\/$/;"	m	union:icmp::__anon35
ih_pr	slirp/ip.h	/^        uint8_t ih_pr;                  \/* protocol *\/$/;"	m	struct:ipovly
ih_src	slirp/ip.h	/^        struct  in_addr ih_src;         \/* source internet address *\/$/;"	m	struct:ipovly	typeref:struct:ipovly::in_addr
ih_void	slirp/ip_icmp.h	/^                int ih_void;$/;"	m	union:icmp::__anon35
ih_x1	slirp/ip.h	/^        uint8_t ih_x1;                  \/* (unused) *\/$/;"	m	struct:ipovly
iii_cycle	display/iii.c	/^int iii_cycle(int us, int slowdown)$/;"	f
iii_description	PDP10/ka10_iii.c	/^const char *iii_description (DEVICE *dptr)$/;"	f
iii_dev	PDP10/ka10_iii.c	/^DEVICE iii_dev = {$/;"	v
iii_devio	PDP10/ka10_iii.c	/^t_stat iii_devio(uint32 dev, uint64 *data) {$/;"	f
iii_dib	PDP10/ka10_iii.c	/^DIB iii_dib = { III_DEVNUM, 1, iii_devio, NULL};$/;"	v
iii_draw_line	display/iii.c	/^iii_draw_line(int x1, int y1, int x2, int y2, int l)$/;"	f
iii_help	PDP10/ka10_iii.c	/^t_stat iii_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
iii_init	display/iii.c	/^int iii_init(void *dev, int debug)$/;"	f
iii_instr	PDP10/ka10_iii.c	/^uint64         iii_instr;       \/* Currently executing instruction *\/$/;"	v
iii_mod	PDP10/ka10_iii.c	/^MTAB iii_mod[] = {$/;"	v
iii_point	display/iii.c	/^void iii_point (int x, int y, int l)$/;"	f
iii_reset	PDP10/ka10_iii.c	/^t_stat iii_reset (DEVICE *dptr)$/;"	f
iii_sel	PDP10/ka10_iii.c	/^int            iii_sel;         \/* Select mask *\/$/;"	v
iii_svc	PDP10/ka10_iii.c	/^iii_svc (UNIT *uptr)$/;"	f
iii_unit	PDP10/ka10_iii.c	/^UNIT iii_unit[] = {$/;"	v
ildb	PDP10/ka10_dpk.c	/^static int ildb (uint64 *pointer)$/;"	f	file:
ill_op	PDP10/kx10_cpu.c	/^int     ill_op;                               \/* Illegal opcode *\/$/;"	v
illum2	display/vt11.c	1231;"	d	file:
illum3	display/vt11.c	/^illum3(int32 x, int32 y, int32 z)$/;"	f	file:
image_count	PDP10/ka10_ai.c	/^static int image_count, image_sector_length;$/;"	v	file:
image_sector_length	PDP10/ka10_ai.c	/^static int image_count, image_sector_length;$/;"	v	file:
image_state	PDP10/ka10_ai.c	/^enum image_state {$/;"	g	file:
image_state	PDP10/ka10_ai.c	/^static enum image_state image_state = IMAGE_ERROR;$/;"	v	typeref:enum:image_state	file:
images	sim_card.c	/^    uint16              (*images)[1][80];$/;"	m	struct:card_context	file:
imdGetSides	sim_imd.c	/^uint32 imdGetSides(DISK_INFO *myDisk)$/;"	f
imdIsWriteLocked	sim_imd.c	/^uint32 imdIsWriteLocked(DISK_INFO *myDisk)$/;"	f
imlac_cycle	display/imlac.c	/^int imlac_cycle(int us, int slowdown)$/;"	f
imlac_init	display/imlac.c	/^int imlac_init(void *dev, int debug)$/;"	f
imlac_line	display/imlac.c	/^imlac_line (int x1, int y1, int x2, int y2)$/;"	f
imlac_point	display/imlac.c	/^void imlac_point (int x, int y)$/;"	f
imode	PDP10/kx10_defs.h	/^      uint8          imode;      \/* Mode of vector *\/$/;"	m	struct:rh_if
imp_arp_age	PDP10/kx10_imp.c	/^void imp_arp_age(struct imp_device *imp)$/;"	f
imp_arp_arpin	PDP10/kx10_imp.c	/^imp_arp_arpin(struct imp_device *imp, ETH_PACK *packet)$/;"	f
imp_arp_arpout	PDP10/kx10_imp.c	/^imp_arp_arpout(struct imp_device *imp, in_addr_T ipaddr)$/;"	f
imp_arp_lookup	PDP10/kx10_imp.c	/^struct arp_entry *imp_arp_lookup(struct imp_device *imp, in_addr_T ipaddr)$/;"	f
imp_arp_update	PDP10/kx10_imp.c	/^imp_arp_update(struct imp_device *imp, in_addr_T ipaddr, ETH_MAC *ethaddr, int age)$/;"	f
imp_attach	PDP10/kx10_imp.c	/^t_stat imp_attach(UNIT* uptr, CONST char* cptr)$/;"	f
imp_buffer	PDP10/kx10_imp.c	/^} imp_buffer[8];$/;"	v	typeref:struct:imp_packet
imp_data	PDP10/kx10_imp.c	/^} imp_data;$/;"	v	typeref:struct:imp_device
imp_debug	PDP10/kx10_imp.c	/^DEBTAB              imp_debug[] = {$/;"	v
imp_description	PDP10/kx10_imp.c	/^const char *imp_description (DEVICE *dptr)$/;"	f
imp_detach	PDP10/kx10_imp.c	/^t_stat imp_detach(UNIT* uptr)$/;"	f
imp_dev	PDP10/kx10_imp.c	/^DEVICE imp_dev = {$/;"	v
imp_device	PDP10/kx10_imp.c	/^struct imp_device {$/;"	s	file:
imp_devio	PDP10/kx10_imp.c	/^t_stat imp_devio(uint32 dev, uint64 *data)$/;"	f
imp_devirq	PDP10/kx10_imp.c	/^imp_devirq(uint32 dev, t_addr addr) {$/;"	f
imp_dhcp_discover	PDP10/kx10_imp.c	/^imp_dhcp_discover(struct imp_device *imp)$/;"	f
imp_dhcp_release	PDP10/kx10_imp.c	/^imp_dhcp_release(struct imp_device *imp)$/;"	f
imp_dhcp_request	PDP10/kx10_imp.c	/^imp_dhcp_request(struct imp_device *imp, in_addr_T dhcpip)$/;"	f
imp_dhcp_timer	PDP10/kx10_imp.c	/^imp_dhcp_timer(struct imp_device *imp)$/;"	f
imp_dib	PDP10/kx10_imp.c	/^DIB imp_dib = {0767600, 017, 0250, 6, 3, &imp_rd, &imp_wr, 0, 0, 0};$/;"	v
imp_dib	PDP10/kx10_imp.c	/^DIB imp_dib = {IMP_DEVNUM, 1, &imp_devio,$/;"	v
imp_do_dhcp_client	PDP10/kx10_imp.c	/^imp_do_dhcp_client(struct imp_device *imp, ETH_PACK *read_buffer)$/;"	f
imp_do_send_dhcp	PDP10/kx10_imp.c	/^imp_do_send_dhcp(struct imp_device *imp,$/;"	f
imp_error	PDP10/kx10_imp.c	/^    int               imp_error;$/;"	m	struct:imp_device	file:
imp_eth_hdr	PDP10/kx10_imp.c	/^struct imp_eth_hdr {$/;"	s	file:
imp_eth_srv	PDP10/kx10_imp.c	/^t_stat imp_eth_srv(UNIT * uptr)$/;"	f
imp_free_packet	PDP10/kx10_imp.c	/^imp_free_packet(struct imp_device *imp, struct imp_packet *p) {$/;"	f
imp_get_packet	PDP10/kx10_imp.c	/^imp_get_packet(struct imp_device *imp) {$/;"	f
imp_help	PDP10/kx10_imp.c	/^t_stat imp_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
imp_iba	PDP10/kx10_imp.c	/^uint32        imp_iba;$/;"	v
imp_icsr	PDP10/kx10_imp.c	/^uint16        imp_icsr;$/;"	v
imp_idb	PDP10/kx10_imp.c	/^uint16        imp_idb;$/;"	v
imp_iwcnt	PDP10/kx10_imp.c	/^uint16        imp_iwcnt;$/;"	v
imp_map	PDP10/kx10_imp.c	/^struct imp_map {$/;"	s	file:
imp_mod	PDP10/kx10_imp.c	/^MTAB imp_mod[] = {$/;"	v
imp_mpx_lvl	PDP10/kx10_imp.c	/^int       imp_mpx_lvl = 0;$/;"	v
imp_oba	PDP10/kx10_imp.c	/^uint32        imp_oba;$/;"	v
imp_ocsr	PDP10/kx10_imp.c	/^uint16        imp_ocsr;$/;"	v
imp_odb	PDP10/kx10_imp.c	/^uint16        imp_odb;$/;"	v
imp_owcnt	PDP10/kx10_imp.c	/^uint16        imp_owcnt;$/;"	v
imp_packet	PDP10/kx10_imp.c	/^struct imp_packet {$/;"	s	file:
imp_packet_debug	PDP10/kx10_imp.c	/^void imp_packet_debug(struct imp_device *imp, const char *action, ETH_PACK *packet) {$/;"	f
imp_packet_in	PDP10/kx10_imp.c	/^imp_packet_in(struct imp_device *imp)$/;"	f
imp_packet_out	PDP10/kx10_imp.c	/^imp_packet_out(struct imp_device *imp, ETH_PACK *packet) {$/;"	f
imp_rd	PDP10/kx10_imp.c	/^imp_rd(DEVICE *dptr, t_addr addr, uint16 *data, int32 access)$/;"	f
imp_reg	PDP10/kx10_imp.c	/^REG                 imp_reg[] = {$/;"	v
imp_reset	PDP10/kx10_imp.c	/^t_stat imp_reset (DEVICE *dptr)$/;"	f
imp_send_packet	PDP10/kx10_imp.c	/^imp_send_packet (struct imp_device *imp, int len)$/;"	f
imp_set_arp	PDP10/kx10_imp.c	/^t_stat imp_set_arp (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f
imp_set_gwip	PDP10/kx10_imp.c	/^t_stat imp_set_gwip (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f
imp_set_hostip	PDP10/kx10_imp.c	/^t_stat imp_set_hostip (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f
imp_set_ip	PDP10/kx10_imp.c	/^t_stat imp_set_ip (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f
imp_set_mac	PDP10/kx10_imp.c	/^t_stat imp_set_mac (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f
imp_set_mpx	PDP10/kx10_imp.c	/^t_stat imp_set_mpx (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
imp_show_arp	PDP10/kx10_imp.c	/^t_stat imp_show_arp (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
imp_show_dhcpip	PDP10/kx10_imp.c	/^t_stat imp_show_dhcpip (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
imp_show_gwip	PDP10/kx10_imp.c	/^t_stat imp_show_gwip (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
imp_show_hostip	PDP10/kx10_imp.c	/^t_stat imp_show_hostip (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
imp_show_ip	PDP10/kx10_imp.c	/^t_stat imp_show_ip (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
imp_show_mac	PDP10/kx10_imp.c	/^t_stat imp_show_mac (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f
imp_show_mpx	PDP10/kx10_imp.c	/^t_stat imp_show_mpx (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
imp_srv	PDP10/kx10_imp.c	/^t_stat imp_srv(UNIT * uptr)$/;"	f
imp_stats	PDP10/kx10_imp.c	/^struct imp_stats {$/;"	s	file:
imp_tim_srv	PDP10/kx10_imp.c	/^t_stat imp_tim_srv(UNIT * uptr)$/;"	f
imp_timer_task	PDP10/kx10_imp.c	/^imp_timer_task(struct imp_device *imp)$/;"	f
imp_unit	PDP10/kx10_imp.c	/^UNIT imp_unit[] = {$/;"	v
imp_wr	PDP10/kx10_imp.c	/^imp_wr(DEVICE *dptr, t_addr addr, uint16 data, int32 access)$/;"	f
imp_write	PDP10/kx10_imp.c	/^void imp_write(struct imp_device *imp, ETH_PACK *packet) {$/;"	f
impl_fnc	sim_disk.c	/^    t_stat              (*impl_fnc)(void);              \/* Implemented Test Function *\/$/;"	m	struct:sim_disk_fmt	file:
implement	sim_tape.c	/^    char implement[13];         \/*      *\/$/;"	m	struct:VOL1	file:
imx_activate	PDP10/ka10_imx.c	/^static void imx_activate (void)$/;"	f	file:
imx_data	PDP10/ka10_imx.c	/^static uint64 imx_data;$/;"	v	file:
imx_description	PDP10/ka10_imx.c	/^const char *imx_description (DEVICE *dptr)$/;"	f
imx_dev	PDP10/ka10_imx.c	/^DEVICE              imx_dev = {$/;"	v
imx_devio	PDP10/ka10_imx.c	/^t_stat imx_devio(uint32 dev, uint64 *data)$/;"	f
imx_dib	PDP10/ka10_imx.c	/^DIB imx_dib = {IMX_DEVNUM, 1, &imx_devio, NULL};$/;"	v
imx_inputs	PDP10/ka10_imx.c	/^static int imx_inputs[0200];$/;"	v	file:
imx_joy_motion	PDP10/ka10_imx.c	/^static void imx_joy_motion(int which, int axis, int value)$/;"	f	file:
imx_map	PDP10/ka10_imx.c	/^static int imx_map[JOY_MAX_UNITS][JOY_MAX_AXES];$/;"	v	file:
imx_mod	PDP10/ka10_imx.c	/^MTAB imx_mod[] = {$/;"	v
imx_mpx_lvl	PDP10/ka10_imx.c	/^static int imx_mpx_lvl;$/;"	v	file:
imx_reset	PDP10/ka10_imx.c	/^t_stat imx_reset (DEVICE *dptr)$/;"	f
imx_sample	PDP10/ka10_imx.c	/^static int imx_sample (void)$/;"	f	file:
imx_samples	PDP10/ka10_imx.c	/^static uint64 imx_samples;$/;"	v	file:
imx_set_channel	PDP10/ka10_imx.c	/^t_stat imx_set_channel (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
imx_set_mpx	PDP10/ka10_imx.c	/^t_stat imx_set_mpx (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
imx_show_channel	PDP10/ka10_imx.c	/^t_stat imx_show_channel (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
imx_show_mpx	PDP10/ka10_imx.c	/^t_stat imx_show_mpx (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
imx_svc	PDP10/ka10_imx.c	/^t_stat imx_svc (UNIT *uptr)$/;"	f
imx_unit	PDP10/ka10_imx.c	/^UNIT                imx_unit[] = {$/;"	v
in_addr_T	PDP10/kl10_nia.c	/^typedef uint32 in_addr_T;$/;"	t	file:
in_addr_T	PDP10/kx10_imp.c	/^typedef uint32 in_addr_T;$/;"	t	file:
in_ptr	PDP10/kl10_dn.c	/^    int      in_ptr;     \/* Insert pointer *\/$/;"	m	struct:_buffer	file:
in_ptr	PDP10/kl10_fe.c	/^    int      in_ptr;     \/* Insert pointer *\/$/;"	m	struct:_buffer	file:
in_ptr	PDP10/ks10_dz.c	/^    int      in_ptr;     \/* Insert pointer *\/$/;"	m	struct:_buffer	file:
inaddr	slirp_glue/sim_slirp.c	/^    struct in_addr inaddr;$/;"	m	struct:redir_tcp_udp	typeref:struct:redir_tcp_udp::in_addr	file:
inci	PDP10/kl10_dn.c	238;"	d	file:
inci	PDP10/kl10_fe.c	263;"	d	file:
inci	PDP10/ks10_dz.c	96;"	d	file:
inco	PDP10/kl10_dn.c	237;"	d	file:
inco	PDP10/kl10_fe.c	262;"	d	file:
inco	PDP10/ks10_dz.c	95;"	d	file:
incr	display/tst340.c	/^incr(int pt)$/;"	f	file:
increment	display/ng.c	/^void increment (uint16 inst)$/;"	f
indirect	sim_console.c	/^    t_bool          indirect;       \/* Register value points at memory *\/$/;"	m	struct:BITSAMPLE_REG	file:
indirect	sim_frontpanel.c	/^    int indirect;$/;"	m	struct:__anon22	file:
inet_aton	slirp_glue/glib_qemu_stubs.c	/^inet_aton(const char *arg, struct in_addr *addr)$/;"	f
init_done	display/win32.c	/^static volatile int init_done;$/;"	v	file:
init_state	PDP10/kx10_imp.c	/^    int               init_state;              \/* Initialization state *\/$/;"	m	struct:imp_device	file:
initd	sim_timer.c	/^    int32 initd;                    \/* initial delay *\/$/;"	m	struct:RTC	file:
initial_channel	PDP10/ka10_imx.c	/^static int initial_channel = 0;$/;"	v	file:
initialized	display/display.c	/^static int initialized = 0;$/;"	v	file:
initialized	display/type340.c	/^    char initialized;           \/* 0 before display_init *\/$/;"	m	struct:type340	file:
initiator	sim_scsi.h	/^    int32 initiator;                                    \/* current initiator *\/$/;"	m	struct:scsi_bus_t
initqueue	PDP10/ks10_kmc.c	/^static void initqueue (QH *head, int32 *count, int32 max, void *list, size_t size) {$/;"	f	file:
injectCMD	PDP10/pidp10panel.c	/^void injectCMD(char *pidpCMD)$/;"	f
inline	slirp_glue/config-host.h	31;"	d
inline	slirp_glue/qemu/compiler.h	27;"	d
inline	slirp_glue/qemu/compiler.h	28;"	d
inline	slirp_glue/qemu/compiler.h	32;"	d
inline	slirp_glue/qemu/compiler.h	33;"	d
inline	slirp_glue/qemu/compiler.h	36;"	d
inline	slirp_glue/qemu/compiler.h	37;"	d
inout_fail	PDP10/kx10_cpu.c	/^int     inout_fail;                           \/* In out fail flag *\/$/;"	v
input	scp.c	/^    const char *input;$/;"	m	struct:parse_function_test	file:
insoff	sim_defs.h	/^    int32               insoff;                         \/* insert offset *\/$/;"	m	struct:SEND
insque	slirp/misc.c	/^insque(void *a, void *b)$/;"	f
insque	slirp/slirp.h	130;"	d
insqueue	PDP10/ks10_kmc.c	/^static t_bool insqueue (QH *entry, QH *pred, int32 *count, int32 max) {$/;"	f	file:
int0_scope	display/vt11.c	384;"	d	file:
int16	sim_defs.h	/^typedef __int16          int16;$/;"	t
int16	sim_defs.h	/^typedef int16_t         int16;$/;"	t
int16_t	slirp_glue/qemu/win32/stdint.h	/^typedef short               int16_t;$/;"	t
int1_scope	display/vt11.c	390;"	d	file:
int32	display/ng.h	/^typedef int int32;$/;"	t
int32	display/vt11.h	/^typedef int int32;$/;"	t
int32	sim_defs.h	/^typedef __int32          int32;$/;"	t
int32	sim_defs.h	/^typedef int32_t         int32;$/;"	t
int32_t	slirp_glue/qemu/win32/stdint.h	/^typedef int                 int32_t;$/;"	t
int64	sim_disk.c	/^typedef t_int64     int64;$/;"	t	file:
int64_t	slirp_glue/qemu/win32/stdint.h	/^typedef long long           int64_t;$/;"	t
int8	sim_defs.h	/^typedef __int8           int8;$/;"	t
int8	sim_defs.h	/^typedef int8_t          int8;$/;"	t
int8_t	slirp_glue/qemu/win32/stdint.h	/^typedef char                int8_t;$/;"	t
int_cur	PDP10/kx10_cpu.c	/^uint64  int_cur;                              \/* Current interval *\/$/;"	v
int_fast16_t	slirp_glue/qemu/osdep.h	/^typedef signed int              int_fast16_t;$/;"	t
int_handler	scp.c	/^void int_handler (int sig)$/;"	f
int_val	PDP10/kx10_cpu.c	/^uint64  int_val;                              \/* Interval timer *\/$/;"	v
intensify	display/display.c	/^intensify(int x,            \/* 0..xpixels *\/$/;"	f	file:
intensity	display/type340.c	/^    unsigned char intensity;    \/* 3 bits *\/$/;"	m	struct:type340	file:
intensity	display/vt11.c	262;"	d	file:
internal_stop	display/vt11.c	/^static unsigned char internal_stop = 0; \/* 1 bit: stop display *\/$/;"	v	file:
intervl	PDP10/pidp10panel.c	/^long intervl = 50000;	\/\/	300000;		\/\/ light each row of leds this long$/;"	v
io	PDP10/kx10_defs.h	/^    t_stat              (*io)(uint32 dev, t_uint64 *data);$/;"	m	struct:pdp_dib
io_command_lock	sim_frontpanel.c	/^    pthread_mutex_t         io_command_lock;$/;"	m	struct:PANEL	file:
io_cond	sim_disk.c	/^    pthread_cond_t      io_cond;$/;"	m	struct:disk_context	file:
io_cond	sim_tape.c	/^    pthread_cond_t      io_cond;$/;"	m	struct:tape_context	file:
io_done	sim_disk.c	/^    pthread_cond_t      io_done;$/;"	m	struct:disk_context	file:
io_done	sim_frontpanel.c	/^    pthread_cond_t          io_done;$/;"	m	struct:PANEL	file:
io_done	sim_tape.c	/^    pthread_cond_t      io_done;$/;"	m	struct:tape_context	file:
io_dop	sim_disk.c	/^    int                 io_dop;$/;"	m	struct:disk_context	file:
io_flush	sim_defs.h	/^    void                (*io_flush)(UNIT *up);          \/* io flush routine *\/$/;"	m	struct:UNIT
io_lock	sim_disk.c	/^    pthread_mutex_t     io_lock;$/;"	m	struct:disk_context	file:
io_lock	sim_frontpanel.c	/^    pthread_mutex_t         io_lock;$/;"	m	struct:PANEL	file:
io_lock	sim_tape.c	/^    pthread_mutex_t     io_lock;$/;"	m	struct:tape_context	file:
io_response	sim_frontpanel.c	/^    char                    *io_response;$/;"	m	struct:PANEL	file:
io_response_data	sim_frontpanel.c	/^    size_t                  io_response_data;$/;"	m	struct:PANEL	file:
io_response_size	sim_frontpanel.c	/^    size_t                  io_response_size;$/;"	m	struct:PANEL	file:
io_send_lock	sim_frontpanel.c	/^    pthread_mutex_t         io_send_lock;$/;"	m	struct:PANEL	file:
io_status	sim_disk.c	/^    t_stat              io_status;$/;"	m	struct:disk_context	file:
io_status	sim_tape.c	/^    t_stat              io_status;$/;"	m	struct:tape_context	file:
io_thread	sim_disk.c	/^    pthread_t           io_thread;          \/* I\/O Thread Id *\/$/;"	m	struct:disk_context	file:
io_thread	sim_frontpanel.c	/^    pthread_t               io_thread;$/;"	m	struct:PANEL	file:
io_thread	sim_tape.c	/^    pthread_t           io_thread;          \/* I\/O Thread Id *\/$/;"	m	struct:tape_context	file:
io_thread_running	sim_frontpanel.c	/^    int                     io_thread_running;$/;"	m	struct:PANEL	file:
io_top	sim_tape.c	/^    int                 io_top;$/;"	m	struct:tape_context	file:
io_waiting	sim_frontpanel.c	/^    int                     io_waiting;$/;"	m	struct:PANEL	file:
ioctlsocket	slirp/slirp.h	22;"	d
iostarttime	sim_defs.h	/^    uint32              iostarttime;                    \/* I\/O start time *\/$/;"	m	struct:UNIT
iov_base	slirp_glue/qemu/osdep.h	/^    void *iov_base;$/;"	m	struct:iovec
iov_len	slirp_glue/qemu/osdep.h	/^    int iov_len;$/;"	m	struct:iovec
iovec	slirp_glue/qemu/osdep.h	/^struct iovec {$/;"	s
ip	PDP10/kl10_nia.c	/^struct ip {$/;"	s	file:
ip	PDP10/kx10_imp.c	/^    in_addr_T         ip;                      \/* Local IP address *\/$/;"	m	struct:imp_device	file:
ip	PDP10/kx10_imp.c	/^struct ip {$/;"	s	file:
ip	slirp/bootp.h	/^    struct ip ip;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::ip
ip	slirp/ip.h	/^struct ip {$/;"	s
ip	slirp/tftp.h	/^  struct ip ip;$/;"	m	struct:tftp_t	typeref:struct:tftp_t::ip
ip_checksum	PDP10/kx10_imp.c	/^ip_checksum(uint8 *chksum, uint8 *ptr, int len)$/;"	f
ip_checksum	sim_ether.c	/^ip_checksum(uint16 *buffer, int size) $/;"	f	file:
ip_cleanup	slirp/ip_input.c	/^void ip_cleanup(Slirp *slirp)$/;"	f
ip_deq	slirp/ip_input.c	/^ip_deq(register struct ipasfrag *p)$/;"	f	file:
ip_dooptions	slirp/ip_input.c	/^ip_dooptions(m)$/;"	f
ip_dst	PDP10/kl10_nia.c	/^    in_addr_T       ip_dst;             \/* source and dest address *\/$/;"	m	struct:ip	file:
ip_dst	PDP10/kl10_nia.c	/^    in_addr_T       ip_dst;             \/* source and dest address *\/$/;"	m	struct:udp_hdr	file:
ip_dst	PDP10/kx10_imp.c	/^    in_addr_T       ip_dst;             \/* source and dest address *\/$/;"	m	struct:ip	file:
ip_dst	PDP10/kx10_imp.c	/^    in_addr_T       ip_dst;             \/* source and dest address *\/$/;"	m	struct:udp_hdr	file:
ip_dst	slirp/ip.h	/^        struct  in_addr ip_src,ip_dst;  \/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::
ip_enq	slirp/ip_input.c	/^ip_enq(register struct ipasfrag *p, register struct ipasfrag *prev)$/;"	f	file:
ip_freef	slirp/ip_input.c	/^ip_freef(Slirp *slirp, struct ipq *fp)$/;"	f	file:
ip_hdr	PDP10/kl10_nia.c	/^struct ip_hdr {$/;"	s	file:
ip_hdr	PDP10/kx10_imp.c	/^struct ip_hdr {$/;"	s	file:
ip_hl	slirp/ip.h	/^                ip_hl:4;                \/* header length *\/$/;"	m	struct:ip
ip_id	PDP10/kl10_nia.c	/^    uint16          ip_id;              \/* identification *\/$/;"	m	struct:ip	file:
ip_id	PDP10/kx10_imp.c	/^    uint16          ip_id;              \/* identification *\/$/;"	m	struct:ip	file:
ip_id	slirp/ip.h	/^        uint16_t        ip_id;                  \/* identification *\/$/;"	m	struct:ip
ip_id	slirp/slirp.h	/^    uint16_t ip_id;         \/* ip packet ctr, for ids *\/$/;"	m	struct:Slirp
ip_init	slirp/ip_input.c	/^ip_init(Slirp *slirp)$/;"	f
ip_input	slirp/ip_input.c	/^ip_input(struct mbuf *m)$/;"	f
ip_len	PDP10/kl10_nia.c	/^    uint16          ip_len;             \/* total length *\/$/;"	m	struct:ip	file:
ip_len	PDP10/kx10_imp.c	/^    uint16          ip_len;             \/* total length *\/$/;"	m	struct:ip	file:
ip_len	slirp/ip.h	/^        uint16_t        ip_len;                 \/* total length *\/$/;"	m	struct:ip
ip_link	slirp/ip.h	/^        struct qlink ip_link;                           \/* to other reass headers *\/$/;"	m	struct:ipq	typeref:struct:ipq::qlink
ip_mask	PDP10/kx10_imp.c	/^    in_addr_T         ip_mask;                 \/* Local IP mask *\/$/;"	m	struct:imp_device	file:
ip_off	PDP10/kl10_nia.c	/^    uint16          ip_off;             \/* fragment offset field *\/$/;"	m	struct:ip	file:
ip_off	PDP10/kx10_imp.c	/^    uint16          ip_off;             \/* fragment offset field *\/$/;"	m	struct:ip	file:
ip_off	slirp/ip.h	/^        uint16_t        ip_off;                 \/* fragment offset field *\/$/;"	m	struct:ip
ip_output	slirp/ip_output.c	/^ip_output(struct socket *so, struct mbuf *m0)$/;"	f
ip_p	PDP10/kl10_nia.c	/^    uint8           ip_p;               \/* protocol *\/$/;"	m	struct:ip	file:
ip_p	PDP10/kx10_imp.c	/^    uint8           ip_p;               \/* protocol *\/$/;"	m	struct:ip	file:
ip_p	slirp/ip.h	/^        uint8_t ip_p;                   \/* protocol *\/$/;"	m	struct:ip
ip_reass	slirp/ip_input.c	/^ip_reass(Slirp *slirp, struct ip *ip, struct ipq *fp)$/;"	f	file:
ip_slowtimo	slirp/ip_input.c	/^ip_slowtimo(Slirp *slirp)$/;"	f
ip_src	PDP10/kl10_nia.c	/^    in_addr_T       ip_src;$/;"	m	struct:ip	file:
ip_src	PDP10/kl10_nia.c	/^    in_addr_T       ip_src;$/;"	m	struct:udp_hdr	file:
ip_src	PDP10/kx10_imp.c	/^    in_addr_T       ip_src;$/;"	m	struct:ip	file:
ip_src	PDP10/kx10_imp.c	/^    in_addr_T       ip_src;$/;"	m	struct:udp_hdr	file:
ip_src	slirp/ip.h	/^        struct  in_addr ip_src,ip_dst;  \/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::in_addr
ip_stripoptions	slirp/ip_input.c	/^ip_stripoptions(register struct mbuf *m, struct mbuf *mopt)$/;"	f
ip_sum	PDP10/kl10_nia.c	/^    uint16          ip_sum;             \/* checksum *\/$/;"	m	struct:ip	file:
ip_sum	PDP10/kx10_imp.c	/^    uint16          ip_sum;             \/* checksum *\/$/;"	m	struct:ip	file:
ip_sum	slirp/ip.h	/^        uint16_t        ip_sum;                 \/* checksum *\/$/;"	m	struct:ip
ip_timestamp	slirp/ip.h	/^struct  ip_timestamp {$/;"	s
ip_tos	PDP10/kl10_nia.c	/^    uint8           ip_tos;             \/* type of service *\/$/;"	m	struct:ip	file:
ip_tos	PDP10/kx10_imp.c	/^    uint8           ip_tos;             \/* type of service *\/$/;"	m	struct:ip	file:
ip_tos	slirp/ip.h	/^        uint8_t         ip_tos;                 \/* type of service *\/$/;"	m	struct:ip
ip_ttl	PDP10/kl10_nia.c	/^    uint8           ip_ttl;             \/* time to live *\/$/;"	m	struct:ip	file:
ip_ttl	PDP10/kx10_imp.c	/^    uint8           ip_ttl;             \/* time to live *\/$/;"	m	struct:ip	file:
ip_ttl	slirp/ip.h	/^        uint8_t ip_ttl;                 \/* time to live *\/$/;"	m	struct:ip
ip_v	slirp/ip.h	/^        uint8_t ip_v:4,                 \/* version *\/$/;"	m	struct:ip
ip_v_hl	PDP10/kl10_nia.c	/^    uint8           ip_v_hl;            \/* version,header length *\/$/;"	m	struct:ip	file:
ip_v_hl	PDP10/kx10_imp.c	/^    uint8           ip_v_hl;            \/* version,header length *\/$/;"	m	struct:ip	file:
ipad	sim_tmxr.h	/^    char                *ipad;                          \/* IP address *\/$/;"	m	struct:tmln
ipaddr	PDP10/kx10_imp.c	/^    in_addr_T  ipaddr;$/;"	m	struct:arp_entry	file:
ipasfrag	slirp/ip.h	/^struct  ipasfrag {$/;"	s
ipf_ip	slirp/ip.h	/^        struct ip ipf_ip;$/;"	m	struct:ipasfrag	typeref:struct:ipasfrag::ip
ipf_len	slirp/ip.h	251;"	d
ipf_link	slirp/ip.h	/^        struct qlink ipf_link;$/;"	m	struct:ipasfrag	typeref:struct:ipasfrag::qlink
ipf_next	slirp/ip.h	252;"	d
ipf_off	slirp/ip.h	249;"	d
ipf_prev	slirp/ip.h	253;"	d
ipf_tos	slirp/ip.h	250;"	d
iphdr	PDP10/kl10_nia.c	/^    struct ip           iphdr;$/;"	m	struct:ip_hdr	typeref:struct:ip_hdr::ip	file:
iphdr	PDP10/kx10_imp.c	/^    struct ip           iphdr;$/;"	m	struct:ip_hdr	typeref:struct:ip_hdr::ip	file:
ipm_nextmtu	slirp/ip_icmp.h	/^                        u_short ipm_nextmtu;$/;"	m	struct:icmp::__anon35::ih_pmtu
ipm_void	slirp/ip_icmp.h	/^                        u_short ipm_void;$/;"	m	struct:icmp::__anon35::ih_pmtu
ipoint	display/type340.c	/^ipoint(int i, int n, unsigned char byte)$/;"	f
ipopt_dst	slirp/ip.h	/^        struct  in_addr ipopt_dst;      \/* first-hop dst if source routed *\/$/;"	m	struct:ipoption	typeref:struct:ipoption::in_addr
ipopt_list	slirp/ip.h	/^        int8_t  ipopt_list[MAX_IPOPTLEN];       \/* options proper *\/$/;"	m	struct:ipoption
ipoption	slirp/ip.h	/^struct ipoption {$/;"	s
ipovly	slirp/ip.h	/^struct ipovly {$/;"	s
ipq	slirp/ip.h	/^struct ipq {$/;"	s
ipq	slirp/slirp.h	/^    struct ipq ipq;         \/* ip reass. queue *\/$/;"	m	struct:Slirp	typeref:struct:Slirp::ipq
ipq_dst	slirp/ip.h	/^        struct  in_addr ipq_src,ipq_dst;$/;"	m	struct:ipq	typeref:struct:ipq::
ipq_id	slirp/ip.h	/^        uint16_t        ipq_id;                 \/* sequence id for reassembly *\/$/;"	m	struct:ipq
ipq_p	slirp/ip.h	/^        uint8_t ipq_p;                  \/* protocol of this fragment *\/$/;"	m	struct:ipq
ipq_src	slirp/ip.h	/^        struct  in_addr ipq_src,ipq_dst;$/;"	m	struct:ipq	typeref:struct:ipq::in_addr
ipq_ttl	slirp/ip.h	/^        uint8_t ipq_ttl;                \/* time for reass q to live *\/$/;"	m	struct:ipq
ipt_addr	slirp/ip.h	/^                        struct in_addr ipt_addr;$/;"	m	struct:ip_timestamp::ipt_timestamp::ipt_ta	typeref:struct:ip_timestamp::ipt_timestamp::ipt_ta::in_addr
ipt_code	slirp/ip.h	/^        uint8_t ipt_code;               \/* IPOPT_TS *\/$/;"	m	struct:ip_timestamp
ipt_flg	slirp/ip.h	/^                ipt_flg:4;              \/* flags, see below *\/$/;"	m	struct:ip_timestamp
ipt_flg	slirp/ip.h	/^        uint8_t ipt_flg:4,              \/* flags, see below *\/$/;"	m	struct:ip_timestamp
ipt_len	slirp/ip.h	/^        uint8_t ipt_len;                \/* size of structure (variable) *\/$/;"	m	struct:ip_timestamp
ipt_oflw	slirp/ip.h	/^                ipt_oflw:4;             \/* overflow counter *\/$/;"	m	struct:ip_timestamp
ipt_oflw	slirp/ip.h	/^        uint8_t ipt_oflw:4,             \/* overflow counter *\/$/;"	m	struct:ip_timestamp
ipt_ptr	slirp/ip.h	/^        uint8_t ipt_ptr;                \/* index of current entry *\/$/;"	m	struct:ip_timestamp
ipt_ta	slirp/ip.h	/^                struct  ipt_ta {$/;"	s	union:ip_timestamp::ipt_timestamp
ipt_ta	slirp/ip.h	/^                } ipt_ta[1];$/;"	m	union:ip_timestamp::ipt_timestamp	typeref:struct:ip_timestamp::ipt_timestamp::ipt_ta
ipt_time	slirp/ip.h	/^                        n_long ipt_time;$/;"	m	struct:ip_timestamp::ipt_timestamp::ipt_ta
ipt_time	slirp/ip.h	/^                n_long  ipt_time[1];$/;"	m	union:ip_timestamp::ipt_timestamp
ipt_timestamp	slirp/ip.h	/^        union ipt_timestamp {$/;"	u	struct:ip_timestamp
ipt_timestamp	slirp/ip.h	/^        } ipt_timestamp;$/;"	m	struct:ip_timestamp	typeref:union:ip_timestamp::ipt_timestamp
iptofrag	slirp/ip_input.c	218;"	d	file:
ipv4_inet_aton	PDP10/kx10_imp.c	/^int ipv4_inet_aton(const char *str, struct in_addr *inp)$/;"	f	file:
ipv4_inet_ntoa	PDP10/kl10_nia.c	/^ipv4_inet_ntoa(struct in_addr ip)$/;"	f	file:
ipv4_inet_ntoa	PDP10/kx10_imp.c	/^ipv4_inet_ntoa(struct in_addr ip)$/;"	f	file:
ir	PDP10/kx10_cpu.c	/^    uint64      ir;$/;"	m	struct:__anon1	file:
irq	PDP10/kx10_defs.h	/^    t_addr              (*irq)(uint32 dev, t_addr addr);$/;"	m	struct:pdp_dib
irq_enable	PDP10/kx10_cpu.c	/^uint16  irq_enable;                           \/* Apr IRQ enable bits *\/$/;"	v
irq_flags	PDP10/kx10_cpu.c	/^uint16  irq_flags;                            \/* Apr IRQ bits *\/$/;"	v
irqv	PDP10/kx10_defs.h	/^    uint16              (*irqv)(struct pdp_dib *dibp);$/;"	m	struct:pdp_dib
irs	slirp/tcp_var.h	/^        tcp_seq irs;                    \/* initial receive sequence number *\/$/;"	m	struct:tcpcb
is_cdrom	sim_disk.c	/^    uint32              is_cdrom;           \/* Host system CDROM Device *\/$/;"	m	struct:disk_context	file:
is_udp	slirp_glue/sim_slirp.c	/^    int is_udp;$/;"	m	struct:redir_tcp_udp	file:
isalnum	sim_fio.h	154;"	d
isalnum	sim_fio.h	157;"	d
isalpha	sim_fio.h	128;"	d
isalpha	sim_fio.h	131;"	d
isdigit	sim_fio.h	142;"	d
isdigit	sim_fio.h	144;"	d
isempty_Stack	scp.c	/^static t_bool isempty_Stack (Stack *this_Stack)$/;"	f	file:
isgraph	sim_fio.h	147;"	d
isgraph	sim_fio.h	150;"	d
islower	sim_fio.h	118;"	d
islower	sim_fio.h	120;"	d
isprint	sim_fio.h	135;"	d
isprint	sim_fio.h	138;"	d
iss	slirp/tcp_var.h	/^        tcp_seq iss;                    \/* initial send sequence number *\/$/;"	m	struct:tcpcb
isspace	sim_fio.h	111;"	d
isspace	sim_fio.h	114;"	d
isupper	sim_fio.h	123;"	d
isupper	sim_fio.h	125;"	d
italics	display/vt11.c	266;"	d	file:
item	sim_ether.h	/^  struct eth_item*    item;$/;"	m	struct:eth_queue	typeref:struct:eth_queue::eth_item
item_code	sim_serial.c	/^    unsigned short item_code;$/;"	m	struct:__anon29	file:
its_load_tlb	PDP10/kx10_cpu.c	/^int its_load_tlb(uint32 reg, int page, uint32 *tlb) {$/;"	f
its_otime	slirp/ip_icmp.h	/^                        n_time its_otime;$/;"	m	struct:icmp::__anon36::id_ts
its_rtime	slirp/ip_icmp.h	/^                        n_time its_rtime;$/;"	m	struct:icmp::__anon36::id_ts
its_ttime	slirp/ip_icmp.h	/^                        n_time its_ttime;$/;"	m	struct:icmp::__anon36::id_ts
ivect	PDP10/kx10_defs.h	/^      int            ivect;      \/* Interrupt vector *\/$/;"	m	struct:rh_if
joy_axes	PDP10/ka10_tv.c	/^static int joy_axes[JOY_MAX_UNITS][JOY_MAX_AXES];$/;"	v	file:
joy_axes	PDP10/kx10_dpy.c	/^static int joy_axes[JOY_MAX_UNITS * JOY_MAX_AXES];$/;"	v	file:
joy_buttons	PDP10/ka10_tv.c	/^static int joy_buttons[JOY_MAX_UNITS][JOY_MAX_BUTTONS];$/;"	v	file:
joy_buttons	PDP10/kx10_dpy.c	/^static int joy_buttons[JOY_MAX_UNITS * JOY_MAX_BUTTONS];$/;"	v	file:
joystick_switches	PDP10/kx10_dpy.c	/^static uint64 joystick_switches (void)$/;"	f	file:
jpc	PDP10/kx10_cpu.c	/^uint32  jpc;                                  \/* Jump program counter *\/$/;"	v
jpc	PDP10/kx10_cpu.c	278;"	d	file:
jsr	display/vt11.c	/^static unsigned char jsr = 0;           \/* 1 bit: last control was JSR ?rel. *\/$/;"	v	file:
jumbo_dropped	sim_ether.h	/^  uint32        jumbo_dropped;                          \/* Giant Frames Dropped *\/$/;"	m	struct:eth_device
jumbo_fragmented	sim_ether.h	/^  uint32        jumbo_fragmented;                       \/* Giant IPv4 Frames Fragmented *\/$/;"	m	struct:eth_device
jumbo_truncated	sim_ether.h	/^  uint32        jumbo_truncated;                        \/* Giant Frames too big for capture buffer - Dropped *\/$/;"	m	struct:eth_device
jump_type	display/type340.c	/^enum jump_type { DJP=2, DJS=3, DDS=1 }; \/* type 347 *\/$/;"	g	file:
ka10_lights_clear_aux	PDP10/kx10_lights.c	/^void ka10_lights_clear_aux (int n)$/;"	f
ka10_lights_init	PDP10/kx10_lights.c	/^void ka10_lights_init (void)$/;"	f
ka10_lights_latch	PDP10/kx10_lights.c	/^static void ka10_lights_latch (void)$/;"	f	file:
ka10_lights_main	PDP10/kx10_lights.c	/^void ka10_lights_main (uint64 data)$/;"	f
ka10_lights_set_aux	PDP10/kx10_lights.c	/^void ka10_lights_set_aux (int n)$/;"	f
kdp_receive	PDP10/ks10_kmc.c	/^static void kdp_receive(int32 dupidx, int count) {$/;"	f	file:
keep_alive	PDP10/ks10_cty.c	/^uint64 keep_alive = 0;$/;"	v
keep_num	PDP10/ks10_cty.c	/^int    keep_num = 0;$/;"	v
key	sim_video.h	/^    uint32 key;                                           \/* key sym *\/$/;"	m	struct:key_event
key_code	PDP10/ka10_stk.c	/^static int key_code = 0;$/;"	v	file:
key_event	sim_video.h	/^struct key_event {$/;"	s
key_names	sim_video.c	/^static const char *key_names[] = $/;"	v	file:
key_to_ascii	display/sim_ws.c	/^key_to_ascii (SIM_KEY_EVENT *kev)$/;"	f	file:
keyboard_switches	PDP10/kx10_dpy.c	/^static uint64 keyboard_switches (void)$/;"	f	file:
keydown	display/win32.c	/^keydown(int k)$/;"	f	file:
keyup	display/win32.c	/^keyup(int k)$/;"	f	file:
kids	scp.c	/^    uint32         kids;$/;"	m	struct:topic	file:
kidwid	scp.c	/^    uint32         kidwid;$/;"	m	struct:topic	file:
klen	PDP10/ka10_pmp.c	/^     uint8              klen;    \/* remaining in key *\/$/;"	m	struct:pmp_t	file:
kmc	PDP10/ks10_kmc.c	/^    int32  kmc;                                 \/* Controlling KMC *\/$/;"	m	struct:dupstate	file:
kmc_baseIn	PDP10/ks10_kmc.c	/^static void kmc_baseIn (int32 k, dupstate *d, uint16 cmdsel2, uint8 line) {$/;"	f	file:
kmc_bufferAddressOut	PDP10/ks10_kmc.c	/^static t_bool kmc_bufferAddressOut (int32 k, uint16 flags, uint16 rx, uint8 line, uint32 bda) {$/;"	f	file:
kmc_cqueue	PDP10/ks10_kmc.c	/^static CQ        kmc_cqueue[KMC_UNITS][CQUEUE_MAX];$/;"	v	file:
kmc_cqueueCount	PDP10/ks10_kmc.c	/^static int32     kmc_cqueueCount[KMC_UNITS];$/;"	v	file:
kmc_cqueueHead	PDP10/ks10_kmc.c	/^static QH        kmc_cqueueHead[KMC_UNITS];$/;"	v	file:
kmc_ctrlIn	PDP10/ks10_kmc.c	/^static void kmc_ctrlIn (int32 k, dupstate *d, int line) {$/;"	f	file:
kmc_ctrlOut	PDP10/ks10_kmc.c	/^static void kmc_ctrlOut (int32 k, uint8 code, uint16 rx, uint8 line, uint32 bda)$/;"	f	file:
kmc_debug	PDP10/ks10_kmc.c	/^static DEBTAB kmc_debug[] = {$/;"	v	file:
kmc_description	PDP10/ks10_kmc.c	/^static const char *kmc_description (DEVICE *dptr) {$/;"	f	file:
kmc_dev	PDP10/ks10_kmc.c	/^DEVICE kmc_dev = {$/;"	v
kmc_dib	PDP10/ks10_kmc.c	/^static DIB kmc_dib = {$/;"	v	file:
kmc_dispatchInputCmd	PDP10/ks10_kmc.c	/^static void kmc_dispatchInputCmd(int32 k) {$/;"	f	file:
kmc_doMicroinstruction	PDP10/ks10_kmc.c	/^static void kmc_doMicroinstruction (int32 k, uint16 instr) {$/;"	f	file:
kmc_dram	PDP10/ks10_kmc.c	/^static uint16    kmc_dram[KMC_UNITS][KMC_DRAMSIZE];$/;"	v	file:
kmc_freecqCount	PDP10/ks10_kmc.c	/^static int32     kmc_freecqCount[KMC_UNITS];$/;"	v	file:
kmc_freecqHead	PDP10/ks10_kmc.c	/^static QH        kmc_freecqHead[KMC_UNITS];$/;"	v	file:
kmc_gflags	PDP10/ks10_kmc.c	/^static int       kmc_gflags[KMC_UNITS];         \/* Miscellaneous gflags *\/$/;"	v	file:
kmc_halt	PDP10/ks10_kmc.c	/^static void kmc_halt (int32 k, int error) {$/;"	f	file:
kmc_help	PDP10/ks10_kmc.c	/^static t_stat kmc_help (FILE *st, DEVICE *dptr,$/;"	f	file:
kmc_int_rxdev	PDP10/ks10_kmc.c	/^DEVICE kmc_int_rxdev = {$/;"	v
kmc_line2dup	PDP10/ks10_kmc.c	/^static dupstate *kmc_line2dup[KMC_UNITS][MAX_ACTIVE];$/;"	v	file:
kmc_mar	PDP10/ks10_kmc.c	/^static uint16    kmc_mar[KMC_UNITS];            \/* Micro Memory Address Register *\/$/;"	v	file:
kmc_masterClear	PDP10/ks10_kmc.c	/^static void kmc_masterClear(int32 k) {$/;"	f	file:
kmc_mna	PDP10/ks10_kmc.c	/^static uint16    kmc_mna[KMC_UNITS];            \/* Maintenance Address Register *\/$/;"	v	file:
kmc_mni	PDP10/ks10_kmc.c	/^static uint16    kmc_mni[KMC_UNITS];            \/* Maintenance Instruction Register *\/$/;"	v	file:
kmc_mod	PDP10/ks10_kmc.c	/^MTAB kmc_mod[] = {$/;"	v
kmc_modemChange	PDP10/ks10_kmc.c	/^static void kmc_modemChange (int32 dupidx) {$/;"	f	file:
kmc_printBDL	PDP10/ks10_kmc.c	/^static t_bool kmc_printBDL(int32 k, uint32 dbits, DEVICE *dev, uint8 line, int32 ba, int prbuf) {$/;"	f	file:
kmc_printBufferIn	PDP10/ks10_kmc.c	/^static t_bool kmc_printBufferIn (int32 k, DEVICE *dev, uint8 line, t_bool rx,$/;"	f	file:
kmc_processCompletions	PDP10/ks10_kmc.c	/^static void kmc_processCompletions (int32 k) {$/;"	f	file:
kmc_readCsr	PDP10/ks10_kmc.c	/^static t_stat kmc_readCsr(DEVICE *dptr, t_addr PA, uint16* data, int32 access) {$/;"	f	file:
kmc_reg	PDP10/ks10_kmc.c	/^static REG kmc_reg[] = {$/;"	v	file:
kmc_reset	PDP10/ks10_kmc.c	/^static t_stat kmc_reset(DEVICE* dptr) {$/;"	f	file:
kmc_rxBufferIn	PDP10/ks10_kmc.c	/^void kmc_rxBufferIn(dupstate *d, int32 ba, uint16 sel6v) {$/;"	f
kmc_rxService	PDP10/ks10_kmc.c	/^static t_stat kmc_rxService (UNIT *rxup) {$/;"	f	file:
kmc_sel0	PDP10/ks10_kmc.c	/^static uint16    kmc_sel0[KMC_UNITS];           \/* CSR0 - BSEL 1,0 *\/$/;"	v	file:
kmc_sel0_decoder	PDP10/ks10_kmc.c	/^static BITFIELD kmc_sel0_decoder[] = {$/;"	v	file:
kmc_sel2	PDP10/ks10_kmc.c	/^static uint16    kmc_sel2[KMC_UNITS];           \/* CSR2 - BSEL 3,2 *\/$/;"	v	file:
kmc_sel2_decoder	PDP10/ks10_kmc.c	/^static BITFIELD kmc_sel2_decoder[] = {$/;"	v	file:
kmc_sel4	PDP10/ks10_kmc.c	/^static uint16    kmc_sel4[KMC_UNITS];           \/* CSR4 - BSEL 5,4 *\/$/;"	v	file:
kmc_sel6	PDP10/ks10_kmc.c	/^static uint16    kmc_sel6[KMC_UNITS];           \/* CSR6 - BSEL 7,6 *\/$/;"	v	file:
kmc_setDeviceCount	PDP10/ks10_kmc.c	/^static t_stat kmc_setDeviceCount (UNIT *txup, int32 val, CONST char *cptr, void *desc) {$/;"	f	file:
kmc_setLineSpeed	PDP10/ks10_kmc.c	/^static t_stat kmc_setLineSpeed (UNIT *txup, int32 val, CONST char *cptr, void *desc) {$/;"	f	file:
kmc_showDeviceCount	PDP10/ks10_kmc.c	/^static t_stat kmc_showDeviceCount (FILE *st, UNIT *txup, int32 val, CONST void *desc) {$/;"	f	file:
kmc_showLineSpeed	PDP10/ks10_kmc.c	/^static t_stat kmc_showLineSpeed (FILE *st, UNIT *txup, int32 val, CONST void *desc) {$/;"	f	file:
kmc_showStatus	PDP10/ks10_kmc.c	/^t_stat kmc_showStatus (FILE *st, UNIT *up, int32 v,  CONST void *dp) {$/;"	f
kmc_startUcode	PDP10/ks10_kmc.c	/^static void kmc_startUcode (int32 k) {$/;"	f	file:
kmc_txAppendBuffer	PDP10/ks10_kmc.c	/^static t_bool kmc_txAppendBuffer(dupstate *d) {$/;"	f	file:
kmc_txBufferIn	PDP10/ks10_kmc.c	/^void kmc_txBufferIn(dupstate *d, int32 ba, uint16 sel6v) {$/;"	f
kmc_txComplete	PDP10/ks10_kmc.c	/^static void kmc_txComplete (int32 dupidx, int status) {$/;"	f	file:
kmc_txNewBd	PDP10/ks10_kmc.c	/^static t_bool kmc_txNewBd(dupstate *d) {$/;"	f	file:
kmc_txNewBdl	PDP10/ks10_kmc.c	/^static t_bool kmc_txNewBdl(dupstate *d) {$/;"	f	file:
kmc_txService	PDP10/ks10_kmc.c	/^static t_stat kmc_txService (UNIT *txup) {$/;"	f	file:
kmc_ucode	PDP10/ks10_kmc.c	/^static uint16    kmc_ucode[KMC_UNITS][KMC_CRAMSIZE];$/;"	v	file:
kmc_upc	PDP10/ks10_kmc.c	/^static uint16    kmc_upc[KMC_UNITS];            \/* Micro PC *\/$/;"	v	file:
kmc_updateBDCount	PDP10/ks10_kmc.c	/^static int32 kmc_updateBDCount(uint32 bda, uint16 *bd) {$/;"	f	file:
kmc_updateDSR	PDP10/ks10_kmc.c	/^static t_bool kmc_updateDSR (dupstate *d) {$/;"	f	file:
kmc_updints	PDP10/ks10_kmc.c	/^static void kmc_updints(int32 k) {$/;"	f	file:
kmc_verifyUcode	PDP10/ks10_kmc.c	/^static const char *kmc_verifyUcode (int32 k) {$/;"	f	file:
kmc_writeCsr	PDP10/ks10_kmc.c	/^static t_stat kmc_writeCsr(DEVICE *dptr, t_addr PA, uint16 data, int32 access) {$/;"	f	file:
label	scp.c	/^    char          *label;$/;"	m	struct:topic	file:
labels	slirp/dnssearch.c	/^    uint8_t *labels;$/;"	m	struct:compact_domain	file:
last_ack_sent	slirp/tcp_var.h	/^        tcp_seq last_ack_sent;$/;"	m	struct:tcpcb
last_addr	PDP10/kx10_cpu.c	/^t_addr  last_addr;                            \/* Last addressed accessed *\/$/;"	v
last_cmd_sts	sim_tmxr.c	/^    uint32 last_cmd_sts;          \/* Response code from last command *\/$/;"	m	struct:status_msg_t	file:
last_coni	PDP10/kx10_imp.c	/^double    last_coni;$/;"	v
last_hz	sim_timer.c	/^    uint32 last_hz;                 \/* prior tick rate *\/$/;"	m	struct:RTC	file:
last_page	PDP10/kx10_cpu.c	/^int     last_page;                            \/* Last page mapped *\/$/;"	v
last_poll_time	sim_tmxr.h	/^    uint32              last_poll_time;                 \/* time of last connection poll *\/$/;"	m	struct:tmxr
last_slowtimo	slirp/slirp.h	/^    u_int last_slowtimo;$/;"	m	struct:Slirp
latency_unit	PDP10/ka10_ai.c	/^static int latency_unit = 0;$/;"	v	file:
lba	sim_disk.c	/^    t_lba               lba;$/;"	m	struct:disk_context	file:
lbn	sim_scsi.h	/^    uint32 lbn;                                         \/* device size (blocks) *\/$/;"	m	struct:scsi_dev_t
ldsc	sim_tmxr.h	/^    TMLN                *ldsc;                          \/* line descriptors *\/$/;"	m	struct:tmxr
ledrows	PDP10/pidp10panel.c	/^u_int8_t ledrows[8] = { 16,17,18,19, 20,21,22,23};$/;"	v
len	PDP10/kl10_nia.c	/^    uint16          len;                \/* Length *\/$/;"	m	struct:udp	file:
len	PDP10/ks10_dz.c	/^    int      len;        \/* Length *\/$/;"	m	struct:_buffer	file:
len	PDP10/kx10_imp.c	/^    uint16          len;                \/* Length *\/$/;"	m	struct:udp	file:
len	scp.c	/^    size_t         len;$/;"	m	struct:topic	file:
len	sim_card.c	/^   int                   len;                 \/* Amount of data in buffer *\/$/;"	m	struct:_card_buffer	file:
len	sim_ether.c	/^    uint32 len;     \/* length this packet (off wire) *\/$/;"	m	struct:pcap_pkthdr	file:
len	sim_ether.h	/^  uint32  len;                                          \/* packet length without CRC *\/$/;"	m	struct:eth_packet
len	slirp/dnssearch.c	/^    size_t len;$/;"	m	struct:compact_domain	file:
len	slirp_glue/glib.h	/^    guint len;$/;"	m	struct:_GArray
len	slirp_glue/glib_qemu_stubs.c	/^    guint len;$/;"	m	struct:__anon44	file:
len	slirp_glue/sim_slirp.c	/^    size_t len;$/;"	m	struct:slirp_write_request	file:
len_err	sim_tmxr.c	/^    uint32 len_err;$/;"	m	struct:status_msg_t	file:
length	sim_ether.c	/^  uint16 length;      \/* The length of the entire UDP datagram, including both header and Data fields. *\/$/;"	m	struct:UDPHeader	file:
level	display/display.c	/^    double level;           \/* decay level (0.5 for half life) *\/$/;"	m	struct:phosphor	file:
level	display/display.c	/^    unsigned char level : 7;    \/* intensity level *\/$/;"	m	struct:point	file:
level	scp.c	/^    uint32         level;$/;"	m	struct:topic	file:
level_scale	display/display.c	/^static float level_scale[NLEVELS];$/;"	v	file:
lib$ediv	sim_timer.c	390;"	d	file:
lib$emul	sim_timer.c	387;"	d	file:
lib$subx	sim_timer.c	389;"	d	file:
lib_loaded	sim_ether.c	/^static int lib_loaded = 0;                  \/* 0=not loaded, 1=loaded, 2=library load failed, 3=Func load failed *\/$/;"	v	file:
lib_loaded	sim_sock.c	/^static int lib_loaded = 0;                      \/* 0=not loaded, 1=loaded, 2=library load failed, 3=Func load failed *\/$/;"	v	file:
lib_name	sim_ether.c	/^static const char* lib_name =$/;"	v	file:
lib_name	sim_sock.c	/^static const char* lib_name = "Ws2_32.dll";$/;"	v	file:
life	PDP10/kx10_imp.c	/^    int               life;                    \/* How many ticks to wait *\/$/;"	m	struct:imp_packet	file:
lights_aux	PDP10/kx10_lights.c	/^static int lights_aux = 0;$/;"	v	file:
lights_handle	PDP10/kx10_lights.c	/^static libusb_device_handle *lights_handle = NULL;$/;"	v	file:
lights_main	PDP10/kx10_lights.c	/^static uint64 lights_main = 0;$/;"	v	file:
line	PDP10/ks10_kmc.c	/^    uint8  line;                                \/* OS-assigned line number *\/$/;"	m	struct:dupstate	file:
line	scp.c	/^    size_t line;$/;"	m	struct:__anon8	file:
line	sim_console.c	/^    int             line;                   \/* remote console line number *\/$/;"	m	struct:REMOTE	file:
line	sim_serial.c	/^    TMLN *line;$/;"	m	struct:open_serial_device	file:
line2dup	PDP10/ks10_kmc.c	438;"	d	file:
lineTwoStep	display/type340.c	/^lineTwoStep(int x0, int y0, int x1, int y1)$/;"	f	file:
lineTwoStep	display/vt11.c	/^lineTwoStep(int32 x0, int32 y0, int32 z0, int32 x1, int32 y1, int32 z1)$/;"	f	file:
line_counter	display/vt11.c	/^static unsigned char line_counter;$/;"	v	file:
line_type	display/vt11.c	269;"	d	file:
lines	sim_tmxr.h	/^    int32               lines;                          \/* # lines *\/$/;"	m	struct:tmxr
linespeed	PDP10/ks10_kmc.c	/^    uint32 linespeed;                           \/* Effective line speed (bps) *\/$/;"	m	struct:dupstate	file:
linetype	display/vt11.c	/^enum linetype { SOLID=0, LONG_DASH, SHORT_DASH, DOT_DASH };$/;"	g	file:
linkstate	PDP10/ks10_kmc.c	/^    int32  linkstate;                           \/* Line Link Status (i.e. 1 when DCD\/DSR is on, 0 otherwise *\/$/;"	m	struct:dupstate	file:
little_endian	sim_frontpanel.c	/^static int little_endian;$/;"	v	file:
lname	sim_defs.h	/^    char                *lname;                         \/* logical name *\/$/;"	m	struct:DEVICE
lnorder	sim_tmxr.h	/^    int32               *lnorder;                       \/* line connection order *\/$/;"	m	struct:tmxr
lnorder_test	sim_tmxr.c	/^static struct lnorder_test {$/;"	s	file:
lnorders	sim_tmxr.c	/^    } lnorders[] = {$/;"	v	typeref:struct:lnorder_test	file:
load_byte	PDP10/kx10_cpu.c	/^load_byte(int n, uint64 *data, uint64 fill, int cnt)$/;"	f
load_cmd	scp.c	/^t_stat load_cmd (int32 flag, CONST char *cptr)$/;"	f
load_dmp	PDP10/kx10_sys.c	/^t_stat load_dmp (FILE *fileref)$/;"	f
load_exb	PDP10/kx10_sys.c	/^t_stat load_exb (FILE *fileref, int ftype)$/;"	f
load_exe	PDP10/kx10_sys.c	/^t_stat load_exe (FILE *fileref, int ftype)$/;"	f
load_function	sim_ether.c	/^static void load_function(const char* function, _func* func_ptr) {$/;"	f	file:
load_function	sim_sock.c	/^static void load_function(const char* function, _func* func_ptr) {$/;"	f	file:
load_pcap	sim_ether.c	/^int load_pcap(void) {$/;"	f
load_quantum	PDP10/kx10_cpu.c	/^load_quantum()$/;"	f
load_rim	PDP10/kx10_sys.c	/^t_stat load_rim (FILE *fileref)$/;"	f
load_sav	PDP10/kx10_sys.c	/^t_stat load_sav (FILE *fileref, int ftype)$/;"	f
load_sblk	PDP10/kx10_sys.c	/^t_stat load_sblk (FILE *fileref)$/;"	f
load_tlb	PDP10/kx10_cpu.c	/^load_tlb(int uf, int page)$/;"	f
load_tlb	PDP10/kx10_cpu.c	/^load_tlb(int uf, int page, int wr)$/;"	f
load_ws2	sim_sock.c	/^int load_ws2(void) {$/;"	f
loc	sim_defs.h	/^    void                *loc;                           \/* location *\/$/;"	m	struct:REG
localtime_r	slirp_glue/qemu/sysemu/os-win32.h	87;"	d
lock	sim_disk.c	/^    pthread_mutex_t     lock;$/;"	m	struct:disk_context	file:
lock	sim_ether.h	/^  pthread_mutex_t     lock;$/;"	m	struct:eth_device
lock	sim_tape.c	/^    pthread_mutex_t     lock;$/;"	m	struct:tape_context	file:
logfiletmpl	sim_tmxr.h	/^    char                logfiletmpl[FILENAME_MAX];      \/* template logfile name *\/$/;"	m	struct:tmxr
logic	sim_defs.h	/^    int32               logic;                          \/* logical operator *\/$/;"	m	struct:SCHTAB
logicalCyl	sim_imd.h	/^    uint8 logicalCyl[MAX_SPT];$/;"	m	struct:__anon25
logicalHead	sim_imd.h	/^    uint8 logicalHead[MAX_SPT];$/;"	m	struct:__anon25
loop	PDP10/kx10_imp.c	/^    int               loop;                    \/* loopback packets *\/$/;"	m	struct:imp_stats	file:
loop_read	sim_tmxr.c	/^static int32 loop_read (TMLN *lp, char *buf, int32 bufsize)$/;"	f	file:
loop_read_ex	sim_tmxr.c	/^static int32 loop_read_ex (TMLN *lp, char *buf, int32 bufsize)$/;"	f	file:
loop_write	sim_tmxr.c	/^static int32 loop_write (TMLN *lp, char *buf, int32 length)$/;"	f	file:
loop_write_ex	sim_tmxr.c	/^static int32 loop_write_ex (TMLN *lp, char *buf, int32 length, t_bool prefix_datagram)$/;"	f	file:
loopback	sim_tmxr.h	/^    t_bool              loopback;                       \/* Line in loopback mode *\/$/;"	m	struct:tmln
loopback_addr	slirp/slirp.c	/^struct in_addr loopback_addr;$/;"	v	typeref:struct:in_addr
loopback_mask	slirp/slirp.c	/^unsigned long loopback_mask;$/;"	v
loopback_packets_processed	sim_ether.h	/^  uint32        loopback_packets_processed;             \/* Total Loopback Packets Processed *\/$/;"	m	struct:eth_device
loopback_self_rcvd_total	sim_ether.h	/^  int32         loopback_self_rcvd_total;               \/* total loopback packets seen *\/$/;"	m	struct:eth_device
loopback_self_sent	sim_ether.h	/^  int32         loopback_self_sent;                     \/* loopback packets sent but not seen *\/$/;"	m	struct:eth_device
loopback_self_sent_total	sim_ether.h	/^  int32         loopback_self_sent_total;               \/* total loopback packets sent *\/$/;"	m	struct:eth_device
loopbuf	sim_tmxr.h	/^struct loopbuf {$/;"	s
loss	sim_ether.h	/^  int                 loss;$/;"	m	struct:eth_queue
lp	sim_console.c	/^    TMLN            *lp;                    \/* mux line\/socket for remote session *\/$/;"	m	struct:REMOTE	file:
lp0_down	display/vt11.c	/^static unsigned char    lp0_down = 0;   \/* 1 bit: LP #0 switch was depressed *\/$/;"	v	file:
lp0_hit	display/vt11.c	/^static unsigned char lp0_hit = 0;       \/* 1 bit: light pen #0 detected hit *\/$/;"	v	file:
lp0_intr_ena	display/vt11.c	388;"	d	file:
lp0_sw_intr_ena	display/vt11.c	389;"	d	file:
lp0_sw_state	display/vt11.c	/^static unsigned char lp0_sw_state = 0;  \/* last known LP tip-switch state *\/$/;"	v	file:
lp0_up	display/vt11.c	/^static unsigned char    lp0_up = 0;     \/* 1 bit: LP #0 switch was released *\/$/;"	v	file:
lp1_down	display/vt11.c	/^static unsigned char    lp1_down = 0;   \/* 1 bit: LP #1 switch was depressed *\/$/;"	v	file:
lp1_hit	display/vt11.c	/^static unsigned char    lp1_hit = 0;    \/* 1 bit: light pen #1 detected hit *\/$/;"	v	file:
lp1_intr_ena	display/vt11.c	395;"	d	file:
lp1_sw_intr_ena	display/vt11.c	396;"	d	file:
lp1_up	display/vt11.c	/^static unsigned char    lp1_up = 0;     \/* 1 bit: LP #1 switch was released *\/$/;"	v	file:
lp20_attach	PDP10/kl10_fe.c	/^t_stat lp20_attach (UNIT *uptr, CONST char *cptr)$/;"	f
lp20_attach	PDP10/ks10_lp.c	/^t_stat lp20_attach (UNIT *uptr, CONST char *cptr)$/;"	f
lp20_ba	PDP10/ks10_lp.c	/^uint32          lp20_ba;$/;"	v
lp20_buf	PDP10/ks10_lp.c	/^uint8           lp20_buf;$/;"	v
lp20_buffer	PDP10/kl10_fe.c	/^char            lp20_buffer[134 * 3];$/;"	v
lp20_buffer	PDP10/ks10_lp.c	/^char            lp20_buffer[134 * 3];$/;"	v
lp20_chksum	PDP10/ks10_lp.c	/^uint8           lp20_chksum;$/;"	v
lp20_col	PDP10/ks10_lp.c	/^uint8           lp20_col;$/;"	v
lp20_cs1	PDP10/ks10_lp.c	/^uint16          lp20_cs1;$/;"	v
lp20_cs2	PDP10/ks10_lp.c	/^uint16          lp20_cs2;$/;"	v
lp20_data	PDP10/ks10_lp.c	/^uint8           lp20_data;$/;"	v
lp20_description	PDP10/kl10_fe.c	/^const char *lp20_description (DEVICE *dptr)$/;"	f
lp20_description	PDP10/ks10_lp.c	/^const char *lp20_description (DEVICE *dptr)$/;"	f
lp20_detach	PDP10/kl10_fe.c	/^t_stat lp20_detach (UNIT *uptr)$/;"	f
lp20_detach	PDP10/ks10_lp.c	/^t_stat lp20_detach (UNIT *uptr)$/;"	f
lp20_dev	PDP10/kl10_fe.c	/^DEVICE lp20_dev = {$/;"	v
lp20_dev	PDP10/ks10_lp.c	/^DEVICE lp20_dev = {$/;"	v
lp20_dib	PDP10/ks10_lp.c	/^DIB lp20_dib = { 0775400, 017, 0754, 5, 3, &lp20_read, &lp20_write, NULL, 0, 0 };$/;"	v
lp20_duvfa_state	PDP10/ks10_lp.c	/^int             lp20_duvfa_state = 0;$/;"	v
lp20_dvfu	PDP10/kl10_fe.c	/^uint16          lp20_dvfu[] = {   \/* Default VFU *\/$/;"	v
lp20_dvfu	PDP10/ks10_lp.c	/^uint16          lp20_dvfu[] = {   \/* Default VFU *\/$/;"	v
lp20_getlpp	PDP10/kl10_fe.c	/^lp20_getlpp(FILE *st, UNIT *uptr, int32 v, CONST void *desc)$/;"	f
lp20_getlpp	PDP10/ks10_lp.c	/^lp20_getlpp(FILE *st, UNIT *uptr, int32 v, CONST void *desc)$/;"	f
lp20_help	PDP10/kl10_fe.c	/^t_stat lp20_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag,$/;"	f
lp20_help	PDP10/ks10_lp.c	/^t_stat lp20_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag,$/;"	f
lp20_index	PDP10/ks10_lp.c	/^int             lp20_index = 0;$/;"	v
lp20_init	PDP10/ks10_lp.c	/^t_stat lp20_init (UNIT *uptr)$/;"	f
lp20_mod	PDP10/kl10_fe.c	/^MTAB lp20_mod[] = {$/;"	v
lp20_mod	PDP10/ks10_lp.c	/^MTAB lp20_mod[] = {$/;"	v
lp20_odd	PDP10/ks10_lp.c	/^int             lp20_odd = 0;$/;"	v
lp20_output	PDP10/kl10_fe.c	/^lp20_output(UNIT *uptr, char c) {$/;"	f
lp20_output	PDP10/ks10_lp.c	/^lp20_output(UNIT *uptr, uint8 c) {$/;"	f
lp20_pagcnt	PDP10/ks10_lp.c	/^uint16          lp20_pagcnt;$/;"	v
lp20_printline	PDP10/kl10_fe.c	/^lp20_printline(UNIT *uptr, int nl) {$/;"	f
lp20_printline	PDP10/ks10_lp.c	/^lp20_printline(UNIT *uptr, int nl) {$/;"	f
lp20_queue	PDP10/kl10_fe.c	/^struct _buffer lp20_queue;$/;"	v	typeref:struct:_buffer
lp20_ram	PDP10/kl10_fe.c	/^uint16          lp20_ram[256];$/;"	v
lp20_ram	PDP10/ks10_lp.c	/^uint16          lp20_ram[256];$/;"	v
lp20_read	PDP10/ks10_lp.c	/^lp20_read(DEVICE *dptr, t_addr addr, uint16 *data, int32 access)$/;"	f
lp20_reg	PDP10/kl10_fe.c	/^REG lp20_reg[] = {$/;"	v
lp20_reg	PDP10/ks10_lp.c	/^REG lp20_reg[] = {$/;"	v
lp20_reset	PDP10/kl10_fe.c	/^t_stat lp20_reset (DEVICE *dptr)$/;"	f
lp20_reset	PDP10/ks10_lp.c	/^t_stat lp20_reset (DEVICE *dptr)$/;"	f
lp20_setlpp	PDP10/kl10_fe.c	/^lp20_setlpp(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
lp20_setlpp	PDP10/ks10_lp.c	/^lp20_setlpp(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
lp20_svc	PDP10/kl10_fe.c	/^t_stat lp20_svc (UNIT *uptr)$/;"	f
lp20_svc	PDP10/ks10_lp.c	/^lp20_svc (UNIT *uptr)$/;"	f
lp20_unit	PDP10/kl10_fe.c	/^UNIT lp20_unit = {$/;"	v
lp20_unit	PDP10/ks10_lp.c	/^UNIT lp20_unit = {$/;"	v
lp20_update_chkirq	PDP10/ks10_lp.c	/^lp20_update_chkirq (UNIT *uptr, int done, int irq)$/;"	f
lp20_update_ready	PDP10/ks10_lp.c	/^lp20_update_ready(UNIT *uptr, uint16 setrdy, uint16 clrrdy)$/;"	f
lp20_vfu	PDP10/kl10_fe.c	/^uint16          lp20_vfu[256];$/;"	v
lp20_vfu	PDP10/ks10_lp.c	/^uint16          lp20_vfu[256];$/;"	v
lp20_wcnt	PDP10/ks10_lp.c	/^uint16          lp20_wcnt;$/;"	v
lp20_write	PDP10/ks10_lp.c	/^lp20_write(DEVICE *dptr, t_addr addr, uint16 data, int32 access)$/;"	f
lp_ena	display/type340.c	/^    unsigned char lp_ena;       \/* 1 bit *\/$/;"	m	struct:type340	file:
lp_intensify	display/vt11.c	483;"	d	file:
lp_suppress	display/vt11.c	/^static unsigned char lp_suppress = 0;   \/* edge columns of char. (VT11 only) *\/$/;"	v	file:
lp_xpos	display/vt11.c	/^static int           lp_xpos;           \/* (normalized) *\/$/;"	v	file:
lp_ypos	display/vt11.c	/^static int           lp_ypos;           \/* (normalized) *\/$/;"	v	file:
lp_zpos	display/vt11.c	/^static int32 lp_zpos;                   \/* (scaled) *\/$/;"	v	file:
lpb	sim_tmxr.h	/^    char                *lpb;                           \/* loopback buffer *\/$/;"	m	struct:tmln
lpbcnt	sim_tmxr.h	/^    int32               lpbcnt;                         \/* loopback buf used count *\/$/;"	m	struct:tmln
lpbpi	sim_tmxr.h	/^    int32               lpbpi;                          \/* loopback buf insert *\/$/;"	m	struct:tmln
lpbpr	sim_tmxr.h	/^    int32               lpbpr;                          \/* loopback buf remove *\/$/;"	m	struct:tmln
lpbsz	sim_tmxr.h	/^    int32               lpbsz;                          \/* loopback buffer size *\/$/;"	m	struct:tmln
lphit_irq	display/vt11.c	/^static unsigned char lphit_irq = 0;     \/* intr. on light-pen hit *\/$/;"	v	file:
lpoint	display/type340.c	/^lpoint(int x, int y)$/;"	f
lpoint	display/vt11.c	/^lpoint(int32 x, int32 y, int32 z)$/;"	f	file:
lport	slirp/misc.h	/^    uint16_t lport;$/;"	m	struct:emu_t
lport	slirp/misc.h	/^    uint16_t lport;$/;"	m	struct:tos_t
lport	slirp_glue/sim_slirp.c	/^    int lport;$/;"	m	struct:redir_tcp_udp	file:
lpsw_irq	display/vt11.c	/^static unsigned char lpsw_irq = 0;      \/* intr. on tip-switch state change *\/$/;"	v	file:
lpt_attach	PDP10/kx10_lp.c	/^t_stat lpt_attach (UNIT *uptr, CONST char *cptr)$/;"	f
lpt_buffer	PDP10/kx10_lp.c	/^char            lpt_buffer[134 * 3];$/;"	v
lpt_chbuf	PDP10/kx10_lp.c	/^uint8           lpt_chbuf[5];             \/* Read in Character buffers *\/$/;"	v
lpt_description	PDP10/kx10_lp.c	/^const char *lpt_description (DEVICE *dptr)$/;"	f
lpt_detach	PDP10/kx10_lp.c	/^t_stat lpt_detach (UNIT *uptr)$/;"	f
lpt_dev	PDP10/kx10_lp.c	/^DEVICE lpt_dev = {$/;"	v
lpt_devio	PDP10/kx10_lp.c	/^t_stat lpt_devio(uint32 dev, uint64 *data) {$/;"	f
lpt_dib	PDP10/kx10_lp.c	/^DIB lpt_dib = { LP_DEVNUM, 1, &lpt_devio, NULL };$/;"	v
lpt_getdev	PDP10/kx10_lp.c	/^lpt_getdev(FILE *st, UNIT *uptr, int32 v, CONST void *desc)$/;"	f
lpt_getlpp	PDP10/kx10_lp.c	/^lpt_getlpp(FILE *st, UNIT *uptr, int32 v, CONST void *desc)$/;"	f
lpt_help	PDP10/kx10_lp.c	/^t_stat lpt_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
lpt_mod	PDP10/kx10_lp.c	/^MTAB lpt_mod[] = {$/;"	v
lpt_output	PDP10/kx10_lp.c	/^lpt_output(UNIT *uptr, char c) {$/;"	f
lpt_printline	PDP10/kx10_lp.c	/^lpt_printline(UNIT *uptr, int nl) {$/;"	f
lpt_reg	PDP10/kx10_lp.c	/^REG lpt_reg[] = {$/;"	v
lpt_reset	PDP10/kx10_lp.c	/^t_stat lpt_reset (DEVICE *dptr)$/;"	f
lpt_setdev	PDP10/kx10_lp.c	/^lpt_setdev(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
lpt_setlpp	PDP10/kx10_lp.c	/^lpt_setlpp(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
lpt_svc	PDP10/kx10_lp.c	/^t_stat lpt_svc (UNIT *uptr)$/;"	f
lpt_unit	PDP10/kx10_lp.c	/^UNIT lpt_unit = {$/;"	v
lseq	PDP10/kx10_imp.c	/^    uint32            lseq;                    \/* Sequence number last adjusted *\/$/;"	m	struct:imp_map	file:
lun	sim_scsi.h	/^    uint32 lun;                                         \/* selected lun *\/$/;"	m	struct:scsi_bus_t
m_adj	slirp/mbuf.c	/^m_adj(struct mbuf *m, int len)$/;"	f
m_cat	slirp/mbuf.c	/^m_cat(struct mbuf *m, struct mbuf *n)$/;"	f
m_cleanup	slirp/mbuf.c	/^void m_cleanup(Slirp *slirp)$/;"	f
m_copy	slirp/mbuf.c	/^m_copy(struct mbuf *n, struct mbuf *m, int off, int len)$/;"	f
m_dat	slirp/mbuf.h	/^                char    m_dat[1]; \/* ANSI don't like 0 sized arrays *\/$/;"	m	union:mbuf::__anon40
m_data	slirp/mbuf.h	/^        caddr_t m_data;                 \/* Location of data *\/$/;"	m	struct:mbuf
m_ext	slirp/mbuf.h	/^                char    *m_ext;$/;"	m	union:mbuf::__anon40
m_flags	slirp/mbuf.h	/^        int     m_flags;                \/* Misc flags *\/$/;"	m	struct:mbuf
m_free	slirp/mbuf.c	/^m_free(struct mbuf *m)$/;"	f
m_freelist	slirp/slirp.h	/^    struct mbuf m_freelist, m_usedlist;$/;"	m	struct:Slirp	typeref:struct:Slirp::mbuf
m_get	slirp/mbuf.c	/^m_get(Slirp *slirp)$/;"	f
m_inc	slirp/mbuf.c	/^m_inc(struct mbuf *m, int size)$/;"	f
m_init	slirp/mbuf.c	/^m_init(Slirp *slirp)$/;"	f
m_len	slirp/mbuf.h	/^        int     m_len;                  \/* Amount of data in this mbuf *\/$/;"	m	struct:mbuf
m_next	slirp/mbuf.h	/^        struct  mbuf *m_next;           \/* Linked list of mbufs *\/$/;"	m	struct:mbuf	typeref:struct:mbuf::mbuf
m_nextpkt	slirp/mbuf.h	/^        struct  mbuf *m_nextpkt;        \/* Next packet in queue\/record *\/$/;"	m	struct:mbuf	typeref:struct:mbuf::mbuf
m_prev	slirp/mbuf.h	/^        struct  mbuf *m_prev;$/;"	m	struct:mbuf	typeref:struct:mbuf::mbuf
m_prevpkt	slirp/mbuf.h	/^        struct  mbuf *m_prevpkt;        \/* Flags aren't used in the output queue *\/$/;"	m	struct:mbuf	typeref:struct:mbuf::mbuf
m_size	slirp/mbuf.h	/^        int     m_size;                 \/* Size of data *\/$/;"	m	struct:mbuf
m_so	slirp/mbuf.h	/^        struct  socket *m_so;$/;"	m	struct:mbuf	typeref:struct:mbuf::socket
m_usedlist	slirp/slirp.h	/^    struct mbuf m_freelist, m_usedlist;$/;"	m	struct:Slirp	typeref:struct:Slirp::
mac	PDP10/kl10_nia.c	/^    ETH_MAC           mac;                     \/* Hardware MAC addresses *\/$/;"	m	struct:nia_device	file:
mac	PDP10/kx10_imp.c	450;"	d	file:
macaddr	slirp/bootp.h	/^    uint8_t macaddr[6];$/;"	m	struct:__anon41
macro	sim_defs.h	/^    const char          *macro;                         \/* Initializer Macro Name *\/$/;"	m	struct:REG
macs	PDP10/kl10_nia.c	/^    ETH_MAC           macs[20];                \/* Watched Multi-cast addresses *\/$/;"	m	struct:nia_device	file:
macs	PDP10/kx10_imp.c	/^    ETH_MAC           macs[2];                 \/* Hardware MAC addresses *\/$/;"	m	struct:imp_device	file:
macs_n	PDP10/kl10_nia.c	/^    int               macs_n;                  \/* Number of multi-cast addresses *\/$/;"	m	struct:nia_device	file:
main	display/test.c	/^main(void) {$/;"	f
main	display/tst340.c	/^main() {$/;"	f
main	display/vttest.c	/^main(void) {$/;"	f
main	scp.c	/^int main (int argc, char *argv[])$/;"	f
main	sim_BuildROMs.c	/^main(int argc, char **argv)$/;"	f
main	sim_video.c	/^int main (int argc, char *argv[])$/;"	f
main	sim_video.c	481;"	d	file:
mainWind	display/carbon.c	/^static WindowRef                mainWind;$/;"	v	file:
main_argc	sim_video.c	/^static int main_argc;$/;"	v	file:
main_argv	sim_video.c	/^static char **main_argv;$/;"	v	file:
main_thread	sim_video.c	/^int main_thread (void *arg)$/;"	f
maint1	display/vt11.c	/^static unsigned char maint1 = 0;        \/* 1 bit: maintenance switch #1 *\/$/;"	v	file:
maint2	display/vt11.c	/^static unsigned char maint2 = 0;        \/* 1 bit: maintenance switch #2 *\/$/;"	v	file:
maint3	display/vt11.c	/^static unsigned char maint3 = 0;        \/* 1 bit: maintenance switch #3 *\/$/;"	v	file:
maint4	display/vt11.c	/^static unsigned char maint4 = 0;        \/* 1 bit: maintenance switch #4 *\/$/;"	v	file:
mantra	sim_frontpanel.c	/^static unsigned char mantra[] = {$/;"	v	file:
mantra	sim_tmxr.c	/^static u_char mantra[] = {                  \/* Telnet Option Negotiation Mantra *\/$/;"	v	file:
manufacturer	sim_scsi.h	/^    const char *manufacturer;                           \/* manufacturer string *\/$/;"	m	struct:scsi_dev_t
maoff	PDP10/kx10_cpu.c	/^int     maoff = 0;                            \/* Offset for traps *\/$/;"	v
map	PDP10/ka10_iii.c	/^uint8 map[128][18] = {$/;"	v
map	PDP10/pidp10panel.c	/^    void *map;$/;"	m	struct:bcm2835_peripheral	file:
map	sim_disk.c	/^    RSTS_DCMAP  map;$/;"	m	struct:_rstsContext	file:
map_key	display/sim_ws.c	/^map_key(int k)$/;"	f	file:
map_key	display/win32.c	/^map_key(int k)$/;"	f	file:
map_peripheral	PDP10/pidp10panel.c	/^int map_peripheral(struct bcm2835_peripheral *p)$/;"	f
mapkey	display/x11.c	/^mapkey(e)$/;"	f	file:
mar	PDP10/ks10_kmc.c	427;"	d	file:
mar	PDP10/kx10_cpu.c	/^uint64  mar;                                  \/* Memory address compare *\/$/;"	v
mar	PDP10/kx10_cpu.c	279;"	d	file:
mask	PDP10/kx10_imp.c	/^uint32 mask[] = {$/;"	v
mask	display/sim_ws.c	/^    Uint8 *mask;$/;"	m	struct:cursor	file:
mask	sim_defs.h	/^    t_value             *mask;                          \/* mask for logical *\/$/;"	m	struct:SCHTAB
mask	sim_defs.h	/^    uint32              mask;                           \/* control bit *\/$/;"	m	struct:DEBTAB
mask	sim_defs.h	/^    uint32              mask;                           \/* mask *\/$/;"	m	struct:MTAB
maskbits	PDP10/kx10_imp.c	/^    int               maskbits;                \/* Mask length *\/$/;"	m	struct:imp_device	file:
maskbits	slirp_glue/sim_slirp.c	/^    int maskbits;$/;"	m	struct:sim_slirp	file:
masks	PDP10/kx10_sys.c	/^static const uint64 masks[] = {$/;"	v	file:
master	sim_tmxr.h	/^    SOCKET              master;                         \/* line specific master socket *\/$/;"	m	struct:tmln
master	sim_tmxr.h	/^    SOCKET              master;                         \/* master socket *\/$/;"	m	struct:tmxr
match	sim_defs.h	/^    uint32              match;                          \/* match *\/$/;"	m	struct:MTAB
match	sim_defs.h	/^    uint8               *match;                         \/* match string *\/$/;"	m	struct:EXPTAB
matchHelpTopicName	scp.c	/^static size_t matchHelpTopicName (TOPIC *topic, const char *token)$/;"	f	file:
match_ext	scp.c	/^CONST char *match_ext (CONST char *fnam, const char *ext)$/;"	f
match_pattern	sim_defs.h	/^    char                *match_pattern;                 \/* match pattern for format *\/$/;"	m	struct:EXPTAB
max	sim_ether.h	/^  int                 max;$/;"	m	struct:eth_queue
max	sim_tape.c	/^    uint32              max;$/;"	m	struct:tape_context	file:
max	slirp/slirp.h	358;"	d
max_sndwnd	slirp/tcp_var.h	/^        uint32_t max_sndwnd;            \/* largest window peer has offered *\/$/;"	m	struct:tcpcb
max_xfer_sectors	sim_disk.c	/^    t_seccnt max_xfer_sectors;$/;"	m	struct:disk_test_coverage	file:
max_xfer_size	sim_disk.c	/^    uint32 max_xfer_size;$/;"	m	struct:disk_test_coverage	file:
mb	PDP10/kx10_cpu.c	/^    uint64      mb;$/;"	m	struct:__anon1	file:
mb_lid	sim_disk.c	/^    uint16  mb_lid;$/;"	m	struct:_RSTS_MFDBLOCKETTE	file:
mb_lppn	sim_disk.c	/^    uint16  mb_lppn;$/;"	m	struct:_RSTS_MFDBLOCKETTE	file:
mb_malnk	sim_disk.c	/^    uint16  mb_malnk;$/;"	m	struct:_RSTS_MFDBLOCKETTE	file:
mb_mbm1	sim_disk.c	/^    uint16  mb_mbm1;$/;"	m	struct:_RSTS_MFDBLOCKETTE	file:
mb_reserved1	sim_disk.c	/^    uint16  mb_reserved1;$/;"	m	struct:_RSTS_MFDBLOCKETTE	file:
mb_reserved2	sim_disk.c	/^    uint16  mb_reserved2;$/;"	m	struct:_RSTS_MFDBLOCKETTE	file:
mb_reserved3	sim_disk.c	/^    uint16  mb_reserved3;$/;"	m	struct:_RSTS_MFDBLOCKETTE	file:
mb_ulnk	sim_disk.c	/^    uint16  mb_ulnk;$/;"	m	struct:_RSTS_MFDBLOCKETTE	file:
mbuf	slirp/mbuf.h	/^struct mbuf {$/;"	s
mbuf_alloced	slirp/slirp.h	/^    int mbuf_alloced;$/;"	m	struct:Slirp
mbuf_ptr	slirp/ip.h	/^struct mbuf_ptr {$/;"	s
mcast_addr	PDP10/kl10_nia.c	/^    t_addr            mcast_addr;              \/* Address of Multicast table *\/$/;"	m	struct:nia_device	file:
mcp23017_to_input	PDP10/pidp10panel.c	/^static void mcp23017_to_input(void)$/;"	f	file:
mcp23017_to_output	PDP10/pidp10panel.c	/^static void mcp23017_to_output(void)$/;"	f	file:
media_removed	sim_disk.c	/^    uint32              media_removed;      \/* Media not available flag *\/$/;"	m	struct:disk_context	file:
mem_data	scp.c	/^static const unsigned char *mem_data = NULL;$/;"	v	file:
mem_data_size	scp.c	/^static size_t mem_data_size = 0;$/;"	v	file:
mem_fd	PDP10/pidp10panel.c	/^    int mem_fd;$/;"	m	struct:bcm2835_peripheral	file:
mem_prot	PDP10/kx10_cpu.c	/^int     mem_prot;                             \/* Memory protection flag *\/$/;"	v
memmove	slirp/slirp.h	48;"	d
memory_create_tape	sim_tape.c	/^MEMORY_TAPE *memory_create_tape (void)$/;"	f
memory_free_tape	sim_tape.c	/^static void memory_free_tape (void *vtape)$/;"	f	file:
memory_tape_add_block	sim_tape.c	/^static t_bool memory_tape_add_block (MEMORY_TAPE *tape, uint8 *block, uint32 size)$/;"	f	file:
menu	display/vt11.c	327;"	d	file:
message	scp.c	/^    const char *message;$/;"	m	struct:scp_error	file:
message	sim_defs.h	/^    void                (*message)(const char *unechoed_cmdline, t_stat stat);$/;"	m	struct:CTAB
mflags	sim_tmxr.c	/^    uint16 mflags;$/;"	m	struct:status_msg_t	file:
min	slirp/slirp.h	357;"	d
mkdir_cmd	scp.c	/^t_stat mkdir_cmd (int32 flg, CONST char *cptr)$/;"	f
ml_mbm1	sim_disk.c	/^    uint16  ml_mbm1;$/;"	m	struct:_RSTS_MFDLABEL	file:
ml_packid	sim_disk.c	/^    uint16  ml_packid[2];$/;"	m	struct:_RSTS_MFDLABEL	file:
ml_pcs	sim_disk.c	/^    uint16  ml_pcs;$/;"	m	struct:_RSTS_MFDLABEL	file:
ml_pstat	sim_disk.c	/^    uint16  ml_pstat;$/;"	m	struct:_RSTS_MFDLABEL	file:
ml_reserved1	sim_disk.c	/^    uint16  ml_reserved1;$/;"	m	struct:_RSTS_MFDLABEL	file:
ml_reserved2	sim_disk.c	/^    uint16  ml_reserved2;$/;"	m	struct:_RSTS_MFDLABEL	file:
ml_ulnk	sim_disk.c	/^    uint16  ml_ulnk;$/;"	m	struct:_RSTS_MFDLABEL	file:
mna	PDP10/ks10_kmc.c	429;"	d	file:
mni	PDP10/ks10_kmc.c	431;"	d	file:
mode	PDP10/kx10_disk.c	/^    int         mode;$/;"	m	struct:disk_formats	file:
mode	display/type340.c	/^    enum mode mode : 8;         \/* 3 bits *\/$/;"	m	struct:type340	typeref:enum:type340::mode	file:
mode	display/type340.c	/^enum mode { PARAM=0, POINT, SLAVE, CHAR, VECTOR, VCONT, INCR, SUBR };$/;"	g	file:
mode	sim_card.c	/^    uint32      mode;$/;"	m	struct:card_formats	file:
mode	sim_imd.h	/^    uint8 mode;$/;"	m	struct:__anon24
mode	sim_imd.h	/^    uint8 mode;$/;"	m	struct:__anon25
mode_field	display/vt11.c	/^static unsigned char mode_field = 0;    \/* copy of control instr. bits 14-11 *\/$/;"	v	file:
modem_control	sim_tmxr.h	/^    t_bool              modem_control;                  \/* line supports modem control behaviors *\/$/;"	m	struct:tmln
modem_control	sim_tmxr.h	/^    t_bool              modem_control;                  \/* multiplexer supports modem control behaviors *\/$/;"	m	struct:tmxr
modembits	sim_tmxr.h	/^    int32               modembits;                      \/* modem bits which are currently set *\/$/;"	m	struct:tmln
modifiers	sim_defs.h	/^    MTAB                *modifiers;                     \/* modifiers *\/$/;"	m	struct:DEVICE
modify	PDP10/kx10_cpu.c	/^int     modify;                               \/* Modify cycle *\/$/;"	v
mon_base_reg	PDP10/kx10_cpu.c	/^int     mon_base_reg;                         \/* Monitor base register *\/$/;"	v
monitor_printf	slirp_glue/glib_qemu_stubs.c	/^void monitor_printf(Monitor *mon, const char *fmt, ...)$/;"	f
more	display/vttest.c	/^static int more;                        \/* set until end of d.file seen *\/$/;"	v	file:
more_arc	display/vt11.c	/^static unsigned char more_arc = 0;      \/* remembers LP hit in middle of arc *\/$/;"	v	file:
more_vect	display/vt11.c	/^static unsigned char more_vect = 0;     \/* remembers LP hit in middle of vec. *\/$/;"	v	file:
motion_callback	sim_video.c	/^static VID_GAMEPAD_CALLBACK motion_callback[10];$/;"	v	file:
mouseRef	display/carbon.c	/^static MouseTrackingRef         mouseRef;$/;"	v	file:
mouse_event	sim_video.h	/^struct mouse_event {$/;"	s
mousepos	display/win32.c	/^mousepos(DWORD lp)$/;"	f	file:
mp	sim_tmxr.h	/^    TMXR                *mp;                            \/* back pointer to mux *\/$/;"	m	struct:tmln
mptr	slirp/ip.h	/^        struct mbuf *mptr;$/;"	m	struct:mbuf_ptr	typeref:struct:mbuf_ptr::mbuf
mpx_enable	PDP10/kx10_cpu.c	/^int     mpx_enable;                           \/* Enable MPX device *\/$/;"	v
msg	sim_ether.h	/^  uint8   msg[ETH_FRAME_SIZE];                          \/* ethernet frame (message) *\/$/;"	m	struct:eth_packet
msg	slirp_glue/sim_slirp.c	/^    char msg[1518];$/;"	m	struct:slirp_write_request	file:
msg_id	PDP10/kx10_imp.c	/^    uint16            msg_id;                  \/* Message ID *\/$/;"	m	struct:imp_packet	file:
msgthread	display/win32.c	/^msgthread(LPVOID arg)$/;"	f	file:
msgthread_id	display/win32.c	/^static DWORD msgthread_id;$/;"	v	file:
msize	sim_defs.h	/^    t_stat              (*msize)(UNIT *up, int32 v, CONST char *cp, void *dp);$/;"	m	struct:DEVICE
msleep	sim_frontpanel.c	68;"	d	file:
msleep	sim_frontpanel.c	85;"	d	file:
mstring	sim_defs.h	/^    const char          *mstring;                       \/* match string *\/$/;"	m	struct:MTAB
mt_attach	PDP10/kx10_mt.c	/^mt_attach(UNIT * uptr, CONST char *file)$/;"	f
mt_boot	PDP10/kx10_mt.c	/^mt_boot(int32 unit_num, DEVICE * dptr)$/;"	f
mt_buffer	PDP10/kx10_mt.c	/^uint8               mt_buffer[BUFFSIZE];$/;"	v
mt_description	PDP10/kx10_mt.c	/^const char *mt_description (DEVICE *dptr)$/;"	f
mt_detach	PDP10/kx10_mt.c	/^mt_detach(UNIT * uptr)$/;"	f
mt_dev	PDP10/kx10_mt.c	/^DEVICE              mt_dev = {$/;"	v
mt_devio	PDP10/kx10_mt.c	/^t_stat mt_devio(uint32 dev, uint64 *data) {$/;"	f
mt_df10	PDP10/kx10_mt.c	/^struct df10     mt_df10;$/;"	v	typeref:struct:df10
mt_df10_read	PDP10/kx10_mt.c	/^void mt_df10_read(DEVICE *dptr, UNIT *uptr) {$/;"	f
mt_df10_write	PDP10/kx10_mt.c	/^void mt_df10_write(DEVICE *dptr, UNIT *uptr) {$/;"	f
mt_dib	PDP10/kx10_mt.c	/^DIB mt_dib = {MT_DEVNUM, 2, &mt_devio, NULL};$/;"	v
mt_error	PDP10/kx10_mt.c	/^t_stat mt_error(UNIT * uptr, t_stat r, DEVICE * dptr)$/;"	f
mt_help	PDP10/kx10_mt.c	/^t_stat mt_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
mt_hold_reg	PDP10/kx10_mt.c	/^uint64          mt_hold_reg;$/;"	v
mt_mod	PDP10/kx10_mt.c	/^MTAB                mt_mod[] = {$/;"	v
mt_mpx_lvl	PDP10/kx10_mt.c	/^int             mt_mpx_lvl = 0;$/;"	v
mt_next_unit	PDP10/kx10_mt.c	/^uint8           mt_next_unit;$/;"	v
mt_pia	PDP10/kx10_mt.c	/^uint16          mt_pia;$/;"	v
mt_read_word	PDP10/kx10_mt.c	/^void mt_read_word(UNIT *uptr) {$/;"	f
mt_reg	PDP10/kx10_mt.c	/^REG                 mt_reg[] = {$/;"	v
mt_reset	PDP10/kx10_mt.c	/^mt_reset(DEVICE * dptr)$/;"	f
mt_sel_unit	PDP10/kx10_mt.c	/^uint8           mt_sel_unit;$/;"	v
mt_set_mpx	PDP10/kx10_mt.c	/^t_stat mt_set_mpx (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
mt_set_mta	PDP10/kx10_mt.c	/^t_stat mt_set_mta (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
mt_show_mpx	PDP10/kx10_mt.c	/^t_stat mt_show_mpx (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
mt_show_mta	PDP10/kx10_mt.c	/^t_stat mt_show_mta (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
mt_srv	PDP10/kx10_mt.c	/^t_stat mt_srv(UNIT * uptr)$/;"	f
mt_status	PDP10/kx10_mt.c	/^uint64          mt_status;$/;"	v
mt_unit	PDP10/kx10_mt.c	/^UNIT                mt_unit[] = {$/;"	v
mtc_attach	PDP10/pdp6_mtc.c	/^mtc_attach(UNIT * uptr, CONST char *file)$/;"	f
mtc_boot	PDP10/pdp6_mtc.c	/^mtc_boot(int32 unit_num, DEVICE * dptr)$/;"	f
mtc_buffer	PDP10/pdp6_mtc.c	/^uint8               mtc_buffer[BUFFSIZE];$/;"	v
mtc_checkirq	PDP10/pdp6_mtc.c	/^mtc_checkirq(UNIT * uptr)$/;"	f
mtc_dct	PDP10/pdp6_mtc.c	/^int             mtc_dct;  \/* DCT Channel and unit *\/$/;"	v
mtc_description	PDP10/pdp6_mtc.c	/^mtc_description (DEVICE *dptr)$/;"	f
mtc_detach	PDP10/pdp6_mtc.c	/^mtc_detach(UNIT * uptr)$/;"	f
mtc_dev	PDP10/pdp6_mtc.c	/^DEVICE              mtc_dev = {$/;"	v
mtc_devio	PDP10/pdp6_mtc.c	/^mtc_devio(uint32 dev, uint64 *data) {$/;"	f
mtc_dib	PDP10/pdp6_mtc.c	/^DIB mtc_dib = {MTC_DEVCTL, 3, &mtc_devio, NULL};$/;"	v
mtc_help	PDP10/pdp6_mtc.c	/^mtc_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
mtc_hold_cmd	PDP10/pdp6_mtc.c	/^uint32          mtc_hold_cmd;$/;"	v
mtc_mod	PDP10/pdp6_mtc.c	/^MTAB                mtc_mod[] = {$/;"	v
mtc_pia	PDP10/pdp6_mtc.c	/^uint16          mtc_pia;$/;"	v
mtc_read_word	PDP10/pdp6_mtc.c	/^mtc_read_word(UNIT *uptr) {$/;"	f
mtc_reset	PDP10/pdp6_mtc.c	/^mtc_reset(DEVICE * dptr)$/;"	f
mtc_sel_unit	PDP10/pdp6_mtc.c	/^uint8           mtc_sel_unit;$/;"	v
mtc_set_dct	PDP10/pdp6_mtc.c	/^mtc_set_dct (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
mtc_show_dct	PDP10/pdp6_mtc.c	/^mtc_show_dct (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
mtc_srv	PDP10/pdp6_mtc.c	/^mtc_srv(UNIT * uptr)$/;"	f
mtc_status	PDP10/pdp6_mtc.c	/^uint32          mtc_status;$/;"	v
mtc_unit	PDP10/pdp6_mtc.c	/^UNIT                mtc_unit[] = {$/;"	v
mtod	slirp/mbuf.h	42;"	d
mtr_enable	PDP10/kx10_cpu.c	/^int     mtr_enable;                           \/* Enable Timer *\/$/;"	v
mtr_flags	PDP10/kx10_cpu.c	/^int     mtr_flags;                            \/* Flags for accounting *\/$/;"	v
mtr_irq	PDP10/kx10_cpu.c	/^int     mtr_irq;                              \/* Timer IRQ *\/$/;"	v
mty_active_bitmask	PDP10/ka10_mty.c	/^static uint32       mty_active_bitmask;$/;"	v	file:
mty_attach	PDP10/ka10_mty.c	/^static t_stat mty_attach (UNIT *uptr, CONST char *cptr)$/;"	f	file:
mty_desc	PDP10/ka10_mty.c	/^TMXR mty_desc = { MTY_LINES, 0, 0, mty_ldsc };$/;"	v
mty_description	PDP10/ka10_mty.c	/^static const char *mty_description (DEVICE *dptr)$/;"	f	file:
mty_detach	PDP10/ka10_mty.c	/^static t_stat mty_detach (UNIT *uptr)$/;"	f	file:
mty_dev	PDP10/ka10_mty.c	/^DEVICE mty_dev = {$/;"	v
mty_devio	PDP10/ka10_mty.c	/^static t_stat mty_devio(uint32 dev, uint64 *data)$/;"	f	file:
mty_dib	PDP10/ka10_mty.c	/^DIB mty_dib = {MTY_DEVNUM, 1, &mty_devio, NULL};$/;"	v
mty_help	PDP10/ka10_mty.c	/^static t_stat mty_help (FILE *st, DEVICE *dptr, UNIT *uptr,$/;"	f	file:
mty_input_character	PDP10/ka10_mty.c	/^static int32        mty_input_character;$/;"	v	file:
mty_input_svc	PDP10/ka10_mty.c	/^static t_stat mty_input_svc (UNIT *uptr)$/;"	f	file:
mty_ldsc	PDP10/ka10_mty.c	/^TMLN mty_ldsc[MTY_LINES] = { 0 };$/;"	v
mty_mod	PDP10/ka10_mty.c	/^MTAB mty_mod[] = {$/;"	v
mty_output_svc	PDP10/ka10_mty.c	/^static t_stat mty_output_svc (UNIT *uptr)$/;"	f	file:
mty_output_word	PDP10/ka10_mty.c	/^static uint64       mty_output_word[MTY_LINES];$/;"	v	file:
mty_reset	PDP10/ka10_mty.c	/^static t_stat mty_reset (DEVICE *dptr)$/;"	f	file:
mty_unit	PDP10/ka10_mty.c	/^UNIT                mty_unit[] = {$/;"	v
munch	display/test.c	/^munch(void) {$/;"	f
n_long	slirp/ip.h	/^typedef uint32_t n_long;                 \/* long as received from the net *\/$/;"	t
n_time	slirp/ip_icmp.h	/^typedef uint32_t n_time;$/;"	t
name	PDP10/ka10_pmp.c	/^    const char         *name;         \/* Type Name *\/$/;"	m	struct:disk_t	file:
name	PDP10/kx10_disk.c	/^    const char  *name;$/;"	m	struct:disk_formats	file:
name	display/display.c	/^    const char *name;$/;"	m	struct:display	file:
name	display/vt11.c	411;"	d	file:
name	scp.c	/^    char *name;$/;"	m	struct:deleted_env_var	file:
name	sim_card.c	/^    const char  *name;$/;"	m	struct:card_formats	file:
name	sim_defs.h	/^    CONST char          *name;                          \/* name *\/$/;"	m	struct:REG
name	sim_defs.h	/^    char                name[CBUFSIZE];                 \/* file name *\/$/;"	m	struct:FILEREF
name	sim_defs.h	/^    const char          *name;                          \/* control name *\/$/;"	m	struct:DEBTAB
name	sim_defs.h	/^    const char          *name;                          \/* name *\/$/;"	m	struct:C1TAB
name	sim_defs.h	/^    const char          *name;                          \/* name *\/$/;"	m	struct:CTAB
name	sim_defs.h	/^    const char          *name;                          \/* name *\/$/;"	m	struct:DEVICE
name	sim_defs.h	/^    const char          *name;                          \/* name *\/$/;"	m	struct:SHTAB
name	sim_defs.h	/^    const char      *name;                              \/* field name *\/$/;"	m	struct:BITFIELD
name	sim_disk.c	/^    const char          *name;                          \/* name *\/$/;"	m	struct:sim_disk_fmt	file:
name	sim_ether.h	/^  char    name[ETH_DEV_NAME_MAX];$/;"	m	struct:eth_list
name	sim_ether.h	/^  char*         name;                                   \/* name of ethernet device *\/$/;"	m	struct:eth_device
name	sim_frontpanel.c	/^    char *name;$/;"	m	struct:__anon22	file:
name	sim_scsi.h	/^    const char *name;                                   \/* gap length for tapes *\/$/;"	m	struct:scsi_dev_t
name	sim_serial.c	/^    char    name[SER_DEV_NAME_MAX];$/;"	m	struct:serial_list	file:
name	sim_serial.c	/^    char name[SER_DEV_NAME_MAX];$/;"	m	struct:open_serial_device	file:
name	sim_tape.c	/^    const char          *name;                          \/* name *\/$/;"	m	struct:sim_tape_fmt	file:
name	sim_tape.c	/^    const char          *name;                  \/* operating system *\/$/;"	m	struct:ansi_tape_parameters	file:
name	sim_tmxr.c	/^    const char *name;$/;"	m	struct:__anon32	file:
name_irq	display/vt11.c	/^static unsigned char name_irq = 0;      \/* 1 bit: name matches associative nm *\/$/;"	v	file:
ncolors	display/display.c	/^static int ncolors;$/;"	v	file:
ncolors	display/sim_ws.c	/^static uint32 ncolors = 0, size_colors = 0;$/;"	v	file:
need_crc	sim_ether.h	/^  int           need_crc;                               \/* device needs CRC (Cyclic Redundancy Check) *\/$/;"	m	struct:eth_device
new	display/carbon.c	/^    int new;$/;"	m	struct:elapsed_state	file:
new	display/x11.c	/^    int new;$/;"	m	struct:elapsed_state	file:
new_Stack	scp.c	/^static Stack *new_Stack (void)$/;"	f	file:
new_register	sim_frontpanel.c	/^    int                     new_register;$/;"	m	struct:PANEL	file:
next	PDP10/ks10_kmc.c	/^  struct queuehdr     *next;$/;"	m	struct:queuehdr	typeref:struct:queuehdr::queuehdr	file:
next	PDP10/kx10_imp.c	/^    struct imp_packet *next;                   \/* Link to packets *\/$/;"	m	struct:imp_packet	typeref:struct:imp_packet::imp_packet	file:
next	display/display.c	/^    struct point *next;         \/* next entry in queue *\/$/;"	m	struct:point	typeref:struct:point::point	file:
next	sim_defs.h	/^    BRKTAB *next;                                       \/* list with same address value *\/$/;"	m	struct:BRKTAB
next	sim_defs.h	/^    UNIT                *next;                          \/* next active *\/$/;"	m	struct:UNIT
next	sim_ether.h	/^  struct eth_write_request *next;$/;"	m	struct:eth_write_request	typeref:struct:eth_write_request::eth_write_request
next	sim_video.c	/^VID_DISPLAY *next;$/;"	m	struct:VID_DISPLAY	file:
next	slirp/ip.h	/^        void *next, *prev;$/;"	m	struct:qlink
next	slirp/misc.h	/^    struct emu_t *next;$/;"	m	struct:emu_t	typeref:struct:emu_t::emu_t
next	slirp_glue/sim_slirp.c	/^    struct redir_tcp_udp *next;$/;"	m	struct:redir_tcp_udp	typeref:struct:redir_tcp_udp::redir_tcp_udp	file:
next	slirp_glue/sim_slirp.c	/^    struct slirp_write_request *next;$/;"	m	struct:slirp_write_request	typeref:struct:slirp_write_request::slirp_write_request	file:
next_m	slirp/slirp.h	/^    struct mbuf *next_m;    \/* pointer to next mbuf to output *\/$/;"	m	struct:Slirp	typeref:struct:Slirp::mbuf
next_time	sim_defs.h	/^    double              next_time;                      \/* execution time when next data can be sent *\/$/;"	m	struct:SEND
next_victim	slirp/slirp.h	/^    int next_victim;$/;"	m	struct:ArpTable
next_write	PDP10/kx10_cpu.c	/^int     next_write;                           \/* Clear next write mapping *\/$/;"	v
ng_cycle	display/ng.c	/^ng_cycle(int us, int slowdown)$/;"	f
ng_dbit	display/ng.c	/^static int ng_dbit;$/;"	v	file:
ng_dptr	display/ng.c	/^static void *ng_dptr;$/;"	v	file:
ng_get_csr	display/ng.c	/^ng_get_csr(void)$/;"	f
ng_get_reloc	display/ng.c	/^ng_get_reloc(void)$/;"	f
ng_init	display/ng.c	/^ng_init(void *dev, int debug)$/;"	f
ng_scale	display/ng.c	/^int ng_scale = PIX_SCALE;$/;"	v
ng_set_csr	display/ng.c	/^ng_set_csr(uint16 d)$/;"	f
ng_set_reloc	display/ng.c	/^ng_set_reloc(uint16 d)$/;"	f
ng_type	display/ng.c	/^int ng_type = 0;$/;"	v
nia_attach	PDP10/kl10_nia.c	/^t_stat nia_attach(UNIT* uptr, CONST char* cptr)$/;"	f
nia_cmd_srv	PDP10/kl10_nia.c	/^t_stat nia_cmd_srv(UNIT * uptr)$/;"	f
nia_cmd_uptr	PDP10/kl10_nia.c	381;"	d	file:
nia_cpy_from	PDP10/kl10_nia.c	/^uint8 *nia_cpy_from(t_addr addr, uint8 *data, int len)$/;"	f
nia_cpy_mac	PDP10/kl10_nia.c	/^void nia_cpy_mac(uint64 word1, uint64 word2, ETH_MAC *mac)$/;"	f
nia_cpy_to	PDP10/kl10_nia.c	/^uint8 *nia_cpy_to(t_addr addr, uint8 *data, int len)$/;"	f
nia_data	PDP10/kl10_nia.c	/^} nia_data;$/;"	v	typeref:struct:nia_device
nia_debug	PDP10/kl10_nia.c	/^DEBTAB              nia_debug[] = {$/;"	v
nia_description	PDP10/kl10_nia.c	/^const char *nia_description (DEVICE *dptr)$/;"	f
nia_detach	PDP10/kl10_nia.c	/^t_stat nia_detach(UNIT* uptr)$/;"	f
nia_dev	PDP10/kl10_nia.c	/^DEVICE nia_dev = {$/;"	v
nia_device	PDP10/kl10_nia.c	/^struct nia_device {$/;"	s	file:
nia_devio	PDP10/kl10_nia.c	/^t_stat nia_devio(uint32 dev, uint64 *data)$/;"	f
nia_dib	PDP10/kl10_nia.c	/^DIB nia_dib = {NIA_DEVNUM | RH20_DEV, 1, &nia_devio, NULL, &nia_rh };$/;"	v
nia_disable	PDP10/kl10_nia.c	/^void nia_disable()$/;"	f
nia_enable	PDP10/kl10_nia.c	/^void nia_enable()$/;"	f
nia_error	PDP10/kl10_nia.c	/^void nia_error(int err)$/;"	f
nia_eth_hdr	PDP10/kl10_nia.c	/^struct nia_eth_hdr {$/;"	s	file:
nia_eth_srv	PDP10/kl10_nia.c	/^t_stat nia_eth_srv(UNIT * uptr)$/;"	f
nia_getq	PDP10/kl10_nia.c	/^int nia_getq(t_addr head, t_addr *entry)$/;"	f
nia_help	PDP10/kl10_nia.c	/^t_stat nia_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
nia_load_mcast	PDP10/kl10_nia.c	/^void nia_load_mcast()$/;"	f
nia_load_ptt	PDP10/kl10_nia.c	/^void nia_load_ptt()$/;"	f
nia_mod	PDP10/kl10_nia.c	/^MTAB nia_mod[] = {$/;"	v
nia_packet_debug	PDP10/kl10_nia.c	/^void nia_packet_debug(struct nia_device *nia, const char *action,$/;"	f
nia_proc_uptr	PDP10/kl10_nia.c	383;"	d	file:
nia_putq	PDP10/kl10_nia.c	/^int nia_putq(t_addr head, t_addr *entry)$/;"	f
nia_rec_pkt	PDP10/kl10_nia.c	/^nia_rec_pkt()$/;"	f
nia_rec_srv	PDP10/kl10_nia.c	/^t_stat nia_rec_srv(UNIT * uptr)$/;"	f
nia_recv_uptr	PDP10/kl10_nia.c	382;"	d	file:
nia_reg	PDP10/kl10_nia.c	/^REG                 nia_reg[] = {$/;"	v
nia_reset	PDP10/kl10_nia.c	/^t_stat nia_reset (DEVICE *dptr)$/;"	f
nia_rh	PDP10/kl10_nia.c	/^struct rh_if   nia_rh = { NULL, NULL, NULL};$/;"	v	typeref:struct:rh_if
nia_send_pkt	PDP10/kl10_nia.c	/^int nia_send_pkt(uint64 cmd)$/;"	f
nia_set_mac	PDP10/kl10_nia.c	/^t_stat nia_set_mac (UNIT* uptr, int32 val, CONST char* cptr, void* desc)$/;"	f
nia_show_mac	PDP10/kl10_nia.c	/^t_stat nia_show_mac (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f
nia_start	PDP10/kl10_nia.c	/^void nia_start()$/;"	f
nia_stop	PDP10/kl10_nia.c	/^void nia_stop()$/;"	f
nia_unit	PDP10/kl10_nia.c	/^UNIT nia_unit[] = {$/;"	v
nice	sim_console.c	138;"	d	file:
nlzero	PDP10/kx10_cpu.c	/^int nlzero(uint64 w) {$/;"	f
no_pcap	sim_ether.c	/^static char no_pcap[PCAP_ERRBUF_SIZE] =$/;"	v	file:
nobuf_err	sim_tmxr.c	/^    uint32 nobuf_err;$/;"	m	struct:status_msg_t	file:
nohdr2	sim_tape.c	/^    t_bool              nohdr2;                 \/* no HDR2 records *\/$/;"	m	struct:ansi_tape_parameters	file:
nohdr3	sim_tape.c	/^    t_bool              nohdr3;                 \/* no HDR2 records *\/$/;"	m	struct:ansi_tape_parameters	file:
nomessage	sim_tmxr.h	/^    t_bool              nomessage;                      \/* no connect\/disconnect message on line even if telnet *\/$/;"	m	struct:tmln
nomessage	sim_tmxr.h	/^    t_bool              nomessage;                      \/* no connect\/disconnect message on line even if telnet *\/$/;"	m	struct:tmxr
noop_cmd	scp.c	/^t_stat noop_cmd (int32 flag, CONST char *cptr)$/;"	f
noqueue_time	scp.c	/^static int32 noqueue_time;$/;"	v	file:
not_empty	PDP10/kl10_dn.c	236;"	d	file:
not_empty	PDP10/kl10_fe.c	261;"	d	file:
not_empty	PDP10/ks10_dz.c	94;"	d	file:
notelnet	sim_tmxr.h	/^    t_bool              notelnet;                       \/* default telnet capability for incoming connections *\/$/;"	m	struct:tmxr
notelnet	sim_tmxr.h	/^    t_bool              notelnet;                       \/* raw binary data (no telnet interpretation) *\/$/;"	m	struct:tmln
nphosphors	display/display.c	/^    int nphosphors;$/;"	m	struct:color	file:
nsects	sim_imd.h	/^    uint8 nsects;$/;"	m	struct:__anon24
nsects	sim_imd.h	/^    uint8 nsects;$/;"	m	struct:__anon25
nsides	sim_imd.h	/^    uint8 nsides;$/;"	m	struct:__anon26
ntracks	sim_imd.h	/^    uint32 ntracks;$/;"	m	struct:__anon26
null_dev	PDP10/kx10_cpu.c	/^t_stat null_dev(uint32 dev, uint64 *data) {$/;"	f
num	sim_tape.c	/^    char num;                   \/* 1    *\/$/;"	m	struct:HDR1	file:
num	sim_tape.c	/^    char num;                   \/* 1    *\/$/;"	m	struct:VOL1	file:
num	sim_tape.c	/^    char num;                   \/* 2    *\/$/;"	m	struct:HDR2	file:
num	sim_tape.c	/^    char num;                   \/* 3    *\/$/;"	m	struct:HDR3	file:
num	sim_tape.c	/^    char num;                   \/* 4    *\/$/;"	m	struct:HDR4	file:
num_devs	PDP10/kx10_defs.h	/^    uint32              num_devs;                       \/* length *\/$/;"	m	struct:pdp_dib
numunits	sim_defs.h	/^    uint32              numunits;                       \/* #units *\/$/;"	m	struct:DEVICE
nxintv	sim_timer.c	/^    uint32 nxintv;                  \/* next interval *\/$/;"	m	struct:RTC	file:
nxm_flag	PDP10/kx10_cpu.c	/^int     nxm_flag;                             \/* Non-existant memory flag *\/$/;"	v
nxmerr	PDP10/kx10_defs.h	/^      uint8          nxmerr;     \/* Bit to set for NXM *\/$/;"	m	struct:df10
nxtlen	sim_tape.h	/^    t_awslnt    nxtlen;$/;"	m	struct:__anon30
oReadSync	sim_serial.c	/^    OVERLAPPED oReadSync;$/;"	m	struct:SERPORT	file:
oWriteReady	sim_serial.c	/^    OVERLAPPED oWriteReady;$/;"	m	struct:SERPORT	file:
oWriteSync	sim_serial.c	/^    OVERLAPPED oWriteSync;$/;"	m	struct:SERPORT	file:
o_uptr	sim_tmxr.h	/^    UNIT                *o_uptr;                        \/* output polling unit (default to lp->uptr)*\/$/;"	m	struct:tmln
obits	PDP10/kx10_imp.c	/^    int               obits;                   \/* Output bits *\/$/;"	m	struct:imp_device	file:
obj_size	sim_defs.h	/^    size_t              obj_size;                       \/* sizeof(*loc) *\/$/;"	m	struct:REG
objupdate	sim_tape.c	/^    uint32              *objupdate;$/;"	m	struct:tape_context	file:
obuf	PDP10/kx10_imp.c	/^    uint64            obuf;                    \/* Output buffer *\/$/;"	m	struct:imp_device	file:
ocnsls_description	PDP10/kx10_dpy.c	/^const char *ocnsls_description (DEVICE *dptr)$/;"	f
ocnsls_dev	PDP10/kx10_dpy.c	/^DEVICE ocnsls_dev = {$/;"	v
ocnsls_devio	PDP10/kx10_dpy.c	/^t_stat ocnsls_devio(uint32 dev, uint64 *data) {$/;"	f
ocnsls_dib	PDP10/kx10_dpy.c	/^DIB ocnsls_dib[] = {$/;"	v
ocnsls_unit	PDP10/kx10_dpy.c	/^UNIT ocnsls_unit[] = {$/;"	v
off_t	slirp_glue/qemu/sysemu/os-win32.h	34;"	d
offset	display/vt11.c	/^static unsigned char offset = 0;        \/* 1 bit: last data loaded offsets *\/$/;"	v	file:
offset	sim_defs.h	/^    uint32              offset;                         \/* starting bit *\/$/;"	m	struct:REG
offset	sim_defs.h	/^    uint32          offset;                             \/* starting bit *\/$/;"	m	struct:BITFIELD
old_switches	PDP10/kx10_dpy.c	/^static uint64 old_switches (void)$/;"	f	file:
on	sim_tmxr.c	/^    uint8 on;                     \/* "on" flags *\/$/;"	m	struct:status_msg_t	file:
on_cmd	scp.c	/^t_stat on_cmd (int32 flag, CONST char *cptr)$/;"	f
op	PDP10/kx10_imp.c	/^    uint8             op;                      \/* Operation *\/$/;"	m	struct:dhcp	file:
op	scp.c	/^    Operator *op;$/;"	m	struct:Stack_Element	file:
opaque	slirp/slirp.h	/^    void *opaque;$/;"	m	struct:Slirp
opaque	slirp_glue/sim_slirp.c	/^    void *opaque;               \/* opaque value passed during packet delivery *\/$/;"	m	struct:sim_slirp	file:
opc	PDP10/kx10_cpu.c	/^uint64  opc;                                  \/* Saved PC and Flags *\/$/;"	v
opc_val	PDP10/kx10_sys.c	/^static const t_int64 opc_val[] = {$/;"	v	file:
opcode	PDP10/kl10_nia.c	/^    uint16              opcode;$/;"	m	struct:arp_hdr	file:
opcode	PDP10/kx10_imp.c	/^    uint16              opcode;$/;"	m	struct:arp_hdr	file:
opcode	PDP10/kx10_sys.c	/^static const char *opcode[] = {$/;"	v	file:
open_serial_device	sim_serial.c	/^static struct open_serial_device {$/;"	s	file:
operators	scp.c	/^static Operator operators[] = {$/;"	v	file:
options	PDP10/kx10_imp.c	/^    uint8             options[100];            \/* Space for options *\/$/;"	m	struct:dhcp	file:
orderspec	sim_tmxr.c	/^    const char *orderspec;$/;"	m	struct:lnorder_test	file:
os_daemonize	slirp_glue/qemu/sysemu/os-win32.h	/^static inline void os_daemonize(void) {}$/;"	f
os_elapsed	display/carbon.c	/^unsigned long os_elapsed (void)$/;"	f
os_elapsed	display/sim_ws.c	/^os_elapsed(void)$/;"	f
os_elapsed	display/win32.c	/^os_elapsed(void)$/;"	f
os_elapsed	display/x11.c	/^os_elapsed(void)$/;"	f
os_pollfd	display/x11.c	/^os_pollfd(int fd, int maxus)$/;"	f	file:
os_set_proc_name	slirp_glue/qemu/sysemu/os-win32.h	/^static inline void os_set_proc_name(const char *dummy) {}$/;"	f
os_setup_post	slirp_glue/qemu/sysemu/os-win32.h	/^static inline void os_setup_post(void) {}$/;"	f
os_setup_signal_handling	slirp_glue/qemu/sysemu/os-win32.h	/^static inline void os_setup_signal_handling(void) {}$/;"	f
otherstuff	sim_ether.c	/^  uint16 otherstuff[1];  \/* The rest of the packet *\/$/;"	m	struct:TCPHeader	file:
otherstuff	sim_ether.c	/^  uint32 otherstuff[1];\/* optional data *\/$/;"	m	struct:ICMPHeader	file:
out_buf	sim_console.c	/^static uint8 out_buf[ESC_HOLD_MAX]; \/* Buffered characters pending output *\/$/;"	v	file:
out_hold_unit	sim_console.c	3678;"	d	file:
out_ptr	PDP10/kl10_dn.c	/^    int      out_ptr;    \/* Remove pointer *\/$/;"	m	struct:_buffer	file:
out_ptr	PDP10/kl10_fe.c	/^    int      out_ptr;    \/* Remove pointer *\/$/;"	m	struct:_buffer	file:
out_ptr	PDP10/ks10_dz.c	/^    int      out_ptr;    \/* Remove pointer *\/$/;"	m	struct:_buffer	file:
out_ptr	sim_console.c	/^static int32 out_ptr = 0;$/;"	v	file:
ov_irq	PDP10/kx10_cpu.c	/^int     ov_irq;                               \/* Trap overflow *\/$/;"	v
oversize	sim_ether.h	/^  uint8   *oversize;                                    \/* oversized frame (message) *\/$/;"	m	struct:eth_packet
owner	sim_tape.c	/^    char owner[14];             \/*      *\/$/;"	m	struct:VOL1	file:
p	PDP10/kx10_cpu.c	/^    int p;$/;"	m	struct:_byte	file:
p29	display/display.c	/^static struct phosphor p29[] = {{0.0260, 1.0, 0.00121, 0.5, 0.025}};$/;"	v	typeref:struct:phosphor	file:
p31	display/display.c	/^static struct phosphor p31[] = {{0.0, 1.0, 0.77, 0.5, .1}};$/;"	v	typeref:struct:phosphor	file:
p39	display/display.c	/^static struct phosphor p39[] = {{0.2, 1.0, 0.0, 0.5, 0.01}};$/;"	v	typeref:struct:phosphor	file:
p40	display/display.c	/^static struct phosphor p40[] = {$/;"	v	typeref:struct:phosphor	file:
p7	display/display.c	/^static struct phosphor p7[] = {$/;"	v	typeref:struct:phosphor	file:
p7b_even_parity	sim_tape.c	/^static uint8 p7b_even_parity[64];$/;"	v	file:
p7b_odd_parity	sim_tape.c	/^static uint8 p7b_odd_parity[64];$/;"	v	file:
p7b_parity_inited	sim_tape.c	/^static t_bool p7b_parity_inited = FALSE;$/;"	v	file:
p_freeaddrinfo	sim_sock.c	/^static freeaddrinfo_func p_freeaddrinfo;$/;"	v	file:
p_getaddrinfo	sim_sock.c	/^static getaddrinfo_func p_getaddrinfo;$/;"	v	file:
p_getnameinfo	sim_sock.c	/^static getnameinfo_func p_getnameinfo;$/;"	v	file:
p_pcap_close	sim_ether.c	/^static void    (*p_pcap_close) (pcap_t *);$/;"	v	file:
p_pcap_compile	sim_ether.c	/^static int     (*p_pcap_compile) (pcap_t *, struct bpf_program *, const char *, int, bpf_u_int32);$/;"	v	file:
p_pcap_datalink	sim_ether.c	/^static int     (*p_pcap_datalink) (pcap_t *);$/;"	v	file:
p_pcap_dispatch	sim_ether.c	/^static int     (*p_pcap_dispatch) (pcap_t *, int, pcap_handler, u_char *);$/;"	v	file:
p_pcap_fileno	sim_ether.c	/^static int     (*p_pcap_fileno) (pcap_t *);$/;"	v	file:
p_pcap_findalldevs	sim_ether.c	/^static int     (*p_pcap_findalldevs) (pcap_if_t **, char *);$/;"	v	file:
p_pcap_freealldevs	sim_ether.c	/^static void    (*p_pcap_freealldevs) (pcap_if_t *);$/;"	v	file:
p_pcap_freecode	sim_ether.c	/^static void    (*p_pcap_freecode) (struct bpf_program *);$/;"	v	file:
p_pcap_get_selectable_fd	sim_ether.c	/^static int     (*p_pcap_get_selectable_fd) (pcap_t *);$/;"	v	file:
p_pcap_geterr	sim_ether.c	/^static char*   (*p_pcap_geterr) (pcap_t *);$/;"	v	file:
p_pcap_getevent	sim_ether.c	/^static HANDLE  (*p_pcap_getevent) (pcap_t *);$/;"	v	file:
p_pcap_lib_version	sim_ether.c	/^static char *(*p_pcap_lib_version) (void);$/;"	v	file:
p_pcap_lookupnet	sim_ether.c	/^static int     (*p_pcap_lookupnet) (const char *, bpf_u_int32 *, bpf_u_int32 *, char *);$/;"	v	file:
p_pcap_open_live	sim_ether.c	/^static pcap_t* (*p_pcap_open_live) (const char *, int, int, int, char *);$/;"	v	file:
p_pcap_sendpacket	sim_ether.c	/^static int     (*p_pcap_sendpacket) (pcap_t* handle, const u_char* msg, int len);$/;"	v	file:
p_pcap_setfilter	sim_ether.c	/^static int     (*p_pcap_setfilter) (pcap_t *, struct bpf_program *);$/;"	v	file:
p_pcap_setmintocopy	sim_ether.c	/^static int     (*p_pcap_setmintocopy) (pcap_t* handle, int);$/;"	v	file:
p_pcap_setnonblock	sim_ether.c	/^static int     (*p_pcap_setnonblock)(pcap_t* a, int nonblock, char *errbuf);$/;"	v	file:
packet	PDP10/kx10_imp.c	/^    ETH_PACK          packet;$/;"	m	struct:imp_packet	file:
packet	sim_ether.h	/^  ETH_PACK packet;$/;"	m	struct:eth_write_request
packet	sim_ether.h	/^  struct eth_packet   packet;$/;"	m	struct:eth_item	typeref:struct:eth_item::eth_packet
packet	sim_tmxr.h	/^    t_bool              packet;                         \/* Line is packet oriented *\/$/;"	m	struct:tmln
packet	sim_tmxr.h	/^    t_bool              packet;                         \/* Lines are packet oriented *\/$/;"	m	struct:tmxr
packet_callback	slirp_glue/sim_slirp.h	/^typedef void (*packet_callback)(void *opaque, const unsigned char *buf, int len);$/;"	t
packets_received	sim_ether.h	/^  uint32        packets_received;                       \/* Total Packets Received *\/$/;"	m	struct:eth_device
packets_sent	sim_ether.h	/^  uint32        packets_sent;                           \/* Total Packets Sent *\/$/;"	m	struct:eth_device
packid	sim_disk.c	/^    char        packid[8];$/;"	m	struct:_rstsContext	file:
padding	PDP10/kl10_nia.c	/^    uint8               padding[18];$/;"	m	struct:arp_hdr	file:
padding	PDP10/kx10_imp.c	/^    int               padding;                 \/* Type zero padding *\/$/;"	m	struct:imp_device	file:
padding	PDP10/kx10_imp.c	/^    uint8               padding[18];$/;"	m	struct:arp_hdr	file:
pag_reload	PDP10/kx10_cpu.c	/^uint32  pag_reload;                           \/* Page reload pointer *\/$/;"	v
page_enable	PDP10/kx10_cpu.c	/^int     page_enable;                          \/* Enable paging *\/$/;"	v
page_fault	PDP10/kx10_cpu.c	/^int     page_fault;                           \/* Page fail *\/$/;"	v
page_lookup	PDP10/kx10_cpu.c	/^int page_lookup(t_addr addr, int flag, t_addr *loc, int wr, int cur_context, int fetch) {$/;"	f
page_lookup	PDP10/kx10_cpu.c	/^int page_lookup(t_addr addr, int flag, t_addr *loc, int wr, int cur_context, int fetch, int modify) {$/;"	f
page_lookup_bbn	PDP10/kx10_cpu.c	/^int page_lookup_bbn(t_addr addr, int flag, t_addr *loc, int wr, int cur_context, int fetch) {$/;"	f
page_lookup_its	PDP10/kx10_cpu.c	/^int page_lookup_its(t_addr addr, int flag, t_addr *loc, int wr, int cur_context, int fetch, int modify) {$/;"	f
page_lookup_ka	PDP10/kx10_cpu.c	/^int page_lookup_ka(t_addr addr, int flag, t_addr *loc, int wr, int cur_context, int fetch) {$/;"	f
page_lookup_waits	PDP10/kx10_cpu.c	/^int page_lookup_waits(t_addr addr, int flag, t_addr *loc, int wr, int cur_context, int fetch) {$/;"	f
panel_count	sim_frontpanel.c	/^static int panel_count = 0;$/;"	v	file:
panel_thread_id	sim_frontpanel.c	/^static pthread_key_t panel_thread_id;$/;"	v	file:
panels	sim_frontpanel.c	/^static PANEL **panels = NULL;$/;"	v	file:
parent	scp.c	/^    struct topic  *parent;$/;"	m	struct:topic	typeref:struct:topic::topic	file:
parent	sim_frontpanel.c	/^    PANEL                   *parent;        \/* Device Panels can have parent panels *\/$/;"	m	struct:PANEL	file:
parity	sim_serial.c	/^    char   parity;                                      \/* parity (N\/O\/E\/M\/S) *\/$/;"	m	struct:serial_config	file:
parity_irq	PDP10/kx10_cpu.c	/^int     parity_irq;                           \/* Parity interupt *\/$/;"	v
parity_table	PDP10/kx10_mt.c	/^static uint8          parity_table[64] = {$/;"	v	file:
parity_table	PDP10/pdp6_mtc.c	/^static uint8    parity_table[64] = {$/;"	v	file:
parse_function	scp.c	/^typedef const char *(*parse_function)(const char *input, char *output, char end_char);$/;"	t	file:
parse_function_test	scp.c	/^static struct parse_function_test {$/;"	s	file:
parse_function_tests	scp.c	/^    } parse_function_tests[] = {$/;"	v	typeref:struct:parse_function_test	file:
parse_sym	PDP10/kx10_sys.c	/^t_stat parse_sym (CONST char *cptr, t_addr addr, UNIT *uptr, t_value *val, int32 sw)$/;"	f
path	sim_frontpanel.c	/^    char                    *path;          \/* simulator path *\/$/;"	m	struct:PANEL	file:
patsy	display/win32.c	/^patsy(HWND wh, UINT msg, WPARAM wp, LPARAM lp) \/* "WndProc" *\/$/;"	f	file:
pbar	PDP10/kx10_defs.h	/^      uint32         pbar;$/;"	m	struct:rh_if
pc	PDP10/kx10_cpu.c	/^    uint32      pc;$/;"	m	struct:__anon1	file:
pc_sect	PDP10/kx10_cpu.c	/^int     pc_sect;                              \/* Program counter section *\/$/;"	v
pcap_close	sim_ether.c	/^void pcap_close(pcap_t* a) {$/;"	f
pcap_compile	sim_ether.c	/^int pcap_compile(pcap_t* a, struct bpf_program* b, char* c, int d, bpf_u_int32 e) {$/;"	f
pcap_datalink	sim_ether.c	/^int pcap_datalink(pcap_t* a) {$/;"	f
pcap_dispatch	sim_ether.c	/^int pcap_dispatch(pcap_t* a, int b, pcap_handler c, u_char* d) {$/;"	f
pcap_fileno	sim_ether.c	/^int pcap_fileno(pcap_t * a) {$/;"	f
pcap_findalldevs	sim_ether.c	/^int pcap_findalldevs(pcap_if_t** a, char* b) {$/;"	f
pcap_freealldevs	sim_ether.c	/^void pcap_freealldevs(pcap_if_t* a) {$/;"	f
pcap_freecode	sim_ether.c	/^void pcap_freecode(struct bpf_program* a) {$/;"	f
pcap_get_selectable_fd	sim_ether.c	/^int pcap_get_selectable_fd(pcap_t* a) {$/;"	f
pcap_geterr	sim_ether.c	/^char* pcap_geterr(pcap_t* a) {$/;"	f
pcap_getevent	sim_ether.c	/^HANDLE pcap_getevent(pcap_t* a) {$/;"	f
pcap_lib_version	sim_ether.c	/^const char *pcap_lib_version(void) {$/;"	f
pcap_lookupnet	sim_ether.c	/^int pcap_lookupnet(const char* a, bpf_u_int32* b, bpf_u_int32* c, char* d) {$/;"	f
pcap_mac_if_vms	sim_ether.c	/^static int pcap_mac_if_vms(const char *AdapterName, unsigned char MACAddress[6])$/;"	f	file:
pcap_mac_if_win32	sim_ether.c	/^static int pcap_mac_if_win32(const char *AdapterName, unsigned char MACAddress[6])$/;"	f	file:
pcap_open_live	sim_ether.c	/^pcap_t* pcap_open_live(const char* a, int b, int c, int d, char* e) {$/;"	f
pcap_pkthdr	sim_ether.c	/^struct pcap_pkthdr {$/;"	s	file:
pcap_sendpacket	sim_ether.c	/^int pcap_sendpacket(pcap_t* a, const u_char* b, int c) {$/;"	f
pcap_sendpacket	sim_ether.c	/^int pcap_sendpacket(pcap_t* handle, const u_char* msg, int len)$/;"	f
pcap_setfilter	sim_ether.c	/^int pcap_setfilter(pcap_t* a, struct bpf_program* b) {$/;"	f
pcap_setmintocopy	sim_ether.c	/^int pcap_setmintocopy(pcap_t* a, int b) {$/;"	f
pcap_setnonblock	sim_ether.c	/^int pcap_setnonblock(pcap_t* a, int nonblock, char *errbuf) {$/;"	f
pcap_t	sim_ether.c	/^typedef void * pcap_t;  \/* Pseudo Type to avoid compiler errors *\/$/;"	t	file:
pcb	PDP10/kl10_nia.c	/^    t_addr            pcb;                     \/* Address of PCB *\/$/;"	m	struct:nia_device	file:
pcchg_irq	PDP10/kx10_cpu.c	/^int     pcchg_irq;                            \/* PC Change flag *\/$/;"	v
pclk_description	PDP10/ka10_pclk.c	/^const char *pclk_description (DEVICE *dptr)$/;"	f
pclk_dev	PDP10/ka10_pclk.c	/^DEVICE pclk_dev = {$/;"	v
pclk_devio	PDP10/ka10_pclk.c	/^t_stat pclk_devio(uint32 dev, uint64 *data)$/;"	f
pclk_dib	PDP10/ka10_pclk.c	/^DIB pclk_dib = {PCLK_DEVNUM, 1, &pclk_devio, NULL};$/;"	v
pclk_mod	PDP10/ka10_pclk.c	/^MTAB pclk_mod[] = {$/;"	v
pclk_set_off	PDP10/ka10_pclk.c	/^t_stat pclk_set_off(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
pclk_set_on	PDP10/ka10_pclk.c	/^t_stat pclk_set_on(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
pclk_show_on	PDP10/ka10_pclk.c	/^t_stat pclk_show_on(FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
pclk_srv	PDP10/ka10_pclk.c	/^pclk_srv(UNIT * uptr)$/;"	f
pclk_unit	PDP10/ka10_pclk.c	/^UNIT pclk_unit[] = {$/;"	v
pclose	scp.c	6473;"	d	file:
pcnt	PDP10/kl10_nia.c	/^    uint64            pcnt[NIA_CNT_LEN];       \/* Counters *\/$/;"	m	struct:nia_device	file:
pcs	sim_disk.c	/^    int         pcs;$/;"	m	struct:_rstsContext	file:
pcst	PDP10/kx10_cpu.c	/^uint64 pcst;$/;"	v
pd_description	PDP10/ka10_pd.c	/^const char *pd_description (DEVICE *dptr)$/;"	f
pd_dev	PDP10/ka10_pd.c	/^DEVICE              pd_dev = {$/;"	v
pd_devio	PDP10/ka10_pd.c	/^t_stat pd_devio(uint32 dev, uint64 *data)$/;"	f
pd_dib	PDP10/ka10_pd.c	/^DIB pd_dib = {PD_DEVNUM, 1, &pd_devio, NULL};$/;"	v
pd_mod	PDP10/ka10_pd.c	/^MTAB pd_mod[] = {$/;"	v
pd_set_off	PDP10/ka10_pd.c	/^t_stat pd_set_off(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
pd_set_on	PDP10/ka10_pd.c	/^t_stat pd_set_on(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
pd_show_on	PDP10/ka10_pd.c	/^t_stat pd_show_on(FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
pd_srv	PDP10/ka10_pd.c	/^pd_srv(UNIT * uptr)$/;"	f
pd_ticks	PDP10/ka10_pd.c	/^static uint64 pd_ticks (void)$/;"	f	file:
pd_tps	PDP10/ka10_pd.c	/^int pd_tps =            60;$/;"	v
pd_unit	PDP10/ka10_pd.c	/^UNIT                pd_unit[] = {$/;"	v
pdp10_clock_precalibrate_commands	PDP10/kx10_cpu.c	/^static const char *pdp10_clock_precalibrate_commands[] = {$/;"	v	file:
pdp_dib	PDP10/kx10_defs.h	/^struct pdp_dib {$/;"	s
peer	PDP10/ka10_ch10.c	/^static char peer[256];$/;"	v	file:
peer	PDP10/ks10_ch11.c	/^static char peer[256];$/;"	v	file:
phase	sim_scsi.h	/^    uint32 phase;                                       \/* current bus phase *\/$/;"	m	struct:scsi_bus_t
phosphor	display/display.c	/^struct phosphor {$/;"	s	file:
phosphor_init	display/display.c	/^phosphor_init(struct phosphor *phosphors, int nphosphors, int color)$/;"	f	file:
phosphors	display/display.c	/^    struct phosphor *phosphors;$/;"	m	struct:color	typeref:struct:color::phosphor	file:
physical_addr	sim_ether.h	/^  ETH_MAC       physical_addr;                          \/* physical address of interface *\/$/;"	m	struct:eth_device
pi_act	PDP10/kx10_cpu.c	/^uint8   pi_act;                               \/* Current active PI level *\/$/;"	v
pi_blkoff	sim_disk.c	/^        uint32  pi_blkoff;  \/* block offset for start *\/$/;"	m	struct:ultrix_disklabel::pt_info	file:
pi_cycle	PDP10/kx10_cpu.c	/^int     pi_cycle;                             \/* Executing an interrupt *\/$/;"	v
pi_enable	PDP10/kx10_cpu.c	/^int     pi_enable;                            \/* Interrupts enabled *\/$/;"	v
pi_enc	PDP10/kx10_cpu.c	/^int     pi_enc;                               \/* Flag for pi *\/$/;"	v
pi_hold	PDP10/kx10_cpu.c	/^int     pi_hold;                              \/* Hold onto interrupt *\/$/;"	v
pi_nblocks	sim_disk.c	/^        uint32  pi_nblocks; \/* no. of sectors *\/$/;"	m	struct:ultrix_disklabel::pt_info	file:
pi_pending	PDP10/kx10_cpu.c	/^int     pi_pending;                           \/* Interrupt pending. *\/$/;"	v
pi_restore	PDP10/kx10_cpu.c	/^int     pi_restore;                           \/* Restore previous level *\/$/;"	v
pi_vect	PDP10/kx10_cpu.c	/^int     pi_vect;                              \/* Last pi location used for IRQ *\/$/;"	v
pia	PDP10/kl10_nia.c	/^    int               pia;                     \/* Interrupt channel *\/$/;"	m	struct:nia_device	file:
pia	PDP10/kx10_imp.c	/^    int               pia;                     \/* PIA channels *\/$/;"	m	struct:imp_device	file:
pidProcess	sim_frontpanel.c	/^    pid_t                   pidProcess;$/;"	m	struct:PANEL	file:
pidpCMD	PDP10/pidp10panel.c	/^void pidpCMD(char *cptr)$/;"	f
pidpCONT	PDP10/pidp10panel.c	/^int pidpCONT(void)$/;"	f
pix_size	display/sim_ws.c	/^static int pix_size = PIX_SIZE;$/;"	v	file:
pk_bckdat	sim_disk.c	/^    uint16  pk_bckdat;$/;"	m	struct:_RSTS_PACKLABEL	file:
pk_bcktim	sim_disk.c	/^    uint16  pk_bcktim;$/;"	m	struct:_RSTS_PACKLABEL	file:
pk_mb01	sim_disk.c	/^    uint16  pk_mb01;$/;"	m	struct:_RSTS_PACKLABEL	file:
pk_mbm1	sim_disk.c	/^    uint16  pk_mbm1;$/;"	m	struct:_RSTS_PACKLABEL	file:
pk_mdcn	sim_disk.c	/^    uint16  pk_mdcn;$/;"	m	struct:_RSTS_PACKLABEL	file:
pk_packid	sim_disk.c	/^    uint16  pk_packid[2];$/;"	m	struct:_RSTS_PACKLABEL	file:
pk_plvl	sim_disk.c	/^    uint16  pk_plvl;$/;"	m	struct:_RSTS_PACKLABEL	file:
pk_ppcs	sim_disk.c	/^    uint16  pk_ppcs;$/;"	m	struct:_RSTS_PACKLABEL	file:
pk_pstat	sim_disk.c	/^    uint16  pk_pstat;$/;"	m	struct:_RSTS_PACKLABEL	file:
pk_tapgvn	sim_disk.c	/^    uint16  pk_tapgvn[2];$/;"	m	struct:_RSTS_PACKLABEL	file:
pmp_addr	PDP10/ka10_pmp.c	/^t_addr              pmp_addr;        \/* Current address register *\/$/;"	v
pmp_addr_hold	PDP10/ka10_pmp.c	/^t_addr              pmp_addr_hold;   \/* Address register hold *\/$/;"	v
pmp_adjpos	PDP10/ka10_pmp.c	/^pmp_adjpos(UNIT * uptr)$/;"	f
pmp_attach	PDP10/ka10_pmp.c	/^pmp_attach(UNIT * uptr, CONST char *file)$/;"	f
pmp_checkirq	PDP10/ka10_pmp.c	/^pmp_checkirq() {$/;"	f
pmp_cmd	PDP10/ka10_pmp.c	/^int                 pmp_cmd;         \/* Current command *\/$/;"	v
pmp_cmd_hold	PDP10/ka10_pmp.c	/^uint32              pmp_cmd_hold;    \/* Command hold register *\/$/;"	v
pmp_cnt	PDP10/ka10_pmp.c	/^int                 pmp_cnt;         \/* Character count in asm register *\/$/;"	v
pmp_cur_unit	PDP10/ka10_pmp.c	/^UNIT               *pmp_cur_unit;    \/* Currently addressed unit *\/$/;"	v
pmp_data	PDP10/ka10_pmp.c	/^uint64              pmp_data;        \/* Data assembly register *\/$/;"	v
pmp_description	PDP10/ka10_pmp.c	/^const char *pmp_description (DEVICE *dptr)$/;"	f
pmp_detach	PDP10/ka10_pmp.c	/^pmp_detach(UNIT * uptr)$/;"	f
pmp_dev	PDP10/ka10_pmp.c	/^DEVICE              pmp_dev = {$/;"	v
pmp_devio	PDP10/ka10_pmp.c	/^pmp_devio(uint32 dev, uint64 *data) {$/;"	f
pmp_dib	PDP10/ka10_pmp.c	/^DIB pmp_dib[] = {$/;"	v
pmp_format	PDP10/ka10_pmp.c	/^pmp_format(UNIT * uptr, int flag) {$/;"	f
pmp_get_dev_addr	PDP10/ka10_pmp.c	/^pmp_get_dev_addr(FILE * st, UNIT * uptr, int32 v, CONST void *desc)$/;"	f
pmp_get_type	PDP10/ka10_pmp.c	/^pmp_get_type(FILE * st, UNIT * uptr, int32 v, CONST void *desc)$/;"	f
pmp_header	PDP10/ka10_pmp.c	/^struct pmp_header$/;"	s	file:
pmp_help	PDP10/ka10_pmp.c	/^pmp_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag,$/;"	f
pmp_irq	PDP10/ka10_pmp.c	/^uint32              pmp_irq;         \/* Irq enable flags *\/$/;"	v
pmp_mod	PDP10/ka10_pmp.c	/^MTAB                pmp_mod[] = {$/;"	v
pmp_pia	PDP10/ka10_pmp.c	/^int                 pmp_pia;         \/* PIA for PMP device *\/$/;"	v
pmp_posterror	PDP10/ka10_pmp.c	/^pmp_posterror(uint64 err) {$/;"	f
pmp_reset	PDP10/ka10_pmp.c	/^pmp_reset(DEVICE * dptr)$/;"	f
pmp_set_dev_addr	PDP10/ka10_pmp.c	/^pmp_set_dev_addr(UNIT * uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
pmp_set_type	PDP10/ka10_pmp.c	/^pmp_set_type(UNIT * uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
pmp_srv	PDP10/ka10_pmp.c	/^t_stat pmp_srv(UNIT * uptr)$/;"	f
pmp_startcmd	PDP10/ka10_pmp.c	/^pmp_startcmd() {$/;"	f
pmp_status	PDP10/ka10_pmp.c	/^uint64              pmp_status;      \/* CONI status for device 500 *\/$/;"	v
pmp_statusb	PDP10/ka10_pmp.c	/^int                 pmp_statusb;$/;"	v
pmp_t	PDP10/ka10_pmp.c	/^struct pmp_t$/;"	s	file:
pmp_unit	PDP10/ka10_pmp.c	/^UNIT                pmp_unit[] = {$/;"	v
pmp_wc	PDP10/ka10_pmp.c	/^uint32              pmp_wc;          \/* Current word count register *\/$/;"	v
pmp_wc_hold	PDP10/ka10_pmp.c	/^uint32              pmp_wc_hold;     \/* Word count hold *\/$/;"	v
png_error_SDL	sim_video.c	/^static void png_error_SDL(png_structp ctx, png_const_charp str)$/;"	f	file:
png_write_SDL	sim_video.c	/^static void png_write_SDL(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f	file:
point	display/display.c	/^struct point {$/;"	s	file:
point	display/ng.c	/^static void point (void)$/;"	f	file:
point	display/type340.c	/^point(int x, int y, int seq)$/;"	f	file:
point2	display/vt11.c	1278;"	d	file:
point3	display/vt11.c	/^point3(int i, int32 x1, int32 y1, int32 z1, int detect_edge)$/;"	f	file:
pointer	scp.c	/^    int pointer;$/;"	m	struct:Stack	file:
points	display/display.c	/^static struct point *points;    \/* allocated array of points *\/$/;"	v	typeref:struct:point	file:
poll	PDP10/kl10_nia.c	/^    int               poll;                    \/* Need to poll receiver *\/$/;"	m	struct:nia_device	file:
poll_interval	sim_tmxr.h	/^    uint32              poll_interval;                  \/* frequency of connection polls (seconds) *\/$/;"	m	struct:tmxr
pollfds_fill	slirp_glue/sim_slirp.c	/^static int pollfds_fill (GArray *pollfds, fd_set *rfds, fd_set *wfds,$/;"	f	file:
pollfds_idx	slirp/socket.h	/^  int pollfds_idx;                 \/* GPollFD GArray index *\/$/;"	m	struct:socket
pollfds_poll	slirp_glue/sim_slirp.c	/^static void pollfds_poll (GArray *pollfds, int nfds, fd_set *rfds,$/;"	f	file:
pop	display/ng.c	/^uint16 pop (void)$/;"	f
pop	display/vt11.c	/^pop(int restore)$/;"	f	file:
pop_Stack	scp.c	/^static t_bool pop_Stack (Stack * this_Stack, char *data, Operator **op)$/;"	f	file:
popen	scp.c	6472;"	d	file:
popj	display/ng.c	/^void popj (void)$/;"	f
port	sim_serial.c	/^    SERHANDLE port;$/;"	m	struct:open_serial_device	file:
port	sim_serial.c	/^    int port;$/;"	m	struct:SERPORT	file:
port	sim_serial.c	/^    uint32 port;$/;"	m	struct:SERPORT	file:
port	sim_tmxr.h	/^    char                *port;                          \/* line specific listening port *\/$/;"	m	struct:tmln
port	sim_tmxr.h	/^    char                *port;                          \/* listening port *\/$/;"	m	struct:tmxr
port	slirp_glue/sim_slirp.c	/^    int port;$/;"	m	struct:redir_tcp_udp	file:
port_map	PDP10/kx10_imp.c	/^    struct imp_map    port_map[64];            \/* Ports to adjust *\/$/;"	m	struct:imp_device	typeref:struct:imp_device::imp_map	file:
port_speed_control	sim_tmxr.h	/^    t_bool              port_speed_control;             \/* line programmatically sets port speed *\/$/;"	m	struct:tmln
port_speed_control	sim_tmxr.h	/^    t_bool              port_speed_control;             \/* multiplexer programmatically sets port speed *\/$/;"	m	struct:tmxr
pos	scp.c	/^    size_t pos;$/;"	m	struct:MFILE	file:
pos	sim_defs.h	/^    size_t              pos;                         \/* data used *\/$/;"	m	struct:MEMFILE
pos	sim_defs.h	/^    t_addr              pos;                            \/* file position *\/$/;"	m	struct:UNIT
pow10_tab	PDP10/kx10_cpu.c	/^uint64 pow10_tab[22][2] = {$/;"	v
pqual	sim_scsi.h	/^    uint8 pqual;                                        \/* peripheral qualifier *\/$/;"	m	struct:scsi_dev_t
precedence	scp.c	/^    int         precedence;$/;"	m	struct:Operator	file:
pred	display/display.c	/^static struct phosphor pred[] = { {1.0, 0.37, 0.37, 0.5, 0.10} };$/;"	v	typeref:struct:phosphor	file:
prelen	sim_tape.h	/^    t_awslnt    prelen;$/;"	m	struct:__anon30
prev	PDP10/ks10_kmc.c	/^  struct queuehdr     *prev;$/;"	m	struct:queuehdr	typeref:struct:queuehdr::queuehdr	file:
prev	display/display.c	/^    struct point *prev;         \/* prev entry in queue *\/$/;"	m	struct:point	typeref:struct:point::point	file:
prev	slirp/ip.h	/^        void *next, *prev;$/;"	m	struct:qlink
prev_ctx	PDP10/kx10_cpu.c	/^uint8   prev_ctx;                             \/* Previous AC context *\/$/;"	v
prev_sect	PDP10/kx10_cpu.c	/^    uint16      prev_sect;$/;"	m	struct:__anon1	file:
prev_sect	PDP10/kx10_cpu.c	/^int     prev_sect;                            \/* Previous section *\/$/;"	v
pri_name	PDP10/kl10_fe.c	/^CONST char *pri_name[] = { "(0)", "EM2EI", "EM2TI", "EMSTR", "EMLNC", "EMRDS", "(6)",$/;"	v
print_data	PDP10/ka10_ai.c	/^static void print_data (uint64 *data, int n)$/;"	f	file:
prmsc	PDP10/kl10_nia.c	/^    int               prmsc;                   \/* Recieve all packets *\/$/;"	m	struct:nia_device	file:
process_request	PDP10/pdp6_slave.c	/^static t_stat process_request (UNIT *uptr, const uint8 *request, size_t size)$/;"	f	file:
process_stdin_commands	scp.c	/^t_stat process_stdin_commands (t_stat stat, char *argv[], t_bool do_called)$/;"	f
product	sim_scsi.h	/^    const char *product;                                \/* product string *\/$/;"	m	struct:scsi_dev_t
prog	sim_tape.c	/^    uint8  prog;            \/* Programmer # *\/$/;"	m	struct:DOS11_HDR	file:
proj	sim_tape.c	/^    uint8  proj;            \/* Project # *\/$/;"	m	struct:DOS11_HDR	file:
promiscuous	sim_ether.h	/^  ETH_BOOL      promiscuous;                            \/* promiscuous mode flag *\/$/;"	m	struct:eth_device
prot	sim_tape.c	/^    uint16 prot;            \/* Protection *\/$/;"	m	struct:DOS11_HDR	file:
proto	PDP10/kl10_nia.c	/^    uint8           proto;              \/* Protocol *\/$/;"	m	struct:udp_hdr	file:
proto	PDP10/kx10_imp.c	/^    uint8           proto;              \/* Protocol *\/$/;"	m	struct:udp_hdr	file:
proto	sim_ether.c	/^  uint8 proto;            \/* Protocol number (TCP, UDP etc) *\/$/;"	m	struct:IPHeader	file:
protocol	PDP10/kl10_nia.c	/^    uint16              protocol;$/;"	m	struct:arp_hdr	file:
protocol	PDP10/kx10_imp.c	/^    uint16              protocol;$/;"	m	struct:arp_hdr	file:
protolen	PDP10/kl10_nia.c	/^    uint8               protolen;$/;"	m	struct:arp_hdr	file:
protolen	PDP10/kx10_imp.c	/^    uint8               protolen;$/;"	m	struct:arp_hdr	file:
prox	scp.c	/^    const char *prox;$/;"	m	struct:__anon8	file:
ps_getch	sim_console.c	/^int ps_getch(void) {$/;"	f
ps_kbhit	sim_console.c	/^int ps_kbhit(void) {$/;"	f
pseudo_checksum	sim_ether.c	/^pseudo_checksum(uint16 len, uint16 proto, void *nsrc_addr, void *ndest_addr, uint8 *buff)$/;"	f	file:
pseudo_filesystem_size	sim_disk.c	/^t_offset pseudo_filesystem_size = 0;        \/* Dummy file system check return used during testing *\/$/;"	v
pstrcpy	slirp_glue/glib_qemu_stubs.c	/^void pstrcpy(char *buf, int buf_size, const char *str)$/;"	f
pstring	sim_defs.h	/^    const char          *pstring;                       \/* print string *\/$/;"	m	struct:MTAB
pt_info	sim_disk.c	/^    struct  pt_info {$/;"	s	struct:ultrix_disklabel	file:
pt_magic	sim_disk.c	/^    uint32  pt_magic;       \/* magic no. indicating part. info exits *\/$/;"	m	struct:ultrix_disklabel	file:
pt_part	sim_disk.c	/^        } pt_part[8];$/;"	m	struct:ultrix_disklabel	typeref:struct:ultrix_disklabel::pt_info	file:
pt_valid	sim_disk.c	/^    uint32  pt_valid;       \/* set by driver if pt is current *\/$/;"	m	struct:ultrix_disklabel	file:
ptcr	PDP10/kx10_defs.h	/^      uint32         ptcr;$/;"	m	struct:rh_if
pthread_mutex_destroy	slirp_glue/sim_slirp.c	47;"	d	file:
pthread_mutex_init	slirp_glue/sim_slirp.c	46;"	d	file:
pthread_mutex_lock	slirp_glue/sim_slirp.c	48;"	d	file:
pthread_mutex_t	slirp_glue/sim_slirp.c	50;"	d	file:
pthread_mutex_unlock	slirp_glue/sim_slirp.c	49;"	d	file:
ptp_attach	PDP10/kx10_pt.c	/^t_stat ptp_attach (UNIT *uptr, CONST char *cptr)$/;"	f
ptp_description	PDP10/kx10_pt.c	/^const char *ptp_description (DEVICE *dptr)$/;"	f
ptp_detach	PDP10/kx10_pt.c	/^t_stat ptp_detach (UNIT *uptr)$/;"	f
ptp_dev	PDP10/kx10_pt.c	/^DEVICE ptp_dev = {$/;"	v
ptp_devio	PDP10/kx10_pt.c	/^t_stat ptp_devio(uint32 dev, uint64 *data) {$/;"	f
ptp_dib	PDP10/kx10_pt.c	/^DIB ptp_dib = { PP_DEVNUM, 1, &ptp_devio, NULL };$/;"	v
ptp_help	PDP10/kx10_pt.c	/^t_stat ptp_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
ptp_mod	PDP10/kx10_pt.c	/^MTAB ptp_mod[] = {$/;"	v
ptp_reg	PDP10/kx10_pt.c	/^REG ptp_reg[] = {$/;"	v
ptp_reset	PDP10/kx10_pt.c	/^t_stat ptp_reset (DEVICE *dptr)$/;"	f
ptp_svc	PDP10/kx10_pt.c	/^t_stat ptp_svc (UNIT *uptr)$/;"	f
ptp_unit	PDP10/kx10_pt.c	/^UNIT ptp_unit = {$/;"	v
ptr	sim_console.c	/^    int             ptr;            \/* pointer to next value cell *\/$/;"	m	struct:BITSAMPLE	file:
ptr_attach	PDP10/kx10_pt.c	/^t_stat ptr_attach (UNIT *uptr, CONST char *cptr)$/;"	f
ptr_boot	PDP10/kx10_pt.c	/^ptr_boot(int32 unit_num, DEVICE * dptr)$/;"	f
ptr_description	PDP10/kx10_pt.c	/^const char *ptr_description (DEVICE *dptr)$/;"	f
ptr_detach	PDP10/kx10_pt.c	/^t_stat ptr_detach (UNIT *uptr)$/;"	f
ptr_dev	PDP10/kx10_pt.c	/^DEVICE ptr_dev = {$/;"	v
ptr_devio	PDP10/kx10_pt.c	/^t_stat ptr_devio(uint32 dev, uint64 *data) {$/;"	f
ptr_dib	PDP10/kx10_pt.c	/^DIB ptr_dib = { PR_DEVNUM, 1, &ptr_devio, NULL };$/;"	v
ptr_flg	PDP10/kx10_cpu.c	/^int     ptr_flg;                              \/* Access to pointer value *\/$/;"	v
ptr_help	PDP10/kx10_pt.c	/^t_stat ptr_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
ptr_mod	PDP10/kx10_pt.c	/^MTAB ptr_mod[] = {$/;"	v
ptr_read_word	PDP10/kx10_pt.c	/^ptr_read_word(UNIT *uptr) {$/;"	f
ptr_reg	PDP10/kx10_pt.c	/^REG ptr_reg[] = {$/;"	v
ptr_reset	PDP10/kx10_pt.c	/^t_stat ptr_reset (DEVICE *dptr)$/;"	f
ptr_svc	PDP10/kx10_pt.c	/^t_stat ptr_svc (UNIT *uptr)$/;"	f
ptr_unit	PDP10/kx10_pt.c	/^UNIT ptr_unit = {$/;"	v
ptt_addr	PDP10/kl10_nia.c	/^    t_addr            ptt_addr;                \/* Address of Protocol table *\/$/;"	m	struct:nia_device	file:
ptt_head	PDP10/kl10_nia.c	/^    t_addr            ptt_head[17];            \/* Head of protocol queue *\/$/;"	m	struct:nia_device	file:
ptt_n	PDP10/kl10_nia.c	/^    int               ptt_n;                   \/* Number of Protocol entries *\/$/;"	m	struct:nia_device	file:
ptt_proto	PDP10/kl10_nia.c	/^    uint16            ptt_proto[17];           \/* Protocol for entry *\/$/;"	m	struct:nia_device	file:
punch_count	sim_card.c	/^    t_addr              punch_count;     \/* Number of cards punched *\/$/;"	m	struct:card_context	file:
pur	PDP10/kx10_cpu.c	/^uint64  pur;                                  \/* Process use register *\/$/;"	v
push	display/vt11.c	/^push()$/;"	f	file:
push_Stack	scp.c	/^static t_bool push_Stack (Stack * this_Stack, char *data, Operator *op)$/;"	f	file:
push_ovf	PDP10/kx10_cpu.c	/^int     push_ovf;                             \/* Push stack overflow *\/$/;"	v
pushj	display/ng.c	/^void pushj (uint16 inst)$/;"	f
put_rval	scp.c	/^void put_rval (REG *rptr, uint32 idx, t_value val)$/;"	f
put_rval_pcchk	scp.c	/^void put_rval_pcchk (REG *rptr, uint32 idx, t_value val, t_bool pc_chk)$/;"	f
put_switches	scp.c	/^const char *put_switches (char *buf, size_t bufsize, uint32 sw)$/;"	f
pwd_cmd	scp.c	/^t_stat pwd_cmd (int32 flg, CONST char *cptr)$/;"	f
qdisable	scp.c	/^t_bool qdisable (DEVICE *dptr)$/;"	f
qemu_accept	slirp_glue/glib_qemu_stubs.c	/^int qemu_accept(int s, struct sockaddr *addr, socklen_t *addrlen)$/;"	f
qemu_add_child_watch	slirp_glue/config-host.h	23;"	d
qemu_chr_fe_write	slirp_glue/glib_qemu_stubs.c	/^int qemu_chr_fe_write(CharDriverState *s, const uint8_t *buf, int len)$/;"	f
qemu_clock_get_ms	slirp_glue/qemu/timer.h	/^static inline int64_t qemu_clock_get_ms(QEMUClockType type)$/;"	f
qemu_clock_get_ns	slirp_glue/glib_qemu_stubs.c	/^int64_t qemu_clock_get_ns(int type)$/;"	f
qemu_get_be16	slirp_glue/config-host.h	47;"	d
qemu_get_be32	slirp_glue/config-host.h	49;"	d
qemu_get_buffer	slirp_glue/config-host.h	53;"	d
qemu_get_byte	slirp_glue/config-host.h	51;"	d
qemu_get_sbe16	slirp_glue/config-host.h	48;"	d
qemu_get_sbe32	slirp_glue/config-host.h	50;"	d
qemu_get_sbyte	slirp_glue/config-host.h	52;"	d
qemu_notify_event	slirp_glue/glib_qemu_stubs.c	/^void qemu_notify_event(void)$/;"	f
qemu_put_be16	slirp_glue/config-host.h	39;"	d
qemu_put_be32	slirp_glue/config-host.h	41;"	d
qemu_put_buffer	slirp_glue/config-host.h	45;"	d
qemu_put_byte	slirp_glue/config-host.h	43;"	d
qemu_put_sbe16	slirp_glue/config-host.h	40;"	d
qemu_put_sbe32	slirp_glue/config-host.h	42;"	d
qemu_put_sbyte	slirp_glue/config-host.h	44;"	d
qemu_recv	slirp_glue/glib_qemu_stubs.c	/^int qemu_recv (int s, void *buf, size_t len, int flags)$/;"	f
qemu_sendto	slirp_glue/qemu/sockets.h	42;"	d
qemu_set_nonblock	slirp_glue/glib_qemu_stubs.c	/^void qemu_set_nonblock(int fd)$/;"	f
qemu_setsockopt	slirp_glue/glib_qemu_stubs.c	/^int qemu_setsockopt (int s, int level, int optname, void *optval, int optlen)$/;"	f
qemu_socket	slirp_glue/glib_qemu_stubs.c	/^int qemu_socket(int domain, int type, int protocol)$/;"	f
qemu_timersub	slirp_glue/qemu/osdep.h	/^static inline void qemu_timersub(const struct timeval *val1,$/;"	f
qemu_timersub	slirp_glue/qemu/osdep.h	169;"	d
qemu_timeval	slirp_glue/qemu/sysemu/os-win32.h	/^} qemu_timeval;$/;"	t	typeref:struct:__anon42
qh_link	slirp/misc.c	/^        struct quehead *qh_link;$/;"	m	struct:quehead	typeref:struct:quehead::quehead	file:
qh_rlink	slirp/misc.c	/^        struct quehead *qh_rlink;$/;"	m	struct:quehead	typeref:struct:quehead::quehead	file:
qlink	slirp/ip.h	/^struct qlink {$/;"	s
qlink2tcpiphdr	slirp/tcpip.h	61;"	d
qptr	sim_defs.h	/^    uint32              qptr;                           \/* circ q ptr *\/$/;"	m	struct:REG
qua_srv	PDP10/kx10_cpu.c	/^qua_srv(UNIT * uptr)$/;"	f
qua_time	PDP10/kx10_cpu.c	/^uint32  qua_time;                             \/* Quantum clock value *\/$/;"	v
qua_time	PDP10/kx10_cpu.c	/^uint64  qua_time;                             \/* Quantum clock value *\/$/;"	v
qua_tps	PDP10/kx10_cpu.c	/^int32   qua_tps = 125000;$/;"	v
quehead	slirp/misc.c	/^struct quehead {$/;"	s	file:
queue_interval	display/display.c	/^static long queue_interval;$/;"	v	file:
queue_point	display/display.c	/^queue_point(struct point *p)$/;"	f	file:
queuehdr	PDP10/ks10_kmc.c	/^struct queuehdr {$/;"	s	file:
r50Asc	sim_disk.c	/^static void r50Asc(uint16 val, char *buf)$/;"	f	file:
r_pkt	PDP10/kl10_nia.c	/^    int               r_pkt;                   \/* Packet pending *\/$/;"	m	struct:nia_device	file:
rad50	sim_disk.c	/^static char rad50[] = " ABCDEFGHIJKLMNOPQRSTUVWXYZ$.%0123456789";$/;"	v	file:
rad50	sim_tape.c	/^static const char rad50[] = " ABCDEFGHIJKLMNOPQRSTUVWXYZ%.%0123456789";$/;"	v	file:
radix	sim_defs.h	/^    uint32              radix;                          \/* radix *\/$/;"	m	struct:REG
radix	sim_frontpanel.c	/^    int                     radix;$/;"	m	struct:PANEL	file:
rae	PDP10/kx10_defs.h	/^      int            rae;        \/* Access register error *\/$/;"	m	struct:rh_if
rand	scp.h	173;"	d
rar	PDP10/kl10_nia.c	/^    int               rar;$/;"	m	struct:nia_device	file:
rbr	sim_tmxr.h	/^    char                *rbr;                           \/* rcv break *\/$/;"	m	struct:tmln
rbuffer	PDP10/kx10_imp.c	/^    uint8             rbuffer[ETH_FRAME_SIZE]; \/* Temp receive buffer *\/$/;"	m	struct:imp_device	file:
rc_attach	PDP10/kx10_rc.c	/^t_stat rc_attach (UNIT *uptr, CONST char *cptr)$/;"	f
rc_boot	PDP10/kx10_rc.c	/^rc_boot(int32 unit_num, DEVICE * dptr)$/;"	f
rc_buf	PDP10/kx10_rc.c	/^uint64          rc_buf[NUM_DEVS_RC][RM10_WDS];$/;"	v
rc_description	PDP10/kx10_rc.c	/^const char *rc_description (DEVICE *dptr)$/;"	f
rc_detach	PDP10/kx10_rc.c	/^t_stat rc_detach (UNIT *uptr)$/;"	f
rc_devio	PDP10/kx10_rc.c	/^t_stat rc_devio(uint32 dev, uint64 *data) {$/;"	f
rc_devs	PDP10/kx10_rc.c	/^DEVICE *rc_devs[] = {$/;"	v
rc_df10	PDP10/kx10_rc.c	/^struct  df10    rc_df10[NUM_DEVS_RC];$/;"	v	typeref:struct:df10
rc_dib	PDP10/kx10_rc.c	/^DIB rc_dib[] = {$/;"	v
rc_drv_tab	PDP10/kx10_rc.c	/^struct drvtyp rc_drv_tab[] = {$/;"	v	typeref:struct:drvtyp
rc_help	PDP10/kx10_rc.c	/^t_stat rc_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
rc_ipr	PDP10/kx10_rc.c	/^uint32          rc_ipr[NUM_DEVS_RC];$/;"	v
rc_mod	PDP10/kx10_rc.c	/^MTAB                rc_mod[] = {$/;"	v
rc_reset	PDP10/kx10_rc.c	/^rc_reset(DEVICE * dptr)$/;"	f
rc_set_type	PDP10/kx10_rc.c	/^rc_set_type(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
rc_svc	PDP10/kx10_rc.c	/^t_stat rc_svc (UNIT *uptr)$/;"	f
rc_unit	PDP10/kx10_rc.c	/^UNIT                rc_unit[] = {$/;"	v
rca_dev	PDP10/kx10_rc.c	/^DEVICE              rca_dev = {$/;"	v
rca_reg	PDP10/kx10_rc.c	/^REG                 rca_reg[] = {$/;"	v
rcallback	PDP10/kl10_nia.c	/^    ETH_PCALLBACK     rcallback;               \/* read callback routine *\/$/;"	m	struct:nia_device	file:
rcallback	PDP10/kx10_imp.c	/^    ETH_PCALLBACK     rcallback;               \/* read callback routine *\/$/;"	m	struct:imp_device	file:
rcb	PDP10/kl10_nia.c	/^    t_addr            rcb;                     \/* Read count buffer address *\/$/;"	m	struct:nia_device	file:
rcb_dev	PDP10/kx10_rc.c	/^DEVICE              rcb_dev = {$/;"	v
rcb_reg	PDP10/kx10_rc.c	/^REG                 rcb_reg[] = {$/;"	v
rcv_adv	slirp/tcp_var.h	/^        tcp_seq rcv_adv;                \/* advertised window *\/$/;"	m	struct:tcpcb
rcv_nxt	slirp/tcp_var.h	/^        tcp_seq rcv_nxt;                \/* receive next *\/$/;"	m	struct:tcpcb
rcv_scale	slirp/tcp_var.h	/^        u_char  rcv_scale;              \/* window scaling for recv window *\/$/;"	m	struct:tcpcb
rcv_up	slirp/tcp_var.h	/^        tcp_seq rcv_up;                 \/* receive urgent pointer *\/$/;"	m	struct:tcpcb
rcv_wnd	slirp/tcp_var.h	/^        uint32_t rcv_wnd;               \/* receive window *\/$/;"	m	struct:tcpcb
rcvc	PDP10/ks10_kmc.c	/^   uint16    rcvc;$/;"	m	struct:workblock	file:
rcve	sim_tmxr.h	/^    int32               rcve;                           \/* rcv enable *\/$/;"	m	struct:tmln
rd_io	PDP10/kx10_defs.h	/^    t_stat              (*rd_io)(DEVICE *dptr, t_addr addr, uint16 *data, int32 access);$/;"	m	struct:pdp_dib
re_nsub	sim_defs.h	/^    int                 re_nsub;                        \/* regular expression sub expression count *\/$/;"	m	struct:EXPTAB
read_callback	sim_ether.h	/^  ETH_PCALLBACK read_callback;                          \/* read callback function *\/$/;"	m	struct:eth_device
read_count	sim_disk.c	/^    uint32              read_count;         \/* Number of read operations performed *\/$/;"	m	struct:disk_context	file:
read_line	scp.c	/^char *read_line (char *cptr, int32 size, FILE *stream)$/;"	f
read_line_p	scp.c	/^char *read_line_p (const char *prompt, char *cptr, int32 size, FILE *stream)$/;"	f
read_packet	sim_ether.h	/^  ETH_PACK*     read_packet;                            \/* read packet *\/$/;"	m	struct:eth_device
read_queue	sim_ether.h	/^  ETH_QUE       read_queue;$/;"	m	struct:eth_device
read_timeout	sim_console.c	/^    uint32          read_timeout;$/;"	m	struct:REMOTE	file:
read_word	PDP10/ka10_ten11.c	/^static int read_word (t_addr addr, int *data)$/;"	f	file:
reader_thread	sim_ether.h	/^  pthread_t     reader_thread;                          \/* Reader Thread Id *\/$/;"	m	struct:eth_device
readin_flag	PDP10/kx10_dp.c	/^int           readin_flag = 0;$/;"	v
real_sim_os_sleep_inc_ms	sim_timer.c	/^static uint32 real_sim_os_sleep_inc_ms = 0;$/;"	v	file:
real_sim_os_sleep_min_ms	sim_timer.c	/^static uint32 real_sim_os_sleep_min_ms = 0;$/;"	v	file:
rec	PDP10/ka10_pmp.c	/^     uint8              rec;     \/* Current record number *\/$/;"	m	struct:pmp_t	file:
rec_buff	PDP10/kl10_nia.c	/^    ETH_PACK          rec_buff;                \/* Buffer for recieved packet *\/$/;"	m	struct:nia_device	file:
rec_entry	PDP10/kl10_nia.c	/^    t_addr            rec_entry;               \/* Pointer to current recieve entry *\/$/;"	m	struct:nia_device	file:
receive_packet_errors	sim_ether.h	/^  uint32        receive_packet_errors;                  \/* Total Read Packet Errors *\/$/;"	m	struct:eth_device
record_count	sim_tape.c	/^    uint32 record_count;    \/* number of entries in the record array *\/$/;"	m	struct:MEMORY_TAPE	file:
record_format	sim_tape.c	/^    char                record_format;$/;"	m	struct:ansi_tape_parameters	file:
record_format	sim_tape.c	/^    char record_format;         \/* F(fixed)|D(variable)|S(spanned) *\/$/;"	m	struct:HDR2	file:
record_length	sim_tape.c	/^    char record_length[5];      \/*  *\/$/;"	m	struct:HDR2	file:
records	sim_tape.c	/^    TAPE_RECORD **records;$/;"	m	struct:MEMORY_TAPE	file:
recsize	sim_defs.h	/^    uint32              recsize;                        \/* Tape specific info *\/$/;"	m	struct:UNIT
rectyp	sim_tape.h	/^    t_awslnt    rectyp;$/;"	m	struct:__anon30
recv	PDP10/kx10_imp.c	/^    int               recv;                    \/* received packets *\/$/;"	m	struct:imp_stats	file:
recv_overrun	PDP10/kx10_imp.c	/^    int               recv_overrun;            \/* receiver overruns *\/$/;"	m	struct:imp_stats	file:
red	display/display.c	/^    double red, green, blue;$/;"	m	struct:phosphor	file:
redir_tcp_udp	slirp_glue/sim_slirp.c	/^struct redir_tcp_udp {$/;"	s	file:
reduce	display/vt11.c	/^static int reduce;                      \/* CRT units per actual pixel *\/$/;"	v	file:
refcount	sim_defs.h	/^    int32               refcount;                       \/* reference count *\/$/;"	m	struct:FILEREF
refdom	slirp/dnssearch.c	/^    struct compact_domain *refdom;$/;"	m	struct:compact_domain	typeref:struct:compact_domain::compact_domain	file:
reflections	sim_ether.h	/^  int           reflections;                            \/* packet reflections on interface *\/$/;"	m	struct:eth_device
refresh_interval	display/display.c	/^static int refresh_interval;$/;"	v	file:
refresh_rate	display/display.c	/^static int refresh_rate;$/;"	v	file:
refresh_rate	display/vt11.c	/^static unsigned char refresh_rate = 0;  \/* 2 bits:$/;"	v	file:
reg	PDP10/kx10_defs.h	/^      int            reg;        \/* Last register selected *\/$/;"	m	struct:rh_if
reg	scp.c	/^    REG reg[5];$/;"	m	struct:validation_test	file:
reg	sim_console.c	/^    REG             *reg;           \/* Register to be sampled *\/$/;"	m	struct:BITSAMPLE_REG	file:
reg_count	sim_frontpanel.c	/^    size_t                  reg_count;$/;"	m	struct:PANEL	file:
reg_query	sim_frontpanel.c	/^    char                    *reg_query;$/;"	m	struct:PANEL	file:
reg_query_size	sim_frontpanel.c	/^    size_t                  reg_query_size;$/;"	m	struct:PANEL	file:
regex	sim_defs.h	/^    pcre                *regex;                         \/* compiled regular expression *\/$/;"	m	struct:EXPTAB
register	slirp_glue/qemu/compiler.h	40;"	d
register_callback	sim_video.c	/^static t_stat register_callback (void **array, int n, void *callback)$/;"	f	file:
register_collect_mid1	sim_frontpanel.c	/^static const char *register_collect_mid1 = " samples every ";$/;"	v	file:
register_collect_mid2	sim_frontpanel.c	/^static const char *register_collect_mid2 = " cycles dither ";$/;"	v	file:
register_collect_mid3	sim_frontpanel.c	/^static const char *register_collect_mid3 = " percent ";$/;"	v	file:
register_collect_prefix	sim_frontpanel.c	/^static const char *register_collect_prefix = "collect ";$/;"	v	file:
register_dev_echo	sim_frontpanel.c	/^static const char *register_dev_echo = "# REGISTERS-FOR-DEVICE:";$/;"	v	file:
register_get_end	sim_frontpanel.c	/^static const char *register_get_end = "# REGISTERS-DONE";$/;"	v	file:
register_get_postfix	sim_frontpanel.c	/^static const char *register_get_postfix = "sampleout";$/;"	v	file:
register_get_prefix	sim_frontpanel.c	/^static const char *register_get_prefix = "show time";$/;"	v	file:
register_get_start	sim_frontpanel.c	/^static const char *register_get_start = "# REGISTERS-START";$/;"	v	file:
register_ind_echo	sim_frontpanel.c	/^static const char *register_ind_echo = "# REGISTER-INDIRECT:";$/;"	v	file:
register_repeat_end	sim_frontpanel.c	/^static const char *register_repeat_end = "# REGISTERS-REPEAT-DONE";$/;"	v	file:
register_repeat_prefix	sim_frontpanel.c	/^static const char *register_repeat_prefix = "repeat every ";$/;"	v	file:
register_repeat_start	sim_frontpanel.c	/^static const char *register_repeat_start = "# REGISTERS-REPEAT-START";$/;"	v	file:
register_repeat_stop	sim_frontpanel.c	/^static const char *register_repeat_stop = "repeat stop";$/;"	v	file:
register_repeat_stop_all	sim_frontpanel.c	/^static const char *register_repeat_stop_all = "repeat stop all";$/;"	v	file:
register_repeat_units	sim_frontpanel.c	/^static const char *register_repeat_units = " usecs ";$/;"	v	file:
register_savevm	slirp_glue/config-host.h	37;"	d
registers	sim_defs.h	/^    REG                 *registers;                     \/* registers *\/$/;"	m	struct:DEVICE
regs	PDP10/kx10_defs.h	/^      uint16         regs[16];   \/* Space for TM03 formater *\/$/;"	m	struct:rh_if
regs	sim_frontpanel.c	/^    REG                     *regs;$/;"	m	struct:PANEL	file:
reloc	display/ng.c	/^static int reloc = 0;$/;"	v	file:
reloc	display/vt11.c	/^static uint32 reloc = 0;                \/* relocation, aligned with DPC *\/$/;"	v	file:
rem_con_data_unit	sim_console.c	456;"	d	file:
rem_con_poll_unit	sim_console.c	455;"	d	file:
rem_con_repeat_units	sim_console.c	458;"	d	file:
rem_con_smp_smpl_units	sim_console.c	459;"	d	file:
remote_only_cmds	sim_console.c	/^static CTAB remote_only_cmds[] = {$/;"	v	file:
removable	sim_disk.c	/^    uint32              removable;          \/* Removable device flag *\/$/;"	m	struct:disk_context	file:
removeable	sim_scsi.h	/^    t_bool removeable;                                  \/* removable flag *\/$/;"	m	struct:scsi_dev_t
remque	slirp/misc.c	/^remque(void *a)$/;"	f
remque	slirp/slirp.h	131;"	d
remqueue	PDP10/ks10_kmc.c	/^static void *remqueue (QH *entry, int32 *count) {$/;"	f	file:
rename_cmd	scp.c	/^t_stat rename_cmd (int32 flg, CONST char *cptr)$/;"	f
repeat_action	sim_console.c	/^    char            *repeat_action;         \/* command(s) to repeatedly execute *\/$/;"	m	struct:REMOTE	file:
repeat_interval	sim_console.c	/^    uint32          repeat_interval;        \/* usecs between repeat execution *\/$/;"	m	struct:REMOTE	file:
repeat_pending	sim_console.c	/^    t_bool          repeat_pending;         \/* repeat delivery pending *\/$/;"	m	struct:REMOTE	file:
req	sim_scsi.h	/^    t_bool req;                                         \/* request flag *\/$/;"	m	struct:scsi_bus_t
request_addr	slirp/bootp.c	/^static BOOTPClient *request_addr(Slirp *slirp, const struct in_addr *paddr,$/;"	f	file:
request_r_scale	slirp/tcp_var.h	/^        u_char  request_r_scale;        \/* pending window scaling *\/$/;"	m	struct:tcpcb
requested_s_scale	slirp/tcp_var.h	/^        u_char  requested_s_scale;$/;"	m	struct:tcpcb
reserved	sim_tape.c	/^    char reserved[12];          \/* *\/$/;"	m	struct:HDR3	file:
reserved	sim_tape.c	/^    char reserved[7];           \/* blank *\/$/;"	m	struct:HDR1	file:
reserved1	sim_tape.c	/^    char reserved1[13];         \/*      *\/$/;"	m	struct:VOL1	file:
reserved2	sim_tape.c	/^    char reserved2[28];         \/*      *\/$/;"	m	struct:VOL1	file:
reserved_os1	sim_tape.c	/^    char reserved_os1[21];      \/* *\/$/;"	m	struct:HDR2	file:
reserved_os2	sim_tape.c	/^    char reserved_os2[13];      \/* *\/$/;"	m	struct:HDR2	file:
reserved_std	sim_tape.c	/^    char reserved_std[28];      \/* *\/$/;"	m	struct:HDR2	file:
reset	PDP10/kx10_imp.c	/^    int               reset;                   \/* reset count *\/$/;"	m	struct:imp_stats	file:
reset	sim_defs.h	/^    t_stat              (*reset)(DEVICE *dp);           \/* reset routine *\/$/;"	m	struct:DEVICE
reset_all	scp.c	/^t_stat reset_all (uint32 start)$/;"	f
reset_all_p	scp.c	/^t_stat reset_all_p (uint32 start)$/;"	f
reset_cmd	scp.c	/^t_stat reset_cmd (int32 flag, CONST char *cptr)$/;"	f
resetx	display/ng.c	/^void resetx (void)$/;"	f
resety	display/ng.c	/^void resety (void)$/;"	f
resp_hdr	PDP10/kl10_nia.c	/^    t_addr            resp_hdr;                \/* Head of response queue *\/$/;"	m	struct:nia_device	file:
restore_cmd	scp.c	/^t_stat restore_cmd (int32 flag, CONST char *cptr)$/;"	f
restore_pi_hold	PDP10/kx10_cpu.c	/^void restore_pi_hold() {$/;"	f
restricted	slirp/slirp.h	/^    int restricted;$/;"	m	struct:Slirp
resv	PDP10/ka10_pmp.c	/^       uint8    resv[492];     \/* pad to 512 byte block *\/$/;"	m	struct:pmp_header	file:
return_cmd	scp.c	/^t_stat return_cmd (int32 flag, CONST char *fcptr)$/;"	f
return_length_address	sim_serial.c	/^    void *return_length_address;$/;"	m	struct:__anon29	file:
rev	sim_scsi.h	/^    const char *rev;                                    \/* revision string *\/$/;"	m	struct:scsi_dev_t
revents	slirp_glue/glib.h	/^  gushort   revents;$/;"	m	struct:GPollFD
rfc1533_cookie	slirp/bootp.c	/^static const uint8_t rfc1533_cookie[] = { RFC1533_COOKIE };$/;"	v	file:
rfnm_count	PDP10/kx10_imp.c	/^    int               rfnm_count;              \/* Number of pending RFNM packets *\/$/;"	m	struct:imp_device	file:
rgn	display/carbon.c	/^static RgnHandle                rgn;$/;"	v	file:
rh	PDP10/kx10_cpu.c	/^struct rh_dev rh[8];$/;"	v	typeref:struct:rh_dev
rh	PDP10/kx10_defs.h	/^    struct rh_if        *rh;$/;"	m	struct:pdp_dib	typeref:struct:pdp_dib::rh_if
rh	PDP10/kx10_defs.h	/^    struct rh_if       *rh;$/;"	m	struct:rh_dev	typeref:struct:rh_dev::rh_if
rh11_if	PDP10/kx10_defs.h	/^    struct rh_if       *rh11_if;$/;"	m	struct:pdp_dib	typeref:struct:pdp_dib::rh_if
rh20_setup	PDP10/kx10_rh.c	/^void rh20_setup(struct rh_if *rhc)$/;"	f
rh_blkend	PDP10/kx10_rh.c	/^int rh_blkend(struct rh_if *rhc)$/;"	f
rh_boot_dev	PDP10/kx10_rh.c	/^DEVICE  *rh_boot_dev = NULL;$/;"	v
rh_boot_unit	PDP10/kx10_rh.c	/^int      rh_boot_unit = 0;$/;"	v
rh_dev	PDP10/kx10_defs.h	/^struct rh_dev {$/;"	s
rh_devio	PDP10/kx10_rh.c	/^t_stat rh_devio(uint32 dev, uint64 *data) {$/;"	f
rh_devirq	PDP10/kx10_rh.c	/^rh_devirq(uint32 dev, t_addr addr) {$/;"	f
rh_devs	PDP10/kx10_cpu.c	/^DEVICE *rh_devs[] = {$/;"	v
rh_error	PDP10/kx10_rh.c	/^void rh_error(struct rh_if *rhc)$/;"	f
rh_fetch	PDP10/kx10_rh.c	/^int rh_fetch(struct rh_if *rhc) {$/;"	f
rh_finish_op	PDP10/kx10_rh.c	/^void rh_finish_op(struct rh_if *rhc, int nxm) {$/;"	f
rh_if	PDP10/kx10_defs.h	/^struct rh_if {$/;"	s
rh_map	PDP10/kx10_rh.c	/^int rh_map[] = { 0,   \/* 776700 *\/$/;"	v
rh_nums	PDP10/kx10_cpu.c	/^int rh_nums[] = { 0270, 0274, 0360, 0364, 0370, 0374, 0};$/;"	v
rh_read	PDP10/kx10_rh.c	/^int rh_read(struct rh_if *rhc) {$/;"	f
rh_reset	PDP10/kx10_rh.c	/^void rh_reset(DEVICE *dptr, struct rh_if *rhc)$/;"	f
rh_set_type	PDP10/kx10_rh.c	/^rh_set_type(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
rh_setattn	PDP10/kx10_rh.c	/^void rh_setattn(struct rh_if *rhc, int unit)$/;"	f
rh_setirq	PDP10/kx10_rh.c	/^void rh_setirq(struct rh_if *rhc) {$/;"	f
rh_setup	PDP10/kx10_rh.c	/^void rh_setup(struct rh_if *rhc, uint32 addr)$/;"	f
rh_show_type	PDP10/kx10_rh.c	/^t_stat rh_show_type (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
rh_write	PDP10/kx10_rh.c	/^int rh_write(struct rh_if *rhc) {$/;"	f
rh_writecw	PDP10/kx10_rh.c	/^void rh_writecw(struct rh_if *rhc, int nxm) {$/;"	f
ring_ipad	sim_tmxr.h	/^    char                *ring_ipad;                     \/* incoming connection address awaiting DTR *\/$/;"	m	struct:tmxr
ring_sock	sim_tmxr.h	/^    SOCKET              ring_sock;                      \/* incoming connection socket awaiting DTR *\/$/;"	m	struct:tmxr
ring_start_time	sim_tmxr.h	/^    uint32              ring_start_time;                \/* time ring signal was raised *\/$/;"	m	struct:tmxr
rmask	sim_video.c	160;"	d	file:
rmask	sim_video.c	165;"	d	file:
rmdir_cmd	scp.c	/^t_stat rmdir_cmd (int32 flg, CONST char *cptr)$/;"	f
rms_attributes	sim_tape.c	/^    char rms_attributes[64];    \/* 32 bytes of RMS attributes, converted to hex *\/$/;"	m	struct:HDR3	file:
rom_loopval	sim_timer.c	/^static volatile int32 rom_loopval = 0;$/;"	v	file:
rows	PDP10/pidp10panel.c	/^u_int8_t rows[5] = { 4,5,6,7,8 };$/;"	v
rp_attach	PDP10/kx10_rp.c	/^t_stat rp_attach (UNIT *uptr, CONST char *cptr)$/;"	f
rp_boot	PDP10/kx10_rp.c	/^rp_boot(int32 unit_num, DEVICE * rptr)$/;"	f
rp_buf	PDP10/kx10_rp.c	/^uint64        rp_buf[NUM_DEVS_RP][RP_NUMWD];$/;"	v
rp_description	PDP10/kx10_rp.c	/^const char *rp_description (DEVICE *dptr)$/;"	f
rp_detach	PDP10/kx10_rp.c	/^t_stat rp_detach (UNIT *uptr)$/;"	f
rp_devs	PDP10/kx10_rp.c	/^DEVICE *rp_devs[] = {$/;"	v
rp_dib	PDP10/kx10_rp.c	/^DIB rp_dib[] = {$/;"	v
rp_drv_tab	PDP10/kx10_rp.c	/^struct drvtyp rp_drv_tab[] = {$/;"	v	typeref:struct:drvtyp
rp_help	PDP10/kx10_rp.c	/^t_stat rp_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
rp_mod	PDP10/kx10_rp.c	/^MTAB                rp_mod[] = {$/;"	v
rp_read	PDP10/kx10_rp.c	/^rp_read(DEVICE *dptr, struct rh_if *rhc, int reg, uint32 *data) {$/;"	f
rp_reset	PDP10/kx10_rp.c	/^rp_reset(DEVICE * rptr)$/;"	f
rp_rh	PDP10/kx10_rp.c	/^struct rh_if   rp_rh[NUM_DEVS_RP] = {$/;"	v	typeref:struct:rh_if
rp_rst	PDP10/kx10_rp.c	/^rp_rst(DEVICE *dptr)$/;"	f
rp_set_type	PDP10/kx10_rp.c	/^rp_set_type(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
rp_svc	PDP10/kx10_rp.c	/^t_stat rp_svc (UNIT *uptr)$/;"	f
rp_unit	PDP10/kx10_rp.c	/^UNIT                rp_unit[] = {$/;"	v
rp_write	PDP10/kx10_rp.c	/^rp_write(DEVICE *dptr, struct rh_if *rhc, int reg, uint32 data) {$/;"	f
rpa_dev	PDP10/kx10_rp.c	/^DEVICE              rpa_dev = {$/;"	v
rpa_reg	PDP10/kx10_rp.c	/^REG                 rpa_reg[] = {$/;"	v
rpb_dev	PDP10/kx10_rp.c	/^DEVICE              rpb_dev = {$/;"	v
rpb_reg	PDP10/kx10_rp.c	/^REG                 rpb_reg[] = {$/;"	v
rpc_dev	PDP10/kx10_rp.c	/^DEVICE              rpc_dev = {$/;"	v
rpc_reg	PDP10/kx10_rp.c	/^REG                 rpc_reg[] = {$/;"	v
rpd_dev	PDP10/kx10_rp.c	/^DEVICE              rpd_dev = {$/;"	v
rpd_reg	PDP10/kx10_rp.c	/^REG                 rpd_reg[] = {$/;"	v
rpos	PDP10/ka10_pmp.c	/^     uint16             rpos;    \/* Start of current record *\/$/;"	m	struct:pmp_t	file:
rs_attach	PDP10/kx10_rs.c	/^t_stat rs_attach (UNIT *uptr, CONST char *cptr)$/;"	f
rs_boot	PDP10/kx10_rs.c	/^rs_boot(int32 unit_num, DEVICE * rptr)$/;"	f
rs_buf	PDP10/kx10_rs.c	/^uint64        rs_buf[NUM_DEVS_RS][RS_NUMWD];$/;"	v
rs_description	PDP10/kx10_rs.c	/^const char *rs_description (DEVICE *dptr)$/;"	f
rs_detach	PDP10/kx10_rs.c	/^t_stat rs_detach (UNIT *uptr)$/;"	f
rs_devs	PDP10/kx10_rs.c	/^DEVICE *rs_devs[] = {$/;"	v
rs_dib	PDP10/kx10_rs.c	/^DIB rs_dib[] = {$/;"	v
rs_drv_tab	PDP10/kx10_rs.c	/^struct drvtyp rs_drv_tab[] = {$/;"	v	typeref:struct:drvtyp
rs_help	PDP10/kx10_rs.c	/^t_stat rs_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
rs_mod	PDP10/kx10_rs.c	/^MTAB                rs_mod[] = {$/;"	v
rs_read	PDP10/kx10_rs.c	/^rs_read(DEVICE *dptr, struct rh_if *rhc, int reg, uint32 *data) {$/;"	f
rs_reset	PDP10/kx10_rs.c	/^rs_reset(DEVICE * rstr)$/;"	f
rs_rh	PDP10/kx10_rs.c	/^struct rh_if   rs_rh[] = {$/;"	v	typeref:struct:rh_if
rs_rst	PDP10/kx10_rs.c	/^rs_rst(DEVICE *dptr)$/;"	f
rs_set_type	PDP10/kx10_rs.c	/^rs_set_type(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
rs_svc	PDP10/kx10_rs.c	/^t_stat rs_svc (UNIT *uptr)$/;"	f
rs_unit	PDP10/kx10_rs.c	/^UNIT                rs_unit[] = {$/;"	v
rs_write	PDP10/kx10_rs.c	/^rs_write(DEVICE *dptr, struct rh_if *rhc, int reg, uint32 data) {$/;"	f
rsa_dev	PDP10/kx10_rs.c	/^DEVICE              rsa_dev = {$/;"	v
rsa_reg	PDP10/kx10_rs.c	/^REG                 rsa_reg[] = {$/;"	v
rsects	sim_disk.c	/^    t_seccnt            *rsects;$/;"	m	struct:disk_context	file:
rstsContext	sim_disk.c	/^} rstsContext;$/;"	t	typeref:struct:_rstsContext	file:
rstsFind01UFD	sim_disk.c	/^static t_stat rstsFind01UFD(rstsContext *context, uint16 *ufd, uint16 *level)$/;"	f	file:
rstsLoadAndScanSATT	sim_disk.c	/^static t_stat rstsLoadAndScanSATT(rstsContext *context, uint16 uaa, uint16 uar, t_offset *result)$/;"	f	file:
rstsReadBlock	sim_disk.c	/^static t_stat rstsReadBlock(rstsContext *context, uint16 cluster, uint16 block, void *buf)$/;"	f	file:
rstsReadBlockette	sim_disk.c	/^static t_stat rstsReadBlockette(rstsContext *context, uint16 link, void *buf)$/;"	f	file:
rstsValidateClusterSize	sim_disk.c	/^static t_stat rstsValidateClusterSize(uint16 size, uint16 minSize)$/;"	f	file:
rt11_get_partition_type	sim_disk.c	/^static int rt11_get_partition_type(RT11_HomeBlock *home, int part)$/;"	f	file:
rt_block	sim_disk.c	/^    uint8          rt_block[512];$/;"	m	union:_RSTS_ROOT	file:
rt_mfd	sim_disk.c	/^    RSTS_MFDLABEL  rt_mfd;$/;"	m	union:_RSTS_ROOT	file:
rt_pack	sim_disk.c	/^    RSTS_PACKLABEL rt_pack;$/;"	m	union:_RSTS_ROOT	file:
rt_uent	sim_disk.c	/^    uint16  rt_uent[7];$/;"	m	struct:_RSTS_RETR	file:
rt_ulnk	sim_disk.c	/^    uint16  rt_ulnk;$/;"	m	struct:_RSTS_RETR	file:
rtc_avail	sim_timer.c	/^const t_bool rtc_avail = FALSE;$/;"	v
rtc_avail	sim_timer.c	/^const t_bool rtc_avail = TRUE;$/;"	v
rtc_srv	PDP10/kx10_cpu.c	/^rtc_srv(UNIT * uptr)$/;"	f
rtc_tick	PDP10/kl10_fe.c	/^uint16         rtc_tick;$/;"	v
rtc_tim	PDP10/kx10_cpu.c	/^int     rtc_tim;                              \/* Time till next 60hz clock *\/$/;"	v
rtc_tps	PDP10/kl10_fe.c	/^static int32   rtc_tps = 60;$/;"	v	file:
rtc_tps	PDP10/ks10_cty.c	/^static int32   rtc_tps = 1;$/;"	v	file:
rtc_tps	PDP10/kx10_cpu.c	/^int32   rtc_tps = 500;$/;"	v
rtc_tps	PDP10/kx10_cpu.c	/^int32   rtc_tps = 60;$/;"	v
rtc_wait	PDP10/kl10_fe.c	/^uint16         rtc_wait = 0;$/;"	v
rtcp	slirp_glue/sim_slirp.c	/^    struct redir_tcp_udp *rtcp;$/;"	m	struct:sim_slirp	typeref:struct:sim_slirp::redir_tcp_udp	file:
rtcs	sim_timer.c	/^RTC rtcs[SIM_NTIMERS+1];$/;"	v
rtime	sim_timer.c	/^    uint32 rtime;                   \/* real time (usecs) *\/$/;"	m	struct:RTC	file:
rules	sim_defs.h	/^    EXPTAB              *rules;                         \/* match rules *\/$/;"	m	struct:EXPECT
run_cmd	scp.c	/^t_stat run_cmd (int32 flag, CONST char *cptr)$/;"	f
run_cmd_did_reset	scp.c	/^static t_bool run_cmd_did_reset = FALSE;$/;"	v	file:
run_cmd_message	scp.c	/^run_cmd_message (const char *unechoed_cmdline, t_stat r)$/;"	f
run_mode	sim_console.c	/^SENSE_BUF run_mode = { 0 };$/;"	v
runfl	sim_console.c	/^int cmdfl,runfl;                                        \/* TTY flags *\/$/;"	v
runlimit_cmd	scp.c	/^t_stat runlimit_cmd (int32 flag, CONST char *cptr)$/;"	f
runlimit_svc	scp.c	/^t_stat runlimit_svc (UNIT *uptr)$/;"	f
runltchars	sim_console.c	/^struct ltchars cmdltchars,runltchars;                   \/* 4.2 BSD editing *\/$/;"	v	typeref:struct:
runt	PDP10/kx10_imp.c	/^    int               runt;                    \/* runts *\/$/;"	m	struct:imp_stats	file:
runtchars	sim_console.c	/^struct tchars cmdtchars,runtchars;                      \/* V7 editing *\/$/;"	v	typeref:struct:
runtty	sim_console.c	/^struct sgttyb cmdtty,runtty;                            \/* V6\/V7 stty data *\/$/;"	v	typeref:struct:
runtty	sim_console.c	/^struct termios cmdtty, runtty;$/;"	v	typeref:struct:
rx	PDP10/ks10_kmc.c	/^    WB     rx;$/;"	m	struct:dupstate	file:
rx_buffer	PDP10/ka10_ch10.c	/^static uint8 rx_buffer[512+100];$/;"	v	file:
rx_buffer	PDP10/ks10_ch11.c	/^static uint8 rx_buffer[512+100];$/;"	v	file:
rx_conn	PDP10/kx10_dc.c	/^uint32   rx_conn;                                 \/* Connection flags *\/$/;"	v
rx_count	PDP10/ka10_ch10.c	/^static int rx_count;$/;"	v	file:
rx_count	PDP10/ks10_ch11.c	/^static int rx_count;$/;"	v	file:
rx_rdy	PDP10/kx10_dc.c	/^uint32   tx_enable, rx_rdy;                       \/* Flags *\/$/;"	v
rx_units	PDP10/ks10_kmc.c	/^static UNIT rx_units[MAX_ACTIVE][KMC_UNITS];    \/* Secondary unit, used for RX.  rxup references *\/$/;"	v	file:
rxavail	PDP10/ks10_kmc.c	/^    int32  rxavail;$/;"	m	struct:dupstate	file:
rxb	sim_tmxr.h	/^    char                *rxb;                           \/* rcv buffer *\/$/;"	m	struct:tmln
rxbpi	sim_tmxr.h	/^    int32               rxbpi;                          \/* rcv buf insert *\/$/;"	m	struct:tmln
rxbpr	sim_tmxr.h	/^    int32               rxbpr;                          \/* rcv buf remove *\/$/;"	m	struct:tmln
rxbps	sim_tmxr.h	/^    uint32              rxbps;                          \/* rcv bps speed (0 - unlimited) *\/$/;"	m	struct:tmln
rxbsz	sim_tmxr.h	/^    int32               rxbsz;                          \/* rcv buffer size *\/$/;"	m	struct:tmln
rxbytes	sim_tmxr.c	/^    uint32 rxbytes;$/;"	m	struct:status_msg_t	file:
rxcnt	sim_tmxr.h	/^    int32               rxcnt;                          \/* rcv count *\/$/;"	m	struct:tmln
rxdeltausecs	sim_tmxr.h	/^    uint32              rxdeltausecs;                   \/* rcv inter character min time (usecs) *\/$/;"	m	struct:tmln
rxdlen	PDP10/ks10_kmc.c	/^    uint16 rxdlen;$/;"	m	struct:dupstate	file:
rxframes	sim_tmxr.c	/^    uint32 rxframes;$/;"	m	struct:status_msg_t	file:
rxmlen	PDP10/ks10_kmc.c	/^    uint16 rxmlen;$/;"	m	struct:dupstate	file:
rxmsg	PDP10/ks10_kmc.c	/^    uint8  *rxmsg;$/;"	m	struct:dupstate	file:
rxnexttime	sim_tmxr.h	/^    double              rxnexttime;                     \/* min time for next receive character *\/$/;"	m	struct:tmln
rxpb	sim_tmxr.h	/^    uint8               *rxpb;                          \/* rcv packet buffer *\/$/;"	m	struct:tmln
rxpboffset	sim_tmxr.h	/^    uint32              rxpboffset;                     \/* rcv packet buffer offset *\/$/;"	m	struct:tmln
rxpbsize	sim_tmxr.h	/^    uint32              rxpbsize;                       \/* rcv packet buffer size *\/$/;"	m	struct:tmln
rxpcnt	sim_tmxr.h	/^    int32               rxpcnt;                         \/* rcv packet count *\/$/;"	m	struct:tmln
rxqh	PDP10/ks10_kmc.c	/^    QH     rxqh;                                \/* Receive queue from host *\/$/;"	m	struct:dupstate	file:
rxstate	PDP10/ks10_kmc.c	/^    uint32 rxstate;$/;"	m	struct:dupstate	file:
rxused	PDP10/ks10_kmc.c	/^    uint16 rxused;$/;"	m	struct:dupstate	file:
s	PDP10/kx10_cpu.c	/^    int s;$/;"	m	struct:_byte	file:
s	slirp/socket.h	/^  int s;                           \/* The actual socket *\/$/;"	m	struct:socket
s_freeaddrinfo	sim_sock.c	/^static void    WSAAPI s_freeaddrinfo (struct addrinfo *ai)$/;"	f	file:
s_getaddrinfo	sim_sock.c	/^static int     WSAAPI s_getaddrinfo (const char *hostname,$/;"	f	file:
s_getnameinfo	sim_sock.c	/^static int     WSAAPI s_getnameinfo (const struct sockaddr *sa, socklen_t salen,$/;"	f	file:
s_xoff	display/vt11.c	/^static unsigned char    s_xoff = 0;     \/* sign bit for xoff (needed for -0) *\/$/;"	v	file:
s_yoff	display/vt11.c	/^static unsigned char    s_yoff = 0;     \/* sign bit for yoff (needed for -0) *\/$/;"	v	file:
s_zoff	display/vt11.c	/^static unsigned char    s_zoff = 0;     \/* sign bit for zoff (needed for -0) *\/$/;"	v	file:
sample_depth	sim_frontpanel.c	/^    unsigned int            sample_depth;$/;"	m	struct:PANEL	file:
sample_dither_pct	sim_frontpanel.c	/^    unsigned int            sample_dither_pct;$/;"	m	struct:PANEL	file:
sample_frequency	sim_frontpanel.c	/^    unsigned int            sample_frequency;$/;"	m	struct:PANEL	file:
save_cmd	scp.c	/^t_stat save_cmd (int32 flag, CONST char *cptr)$/;"	f
save_ver30	scp.c	/^const char save_ver30[] = "V3.0";$/;"	v
save_ver32	scp.c	/^const char save_ver32[] = "V3.2";$/;"	v
save_ver35	scp.c	/^const char save_ver35[] = "V3.5";$/;"	v
save_ver40	scp.c	/^const char save_ver40[] = "V4.0";$/;"	v
save_vercur	scp.c	/^const char save_vercur[] = "V4.0";$/;"	v
save_x0	display/vt11.c	/^static int32 save_x0, save_y0, save_z0, save_x1, save_y1, save_z1;$/;"	v	file:
save_x1	display/vt11.c	/^static int32 save_x0, save_y0, save_z0, save_x1, save_y1, save_z1;$/;"	v	file:
save_y0	display/vt11.c	/^static int32 save_x0, save_y0, save_z0, save_x1, save_y1, save_z1;$/;"	v	file:
save_y1	display/vt11.c	/^static int32 save_x0, save_y0, save_z0, save_x1, save_y1, save_z1;$/;"	v	file:
save_z0	display/vt11.c	/^static int32 save_x0, save_y0, save_z0, save_x1, save_y1, save_z1;$/;"	v	file:
save_z1	display/vt11.c	/^static int32 save_x0, save_y0, save_z0, save_x1, save_y1, save_z1;$/;"	v	file:
saved_error_mode	sim_console.c	/^static DWORD saved_error_mode;$/;"	v	file:
saved_input_mode	sim_console.c	/^static DWORD saved_input_mode;$/;"	v	file:
saved_output_mode	sim_console.c	/^static DWORD saved_output_mode;$/;"	v	file:
sb_cc	slirp/sbuf.h	/^        u_int   sb_cc;          \/* actual chars in buffer *\/$/;"	m	struct:sbuf
sb_data	slirp/sbuf.h	/^        char    *sb_data;       \/* Actual data *\/$/;"	m	struct:sbuf
sb_datalen	slirp/sbuf.h	/^        u_int   sb_datalen;     \/* Length of data  *\/$/;"	m	struct:sbuf
sb_rptr	slirp/sbuf.h	/^        char    *sb_rptr;       \/* read pointer. points to where the next$/;"	m	struct:sbuf
sb_wptr	slirp/sbuf.h	/^        char    *sb_wptr;       \/* write pointer. points to where the next$/;"	m	struct:sbuf
sbappend	slirp/sbuf.c	/^sbappend(struct socket *so, struct mbuf *m)$/;"	f
sbappendsb	slirp/sbuf.c	/^sbappendsb(struct sbuf *sb, struct mbuf *m)$/;"	f	file:
sbar	PDP10/kx10_defs.h	/^      uint32         sbar;       \/* RH20 Starting address *\/$/;"	m	struct:rh_if
sbcopy	slirp/sbuf.c	/^sbcopy(struct sbuf *sb, int off, int len, char *to)$/;"	f
sbdrop	slirp/sbuf.c	/^sbdrop(struct sbuf *sb, int num)$/;"	f
sbflush	slirp/sbuf.h	11;"	d
sbfree	slirp/sbuf.c	/^sbfree(struct sbuf *sb)$/;"	f
sbreserve	slirp/sbuf.c	/^sbreserve(struct sbuf *sb, int size)$/;"	f
sbspace	slirp/sbuf.h	12;"	d
sbuf	slirp/sbuf.h	/^struct sbuf {$/;"	s
sbuffer	PDP10/kx10_imp.c	/^    uint8             sbuffer[ETH_FRAME_SIZE]; \/* Temp send buffer *\/$/;"	m	struct:imp_device	file:
scale	PDP10/ka10_iii.c	/^float scale[] = { 1.0F,$/;"	v
scale	display/display.c	/^static int scale;$/;"	v	file:
scale	display/type340.c	/^    unsigned char scale;        \/* multiplier: 1,2,4,8 *\/$/;"	m	struct:type340	file:
scaled_pen_radius_squared	display/display.c	/^static long scaled_pen_radius_squared;$/;"	v	file:
scb_b_bitmapblks	sim_disk.c	/^    uint8  scb_b_bitmapblks;$/;"	m	struct:_ODS1_StorageControlBlock	file:
scb_b_reserved	sim_disk.c	/^    uint8  scb_b_reserved[446];$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_b_struclev	sim_disk.c	/^    uint8  scb_b_struclev;   \/* 2 *\/$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_b_strucver	sim_disk.c	/^    uint8  scb_b_strucver;   \/* 1 *\/$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_b_unused	sim_disk.c	/^    uint8  scb_b_unused[3];$/;"	m	struct:_ODS1_StorageControlBlock	file:
scb_l_blksize	sim_disk.c	/^    uint32 scb_l_blksize;$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_l_cylinder	sim_disk.c	/^    uint32 scb_l_cylinder;$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_l_sectors	sim_disk.c	/^    uint32 scb_l_sectors;$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_l_status	sim_disk.c	/^    uint32 scb_l_status;$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_l_status2	sim_disk.c	/^    uint32 scb_l_status2;$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_l_tracks	sim_disk.c	/^    uint32 scb_l_tracks;$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_l_volsize	sim_disk.c	/^    uint32 scb_l_volsize;$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_q_genernum	sim_disk.c	/^    uint32 scb_q_genernum[2];$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_q_mounttime	sim_disk.c	/^    uint32 scb_q_mounttime[2];$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_r_blocks	sim_disk.c	/^        } scb_r_blocks[1];$/;"	m	struct:_ODS1_StorageControlBlock	typeref:struct:_ODS1_StorageControlBlock::_bitmapblk	file:
scb_t_volockname	sim_disk.c	/^    uint8  scb_t_volockname[12];$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_w_backrev	sim_disk.c	/^    uint16 scb_w_backrev;$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_w_checksum	sim_disk.c	/^    uint16 scb_w_checksum;$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_w_cluster	sim_disk.c	/^    uint16 scb_w_cluster;$/;"	m	struct:_ODS2_StorageControlBlock	file:
scb_w_freeblks	sim_disk.c	/^        uint16 scb_w_freeblks;$/;"	m	struct:_ODS1_StorageControlBlock::_bitmapblk	file:
scb_w_freeptr	sim_disk.c	/^        uint16 scb_w_freeptr;$/;"	m	struct:_ODS1_StorageControlBlock::_bitmapblk	file:
scb_w_writecnt	sim_disk.c	/^    uint16 scb_w_writecnt;$/;"	m	struct:_ODS2_StorageControlBlock	file:
scolor	display/vt11.c	/^enum scolor { GREEN=0, YELLOW, ORANGE, RED };$/;"	g	file:
scp_attach_unit	scp.c	/^t_stat scp_attach_unit (DEVICE *dptr, UNIT *uptr, const char *cptr)$/;"	f
scp_debug	scp.c	/^static DEBTAB scp_debug[] = {$/;"	v	file:
scp_detach_unit	scp.c	/^t_stat scp_detach_unit (DEVICE *dptr, UNIT *uptr)$/;"	f
scp_error	scp.c	/^const struct scp_error {$/;"	s	file:
scp_errors	scp.c	/^    } scp_errors[1+SCPE_MAX_ERR-SCPE_BASE] =$/;"	v	typeref:struct:scp_error
scp_help	scp.c	/^t_stat scp_help (FILE *st, DEVICE *dptr,$/;"	f
scp_test_units	scp.c	/^static UNIT scp_test_units[4];$/;"	v	file:
scp_vhelp	scp.c	/^t_stat scp_vhelp (FILE *st, DEVICE *dptr,$/;"	f
scr	display/x11.c	/^static int      scr;            \/* its screen *\/$/;"	v	file:
screenshot_cmd	scp.c	/^t_stat screenshot_cmd (int32 flag, CONST char *cptr)$/;"	f
scsi_add_unit	sim_scsi.c	/^void scsi_add_unit (SCSI_BUS *bus, uint32 id, UNIT *uptr)$/;"	f
scsi_arbitrate	sim_scsi.c	/^t_bool scsi_arbitrate (SCSI_BUS *bus, uint32 initiator)$/;"	f
scsi_attach	sim_scsi.c	/^t_stat scsi_attach (UNIT *uptr, CONST char *cptr)$/;"	f
scsi_attach_ex	sim_scsi.c	/^t_stat scsi_attach_ex (UNIT *uptr, CONST char *cptr, const char **drivetypes)$/;"	f
scsi_bus_t	sim_scsi.h	/^struct scsi_bus_t {$/;"	s
scsi_cdrom_command	sim_scsi.c	/^void scsi_cdrom_command (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_check_alloc	sim_scsi.c	/^void scsi_check_alloc (SCSI_BUS *bus, uint32 alloc)$/;"	f
scsi_command	sim_scsi.c	/^uint32 scsi_command (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_data	sim_scsi.c	/^uint32 scsi_data (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_decode_group	sim_scsi.c	/^uint32 scsi_decode_group (uint8 data)$/;"	f
scsi_detach	sim_scsi.c	/^t_stat scsi_detach (UNIT *uptr)$/;"	f
scsi_dev_t	sim_scsi.h	/^struct scsi_dev_t {$/;"	s
scsi_disk_command	sim_scsi.c	/^void scsi_disk_command (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_erase	sim_scsi.c	/^void scsi_erase (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_help	sim_scsi.c	/^t_stat scsi_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
scsi_init	sim_scsi.c	/^t_stat scsi_init (SCSI_BUS *bus, uint32 maxfr)$/;"	f
scsi_inquiry	sim_scsi.c	/^void scsi_inquiry (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_load_unload	sim_scsi.c	/^void scsi_load_unload (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_message	sim_scsi.c	/^uint32 scsi_message (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_mode_sel10	sim_scsi.c	/^void scsi_mode_sel10 (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_mode_sel6	sim_scsi.c	/^void scsi_mode_sel6 (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_mode_sense	sim_scsi.c	/^void scsi_mode_sense (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_mode_sense10	sim_scsi.c	/^void scsi_mode_sense10 (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_mode_sense6	sim_scsi.c	/^void scsi_mode_sense6 (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_phases	sim_scsi.c	/^static const char *scsi_phases[] = {$/;"	v	file:
scsi_prev_allow	sim_scsi.c	/^void scsi_prev_allow (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_read	sim_scsi.c	/^uint32 scsi_read (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_read10_disk	sim_scsi.c	/^void scsi_read10_disk (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_read6_disk	sim_scsi.c	/^void scsi_read6_disk (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_read6_tape	sim_scsi.c	/^void scsi_read6_tape (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_read_blklim	sim_scsi.c	/^void scsi_read_blklim (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_read_capacity	sim_scsi.c	/^void scsi_read_capacity (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_read_long	sim_scsi.c	/^void scsi_read_long (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_release	sim_scsi.c	/^void scsi_release (SCSI_BUS *bus)$/;"	f
scsi_release_atn	sim_scsi.c	/^void scsi_release_atn (SCSI_BUS *bus)$/;"	f
scsi_release_req	sim_scsi.c	/^void scsi_release_req (SCSI_BUS *bus)$/;"	f
scsi_release_unit	sim_scsi.c	/^void scsi_release_unit (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_req_sense	sim_scsi.c	/^void scsi_req_sense (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_reserve_unit	sim_scsi.c	/^void scsi_reserve_unit (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_reset	sim_scsi.c	/^void scsi_reset (SCSI_BUS *bus)$/;"	f
scsi_reset_unit	sim_scsi.c	/^void scsi_reset_unit (UNIT *uptr)$/;"	f
scsi_rewind	sim_scsi.c	/^void scsi_rewind (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_select	sim_scsi.c	/^t_bool scsi_select (SCSI_BUS *bus, uint32 target)$/;"	f
scsi_send_diag	sim_scsi.c	/^void scsi_send_diag (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_set_atn	sim_scsi.c	/^void scsi_set_atn (SCSI_BUS *bus)$/;"	f
scsi_set_fmt	sim_scsi.c	/^t_stat scsi_set_fmt (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
scsi_set_phase	sim_scsi.c	/^void scsi_set_phase (SCSI_BUS *bus, uint32 phase)$/;"	f
scsi_set_req	sim_scsi.c	/^void scsi_set_req (SCSI_BUS *bus)$/;"	f
scsi_set_unit	sim_scsi.c	/^void scsi_set_unit (SCSI_BUS *bus, UNIT *uptr, SCSI_DEV *dev)$/;"	f
scsi_set_wlk	sim_scsi.c	/^t_stat scsi_set_wlk (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
scsi_show_fmt	sim_scsi.c	/^t_stat scsi_show_fmt (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
scsi_show_wlk	sim_scsi.c	/^t_stat scsi_show_wlk (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
scsi_space	sim_scsi.c	/^void scsi_space (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_start_stop	sim_scsi.c	/^void scsi_start_stop (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_state	sim_scsi.c	/^uint32 scsi_state (SCSI_BUS *bus, uint32 id)$/;"	f
scsi_status	sim_scsi.c	/^void scsi_status (SCSI_BUS *bus, uint32 sts, uint32 key, uint32 asc)$/;"	f
scsi_status_deferred	sim_scsi.c	/^void scsi_status_deferred (SCSI_BUS *bus, uint32 sts, uint32 key, uint32 asc)$/;"	f
scsi_tape_command	sim_scsi.c	/^void scsi_tape_command (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_tape_status	sim_scsi.c	/^void scsi_tape_status (SCSI_BUS *bus, t_stat st)$/;"	f
scsi_test_ready	sim_scsi.c	/^void scsi_test_ready (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_wrfmark	sim_scsi.c	/^void scsi_wrfmark (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_write	sim_scsi.c	/^uint32 scsi_write (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_write10_disk	sim_scsi.c	/^void scsi_write10_disk (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_write6_disk	sim_scsi.c	/^void scsi_write6_disk (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsi_write6_tape	sim_scsi.c	/^void scsi_write6_tape (SCSI_BUS *bus, uint8 *data, uint32 len)$/;"	f
scsiver	sim_scsi.h	/^    uint32 scsiver;                                     \/* SCSI version *\/$/;"	m	struct:scsi_dev_t
sdev	PDP10/kl10_dn.c	/^    uint16      sdev;      \/* Secondary device code *\/$/;"	m	struct:_dn_queue	file:
sdev	PDP10/kl10_fe.c	/^    uint16      sdev;      \/* Secondary device code *\/$/;"	m	struct:_dte_queue	file:
search	display/vt11.c	/^static unsigned char search = 0;        \/* 00=> no search, no interrupt$/;"	v	file:
secs	PDP10/kx10_imp.c	/^    uint16            secs;$/;"	m	struct:dhcp	file:
sect	PDP10/kx10_cpu.c	/^int     sect;                                 \/* Actual resolved section *\/$/;"	v
sect	PDP10/kx10_dp.c	/^    int32       sect;                                   \/* sectors *\/$/;"	m	struct:drvtyp	file:
sect	PDP10/kx10_rp.c	/^    int32       sect;                                   \/* sectors *\/$/;"	m	struct:drvtyp	file:
sect	PDP10/kx10_rs.c	/^    int32       sect;                                   \/* sectors *\/$/;"	m	struct:drvtyp	file:
sectRead	sim_imd.c	/^t_stat sectRead(DISK_INFO *myDisk,$/;"	f
sectSeek	sim_imd.c	/^t_stat sectSeek(DISK_INFO *myDisk,$/;"	f
sectWrite	sim_imd.c	/^t_stat sectWrite(DISK_INFO *myDisk,$/;"	f
sectorOffsetMap	sim_imd.h	/^    uint32 sectorOffsetMap[MAX_SPT];$/;"	m	struct:__anon25
sector_size	sim_disk.c	/^    uint32              sector_size;        \/* Disk Sector Size (of the pseudo disk) *\/$/;"	m	struct:disk_context	file:
sects	sim_disk.c	/^    t_seccnt            sects;$/;"	m	struct:disk_context	file:
sects	sim_disk.c	/^    t_seccnt    sects;$/;"	m	struct:_rstsContext	file:
sectsize	sim_imd.h	/^    uint32 sectsize;$/;"	m	struct:__anon25
sectsize	sim_imd.h	/^    uint8 sectsize;$/;"	m	struct:__anon24
seg	PDP10/kx10_rc.c	/^    int32       seg;                                    \/* segments *\/$/;"	m	struct:drvtyp	file:
seg_next	slirp/tcp_var.h	/^        struct tcpiphdr *seg_next;      \/* sequencing queue *\/$/;"	m	struct:tcpcb	typeref:struct:tcpcb::tcpiphdr
seg_prev	slirp/tcp_var.h	/^        struct tcpiphdr *seg_prev;$/;"	m	struct:tcpcb	typeref:struct:tcpcb::tcpiphdr
sel0	PDP10/ks10_kmc.c	415;"	d	file:
sel2	PDP10/ks10_kmc.c	417;"	d	file:
sel4	PDP10/ks10_kmc.c	419;"	d	file:
sel6	PDP10/ks10_kmc.c	421;"	d	file:
self	slirp/dnssearch.c	/^    struct compact_domain *self;$/;"	m	struct:compact_domain	typeref:struct:compact_domain::compact_domain	file:
self_lock	sim_ether.h	/^  pthread_mutex_t     self_lock;$/;"	m	struct:eth_device
sem	sim_video.c	/^    SDL_sem *sem;$/;"	m	struct:__anon33	file:
sem	sim_video.c	/^    SDL_sem *sem;$/;"	m	struct:__anon34	file:
sen_cnt	PDP10/ka10_pmp.c	/^    uint8               sen_cnt;      \/* Number of sense bytes *\/$/;"	m	struct:disk_t	file:
send	sim_tmxr.h	/^    SEND                send;                           \/* Send input state *\/$/;"	m	struct:tmln
send_cmd	scp.c	/^t_stat send_cmd (int32 flag, CONST char *cptr)$/;"	f
sendq	PDP10/kx10_imp.c	/^    struct imp_packet *sendq;                  \/* Send queue *\/$/;"	m	struct:imp_device	typeref:struct:imp_device::imp_packet	file:
sense_code	sim_scsi.h	/^    uint32 sense_code;$/;"	m	struct:scsi_bus_t
sense_count	sim_console.c	/^    unsigned short sense_count;$/;"	m	struct:__anon9	file:
sense_count	sim_serial.c	/^    unsigned short sense_count;$/;"	m	struct:__anon27	file:
sense_first_char	sim_console.c	/^    unsigned char sense_first_char;$/;"	m	struct:__anon9	file:
sense_first_char	sim_serial.c	/^    unsigned char sense_first_char;$/;"	m	struct:__anon27	file:
sense_info	sim_scsi.h	/^    uint32 sense_info;$/;"	m	struct:scsi_bus_t
sense_key	sim_scsi.h	/^    uint32 sense_key;$/;"	m	struct:scsi_bus_t
sense_qual	sim_scsi.h	/^    uint32 sense_qual;$/;"	m	struct:scsi_bus_t
sense_reserved	sim_console.c	/^    unsigned char sense_reserved;$/;"	m	struct:__anon9	file:
sense_reserved	sim_serial.c	/^    unsigned char sense_reserved;$/;"	m	struct:__anon27	file:
sent	PDP10/kx10_imp.c	/^void sent(int status) {$/;"	f
sent_flag	PDP10/kx10_imp.c	/^static int sent_flag = 0;$/;"	v	file:
seq	PDP10/kl10_nia.c	/^    uint32          seq;                \/* Sequence number *\/$/;"	m	struct:tcp	file:
seq	PDP10/kx10_imp.c	/^    uint32          seq;                \/* Sequence number *\/$/;"	m	struct:tcp	file:
sequence_number	sim_ether.c	/^  uint32 sequence_number;$/;"	m	struct:TCPHeader	file:
ser_connect_pending	sim_tmxr.h	/^    t_bool              ser_connect_pending;            \/* serial connection notice pending *\/$/;"	m	struct:tmln
serconfig	sim_tmxr.h	/^    char                *serconfig;                     \/* line config *\/$/;"	m	struct:tmln
serial_config	sim_serial.c	/^typedef struct serial_config {                          \/* serial port configuration *\/$/;"	s	file:
serial_list	sim_serial.c	/^typedef struct serial_list {$/;"	s	file:
serial_open_device_count	sim_serial.c	/^static int serial_open_device_count = 0;$/;"	v	file:
serial_open_devices	sim_serial.c	/^    } *serial_open_devices = NULL;$/;"	v	typeref:struct:open_serial_device	file:
serport	sim_tmxr.h	/^    SERHANDLE           serport;                        \/* serial port handle *\/$/;"	m	struct:tmln
sessions	sim_tmxr.h	/^    int32               sessions;                       \/* count of tcp connections received *\/$/;"	m	struct:tmln
sessions	sim_tmxr.h	/^    int32               sessions;                       \/* count of tcp connections received *\/$/;"	m	struct:tmxr
set_cmd	scp.c	/^t_stat set_cmd (int32 flag, CONST char *cptr)$/;"	f
set_con_serial_tab	sim_console.c	/^static CTAB set_con_serial_tab[] = {$/;"	v	file:
set_con_tab	sim_console.c	/^static CTAB set_con_tab[] = {$/;"	v	file:
set_con_telnet_tab	sim_console.c	/^static CTAB set_con_telnet_tab[] = {$/;"	v	file:
set_default_cmd	scp.c	/^t_stat set_default_cmd (int32 flg, CONST char *cptr)$/;"	f
set_default_env_parameter	scp.c	/^static void set_default_env_parameter (const char *dev_name, const char *param_name, uint32 value)$/;"	f	file:
set_dev_debug	scp.c	/^t_stat set_dev_debug (DEVICE *dptr, UNIT *uptr, int32 flags, CONST char *cptr)$/;"	f
set_dev_enbdis	scp.c	/^t_stat set_dev_enbdis (DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
set_dev_radix	scp.c	/^t_stat set_dev_radix (DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
set_dev_tab	scp.c	/^static C1TAB set_dev_tab[] = {$/;"	v	file:
set_glob_tab	scp.c	/^static CTAB set_glob_tab[] = {$/;"	v	file:
set_interrupt	PDP10/kx10_cpu.c	/^void set_interrupt(int dev, int lvl) {$/;"	f
set_interrupt_mpx	PDP10/kx10_cpu.c	/^void set_interrupt_mpx(int dev, int lvl, int mpx) {$/;"	f
set_interrupt_mpx	PDP10/kx10_defs.h	453;"	d
set_message	scp.c	/^t_stat set_message (int32 flag, CONST char *cptr)$/;"	f
set_on	scp.c	/^t_stat set_on (int32 flag, CONST char *cptr)$/;"	f
set_pi_hold	PDP10/kx10_cpu.c	/^void set_pi_hold() {$/;"	f
set_prompt	scp.c	/^t_stat set_prompt (int32 flag, CONST char *cptr)$/;"	f
set_quantum	PDP10/kx10_cpu.c	/^set_quantum()$/;"	f
set_quiet	scp.c	/^t_stat set_quiet (int32 flag, CONST char *cptr)$/;"	f
set_reg	PDP10/kx10_cpu.c	/^void   set_reg(int reg, uint64 value) {$/;"	f
set_reg	PDP10/kx10_cpu.c	2242;"	d	file:
set_reg	PDP10/kx10_cpu.c	2778;"	d	file:
set_reg	PDP10/kx10_cpu.c	3281;"	d	file:
set_reg	PDP10/kx10_cpu.c	4211;"	d	file:
set_rem_con_tab	sim_console.c	/^static CTAB set_rem_con_tab[] = {$/;"	v	file:
set_runlimit	scp.c	/^t_stat set_runlimit (int32 flag, CONST char *cptr)$/;"	f
set_timer_tab	sim_timer.c	/^static CTAB set_timer_tab[] = {$/;"	v	file:
set_unit_append	scp.c	/^t_stat set_unit_append (DEVICE *dptr, UNIT *uptr, int32 flags, CONST char *cptr)$/;"	f
set_unit_enbdis	scp.c	/^t_stat set_unit_enbdis (DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
set_unit_tab	scp.c	/^static C1TAB set_unit_tab[] = {$/;"	v	file:
set_verify	scp.c	/^t_stat set_verify (int32 flag, CONST char *cptr)$/;"	f
set_writelock	scp.c	/^t_stat set_writelock (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
setenv	scp.c	/^int setenv(const char *envname, const char *envval, int overwrite)$/;"	f	file:
setjmp	slirp_glue/qemu/sysemu/os-win32.h	71;"	d
setjmp	slirp_glue/qemu/sysemu/os-win32.h	72;"	d
setup	PDP10/kx10_imp.c	/^    int               setup;                   \/* setup packets *\/$/;"	m	struct:imp_stats	file:
shift	display/type340.c	/^    unsigned char shift;        \/* 1 bit *\/$/;"	m	struct:type340	file:
shift_args	scp.c	/^t_stat shift_args (char *do_arg[], size_t arg_count)$/;"	f
shift_cmd	scp.c	/^t_stat shift_cmd (int32 flag, CONST char *fcptr)$/;"	f
shift_out	display/vt11.c	480;"	d	file:
shm_base	sim_fio.c	/^    void *shm_base;$/;"	m	struct:SHMEM	file:
shm_fd	sim_fio.c	/^    int shm_fd;$/;"	m	struct:SHMEM	file:
shm_name	sim_fio.c	/^    char *shm_name;$/;"	m	struct:SHMEM	file:
shm_size	sim_fio.c	/^    size_t shm_size;$/;"	m	struct:SHMEM	file:
short_wait	PDP10/pidp10panel.c	/^void short_wait(void) \/\/ creates pause required in between clocked GPIO settings changes$/;"	f
show_all_mods	scp.c	/^t_stat show_all_mods (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, int32 *toks)$/;"	f
show_break	scp.c	/^t_stat show_break (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
show_cmd	scp.c	/^t_stat show_cmd (int32 flag, CONST char *cptr)$/;"	f
show_cmd_fi	scp.c	/^t_stat show_cmd_fi (FILE *ofile, int32 flag, CONST char *cptr)$/;"	f
show_con_tab	sim_console.c	/^static SHTAB show_con_tab[] = {$/;"	v	file:
show_config	scp.c	/^t_stat show_config (FILE *st, DEVICE *dnotused, UNIT *unotused, int32 flag, CONST char *cptr)$/;"	f
show_default	scp.c	/^t_stat show_default (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
show_dev_debug	scp.c	/^t_stat show_dev_debug (FILE *st, DEVICE *dptr, UNIT *uptr, int32 uflag, CONST char *cptr)$/;"	f
show_dev_logicals	scp.c	/^t_stat show_dev_logicals (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
show_dev_modifiers	scp.c	/^t_stat show_dev_modifiers (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
show_dev_radix	scp.c	/^t_stat show_dev_radix (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
show_dev_show_commands	scp.c	/^t_stat show_dev_show_commands (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
show_dev_tab	scp.c	/^static SHTAB show_dev_tab[] = {$/;"	v	file:
show_device	scp.c	/^t_stat show_device (FILE *st, DEVICE *dptr, int32 flag)$/;"	f
show_do	scp.c	/^t_stat show_do (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
show_glob_tab	scp.c	/^static SHTAB show_glob_tab[] = {$/;"	v	file:
show_log_names	scp.c	/^t_stat show_log_names (FILE *st, DEVICE *dnotused, UNIT *unotused, int32 flag, CONST char *cptr)$/;"	f
show_mod_names	scp.c	/^t_stat show_mod_names (FILE *st, DEVICE *dnotused, UNIT *unotused, int32 flag, CONST char *cptr)$/;"	f
show_on	scp.c	/^t_stat show_on (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
show_one_mod	scp.c	/^t_stat show_one_mod (FILE *st, DEVICE *dptr, UNIT *uptr, MTAB *mptr,$/;"	f
show_queue	scp.c	/^t_stat show_queue (FILE *st, DEVICE *dnotused, UNIT *unotused, int32 flag, CONST char *cptr)$/;"	f
show_runlimit	scp.c	/^t_stat show_runlimit (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
show_show_commands	scp.c	/^t_stat show_show_commands (FILE *st, DEVICE *dnotused, UNIT *unotused, int32 flag, CONST char *cptr)$/;"	f
show_time	scp.c	/^t_stat show_time (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
show_unit	scp.c	/^t_stat show_unit (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag)$/;"	f
show_unit_tab	scp.c	/^static SHTAB show_unit_tab[] = {$/;"	v	file:
show_version	scp.c	/^t_stat show_version (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
show_writelock	scp.c	/^t_stat show_writelock (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
shwaddr	PDP10/kl10_nia.c	/^    ETH_MAC             shwaddr;$/;"	m	struct:arp_hdr	file:
shwaddr	PDP10/kx10_imp.c	/^    ETH_MAC             shwaddr;$/;"	m	struct:arp_hdr	file:
siaddr	PDP10/kx10_imp.c	/^    in_addr_T         siaddr;                  \/* Server IP address *\/$/;"	m	struct:dhcp	file:
sigint_message_issued	sim_console.c	/^static t_bool sigint_message_issued = FALSE;$/;"	v	file:
sigjmp_buf	slirp_glue/qemu/sysemu/os-win32.h	79;"	d
siglongjmp	slirp_glue/qemu/sysemu/os-win32.h	81;"	d
sigsetjmp	slirp_glue/qemu/sysemu/os-win32.h	80;"	d
sigterm_received	scp.c	/^volatile t_bool sigterm_received = FALSE;$/;"	v
sim_PC	PDP10/kx10_sys.c	/^REG *sim_PC = &cpu_reg[0];$/;"	v
sim_accept_conn	sim_sock.h	129;"	d
sim_accept_conn_ex	sim_sock.c	/^SOCKET sim_accept_conn_ex (SOCKET master, char **connectaddr, int opt_flags)$/;"	f
sim_activate	scp.c	/^t_stat sim_activate (UNIT *uptr, int32 event_time)$/;"	f
sim_activate	sim_tmxr.h	355;"	d
sim_activate_abs	scp.c	/^t_stat sim_activate_abs (UNIT *uptr, int32 event_time)$/;"	f
sim_activate_abs	sim_tmxr.h	356;"	d
sim_activate_after	scp.c	/^t_stat sim_activate_after (UNIT *uptr, uint32 usec_delay)$/;"	f
sim_activate_after	sim_tmxr.h	357;"	d
sim_activate_after_abs	scp.c	/^t_stat sim_activate_after_abs (UNIT *uptr, uint32 usec_delay)$/;"	f
sim_activate_after_abs	sim_tmxr.h	358;"	d
sim_activate_after_abs_d	scp.c	/^t_stat sim_activate_after_abs_d (UNIT *uptr, double usec_delay)$/;"	f
sim_activate_after_d	scp.c	/^t_stat sim_activate_after_d (UNIT *uptr, double usec_delay)$/;"	f
sim_activate_notbefore	scp.c	/^t_stat sim_activate_notbefore (UNIT *uptr, int32 rtime)$/;"	f
sim_activate_time	scp.c	/^int32 sim_activate_time (UNIT *uptr)$/;"	f
sim_activate_time_usecs	scp.c	/^double sim_activate_time_usecs (UNIT *uptr)$/;"	f
sim_add_debug_flags	scp.c	/^t_stat sim_add_debug_flags (DEVICE *dptr, DEBTAB *debflags)$/;"	f
sim_addr_acl_check	sim_sock.c	/^int sim_addr_acl_check (const char *validate_addr, const char *acl)$/;"	f
sim_aio_activate	scp.c	/^void sim_aio_activate (ACTIVATE_API caller, UNIT *uptr, int32 event_time)$/;"	f
sim_aio_update_queue	scp.c	/^int sim_aio_update_queue (void)$/;"	f
sim_argv	scp.c	/^static char **sim_argv;$/;"	v	file:
sim_ascii_to_six	sim_card.c	/^const char          sim_ascii_to_six[128] = {$/;"	v
sim_asynch_check	scp.c	/^int32 sim_asynch_check;$/;"	v
sim_asynch_enabled	scp.c	/^t_bool sim_asynch_enabled = FALSE;$/;"	v
sim_asynch_enabled	scp.c	/^t_bool sim_asynch_enabled = TRUE;$/;"	v
sim_asynch_inst_latency	scp.c	/^int32 sim_asynch_inst_latency = 20;   \/* assume 5 mip simulator *\/$/;"	v
sim_asynch_latency	scp.c	/^int32 sim_asynch_latency = 4000;      \/* 4 usec interrupt latency *\/$/;"	v
sim_asynch_lock	scp.c	/^pthread_mutex_t sim_asynch_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
sim_asynch_main_threadid	scp.c	/^pthread_t sim_asynch_main_threadid;$/;"	v
sim_asynch_queue	scp.c	/^UNIT * volatile sim_asynch_queue;$/;"	v
sim_asynch_timer	sim_timer.c	/^t_bool sim_asynch_timer = FALSE;$/;"	v
sim_asynch_wake	scp.c	/^pthread_cond_t sim_asynch_wake = PTHREAD_COND_INITIALIZER;$/;"	v
sim_bcd_to_hol	sim_card.c	/^sim_bcd_to_hol(uint8 bcd) {$/;"	f
sim_brk_act	scp.c	/^char *sim_brk_act[MAX_DO_NEST_LVL];$/;"	v
sim_brk_act_buf	scp.c	/^char *sim_brk_act_buf[MAX_DO_NEST_LVL];$/;"	v
sim_brk_char	sim_console.c	/^int32 sim_brk_char = 000;                               \/* break character *\/$/;"	v
sim_brk_clr	scp.c	/^t_stat sim_brk_clr (t_addr loc, int32 sw)$/;"	f
sim_brk_clract	scp.c	/^char *sim_brk_clract (void)$/;"	f
sim_brk_clrall	scp.c	/^t_stat sim_brk_clrall (int32 sw)$/;"	f
sim_brk_clrspc	scp.c	/^void sim_brk_clrspc (uint32 spc, uint32 btyp)$/;"	f
sim_brk_dflt	scp.c	/^uint32 sim_brk_dflt = 0;$/;"	v
sim_brk_ent	scp.c	/^int32 sim_brk_ent = 0;$/;"	v
sim_brk_fnd	scp.c	/^BRKTAB *sim_brk_fnd (t_addr loc)$/;"	f
sim_brk_fnd_ex	scp.c	/^BRKTAB *sim_brk_fnd_ex (t_addr loc, uint32 btyp, t_bool any_typ, uint32 spc)$/;"	f
sim_brk_getact	scp.c	/^CONST char *sim_brk_getact (char *buf, int32 size)$/;"	f
sim_brk_init	scp.c	/^t_stat sim_brk_init (void)$/;"	f
sim_brk_ins	scp.c	/^int32 sim_brk_ins = 0;$/;"	v
sim_brk_lnt	scp.c	/^int32 sim_brk_lnt = 0;$/;"	v
sim_brk_match_addr	scp.c	/^t_addr sim_brk_match_addr;$/;"	v
sim_brk_match_type	scp.c	/^uint32 sim_brk_match_type;$/;"	v
sim_brk_message	scp.c	/^const char *sim_brk_message(void)$/;"	f
sim_brk_new	scp.c	/^BRKTAB *sim_brk_new (t_addr loc, uint32 btyp)$/;"	f
sim_brk_npc	scp.c	/^void sim_brk_npc (uint32 cnt)$/;"	f
sim_brk_replace_act	scp.c	/^char *sim_brk_replace_act (char *new_action)$/;"	f
sim_brk_set	scp.c	/^t_stat sim_brk_set (t_addr loc, int32 sw, int32 ncnt, CONST char *act)$/;"	f
sim_brk_setact	scp.c	/^void sim_brk_setact (const char *action)$/;"	f
sim_brk_show	scp.c	/^t_stat sim_brk_show (FILE *st, t_addr loc, int32 sw)$/;"	f
sim_brk_showall	scp.c	/^t_stat sim_brk_showall (FILE *st, int32 sw)$/;"	f
sim_brk_summ	scp.c	/^uint32 sim_brk_summ = 0;$/;"	v
sim_brk_tab	scp.c	/^BRKTAB **sim_brk_tab = NULL;$/;"	v
sim_brk_test	scp.c	/^uint32 sim_brk_test (t_addr loc, uint32 btyp)$/;"	f
sim_brk_type_desc	scp.c	/^BRKTYPTAB *sim_brk_type_desc = NULL;                \/* type descriptions *\/$/;"	v
sim_brk_types	scp.c	/^uint32 sim_brk_types = 0;$/;"	v
sim_buf_copy_swapped	sim_fio.c	/^void sim_buf_copy_swapped (void *dbuf, const void *sbuf, size_t size, size_t count)$/;"	f
sim_buf_swap_data	sim_fio.c	/^void sim_buf_swap_data (void *bptr, size_t size, size_t count)$/;"	f
sim_byte_swap_data	sim_fio.c	/^void sim_byte_swap_data (void *bptr, size_t size, size_t count)$/;"	f
sim_calb_tmr	sim_timer.c	/^static int32 sim_calb_tmr = -1;                     \/* the system calibrated timer *\/$/;"	v	file:
sim_calb_tmr_last	sim_timer.c	/^static int32 sim_calb_tmr_last = -1;                \/* shadow value when at sim> prompt *\/$/;"	v	file:
sim_can_seek	sim_fio.c	/^t_bool sim_can_seek (FILE *fp)$/;"	f
sim_cancel	scp.c	/^t_stat sim_cancel (UNIT *uptr)$/;"	f
sim_cancel_step	scp.c	/^t_stat sim_cancel_step (void)$/;"	f
sim_card_attach	sim_card.c	/^sim_card_attach(UNIT * uptr, CONST char *cptr)$/;"	f
sim_card_attach_help	sim_card.c	/^t_stat sim_card_attach_help(FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
sim_card_detach	sim_card.c	/^sim_card_detach(UNIT * uptr)$/;"	f
sim_card_eof	sim_card.c	/^sim_card_eof(UNIT *uptr)$/;"	f
sim_card_input_hopper_count	sim_card.c	/^sim_card_input_hopper_count(UNIT *uptr) {$/;"	f
sim_card_output_hopper_count	sim_card.c	/^sim_card_output_hopper_count(UNIT *uptr) {$/;"	f
sim_card_set_fmt	sim_card.c	/^t_stat sim_card_set_fmt (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
sim_card_show_fmt	sim_card.c	/^t_stat sim_card_show_fmt (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
sim_card_test	sim_card.c	/^t_stat sim_card_test (DEVICE *dptr, const char *cptr)$/;"	f
sim_catchup_ticks	sim_timer.c	/^static t_bool sim_catchup_ticks = TRUE;$/;"	v	file:
sim_chdir	sim_fio.c	/^int sim_chdir(const char *path)$/;"	f
sim_check_conn	sim_sock.c	/^int sim_check_conn (SOCKET sock, int rd)$/;"	f
sim_check_console	sim_console.c	/^t_stat sim_check_console (int32 sec)$/;"	f
sim_cleanup_sock	sim_sock.c	/^void sim_cleanup_sock (void)$/;"	f
sim_clock_coschedule	sim_timer.c	/^t_stat sim_clock_coschedule (UNIT *uptr, int32 interval)$/;"	f
sim_clock_coschedule	sim_tmxr.h	359;"	d
sim_clock_coschedule_abs	sim_timer.c	/^t_stat sim_clock_coschedule_abs (UNIT *uptr, int32 interval)$/;"	f
sim_clock_coschedule_abs	sim_tmxr.h	360;"	d
sim_clock_coschedule_tmr	sim_timer.c	/^t_stat sim_clock_coschedule_tmr (UNIT *uptr, int32 tmr, int32 ticks)$/;"	f
sim_clock_coschedule_tmr	sim_tmxr.h	361;"	d
sim_clock_coschedule_tmr_abs	sim_timer.c	/^t_stat sim_clock_coschedule_tmr_abs (UNIT *uptr, int32 tmr, int32 ticks)$/;"	f
sim_clock_coschedule_tmr_abs	sim_tmxr.h	362;"	d
sim_clock_precalibrate_commands	scp.c	/^const char **sim_clock_precalibrate_commands = NULL;$/;"	v
sim_clock_queue	scp.c	/^UNIT *sim_clock_queue = QUEUE_LIST_END;$/;"	v
sim_close_logfile	sim_console.c	/^t_stat sim_close_logfile (FILEREF **pref)$/;"	f
sim_close_os_serial	sim_serial.c	/^static void sim_close_os_serial (SERHANDLE port)$/;"	f	file:
sim_close_serial	sim_serial.c	/^void sim_close_serial (SERHANDLE port)$/;"	f
sim_close_sock	sim_sock.c	/^void sim_close_sock (SOCKET sock)$/;"	f
sim_clr_idle	sim_timer.c	/^t_stat sim_clr_idle (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
sim_cmd_echoed	scp.c	/^static t_bool sim_cmd_echoed = FALSE;                   \/* Command was emitted already prior to message output *\/$/;"	v	file:
sim_cmp_string	scp.c	/^int sim_cmp_string (const char *s1, const char *s2)$/;"	f
sim_con_attach	sim_console.c	/^static t_stat sim_con_attach (UNIT *uptr, CONST char *ptr)$/;"	f	file:
sim_con_console_port	sim_console.c	/^static t_bool sim_con_console_port = TRUE;$/;"	v	file:
sim_con_debug	sim_console.c	/^static DEBTAB sim_con_debug[] = {$/;"	v	file:
sim_con_detach	sim_console.c	/^static t_stat sim_con_detach (UNIT *uptr)$/;"	f	file:
sim_con_expect	sim_console.c	/^EXPECT sim_con_expect = {&sim_con_telnet, DBG_EXP};$/;"	v
sim_con_ldsc	sim_console.c	/^TMLN sim_con_ldsc = { 0 };                                          \/* console line descr *\/$/;"	v
sim_con_mod	sim_console.c	/^static MTAB sim_con_mod[] = {$/;"	v	file:
sim_con_poll_svc	sim_console.c	/^static t_stat sim_con_poll_svc (UNIT *uptr)$/;"	f	file:
sim_con_pos	sim_console.c	/^static uint32 sim_con_pos;                              \/* console character output count *\/$/;"	v	file:
sim_con_reg	sim_console.c	/^static REG sim_con_reg[] = {$/;"	v	file:
sim_con_reset	sim_console.c	/^static t_stat sim_con_reset (DEVICE *dptr)$/;"	f	file:
sim_con_send	sim_console.c	/^SEND sim_con_send = {0, &sim_con_telnet, DBG_SND};$/;"	v
sim_con_stable_registers	sim_console.c	/^static t_bool sim_con_stable_registers = FALSE;$/;"	v	file:
sim_con_telnet	sim_console.c	/^DEVICE sim_con_telnet = {$/;"	v
sim_con_telnet_description	sim_console.c	/^static const char *sim_con_telnet_description (DEVICE *dptr)$/;"	f	file:
sim_con_tmxr	sim_console.c	/^TMXR sim_con_tmxr = { 1, 0, 0, &sim_con_ldsc, NULL, &sim_con_telnet };\/* console line mux *\/$/;"	v
sim_con_unit	sim_console.c	201;"	d	file:
sim_con_units	sim_console.c	/^UNIT sim_con_units[2] = {{ UDATA (&sim_con_poll_svc, UNIT_ATTABLE, 0)}}; \/* console connection unit *\/$/;"	v
sim_config_os_serial	sim_serial.c	/^static t_stat sim_config_os_serial (SERHANDLE port, SERCONFIG config)$/;"	f	file:
sim_config_serial	sim_serial.c	/^t_stat sim_config_serial  (SERHANDLE port, CONST char *sconfig)$/;"	f
sim_connect_sock	sim_sock.h	127;"	d
sim_connect_sock_ex	sim_sock.c	/^SOCKET sim_connect_sock_ex (const char *sourcehostport, const char *hostport, const char *default_host, const char *default_port, int opt_flags)$/;"	f
sim_cons_get_expect	sim_console.c	/^EXPECT *sim_cons_get_expect (void)$/;"	f
sim_cons_get_send	sim_console.c	/^SEND *sim_cons_get_send (void)$/;"	f
sim_console_poll_running	sim_console.c	/^t_bool              sim_console_poll_running = FALSE;$/;"	v
sim_console_poll_thread	sim_console.c	/^pthread_t           sim_console_poll_thread;       \/* Keyboard Polling Thread Id *\/$/;"	v
sim_console_startup_cond	sim_console.c	/^pthread_cond_t      sim_console_startup_cond;$/;"	v
sim_control_serial	sim_serial.c	/^t_stat sim_control_serial (SERHANDLE port, int32 bits_to_set, int32 bits_to_clear, int32 *incoming_bits)$/;"	f
sim_copy_entry	scp.c	/^static void sim_copy_entry (const char *directory, $/;"	f	file:
sim_copyfile	sim_fio.c	/^t_stat sim_copyfile (const char *source_file, const char *dest_file, t_bool overwrite_existing)$/;"	f
sim_cptr_is_action	scp.c	/^static t_bool sim_cptr_is_action[MAX_DO_NEST_LVL+1];$/;"	v	file:
sim_create_sock	sim_sock.c	/^static SOCKET sim_create_sock (int af, int opt_flags)$/;"	f	file:
sim_data_trace	scp.c	/^void sim_data_trace(DEVICE *dptr, UNIT *uptr, const uint8 *data, const char *position, size_t len, const char *txt, uint32 reason)$/;"	f
sim_dbg_int_char	sim_console.c	/^int32 sim_dbg_int_char = 0;                             \/* SIGINT char under debugger *\/$/;"	v
sim_deb	scp.c	/^FILE *sim_deb = NULL;                                   \/* debug file *\/$/;"	v
sim_deb_basetime	scp.c	/^struct timespec sim_deb_basetime;                       \/* debug timestamp relative base time *\/$/;"	v	typeref:struct:timespec
sim_deb_buffer	scp.c	/^char *sim_deb_buffer = NULL;                            \/* debug memory buffer *\/$/;"	v
sim_deb_buffer_size	scp.c	/^size_t sim_deb_buffer_size = 0;                         \/* debug memory buffer size *\/$/;"	v
sim_deb_ref	scp.c	/^FILEREF *sim_deb_ref = NULL;                            \/* debug file file reference *\/$/;"	v
sim_deb_switches	scp.c	/^int32 sim_deb_switches = 0;                             \/* debug switches *\/$/;"	v
sim_debug	scp.h	271;"	d
sim_debug_bits	scp.c	/^void sim_debug_bits(uint32 dbits, DEVICE* dptr, BITFIELD* bitdefs,$/;"	f
sim_debug_bits_hdr	scp.c	/^void sim_debug_bits_hdr(uint32 dbits, DEVICE* dptr, const char *header, $/;"	f
sim_debug_buffer_inuse	scp.c	/^size_t sim_debug_buffer_inuse = 0;                      \/* debug memory buffer inuse count *\/$/;"	v
sim_debug_buffer_offset	scp.c	/^size_t sim_debug_buffer_offset = 0;                     \/* debug memory buffer insertion offset *\/$/;"	v
sim_debug_prefix	scp.c	/^static const char *sim_debug_prefix (uint32 dbits, DEVICE* dptr, UNIT* uptr)$/;"	f	file:
sim_debug_unit	scp.h	272;"	d
sim_decode_quoted_string	scp.c	/^t_stat sim_decode_quoted_string (const char *iptr, uint8 *optr, uint32 *osize)$/;"	f
sim_del_char	sim_console.c	/^int32 sim_del_char = '\\b';                              \/* delete character *\/$/;"	v
sim_del_char	sim_console.c	/^int32 sim_del_char = 0177;$/;"	v
sim_delete_entry	scp.c	/^static void sim_delete_entry (const char *directory, $/;"	f	file:
sim_devices	PDP10/kx10_sys.c	/^DEVICE *sim_devices[] = {$/;"	v
sim_dfdev	scp.c	/^DEVICE *sim_dfdev = NULL;$/;"	v
sim_dflt_dev	scp.c	/^DEVICE *sim_dflt_dev = NULL;$/;"	v
sim_dfunit	scp.c	/^UNIT *sim_dfunit = NULL;$/;"	v
sim_dir_entry	scp.c	/^static void sim_dir_entry (const char *directory, $/;"	f	file:
sim_dir_scan	sim_fio.c	/^t_stat sim_dir_scan (const char *cptr, DIR_ENTRY_CALLBACK entry, void *context)$/;"	f
sim_disk_attach	sim_disk.c	/^t_stat sim_disk_attach (UNIT *uptr, const char *cptr, size_t sector_size, size_t xfer_element_size, t_bool dontchangecapac,$/;"	f
sim_disk_attach_ex	sim_disk.c	/^t_stat sim_disk_attach_ex (UNIT *uptr, const char *cptr, size_t sector_size, size_t xfer_element_size, t_bool dontchangecapac,$/;"	f
sim_disk_attach_ex2	sim_disk.c	/^t_stat sim_disk_attach_ex2 (UNIT *uptr, const char *cptr, size_t sector_size, size_t xfer_element_size, t_bool dontchangecapac,$/;"	f
sim_disk_attach_help	sim_disk.c	/^t_stat sim_disk_attach_help(FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
sim_disk_check_attached_container	sim_disk.c	/^static t_bool sim_disk_check_attached_container (const char *filename)$/;"	f	file:
sim_disk_clearerr	sim_disk.c	/^t_stat sim_disk_clearerr (UNIT *uptr)$/;"	f
sim_disk_clr_async	sim_disk.c	/^t_stat sim_disk_clr_async (UNIT *uptr)$/;"	f
sim_disk_data_trace	sim_disk.c	/^void sim_disk_data_trace(UNIT *uptr, const uint8 *data, size_t lba, size_t len, const char* txt, int detail, uint32 reason)$/;"	f
sim_disk_detach	sim_disk.c	/^t_stat sim_disk_detach (UNIT *uptr)$/;"	f
sim_disk_erase	sim_disk.c	/^t_stat sim_disk_erase (UNIT *uptr)$/;"	f
sim_disk_fmt	sim_disk.c	/^static const char *sim_disk_fmt (UNIT *uptr)$/;"	f	file:
sim_disk_fmt	sim_disk.c	/^struct sim_disk_fmt {$/;"	s	file:
sim_disk_info_cmd	sim_disk.c	/^t_stat sim_disk_info_cmd (int32 flag, CONST char *cptr)$/;"	f
sim_disk_info_entry	sim_disk.c	/^static void sim_disk_info_entry (const char *directory, $/;"	f	file:
sim_disk_init	sim_disk.c	/^t_stat sim_disk_init (void)$/;"	f
sim_disk_isavailable	sim_disk.c	/^t_bool sim_disk_isavailable (UNIT *uptr)$/;"	f
sim_disk_isavailable_a	sim_disk.c	/^t_bool sim_disk_isavailable_a (UNIT *uptr, DISK_PCALLBACK callback)$/;"	f
sim_disk_meta_attach_test	sim_disk.c	/^t_stat sim_disk_meta_attach_test (DEVICE *dptr, const char *cptr)$/;"	f
sim_disk_no_autosize	sim_disk.c	/^static t_bool sim_disk_no_autosize = FALSE;$/;"	v	file:
sim_disk_pdp11_bad_block	sim_disk.c	/^t_stat sim_disk_pdp11_bad_block (UNIT *uptr, int32 sec, int32 wds)$/;"	f
sim_disk_perror	sim_disk.c	/^t_stat sim_disk_perror (UNIT *uptr, const char *msg)$/;"	f
sim_disk_raw_support	sim_disk.c	/^t_bool sim_disk_raw_support (void)$/;"	f
sim_disk_rdsect	sim_disk.c	/^t_stat sim_disk_rdsect (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectsread, t_seccnt sects)$/;"	f
sim_disk_rdsect_a	sim_disk.c	/^t_stat sim_disk_rdsect_a (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectsread, t_seccnt sects, DISK_PCALLBACK callback)$/;"	f
sim_disk_reset	sim_disk.c	/^t_stat sim_disk_reset (UNIT *uptr)$/;"	f
sim_disk_set_async	sim_disk.c	/^t_stat sim_disk_set_async (UNIT *uptr, int latency)$/;"	f
sim_disk_set_capac	sim_disk.c	/^t_stat sim_disk_set_capac (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
sim_disk_set_fmt	sim_disk.c	/^t_stat sim_disk_set_fmt (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
sim_disk_set_noautosize	sim_disk.c	/^t_stat sim_disk_set_noautosize (int32 flag, CONST char *cptr)$/;"	f
sim_disk_show_capac	sim_disk.c	/^t_stat sim_disk_show_capac (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
sim_disk_show_fmt	sim_disk.c	/^t_stat sim_disk_show_fmt (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
sim_disk_size	sim_disk.c	/^t_offset sim_disk_size (UNIT *uptr)$/;"	f
sim_disk_sizing_test	sim_disk.c	/^t_stat sim_disk_sizing_test (DEVICE *dptr, const char *cptr)$/;"	f
sim_disk_test	sim_disk.c	/^t_stat sim_disk_test (DEVICE *dptr, const char *cptr)$/;"	f
sim_disk_test_exercise	sim_disk.c	/^static t_stat sim_disk_test_exercise (UNIT *uptr)$/;"	f	file:
sim_disk_unload	sim_disk.c	/^t_stat sim_disk_unload (UNIT *uptr)$/;"	f
sim_disk_vhd_support	sim_disk.c	/^t_bool sim_disk_vhd_support (void)$/;"	f
sim_disk_wrp	sim_disk.c	/^t_bool sim_disk_wrp (UNIT *uptr)$/;"	f
sim_disk_wrsect	sim_disk.c	/^t_stat sim_disk_wrsect (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectswritten, t_seccnt sects)$/;"	f
sim_disk_wrsect_a	sim_disk.c	/^t_stat sim_disk_wrsect_a (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectswritten, t_seccnt sects, DISK_PCALLBACK callback)$/;"	f
sim_dname	scp.c	/^const char *sim_dname (DEVICE *dptr)$/;"	f
sim_do_depth	scp.c	/^static int32 sim_do_depth = 0;$/;"	v	file:
sim_do_echo	scp.c	/^static int32 sim_do_echo = 0;                           \/* the echo status of the currently open do file *\/$/;"	v	file:
sim_do_filename	scp.c	/^static char sim_do_filename[MAX_DO_NEST_LVL+1][CBUFSIZE];$/;"	v	file:
sim_do_label	scp.c	/^static const char *sim_do_label[MAX_DO_NEST_LVL+1];$/;"	v	file:
sim_do_ocptr	scp.c	/^static const char *sim_do_ocptr[MAX_DO_NEST_LVL+1];$/;"	v	file:
sim_ebcdic_to_hol	sim_card.c	/^sim_ebcdic_to_hol(uint8 ebcdic) {$/;"	f
sim_emax	PDP10/kx10_sys.c	/^int32 sim_emax = 1;$/;"	v
sim_encode_quoted_string	scp.c	/^char *sim_encode_quoted_string (const uint8 *iptr, uint32 size)$/;"	f
sim_end	sim_fio.c	/^t_bool sim_end;                     \/* TRUE = little endian, FALSE = big endian *\/$/;"	v
sim_err_sock	sim_sock.c	/^SOCKET sim_err_sock (SOCKET s, const char *emsg)$/;"	f
sim_error_serial	sim_serial.c	/^static void sim_error_serial (const char *routine, int error)$/;"	f	file:
sim_error_text	scp.c	/^const char *sim_error_text (t_stat stat)$/;"	f
sim_ether_test	sim_ether.c	/^t_stat sim_ether_test (DEVICE *dptr, const char *cptr)$/;"	f
sim_eval	scp.c	/^t_value *sim_eval = NULL;$/;"	v
sim_eval_expression	scp.c	/^const char *sim_eval_expression (const char *cptr, t_svalue *value, t_bool parens_required, t_stat *stat)$/;"	f
sim_eval_postfix	scp.c	/^static t_svalue sim_eval_postfix (Stack *stack1, t_stat *stat)$/;"	f	file:
sim_exit_status	scp.c	/^static int sim_exit_status = EXIT_SUCCESS;              \/* optionally set by EXIT command *\/$/;"	v	file:
sim_exp_argv	scp.c	/^static char **sim_exp_argv = NULL;$/;"	v	file:
sim_exp_check	scp.c	/^t_stat sim_exp_check (EXPECT *exp, uint8 data)$/;"	f
sim_exp_clr	scp.c	/^t_stat sim_exp_clr (EXPECT *exp, const char *match)$/;"	f
sim_exp_clr_tab	scp.c	/^t_stat sim_exp_clr_tab (EXPECT *exp, EXPTAB *ep)$/;"	f
sim_exp_clrall	scp.c	/^t_stat sim_exp_clrall (EXPECT *exp)$/;"	f
sim_exp_fnd	scp.c	/^CONST EXPTAB *sim_exp_fnd (CONST EXPECT *exp, const char *match, int32 start_rule)$/;"	f
sim_exp_init	scp.c	/^t_stat sim_exp_init (EXPECT *exp)$/;"	f
sim_exp_set	scp.c	/^t_stat sim_exp_set (EXPECT *exp, const char *match, int32 cnt, uint32 after, int32 switches, const char *act)$/;"	f
sim_exp_show	scp.c	/^t_stat sim_exp_show (FILE *st, CONST EXPECT *exp, const char *match)$/;"	f
sim_exp_show_tab	scp.c	/^t_stat sim_exp_show_tab (FILE *st, const EXPECT *exp, const EXPTAB *ep)$/;"	f
sim_exp_showall	scp.c	/^t_stat sim_exp_showall (FILE *st, const EXPECT *exp)$/;"	f
sim_expect_dev	scp.c	/^DEVICE sim_expect_dev = {$/;"	v
sim_expect_unit	scp.c	/^static UNIT sim_expect_unit = { UDATA (&expect_svc, 0, 0) };$/;"	v	file:
sim_export_tape	sim_tape.c	/^static t_stat sim_export_tape (UNIT *uptr, const char *export_file)$/;"	f	file:
sim_external_env	scp.c	/^    } *sim_external_env = NULL;$/;"	v	typeref:struct:deleted_env_var	file:
sim_external_env_count	scp.c	/^static int sim_external_env_count = 0;$/;"	v	file:
sim_failed_reset_dptr	scp.c	/^static DEVICE *sim_failed_reset_dptr = NULL;$/;"	v	file:
sim_fcompare	PDP10/ka10_ai.c	/^static t_stat sim_fcompare (void *x, size_t m, size_t n, FILE *f)$/;"	f	file:
sim_fd_isatty	sim_console.c	/^t_bool sim_fd_isatty (int fd)$/;"	f
sim_filepath_parts	sim_fio.c	/^char *sim_filepath_parts (const char *filepath, const char *parts)$/;"	f
sim_finit	sim_fio.c	/^int32 sim_finit (void)$/;"	f
sim_flush_buffered_files	scp.c	/^void sim_flush_buffered_files (void)$/;"	f
sim_flush_dev	scp.c	/^DEVICE sim_flush_dev = {$/;"	v
sim_flush_interval	scp.c	/^static uint32 sim_flush_interval = 30;  \/* Flush I\/O buffers every 30 seconds *\/$/;"	v	file:
sim_flush_reg	scp.c	/^static REG sim_flush_reg[] = {$/;"	v	file:
sim_flush_unit	scp.c	/^static UNIT sim_flush_unit = { UDATA (&flush_svc, UNIT_IDLE, 0) };$/;"	v	file:
sim_fmt_numeric	scp.c	/^const char *sim_fmt_numeric (double number)$/;"	f
sim_fmt_secs	scp.c	/^const char *sim_fmt_secs (double seconds)$/;"	f
sim_fopen	sim_fio.c	/^FILE* sim_fopen (const char *file, const char *mode)$/;"	f
sim_fread	sim_fio.c	/^size_t sim_fread (void *bptr, size_t size, size_t count, FILE *fptr)$/;"	f
sim_freadh	PDP10/ka10_ai.c	/^static t_stat sim_freadh (uint64 *x, size_t n, FILE *f)$/;"	f	file:
sim_free_filelist	sim_fio.c	/^void sim_free_filelist (char ***pfilelist)$/;"	f
sim_fseek	sim_fio.c	/^int sim_fseek (FILE *st, t_addr offset, int whence)$/;"	f
sim_fseeko	sim_fio.c	/^int sim_fseeko (FILE *st, t_offset offset, int whence)$/;"	f
sim_fseeko	sim_fio.c	/^int sim_fseeko (FILE *st, t_offset xpos, int origin) $/;"	f
sim_fseeko	sim_fio.c	/^int sim_fseeko (FILE *st, t_offset xpos, int origin)$/;"	f
sim_fsize	sim_fio.c	/^uint32 sim_fsize (FILE *fp)$/;"	f
sim_fsize_ex	sim_fio.c	/^t_offset sim_fsize_ex (FILE *fp)$/;"	f
sim_fsize_name	sim_fio.c	/^uint32 sim_fsize_name (const char *fname)$/;"	f
sim_fsize_name_ex	sim_fio.c	/^t_offset sim_fsize_name_ex (const char *fname)$/;"	f
sim_ftell	sim_fio.c	/^t_offset sim_ftell (FILE *st)$/;"	f
sim_fwrite	sim_fio.c	/^size_t sim_fwrite (const void *bptr, size_t size, size_t count, FILE *fptr)$/;"	f
sim_get_err_sock	sim_sock.c	/^const char *sim_get_err_sock (const char *emsg)$/;"	f
sim_get_filelist	sim_fio.c	/^char **sim_get_filelist (const char *filename)$/;"	f
sim_get_os_error_text	sim_fio.c	/^sim_get_os_error_text (int Error)$/;"	f
sim_get_rom_delay_factor	sim_timer.c	/^SIM_NOINLINE uint32 sim_get_rom_delay_factor (void)$/;"	f
sim_get_time	sim_timer.c	/^time_t sim_get_time (time_t *now)$/;"	f
sim_get_tool_path	scp.c	/^const char *sim_get_tool_path (const char *tool)$/;"	f
sim_get_tool_path	sim_ether.c	/^static const char *sim_get_tool_path (const char *tool)$/;"	f	file:
sim_getcwd	sim_fio.c	/^char *sim_getcwd (char *buf, size_t buf_size)$/;"	f
sim_getnames_sock	sim_sock.c	/^int sim_getnames_sock (SOCKET sock, char **socknamebuf, char **peernamebuf)$/;"	f
sim_goto_line	scp.c	/^static int32 sim_goto_line[MAX_DO_NEST_LVL+1];          \/* the current line number in the currently open do file *\/$/;"	v	file:
sim_gotofile	scp.c	/^static FILE *sim_gotofile;                              \/* the currently open do file *\/$/;"	v	file:
sim_grtime	scp.c	/^uint32 sim_grtime (void)$/;"	f
sim_gtime	scp.c	/^double sim_gtime (void)$/;"	f
sim_hol_to_bcd	sim_card.c	/^sim_hol_to_bcd(uint16 hol) {$/;"	f
sim_hol_to_ebcdic	sim_card.c	/^sim_hol_to_ebcdic(uint16 hol) {$/;"	f
sim_hopper_size	sim_card.c	/^sim_hopper_size(UNIT * uptr) {$/;"	f
sim_host_speed_factor	sim_timer.c	/^sim_host_speed_factor (void)$/;"	f
sim_idle	sim_timer.c	/^t_bool sim_idle (uint32 tmr, int sin_cyc)$/;"	f
sim_idle_calib_pct	sim_timer.c	/^static uint32 sim_idle_calib_pct = 100;$/;"	v	file:
sim_idle_cyc_ms	sim_timer.c	/^static uint32 sim_idle_cyc_ms = 0;                          \/* Cycles per millisecond while not idling *\/$/;"	v	file:
sim_idle_cyc_sleep	sim_timer.c	/^static uint32 sim_idle_cyc_sleep = 0;                       \/* Cycles per minimum sleep interval *\/$/;"	v	file:
sim_idle_enab	sim_timer.c	/^t_bool sim_idle_enab = FALSE;                       \/* global flag *\/$/;"	v
sim_idle_end_time	sim_timer.c	/^static double sim_idle_end_time = 0.0;                      \/* Time when last idle completed *\/$/;"	v	file:
sim_idle_ms_sleep	sim_timer.c	/^uint32 sim_idle_ms_sleep (unsigned int msec)$/;"	f
sim_idle_ms_sleep	sim_timer.c	281;"	d	file:
sim_idle_ms_sleep	sim_timer.c	727;"	d	file:
sim_idle_rate_ms	sim_timer.c	/^static uint32 sim_idle_rate_ms = 0;                 \/* Minimum Sleep time *\/$/;"	v	file:
sim_idle_stable	sim_timer.c	/^static uint32 sim_idle_stable = SIM_IDLE_STDFLT;$/;"	v	file:
sim_idle_wait	sim_timer.c	/^volatile t_bool sim_idle_wait = FALSE;              \/* global flag *\/$/;"	v
sim_if_cmd	scp.c	/^static t_bool sim_if_cmd[MAX_DO_NEST_LVL+1];$/;"	v	file:
sim_if_cmd_last	scp.c	/^static t_bool sim_if_cmd_last[MAX_DO_NEST_LVL+1];$/;"	v	file:
sim_if_result	scp.c	/^static t_bool sim_if_result[MAX_DO_NEST_LVL+1];$/;"	v	file:
sim_if_result_last	scp.c	/^static t_bool sim_if_result_last[MAX_DO_NEST_LVL+1];$/;"	v	file:
sim_init_sock	sim_sock.c	/^void sim_init_sock (void)$/;"	f
sim_inst_per_sec_last	sim_timer.c	/^static double sim_inst_per_sec_last = 0;            \/* shadow value when at sim> prompt *\/$/;"	v	file:
sim_instr	PDP10/kx10_cpu.c	/^t_stat sim_instr (void)$/;"	f
sim_int_char	sim_console.c	/^int32 sim_int_char = 005;                               \/* interrupt character *\/$/;"	v
sim_int_clk_tps	sim_timer.c	/^static int32 sim_int_clk_tps;$/;"	v	file:
sim_int_expect_description	scp.c	/^static const char *sim_int_expect_description (DEVICE *dptr)$/;"	f	file:
sim_int_flush_description	scp.c	/^static const char *sim_int_flush_description (DEVICE *dptr)$/;"	f	file:
sim_int_runlimit_description	scp.c	/^static const char *sim_int_runlimit_description (DEVICE *dptr)$/;"	f	file:
sim_int_runlimit_reset	scp.c	/^static t_stat sim_int_runlimit_reset (DEVICE *dptr)$/;"	f	file:
sim_int_step_description	scp.c	/^static const char *sim_int_step_description (DEVICE *dptr)$/;"	f	file:
sim_int_stop_description	sim_timer.c	/^static const char *sim_int_stop_description (DEVICE *dptr)$/;"	f	file:
sim_int_timer_description	sim_timer.c	/^static const char *sim_int_timer_description (DEVICE *dptr)$/;"	f	file:
sim_int_timer_dev	sim_timer.c	/^DEVICE sim_int_timer_dev = {$/;"	v
sim_internal_device_count	scp.c	/^uint32 sim_internal_device_count = 0;$/;"	v
sim_internal_devices	scp.c	/^DEVICE **sim_internal_devices = NULL;$/;"	v
sim_internal_timer_time	sim_timer.c	/^int32 sim_internal_timer_time;                          \/* Pending internal timer delay *\/$/;"	v
sim_internal_timer_unit	sim_timer.c	/^UNIT sim_internal_timer_unit;                           \/* Internal calibration timer *\/$/;"	v
sim_interval	scp.c	/^int32 sim_interval = 0;$/;"	v
sim_into_postfix	scp.c	/^static const char *sim_into_postfix (Stack *stack1, const char *cptr, t_stat *stat, t_bool parens_required)$/;"	f	file:
sim_is_active	scp.c	/^t_bool sim_is_active (UNIT *uptr)$/;"	f
sim_is_remote_console_master_line	sim_console.c	/^t_bool sim_is_remote_console_master_line (void *lp)$/;"	f
sim_is_running	scp.c	/^volatile t_bool sim_is_running = FALSE;$/;"	v
sim_isalnum	sim_fio.c	/^int sim_isalnum (int c)$/;"	f
sim_isalpha	sim_fio.c	/^int sim_isalpha (int c)$/;"	f
sim_isdigit	sim_fio.c	/^int sim_isdigit (int c)$/;"	f
sim_isgraph	sim_fio.c	/^int sim_isgraph (int c)$/;"	f
sim_islower	sim_fio.c	/^int sim_islower (int c)$/;"	f
sim_isprint	sim_fio.c	/^int sim_isprint (int c)$/;"	f
sim_isspace	sim_fio.c	/^int sim_isspace (int c)$/;"	f
sim_isupper	sim_fio.c	/^int sim_isupper (int c)$/;"	f
sim_last_addr	scp.c	/^static t_addr sim_last_addr;$/;"	v	file:
sim_last_cmd_stat	scp.c	/^t_stat sim_last_cmd_stat;                               \/* Command Status *\/$/;"	v
sim_last_poll_kbd_time	sim_console.c	/^uint32 sim_last_poll_kbd_time;                          \/* time when sim_poll_kbd was called *\/$/;"	v
sim_last_val	scp.c	/^static t_value sim_last_val;$/;"	v	file:
sim_load	PDP10/kx10_sys.c	/^t_stat sim_load (FILE *fileref, CONST char *cptr, CONST char *fnam, int flag)$/;"	f
sim_log	scp.c	/^FILE *sim_log = NULL;                                   \/* log file *\/$/;"	v
sim_log_ref	scp.c	/^FILEREF *sim_log_ref = NULL;                            \/* log file file reference *\/$/;"	v
sim_log_temp	sim_console.c	/^static t_bool sim_log_temp = FALSE;         \/* temporary log file active *\/$/;"	v	file:
sim_logfile_name	sim_console.c	/^const char *sim_logfile_name (FILE *st, FILEREF *ref)$/;"	f
sim_make_ROM_include	sim_BuildROMs.c	/^int sim_make_ROM_include(const char *rom_filename,$/;"	f
sim_make_ROMs_entry	sim_BuildROMs.c	/^int sim_make_ROMs_entry(const char *rom_filename)$/;"	f
sim_master_sock	sim_sock.h	125;"	d
sim_master_sock_ex	sim_sock.c	/^SOCKET sim_master_sock_ex (const char *hostport, int *parse_status, int opt_flags)$/;"	f
sim_messagef	scp.c	/^t_stat sim_messagef (t_stat stat, const char* fmt, ...)$/;"	f
sim_mfile	scp.c	/^MEMFILE *sim_mfile = NULL;$/;"	v
sim_mkdir	sim_fio.c	/^int sim_mkdir(const char *path)$/;"	f
sim_name	PDP10/kx10_sys.c	/^char sim_name[] = "KA-10";$/;"	v
sim_name	PDP10/kx10_sys.c	/^char sim_name[] = "KI-10";$/;"	v
sim_name	PDP10/kx10_sys.c	/^char sim_name[] = "KL-10";$/;"	v
sim_name	PDP10/kx10_sys.c	/^char sim_name[] = "KS-10";$/;"	v
sim_name	PDP10/kx10_sys.c	/^char sim_name[] = "PDP6";$/;"	v
sim_ofile	scp.c	/^FILE *sim_ofile = NULL;$/;"	v
sim_oline	scp.c	/^TMLN *sim_oline = NULL;$/;"	v
sim_on_actions	scp.c	/^static char *sim_on_actions[MAX_DO_NEST_LVL+1][SCPE_MAX_ERR+2];$/;"	v	file:
sim_on_check	scp.c	/^static int32 sim_on_check[MAX_DO_NEST_LVL+1];$/;"	v	file:
sim_on_inherit	scp.c	/^static int32 sim_on_inherit = 0;                        \/* the inherit status of on state and conditions when executing do files *\/$/;"	v	file:
sim_open_logfile	sim_console.c	/^t_stat sim_open_logfile (const char *filename, t_bool binary, FILE **pf, FILEREF **pref)$/;"	f
sim_open_os_serial	sim_serial.c	/^static SERHANDLE sim_open_os_serial (char *name)$/;"	f	file:
sim_open_serial	sim_serial.c	/^SERHANDLE sim_open_serial (char *name, TMLN *lp, t_stat *stat)$/;"	f
sim_opt_out	scp.c	/^int32 sim_opt_out = 0;$/;"	v
sim_os_clock_resoluton_ms	sim_timer.c	/^static uint32 sim_os_clock_resoluton_ms = 0;$/;"	v	file:
sim_os_disk_close_raw	sim_disk.c	/^static int sim_os_disk_close_raw (FILE *f)$/;"	f	file:
sim_os_disk_flush_raw	sim_disk.c	/^static void sim_os_disk_flush_raw (FILE *f)$/;"	f	file:
sim_os_disk_implemented_raw	sim_disk.c	/^static t_stat sim_os_disk_implemented_raw (void)$/;"	f	file:
sim_os_disk_info_raw	sim_disk.c	/^static t_stat sim_os_disk_info_raw (FILE *Disk, uint32 *sector_size, uint32 *removable, uint32 *is_cdrom)$/;"	f	file:
sim_os_disk_info_raw	sim_disk.c	/^static t_stat sim_os_disk_info_raw (FILE *f, uint32 *sector_size, uint32 *removable, uint32 *is_cdrom)$/;"	f	file:
sim_os_disk_isavailable_raw	sim_disk.c	/^static t_bool sim_os_disk_isavailable_raw (FILE *Disk)$/;"	f	file:
sim_os_disk_open_raw	sim_disk.c	/^static FILE *sim_os_disk_open_raw (const char *rawdevicename, const char *openmode)$/;"	f	file:
sim_os_disk_rdsect	sim_disk.c	/^static t_stat sim_os_disk_rdsect (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectsread, t_seccnt sects)$/;"	f	file:
sim_os_disk_read	sim_disk.c	/^static t_stat sim_os_disk_read (UNIT *uptr, t_offset addr, uint8 *buf, uint32 *bytesread, uint32 bytes)$/;"	f	file:
sim_os_disk_read	sim_disk.c	/^static t_stat sim_os_disk_read (UNIT *uptr, t_offset addr, uint8 *buf, uint32 *rbytesread, uint32 bytes)$/;"	f	file:
sim_os_disk_size_raw	sim_disk.c	/^static t_offset sim_os_disk_size_raw (FILE *Disk)$/;"	f	file:
sim_os_disk_size_raw	sim_disk.c	/^static t_offset sim_os_disk_size_raw (FILE *f)$/;"	f	file:
sim_os_disk_unload_raw	sim_disk.c	/^static t_stat sim_os_disk_unload_raw (FILE *Disk)$/;"	f	file:
sim_os_disk_unload_raw	sim_disk.c	/^static t_stat sim_os_disk_unload_raw (FILE *f)$/;"	f	file:
sim_os_disk_write	sim_disk.c	/^static t_stat sim_os_disk_write (UNIT *uptr, t_offset addr, uint8 *buf, uint32 *byteswritten, uint32 bytes)$/;"	f	file:
sim_os_disk_write	sim_disk.c	/^static t_stat sim_os_disk_write (UNIT *uptr, t_offset addr, uint8 *buf, uint32 *rbyteswritten, uint32 bytes)$/;"	f	file:
sim_os_disk_wrsect	sim_disk.c	/^static t_stat sim_os_disk_wrsect (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectswritten, t_seccnt sects)$/;"	f	file:
sim_os_fd_isatty	sim_console.c	/^static t_bool sim_os_fd_isatty (int fd)$/;"	f	file:
sim_os_ms_sleep	sim_timer.c	/^uint32 sim_os_ms_sleep (unsigned int milliseconds)$/;"	f
sim_os_ms_sleep	sim_timer.c	/^uint32 sim_os_ms_sleep (unsigned int msec)$/;"	f
sim_os_ms_sleep	sim_timer.c	283;"	d	file:
sim_os_ms_sleep	sim_timer.c	729;"	d	file:
sim_os_ms_sleep_init	sim_timer.c	/^uint32 sim_os_ms_sleep_init (void)$/;"	f
sim_os_msec	sim_timer.c	/^uint32 sim_os_msec (void)$/;"	f
sim_os_msec	sim_timer.c	282;"	d	file:
sim_os_msec	sim_timer.c	728;"	d	file:
sim_os_poll_kbd	sim_console.c	/^static t_stat sim_os_poll_kbd (void)$/;"	f	file:
sim_os_poll_kbd_data	sim_console.c	/^static t_stat sim_os_poll_kbd_data (void)$/;"	f	file:
sim_os_poll_kbd_ready	sim_console.c	/^static t_bool sim_os_poll_kbd_ready (int ms_timeout)   \/* Don't know how to do this on this platform *\/$/;"	f	file:
sim_os_poll_kbd_ready	sim_console.c	/^static t_bool sim_os_poll_kbd_ready (int ms_timeout)$/;"	f	file:
sim_os_putchar	sim_console.c	/^static t_stat sim_os_putchar (int32 c)$/;"	f	file:
sim_os_putchar	sim_console.c	/^static t_stat sim_os_putchar (int32 out)$/;"	f	file:
sim_os_set_thread_priority	sim_timer.c	/^t_stat sim_os_set_thread_priority (int below_normal_above)$/;"	f
sim_os_sleep	sim_timer.c	/^void sim_os_sleep (unsigned int sec)$/;"	f
sim_os_sleep_inc_ms	sim_timer.c	/^static uint32 sim_os_sleep_inc_ms = 0;$/;"	v	file:
sim_os_sleep_min_ms	sim_timer.c	/^static uint32 sim_os_sleep_min_ms = 0;$/;"	v	file:
sim_os_tick_hz	sim_timer.c	/^static uint32 sim_os_tick_hz = 0;$/;"	v	file:
sim_os_ttclose	sim_console.c	/^static t_stat sim_os_ttclose (void)$/;"	f	file:
sim_os_ttcmd	sim_console.c	/^static t_stat sim_os_ttcmd (void)$/;"	f	file:
sim_os_ttinit	sim_console.c	/^static t_stat sim_os_ttinit (void) $/;"	f	file:
sim_os_ttinit	sim_console.c	/^static t_stat sim_os_ttinit (void)$/;"	f	file:
sim_os_ttrun	sim_console.c	/^static t_stat sim_os_ttrun (void)$/;"	f	file:
sim_out_hold_svc	sim_console.c	/^static t_stat sim_out_hold_svc (UNIT *uptr)$/;"	f	file:
sim_panel_add_device_panel	sim_frontpanel.c	/^sim_panel_add_device_panel (PANEL *simulator_panel,$/;"	f
sim_panel_add_device_panel_debug	sim_frontpanel.c	/^sim_panel_add_device_panel_debug (PANEL *simulator_panel,$/;"	f
sim_panel_add_register	sim_frontpanel.c	/^sim_panel_add_register (PANEL *panel,$/;"	f
sim_panel_add_register_array	sim_frontpanel.c	/^sim_panel_add_register_array (PANEL *panel,$/;"	f
sim_panel_add_register_bits	sim_frontpanel.c	/^sim_panel_add_register_bits (PANEL *panel,$/;"	f
sim_panel_add_register_indirect	sim_frontpanel.c	/^sim_panel_add_register_indirect (PANEL *panel,$/;"	f
sim_panel_add_register_indirect_bits	sim_frontpanel.c	/^sim_panel_add_register_indirect_bits (PANEL *panel,$/;"	f
sim_panel_break_clear	sim_frontpanel.c	/^sim_panel_break_clear (PANEL *panel, const char *condition)$/;"	f
sim_panel_break_output_clear	sim_frontpanel.c	/^sim_panel_break_output_clear (PANEL *panel, const char *condition)$/;"	f
sim_panel_break_output_set	sim_frontpanel.c	/^sim_panel_break_output_set (PANEL *panel, const char *condition)$/;"	f
sim_panel_break_set	sim_frontpanel.c	/^sim_panel_break_set (PANEL *panel, const char *condition)$/;"	f
sim_panel_clear_error	sim_frontpanel.c	/^void sim_panel_clear_error (void)$/;"	f
sim_panel_debug	sim_frontpanel.c	/^sim_panel_debug (PANEL *panel, const char *fmt, ...)$/;"	f
sim_panel_destroy	sim_frontpanel.c	/^sim_panel_destroy (PANEL *panel)$/;"	f
sim_panel_device_debug_mode	sim_frontpanel.c	/^sim_panel_device_debug_mode (PANEL *panel, $/;"	f
sim_panel_dismount	sim_frontpanel.c	/^sim_panel_dismount (PANEL *panel,$/;"	f
sim_panel_error_buf	sim_frontpanel.c	/^static char *sim_panel_error_buf = NULL;$/;"	v	file:
sim_panel_error_bufsize	sim_frontpanel.c	/^static size_t sim_panel_error_bufsize = 0;$/;"	v	file:
sim_panel_exec_boot	sim_frontpanel.c	/^sim_panel_exec_boot (PANEL *panel, const char *device)$/;"	f
sim_panel_exec_halt	sim_frontpanel.c	/^sim_panel_exec_halt (PANEL *panel)$/;"	f
sim_panel_exec_run	sim_frontpanel.c	/^sim_panel_exec_run (PANEL *panel)$/;"	f
sim_panel_exec_start	sim_frontpanel.c	/^sim_panel_exec_start (PANEL *panel)$/;"	f
sim_panel_exec_step	sim_frontpanel.c	/^sim_panel_exec_step (PANEL *panel)$/;"	f
sim_panel_flush_debug	sim_frontpanel.c	/^sim_panel_flush_debug (PANEL *panel)$/;"	f
sim_panel_gen_deposit	sim_frontpanel.c	/^sim_panel_gen_deposit (PANEL *panel, $/;"	f
sim_panel_gen_examine	sim_frontpanel.c	/^sim_panel_gen_examine (PANEL *panel, $/;"	f
sim_panel_get_error	sim_frontpanel.c	/^const char *sim_panel_get_error (void)$/;"	f
sim_panel_get_history	sim_frontpanel.c	/^sim_panel_get_history (PANEL *panel, $/;"	f
sim_panel_get_registers	sim_frontpanel.c	/^sim_panel_get_registers (PANEL *panel, unsigned long long *simulation_time)$/;"	f
sim_panel_get_state	sim_frontpanel.c	/^sim_panel_get_state (PANEL *panel)$/;"	f
sim_panel_halt_text	sim_frontpanel.c	/^sim_panel_halt_text (PANEL *panel)$/;"	f
sim_panel_mem_deposit	sim_frontpanel.c	/^sim_panel_mem_deposit (PANEL *panel, $/;"	f
sim_panel_mem_deposit_instruction	sim_frontpanel.c	/^sim_panel_mem_deposit_instruction (PANEL *panel, $/;"	f
sim_panel_mem_examine	sim_frontpanel.c	/^sim_panel_mem_examine (PANEL *panel, $/;"	f
sim_panel_mount	sim_frontpanel.c	/^sim_panel_mount (PANEL *panel,$/;"	f
sim_panel_set_debug_mode	sim_frontpanel.c	/^sim_panel_set_debug_mode (PANEL *panel, int debug_bits)$/;"	f
sim_panel_set_display_callback_interval	sim_frontpanel.c	/^sim_panel_set_display_callback_interval (PANEL *panel, $/;"	f
sim_panel_set_error	sim_frontpanel.c	/^static int sim_panel_set_error (PANEL *p, const char *fmt, ...)$/;"	f	file:
sim_panel_set_register_value	sim_frontpanel.c	/^sim_panel_set_register_value (PANEL *panel,$/;"	f
sim_panel_set_sampling_parameters	sim_frontpanel.c	/^sim_panel_set_sampling_parameters (PANEL *panel,$/;"	f
sim_panel_set_sampling_parameters_ex	sim_frontpanel.c	/^sim_panel_set_sampling_parameters_ex (PANEL *panel,$/;"	f
sim_panel_start_simulator	sim_frontpanel.c	/^sim_panel_start_simulator (const char *sim_path,$/;"	f
sim_panel_start_simulator_debug	sim_frontpanel.c	/^sim_panel_start_simulator_debug (const char *sim_path,$/;"	f
sim_parity_table	sim_card.c	/^const uint8        sim_parity_table[64] = {$/;"	v
sim_parse_addr	sim_sock.c	/^int sim_parse_addr (const char *cptr, char *host, size_t host_len, const char *default_host, $/;"	f
sim_parse_addr_ex	sim_sock.c	/^int sim_parse_addr_ex (const char *cptr, char *host, size_t hostlen, const char *default_host, char *port, size_t port_len, char *localport, size_t localport_len, const char *default_port)$/;"	f
sim_perror	scp.c	/^void sim_perror (const char *msg)$/;"	f
sim_poll_kbd	sim_console.c	/^t_stat sim_poll_kbd (void)$/;"	f
sim_precalibrate_ips	sim_timer.c	/^static int32 sim_precalibrate_ips = SIM_INITIAL_IPS;$/;"	v	file:
sim_print_filelist	sim_fio.c	/^void sim_print_filelist (char **filelist)$/;"	f
sim_print_val	scp.c	/^t_stat sim_print_val (t_value val, uint32 radix,$/;"	f
sim_printf	scp.c	/^void sim_printf (const char* fmt, ...)$/;"	f
sim_printf	sim_sock.h	111;"	d
sim_process_event	scp.c	/^t_stat sim_process_event (void)$/;"	f
sim_processing_event	scp.c	/^t_bool sim_processing_event = FALSE;$/;"	v
sim_prog_name	scp.c	/^const char *sim_prog_name = NULL;                       \/* pointer to the executable name *\/$/;"	v
sim_prompt	scp.c	/^char *sim_prompt = NULL;                                \/* prompt string *\/$/;"	v
sim_prompt	sim_frontpanel.c	/^static const char *sim_prompt = "sim> ";$/;"	v	file:
sim_punch_card	sim_card.c	/^sim_punch_card(UNIT * uptr, uint16 image[80])$/;"	f
sim_punch_count	sim_card.c	/^sim_punch_count(UNIT * uptr) {$/;"	f
sim_putchar	sim_console.c	/^t_stat sim_putchar (int32 c)$/;"	f
sim_putchar_s	sim_console.c	/^t_stat sim_putchar_s (int32 c)$/;"	f
sim_qcount	scp.c	/^int32 sim_qcount (void)$/;"	f
sim_quiet	scp.c	/^int32 sim_quiet = 0;$/;"	v
sim_rand	scp.c	/^int sim_rand (void)$/;"	f
sim_rand_seed	scp.c	/^static int32 sim_rand_seed = 2;$/;"	v	file:
sim_read_ROM_include	sim_BuildROMs.c	/^int sim_read_ROM_include(const char *include_filename, $/;"	f
sim_read_card	sim_card.c	/^sim_read_card(UNIT * uptr, uint16 image[80])$/;"	f
sim_read_serial	sim_serial.c	/^int32 sim_read_serial (SERHANDLE port, char *buffer, int32 count, char *brk)$/;"	f
sim_read_sock	sim_sock.c	/^int sim_read_sock (SOCKET sock, char *buf, int nbytes)$/;"	f
sim_register_clock_unit	sim_timer.c	/^t_stat sim_register_clock_unit (UNIT *uptr)$/;"	f
sim_register_clock_unit_tmr	sim_timer.c	/^t_stat sim_register_clock_unit_tmr (UNIT *uptr, int32 tmr)$/;"	f
sim_register_internal_device	scp.c	/^t_stat sim_register_internal_device (DEVICE *dptr)$/;"	f
sim_rem_active_command	sim_console.c	/^static CTAB *sim_rem_active_command = NULL; \/* active command *\/$/;"	v	file:
sim_rem_active_number	sim_console.c	/^static int32 sim_rem_active_number = -1;    \/* -1 - not active, >= 0 is index of active console *\/$/;"	v	file:
sim_rem_clract	sim_console.c	/^static char *sim_rem_clract (int32 line)$/;"	f	file:
sim_rem_cmd_active_line	sim_console.c	/^int32 sim_rem_cmd_active_line = -1;         \/* step in progress on line # *\/$/;"	v
sim_rem_cmd_log_start	sim_console.c	/^static t_offset sim_rem_cmd_log_start = 0;  \/* Log File saved position *\/$/;"	v	file:
sim_rem_collect_all_registers	sim_console.c	/^static void sim_rem_collect_all_registers (void)$/;"	f	file:
sim_rem_collect_cmd_setup	sim_console.c	/^static t_stat sim_rem_collect_cmd_setup (int32 line, CONST char **iptr)$/;"	f	file:
sim_rem_collect_reg_bits	sim_console.c	/^static void sim_rem_collect_reg_bits (BITSAMPLE_REG *reg)$/;"	f	file:
sim_rem_collect_registers	sim_console.c	/^static void sim_rem_collect_registers (REMOTE *rem)$/;"	f	file:
sim_rem_command_buf	sim_console.c	/^static char *sim_rem_command_buf;           \/* active command buffer *\/$/;"	v	file:
sim_rem_con_data_svc	sim_console.c	/^t_stat sim_rem_con_data_svc (UNIT *uptr)$/;"	f
sim_rem_con_debug	sim_console.c	/^DEBTAB sim_rem_con_debug[] = {$/;"	v
sim_rem_con_description	sim_console.c	/^static const char *sim_rem_con_description (DEVICE *dptr)$/;"	f	file:
sim_rem_con_mod	sim_console.c	/^MTAB sim_rem_con_mod[] = {$/;"	v
sim_rem_con_poll_svc	sim_console.c	/^t_stat sim_rem_con_poll_svc (UNIT *uptr)$/;"	f
sim_rem_con_repeat_svc	sim_console.c	/^t_stat sim_rem_con_repeat_svc (UNIT *uptr)$/;"	f
sim_rem_con_reset	sim_console.c	/^t_stat sim_rem_con_reset (DEVICE *dptr)$/;"	f
sim_rem_con_smp_collect_svc	sim_console.c	/^t_stat sim_rem_con_smp_collect_svc (UNIT *uptr)$/;"	f
sim_rem_con_temp_name	sim_console.c	/^static char sim_rem_con_temp_name[PATH_MAX+1];$/;"	v	file:
sim_rem_con_tmxr	sim_console.c	/^static TMXR sim_rem_con_tmxr = { 0, 0, 0, NULL, NULL, &sim_remote_console };\/* remote console line mux *\/$/;"	v	file:
sim_rem_consoles	sim_console.c	/^REMOTE *sim_rem_consoles = NULL;$/;"	v
sim_rem_getact	sim_console.c	/^static char *sim_rem_getact (int32 line, char *buf, int32 size)$/;"	f	file:
sim_rem_master_mode	sim_console.c	/^static t_bool sim_rem_master_mode = FALSE;  \/* Master Mode Enabled Flag *\/$/;"	v	file:
sim_rem_master_was_connected	sim_console.c	/^static t_bool sim_rem_master_was_connected = FALSE; \/* Master Mode has been connected *\/$/;"	v	file:
sim_rem_master_was_enabled	sim_console.c	/^static t_bool sim_rem_master_was_enabled = FALSE; \/* Master was Enabled *\/$/;"	v	file:
sim_rem_read_timeout	sim_console.c	/^static uint32 sim_rem_read_timeout = 30;    \/* seconds before automatic continue *\/$/;"	v	file:
sim_rem_record_reg_bit	sim_console.c	/^static void sim_rem_record_reg_bit (BITSAMPLE *bit, int val)$/;"	f	file:
sim_rem_repeat_cmd_setup	sim_console.c	/^static t_stat sim_rem_repeat_cmd_setup (int32 line, CONST char **iptr)$/;"	f	file:
sim_rem_sample_output	sim_console.c	/^static t_stat sim_rem_sample_output (FILE *st, int32 line)$/;"	f	file:
sim_rem_set_reg_bit	sim_console.c	/^static void sim_rem_set_reg_bit (BITSAMPLE *bit, int val)$/;"	f	file:
sim_rem_setact	sim_console.c	/^static void sim_rem_setact (int32 line, const char *action)$/;"	f	file:
sim_remote_console	sim_console.c	/^DEVICE sim_remote_console = {$/;"	v
sim_remote_process_command	sim_console.c	/^void sim_remote_process_command (void)$/;"	f
sim_rest	scp.c	/^t_stat sim_rest (FILE *rfile)$/;"	f
sim_rmdir	sim_fio.c	/^int sim_rmdir(const char *path)$/;"	f
sim_rom_delay	sim_timer.c	/^static uint32 sim_rom_delay = 0;$/;"	v	file:
sim_rom_read_with_delay	sim_timer.c	/^SIM_NOINLINE int32 sim_rom_read_with_delay (int32 val)$/;"	f
sim_rtc_calb	sim_timer.c	/^int32 sim_rtc_calb (uint32 ticksper)$/;"	f
sim_rtc_init	sim_timer.c	/^int32 sim_rtc_init (int32 time)$/;"	f
sim_rtcn_calb	sim_timer.c	/^int32 sim_rtcn_calb (uint32 ticksper, int32 tmr)$/;"	f
sim_rtcn_calb_tick	sim_timer.c	/^int32 sim_rtcn_calb_tick (int32 tmr)$/;"	f
sim_rtcn_calibrated_tmr	sim_timer.c	/^int32 sim_rtcn_calibrated_tmr (void)$/;"	f
sim_rtcn_get_time	sim_timer.c	/^void sim_rtcn_get_time (struct timespec *now, int tmr)$/;"	f
sim_rtcn_init	sim_timer.c	/^int32 sim_rtcn_init (int32 time, int32 tmr)$/;"	f
sim_rtcn_init_all	sim_timer.c	/^void sim_rtcn_init_all (void)$/;"	f
sim_rtcn_init_unit	sim_timer.c	/^int32 sim_rtcn_init_unit (UNIT *uptr, int32 time, int32 tmr)$/;"	f
sim_rtcn_init_unit_ticks	sim_timer.c	/^int32 sim_rtcn_init_unit_ticks (UNIT *uptr, int32 time, int32 tmr, int32 ticksper)$/;"	f
sim_rtcn_tick_ack	sim_timer.c	/^t_stat sim_rtcn_tick_ack (uint32 time, int32 tmr)$/;"	f
sim_rtcn_tick_size	sim_timer.c	/^int32 sim_rtcn_tick_size (int32 tmr)$/;"	f
sim_rtime	scp.c	/^static uint32 sim_rtime;$/;"	v	file:
sim_run_boot_prep	scp.c	/^t_stat sim_run_boot_prep (int32 flag)$/;"	f
sim_runlimit	scp.c	/^int32 sim_runlimit = 0;$/;"	v
sim_runlimit_d	scp.c	/^double sim_runlimit_d = 0.0;$/;"	v
sim_runlimit_d_initial	scp.c	/^double sim_runlimit_d_initial = 0.0;$/;"	v
sim_runlimit_dev	scp.c	/^DEVICE sim_runlimit_dev = {$/;"	v
sim_runlimit_enabled	scp.c	/^t_bool sim_runlimit_enabled = FALSE;$/;"	v
sim_runlimit_initial	scp.c	/^int32 sim_runlimit_initial = 0;$/;"	v
sim_runlimit_switches	scp.c	/^int32 sim_runlimit_switches = 0;$/;"	v
sim_runlimit_unit	scp.c	/^static UNIT sim_runlimit_unit = { UDATA (&runlimit_svc, UNIT_IDLE, 0) };$/;"	v	file:
sim_sa64	scp.c	/^static const char *sim_sa64 = "32b addresses";$/;"	v	file:
sim_sa64	scp.c	/^static const char *sim_sa64 = "64b addresses";$/;"	v	file:
sim_sanity_check_register_declarations	scp.c	/^static t_stat sim_sanity_check_register_declarations (DEVICE **devices)$/;"	f	file:
sim_save	scp.c	/^t_stat sim_save (FILE *sfile)$/;"	f
sim_savename	scp.c	/^const char *sim_savename = sim_name;      \/* Simulator Name used in SAVE\/RESTORE images *\/$/;"	v
sim_schaptr	scp.c	/^SCHTAB *sim_schaptr = FALSE;$/;"	v
sim_sched_step	scp.c	/^t_stat sim_sched_step (void)$/;"	f
sim_schrptr	scp.c	/^SCHTAB *sim_schrptr = FALSE;$/;"	v
sim_scp_description	scp.c	/^static const char *sim_scp_description (DEVICE *dptr)$/;"	f	file:
sim_scp_dev	scp.c	/^DEVICE sim_scp_dev = {$/;"	v
sim_scp_svc	scp.c	/^static t_stat sim_scp_svc (UNIT *uptr)$/;"	f	file:
sim_send_clear	scp.c	/^t_stat sim_send_clear (SEND *snd)$/;"	f
sim_send_input	scp.c	/^t_stat sim_send_input (SEND *snd, uint8 *data, size_t size, uint32 after, uint32 delay)$/;"	f
sim_send_poll_data	scp.c	/^t_bool sim_send_poll_data (SEND *snd, t_stat *stat)$/;"	f
sim_serial_devices	sim_serial.c	/^static int sim_serial_devices (int max, SERIAL_LIST *list)$/;"	f	file:
sim_serial_getdesc_byname	sim_serial.c	/^char* sim_serial_getdesc_byname (char* name, char* temp)$/;"	f
sim_serial_getname	sim_serial.c	/^static char* sim_serial_getname (int number, char* name)$/;"	f	file:
sim_serial_getname_bydesc	sim_serial.c	/^static char* sim_serial_getname_bydesc (char* desc, char* name)$/;"	f	file:
sim_serial_getname_byname	sim_serial.c	/^static char* sim_serial_getname_byname (char* name, char* temp)$/;"	f	file:
sim_serial_line_startup_cond	sim_tmxr.c	/^pthread_cond_t      sim_serial_line_startup_cond;$/;"	v
sim_serial_os_devices	sim_serial.c	/^static int sim_serial_os_devices (int max, SERIAL_LIST* list)$/;"	f	file:
sim_set_asynch	scp.c	/^t_stat sim_set_asynch (int32 flag, CONST char *cptr)$/;"	f
sim_set_cons_buff	sim_console.c	/^t_stat sim_set_cons_buff (int32 flg, CONST char *cptr)$/;"	f
sim_set_cons_debug	sim_console.c	/^t_stat sim_set_cons_debug (int32 flg, CONST char *cptr)$/;"	f
sim_set_cons_log	sim_console.c	/^t_stat sim_set_cons_log (int32 flg, CONST char *cptr)$/;"	f
sim_set_cons_nolog	sim_console.c	/^t_stat sim_set_cons_nolog (int32 flg, CONST char *cptr)$/;"	f
sim_set_cons_speed	sim_console.c	/^t_stat sim_set_cons_speed (int32 flag, CONST char *cptr)$/;"	f
sim_set_cons_unbuff	sim_console.c	/^t_stat sim_set_cons_unbuff (int32 flg, CONST char *cptr)$/;"	f
sim_set_console	sim_console.c	/^t_stat sim_set_console (int32 flag, CONST char *cptr)$/;"	f
sim_set_deb_switches	sim_console.c	/^int32 sim_set_deb_switches (int32 switches)$/;"	f
sim_set_deboff	sim_console.c	/^t_stat sim_set_deboff (int32 flag, CONST char *cptr)$/;"	f
sim_set_debon	sim_console.c	/^t_stat sim_set_debon (int32 flag, CONST char *cptr)$/;"	f
sim_set_delay	sim_console.c	/^static t_stat sim_set_delay (int32 flag, CONST char *cptr)$/;"	f	file:
sim_set_environment	scp.c	/^t_stat sim_set_environment (int32 flag, CONST char *cptr)$/;"	f
sim_set_expect	scp.c	/^t_stat sim_set_expect (EXPECT *exp, CONST char *cptr)$/;"	f
sim_set_fifo_nonblock	sim_fio.c	/^int sim_set_fifo_nonblock (FILE *fptr)$/;"	f
sim_set_file_times	sim_fio.c	/^t_stat sim_set_file_times (const char *file_name, time_t access_time, time_t write_time)$/;"	f
sim_set_fsize	sim_fio.c	/^int sim_set_fsize (FILE *fptr, t_addr size)$/;"	f
sim_set_halt	sim_console.c	/^static t_stat sim_set_halt (int32 flag, CONST char *cptr)$/;"	f	file:
sim_set_idle	sim_timer.c	/^t_stat sim_set_idle (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
sim_set_kmap	sim_console.c	/^t_stat sim_set_kmap (int32 flag, CONST char *cptr)$/;"	f
sim_set_logoff	sim_console.c	/^t_stat sim_set_logoff (int32 flag, CONST char *cptr)$/;"	f
sim_set_logon	sim_console.c	/^t_stat sim_set_logon (int32 flag, CONST char *cptr)$/;"	f
sim_set_memory_load_file	scp.c	/^t_stat sim_set_memory_load_file (const unsigned char *data, size_t size)$/;"	f
sim_set_noconsole_port	sim_console.c	/^t_stat sim_set_noconsole_port (void)$/;"	f
sim_set_noexpect	scp.c	/^t_stat sim_set_noexpect (EXPECT *exp, const char *cptr)$/;"	f
sim_set_noserial	sim_console.c	/^t_stat sim_set_noserial (int32 flag, CONST char *cptr)$/;"	f
sim_set_notelnet	sim_console.c	/^t_stat sim_set_notelnet (int32 flag, CONST char *cptr)$/;"	f
sim_set_pchar	sim_console.c	/^t_stat sim_set_pchar (int32 flag, CONST char *cptr)$/;"	f
sim_set_rem_bufsize	sim_console.c	/^static t_stat sim_set_rem_bufsize (int32 flag, CONST char *cptr)$/;"	f	file:
sim_set_rem_connections	sim_console.c	/^static t_stat sim_set_rem_connections (int32 flag, CONST char *cptr)$/;"	f	file:
sim_set_rem_master	sim_console.c	/^static t_stat sim_set_rem_master (int32 flag, CONST char *cptr)$/;"	f	file:
sim_set_rem_telnet	sim_console.c	/^static t_stat sim_set_rem_telnet (int32 flag, CONST char *cptr)$/;"	f	file:
sim_set_rem_timeout	sim_console.c	/^static t_stat sim_set_rem_timeout (int32 flag, CONST char *cptr)$/;"	f	file:
sim_set_remote_console	sim_console.c	/^t_stat sim_set_remote_console (int32 flag, CONST char *cptr)$/;"	f
sim_set_response	sim_console.c	/^static t_stat sim_set_response (int32 flag, CONST char *cptr)$/;"	f	file:
sim_set_rom_delay_factor	sim_timer.c	/^void sim_set_rom_delay_factor (uint32 delay)$/;"	f
sim_set_serial	sim_console.c	/^t_stat sim_set_serial (int32 flag, CONST char *cptr)$/;"	f
sim_set_stable_registers_state	sim_console.c	/^t_stat sim_set_stable_registers_state (void)$/;"	f
sim_set_telnet	sim_console.c	/^t_stat sim_set_telnet (int32 flag, CONST char *cptr)$/;"	f
sim_set_throt	sim_timer.c	/^t_stat sim_set_throt (int32 arg, CONST char *cptr)$/;"	f
sim_set_timers	sim_timer.c	/^t_stat sim_set_timers (int32 arg, CONST char *cptr)$/;"	f
sim_set_uname	scp.c	/^const char *sim_set_uname (UNIT *uptr, const char *uname)$/;"	f
sim_setnodelay	sim_sock.c	/^static int sim_setnodelay (SOCKET sock)$/;"	f	file:
sim_setnonblock	sim_sock.c	/^static int sim_setnonblock (SOCKET sock)$/;"	f	file:
sim_shmem_atomic_add	sim_fio.c	/^int32 sim_shmem_atomic_add (int32 *p, int32 v)$/;"	f
sim_shmem_atomic_cas	sim_fio.c	/^t_bool sim_shmem_atomic_cas (int32 *ptr, int32 oldv, int32 newv)$/;"	f
sim_shmem_close	sim_fio.c	/^void sim_shmem_close (SHMEM *shmem)$/;"	f
sim_shmem_open	sim_fio.c	/^t_stat sim_shmem_open (const char *name, size_t size, SHMEM **shmem, void **addr)$/;"	f
sim_show_asynch	scp.c	/^t_stat sim_show_asynch (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_clock_queues	sim_timer.c	/^t_stat sim_show_clock_queues (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_cons_buff	sim_console.c	/^t_stat sim_show_cons_buff (FILE *st, DEVICE *dunused, UNIT *uunused, int32 flag, CONST char *cptr)$/;"	f
sim_show_cons_debug	sim_console.c	/^t_stat sim_show_cons_debug (FILE *st, DEVICE *dunused, UNIT *uunused, int32 flag, CONST char *cptr)$/;"	f
sim_show_cons_expect	sim_console.c	/^t_stat sim_show_cons_expect (FILE *st, DEVICE *dunused, UNIT *uunused, int32 flag, CONST char *cptr)$/;"	f
sim_show_cons_log	sim_console.c	/^t_stat sim_show_cons_log (FILE *st, DEVICE *dunused, UNIT *uunused, int32 flag, CONST char *cptr)$/;"	f
sim_show_cons_send_input	sim_console.c	/^t_stat sim_show_cons_send_input (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_cons_speed	sim_console.c	/^t_stat sim_show_cons_speed (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_console	sim_console.c	/^t_stat sim_show_console (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_debug	sim_console.c	/^t_stat sim_show_debug (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_expect	scp.c	/^t_stat sim_show_expect (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_idle	sim_timer.c	/^t_stat sim_show_idle (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
sim_show_kmap	sim_console.c	/^t_stat sim_show_kmap (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_log	sim_console.c	/^t_stat sim_show_log (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_message	scp.c	/^int32 sim_show_message = 1;                         \/* the message display status of the currently open do file *\/$/;"	v
sim_show_pchar	sim_console.c	/^t_stat sim_show_pchar (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_remote_console	sim_console.c	/^t_stat sim_show_remote_console (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_send	scp.c	/^t_stat sim_show_send (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, CONST char *cptr)$/;"	f
sim_show_send_input	scp.c	/^t_stat sim_show_send_input (FILE *st, const SEND *snd)$/;"	f
sim_show_serial	sim_serial.c	/^t_stat sim_show_serial (FILE* st, DEVICE *dptr, UNIT* uptr, int32 val, CONST char* desc)$/;"	f
sim_show_telnet	sim_console.c	/^t_stat sim_show_telnet (FILE *st, DEVICE *dunused, UNIT *uunused, int32 flag, CONST char *cptr)$/;"	f
sim_show_throt	sim_timer.c	/^t_stat sim_show_throt (FILE *st, DEVICE *dnotused, UNIT *unotused, int32 flag, CONST char *cptr)$/;"	f
sim_show_timers	sim_timer.c	/^t_stat sim_show_timers (FILE* st, DEVICE *dptr, UNIT* uptr, int32 val, CONST char* desc)$/;"	f
sim_si64	scp.c	/^static const char *sim_si64 = "32b data";$/;"	v	file:
sim_si64	scp.c	/^static const char *sim_si64 = "64b data";$/;"	v	file:
sim_signaled_int_char	sim_console.c	/^t_bool sim_signaled_int_char                            \/* WRU character detected by signal while running *\/$/;"	v
sim_six_to_ascii	sim_card.c	/^const char          sim_six_to_ascii[64] = {$/;"	v
sim_slirp	slirp_glue/sim_slirp.c	/^struct sim_slirp {$/;"	s	file:
sim_slirp_attach_help	slirp_glue/sim_slirp.c	/^t_stat sim_slirp_attach_help(FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
sim_slirp_close	slirp_glue/sim_slirp.c	/^void sim_slirp_close (SLIRP *slirp)$/;"	f
sim_slirp_dispatch	slirp_glue/sim_slirp.c	/^void sim_slirp_dispatch (SLIRP *slirp)$/;"	f
sim_slirp_open	slirp_glue/sim_slirp.c	/^SLIRP *sim_slirp_open (const char *args, void *opaque, packet_callback callback, DEVICE *dptr, uint32 dbit, char *errbuf, size_t errbuf_size)$/;"	f
sim_slirp_select	slirp_glue/sim_slirp.c	/^int sim_slirp_select (SLIRP *slirp, int ms_timeout)$/;"	f
sim_slirp_send	slirp_glue/sim_slirp.c	/^int sim_slirp_send (SLIRP *slirp, const char *msg, size_t len, int flags)$/;"	f
sim_slirp_show	slirp_glue/sim_slirp.c	/^void sim_slirp_show (SLIRP *slirp, FILE *st)$/;"	f
sim_srand	scp.c	/^void sim_srand (unsigned int seed)$/;"	f
sim_staba	scp.c	/^static SCHTAB sim_staba;                                \/* Memory search specifier *\/$/;"	v	file:
sim_stabr	scp.c	/^static SCHTAB sim_stabr;                                \/* Register search specifier *\/$/;"	v	file:
sim_start_timer_services	sim_timer.c	/^void sim_start_timer_services (void)$/;"	f
sim_stat	sim_fio.c	/^int sim_stat (const char *fname, struct stat *stat_str)$/;"	f
sim_step	scp.c	/^int32 sim_step = 0;$/;"	v
sim_step_dev	scp.c	/^DEVICE sim_step_dev = {$/;"	v
sim_step_unit	scp.c	/^static UNIT sim_step_unit = { UDATA (&step_svc, UNIT_IDLE, 0) };$/;"	v	file:
sim_stop_dev	sim_timer.c	/^DEVICE sim_stop_dev = {$/;"	v
sim_stop_messages	PDP10/kx10_sys.c	/^const char *sim_stop_messages[SCPE_BASE] = {$/;"	v
sim_stop_sleep_ms	scp.c	/^static unsigned int sim_stop_sleep_ms = 250;$/;"	v	file:
sim_stop_time	sim_timer.c	/^static uint32 sim_stop_time = 0;                    \/* time when sim_stop_timer_services was called *\/$/;"	v	file:
sim_stop_timer_services	sim_timer.c	/^void sim_stop_timer_services (void)$/;"	f
sim_stop_unit	sim_timer.c	/^UNIT sim_stop_unit;                                     \/* Stop unit                         *\/$/;"	v
sim_strcasecmp	sim_fio.c	/^int sim_strcasecmp (const char *string1, const char *string2)$/;"	f
sim_string_to_stat	scp.c	/^t_stat sim_string_to_stat (const char *cptr, t_stat *stat)$/;"	f
sim_strlcat	sim_fio.c	/^size_t sim_strlcat(char *dst, const char *src, size_t size)$/;"	f
sim_strlcpy	sim_fio.c	/^size_t sim_strlcpy (char *dst, const char *src, size_t size)$/;"	f
sim_strncasecmp	sim_fio.c	/^int sim_strncasecmp (const char* string1, const char* string2, size_t len)$/;"	f
sim_strwhitecasecmp	sim_fio.c	/^int sim_strwhitecasecmp (const char *string1, const char *string2, t_bool casecmp)$/;"	f
sim_sub_args	scp.c	/^void sim_sub_args (char *instr, size_t instr_size, char *do_arg[])$/;"	f
sim_sub_instr	scp.c	/^char *sim_sub_instr = NULL;         \/* Copy of pre-substitution buffer contents *\/$/;"	v
sim_sub_instr_buf	scp.c	/^char *sim_sub_instr_buf = NULL;     \/* Buffer address that substitutions were saved in *\/$/;"	v
sim_sub_instr_off	scp.c	/^size_t *sim_sub_instr_off = NULL;   \/* offsets in substitution buffer where original data started *\/$/;"	v
sim_sub_instr_size	scp.c	/^size_t sim_sub_instr_size = 0;      \/* substitution buffer size *\/$/;"	v
sim_switch_number	scp.c	/^int32 sim_switch_number = 0;$/;"	v
sim_switches	scp.c	/^int32 sim_switches = 0;$/;"	v
sim_taddr_64	sim_fio.c	/^t_bool sim_taddr_64;                \/* t_addr is > 32b and Large File Support available *\/$/;"	v
sim_tape_add_ansi_entry	sim_tape.c	/^static void sim_tape_add_ansi_entry (const char *directory, $/;"	f	file:
sim_tape_add_debug	sim_tape.c	/^t_stat sim_tape_add_debug (DEVICE *dptr)$/;"	f
sim_tape_add_dos11_entry	sim_tape.c	/^static void sim_tape_add_dos11_entry (const char *directory,$/;"	f	file:
sim_tape_attach	sim_tape.c	/^t_stat sim_tape_attach (UNIT *uptr, CONST char *cptr)$/;"	f
sim_tape_attach_ex	sim_tape.c	/^t_stat sim_tape_attach_ex (UNIT *uptr, const char *cptr, uint32 dbit, int completion_delay)$/;"	f
sim_tape_attach_help	sim_tape.c	/^t_stat sim_tape_attach_help(FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
sim_tape_aws_wrdata	sim_tape.c	/^static t_stat sim_tape_aws_wrdata (UNIT *uptr, uint8 *buf, t_mtrlnt bc)$/;"	f	file:
sim_tape_bot	sim_tape.c	/^t_bool sim_tape_bot (UNIT *uptr)$/;"	f
sim_tape_clr_async	sim_tape.c	/^t_stat sim_tape_clr_async (UNIT *uptr)$/;"	f
sim_tape_data_trace	sim_tape.c	/^static void sim_tape_data_trace(UNIT *uptr, const uint8 *data, size_t len, const char* txt, int detail, uint32 reason)$/;"	f	file:
sim_tape_density_supported	sim_tape.c	/^t_stat sim_tape_density_supported (char *string, size_t string_size, int32 valid_bits)$/;"	f
sim_tape_detach	sim_tape.c	/^t_stat sim_tape_detach (UNIT *uptr)$/;"	f
sim_tape_eot	sim_tape.c	/^t_bool sim_tape_eot (UNIT *uptr)$/;"	f
sim_tape_errecf	sim_tape.c	/^t_stat sim_tape_errecf (UNIT *uptr, t_mtrlnt bc)$/;"	f
sim_tape_errecr	sim_tape.c	/^t_stat sim_tape_errecr (UNIT *uptr, t_mtrlnt bc)$/;"	f
sim_tape_error_text	sim_tape.c	/^const char *sim_tape_error_text (t_stat stat)$/;"	f	file:
sim_tape_fmt	sim_tape.c	/^static struct sim_tape_fmt {$/;"	s	file:
sim_tape_init	sim_tape.c	/^t_stat sim_tape_init (void)$/;"	f
sim_tape_ioerr	sim_tape.c	/^static t_stat sim_tape_ioerr (UNIT *uptr)$/;"	f	file:
sim_tape_position	sim_tape.c	/^t_stat sim_tape_position (UNIT *uptr, uint32 flags, uint32 recs, uint32 *recsskipped, uint32 files, uint32 *filesskipped, uint32 *objectsskipped)$/;"	f
sim_tape_position_a	sim_tape.c	/^t_stat sim_tape_position_a (UNIT *uptr, uint32 flags, uint32 recs, uint32 *recsskipped, uint32 files, uint32 *filesskipped, uint32 *objectsskipped, TAPE_PCALLBACK callback)$/;"	f
sim_tape_rdlntf	sim_tape.c	/^static t_stat sim_tape_rdlntf (UNIT *uptr, t_mtrlnt *bc)$/;"	f	file:
sim_tape_rdlntr	sim_tape.c	/^static t_stat sim_tape_rdlntr (UNIT *uptr, t_mtrlnt *bc)$/;"	f	file:
sim_tape_rdrecf	sim_tape.c	/^t_stat sim_tape_rdrecf (UNIT *uptr, uint8 *buf, t_mtrlnt *bc, t_mtrlnt max)$/;"	f
sim_tape_rdrecf_a	sim_tape.c	/^t_stat sim_tape_rdrecf_a (UNIT *uptr, uint8 *buf, t_mtrlnt *bc, t_mtrlnt max, TAPE_PCALLBACK callback)$/;"	f
sim_tape_rdrecr	sim_tape.c	/^t_stat sim_tape_rdrecr (UNIT *uptr, uint8 *buf, t_mtrlnt *bc, t_mtrlnt max)$/;"	f
sim_tape_rdrecr_a	sim_tape.c	/^t_stat sim_tape_rdrecr_a (UNIT *uptr, uint8 *buf, t_mtrlnt *bc, t_mtrlnt max, TAPE_PCALLBACK callback)$/;"	f
sim_tape_rdrlfwd	sim_tape.c	/^static t_stat sim_tape_rdrlfwd (UNIT *uptr, t_mtrlnt *bc)$/;"	f	file:
sim_tape_rdrlrev	sim_tape.c	/^static t_stat sim_tape_rdrlrev (UNIT *uptr, t_mtrlnt *bc)$/;"	f	file:
sim_tape_reset	sim_tape.c	/^t_stat sim_tape_reset (UNIT *uptr)$/;"	f
sim_tape_rewind	sim_tape.c	/^t_stat sim_tape_rewind (UNIT *uptr)$/;"	f
sim_tape_rewind_a	sim_tape.c	/^t_stat sim_tape_rewind_a (UNIT *uptr, TAPE_PCALLBACK callback)$/;"	f
sim_tape_seek	sim_tape.c	/^static int sim_tape_seek (UNIT *uptr, t_addr pos)$/;"	f	file:
sim_tape_set_async	sim_tape.c	/^t_stat sim_tape_set_async (UNIT *uptr, int latency)$/;"	f
sim_tape_set_capac	sim_tape.c	/^t_stat sim_tape_set_capac (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
sim_tape_set_dens	sim_tape.c	/^t_stat sim_tape_set_dens (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
sim_tape_set_fmt	sim_tape.c	/^t_stat sim_tape_set_fmt (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
sim_tape_show_capac	sim_tape.c	/^t_stat sim_tape_show_capac (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
sim_tape_show_dens	sim_tape.c	/^t_stat sim_tape_show_dens (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
sim_tape_show_fmt	sim_tape.c	/^t_stat sim_tape_show_fmt (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
sim_tape_size	sim_tape.c	/^static t_offset sim_tape_size (UNIT *uptr)$/;"	f	file:
sim_tape_spfilebyrecf	sim_tape.c	/^t_stat sim_tape_spfilebyrecf (UNIT *uptr, uint32 count, uint32 *skipped, uint32 *recsskipped, t_bool check_leot)$/;"	f
sim_tape_spfilebyrecf_a	sim_tape.c	/^t_stat sim_tape_spfilebyrecf_a (UNIT *uptr, uint32 count, uint32 *skipped, uint32 *recsskipped, t_bool check_leot, TAPE_PCALLBACK callback)$/;"	f
sim_tape_spfilebyrecr	sim_tape.c	/^t_stat sim_tape_spfilebyrecr (UNIT *uptr, uint32 count, uint32 *skipped, uint32 *recsskipped)$/;"	f
sim_tape_spfilebyrecr_a	sim_tape.c	/^t_stat sim_tape_spfilebyrecr_a (UNIT *uptr, uint32 count, uint32 *skipped, uint32 *recsskipped, TAPE_PCALLBACK callback)$/;"	f
sim_tape_spfilef	sim_tape.c	/^t_stat sim_tape_spfilef (UNIT *uptr, uint32 count, uint32 *skipped)$/;"	f
sim_tape_spfilef_a	sim_tape.c	/^t_stat sim_tape_spfilef_a (UNIT *uptr, uint32 count, uint32 *skipped, TAPE_PCALLBACK callback)$/;"	f
sim_tape_spfiler	sim_tape.c	/^t_stat sim_tape_spfiler (UNIT *uptr, uint32 count, uint32 *skipped)$/;"	f
sim_tape_spfiler_a	sim_tape.c	/^t_stat sim_tape_spfiler_a (UNIT *uptr, uint32 count, uint32 *skipped, TAPE_PCALLBACK callback)$/;"	f
sim_tape_sprecf	sim_tape.c	/^t_stat sim_tape_sprecf (UNIT *uptr, t_mtrlnt *bc)$/;"	f
sim_tape_sprecf_a	sim_tape.c	/^t_stat sim_tape_sprecf_a (UNIT *uptr, t_mtrlnt *bc, TAPE_PCALLBACK callback)$/;"	f
sim_tape_sprecr	sim_tape.c	/^t_stat sim_tape_sprecr (UNIT *uptr, t_mtrlnt *bc)$/;"	f
sim_tape_sprecr_a	sim_tape.c	/^t_stat sim_tape_sprecr_a (UNIT *uptr, t_mtrlnt *bc, TAPE_PCALLBACK callback)$/;"	f
sim_tape_sprecsf	sim_tape.c	/^t_stat sim_tape_sprecsf (UNIT *uptr, uint32 count, uint32 *skipped)$/;"	f
sim_tape_sprecsf_a	sim_tape.c	/^t_stat sim_tape_sprecsf_a (UNIT *uptr, uint32 count, uint32 *skipped, TAPE_PCALLBACK callback)$/;"	f
sim_tape_sprecsr	sim_tape.c	/^t_stat sim_tape_sprecsr (UNIT *uptr, uint32 count, uint32 *skipped)$/;"	f
sim_tape_sprecsr_a	sim_tape.c	/^t_stat sim_tape_sprecsr_a (UNIT *uptr, uint32 count, uint32 *skipped, TAPE_PCALLBACK callback)$/;"	f
sim_tape_test	sim_tape.c	/^t_stat sim_tape_test (DEVICE *dptr, const char *cptr)$/;"	f
sim_tape_test_classify_file_contents	sim_tape.c	/^static t_stat sim_tape_test_classify_file_contents (UNIT *uptr)$/;"	f	file:
sim_tape_test_create_tape_files	sim_tape.c	/^static t_stat sim_tape_test_create_tape_files (UNIT *uptr, const char *filename, int files, int records, int max_size)$/;"	f	file:
sim_tape_test_density_string	sim_tape.c	/^static t_stat sim_tape_test_density_string (void)$/;"	f	file:
sim_tape_test_process_tape_file	sim_tape.c	/^static t_stat sim_tape_test_process_tape_file (UNIT *uptr, const char *filename, const char *format, t_awslnt recsize)$/;"	f	file:
sim_tape_test_remove_tape_files	sim_tape.c	/^static t_stat sim_tape_test_remove_tape_files (UNIT *uptr, const char *filename)$/;"	f	file:
sim_tape_tpc_fnd	sim_tape.c	/^static t_addr sim_tape_tpc_fnd (UNIT *uptr, t_addr *map)$/;"	f	file:
sim_tape_tpc_map	sim_tape.c	/^static uint32 sim_tape_tpc_map (UNIT *uptr, t_addr *map, uint32 mapsize)$/;"	f	file:
sim_tape_validate_tape	sim_tape.c	/^static t_stat sim_tape_validate_tape (UNIT *uptr)$/;"	f	file:
sim_tape_wrdata	sim_tape.c	/^static t_stat sim_tape_wrdata (UNIT *uptr, uint32 dat)$/;"	f	file:
sim_tape_wreom	sim_tape.c	/^t_stat sim_tape_wreom (UNIT *uptr)$/;"	f
sim_tape_wreom_a	sim_tape.c	/^t_stat sim_tape_wreom_a (UNIT *uptr, TAPE_PCALLBACK callback)$/;"	f
sim_tape_wreomrw	sim_tape.c	/^t_stat sim_tape_wreomrw (UNIT *uptr)$/;"	f
sim_tape_wreomrw_a	sim_tape.c	/^t_stat sim_tape_wreomrw_a (UNIT *uptr, TAPE_PCALLBACK callback)$/;"	f
sim_tape_wrgap	sim_tape.c	/^t_stat sim_tape_wrgap (UNIT *uptr, uint32 gaplen)$/;"	f
sim_tape_wrgap_a	sim_tape.c	/^t_stat sim_tape_wrgap_a (UNIT *uptr, uint32 gaplen, TAPE_PCALLBACK callback)$/;"	f
sim_tape_wrp	sim_tape.c	/^t_bool sim_tape_wrp (UNIT *uptr)$/;"	f
sim_tape_wrrecf	sim_tape.c	/^t_stat sim_tape_wrrecf (UNIT *uptr, uint8 *buf, t_mtrlnt bc)$/;"	f
sim_tape_wrrecf_a	sim_tape.c	/^t_stat sim_tape_wrrecf_a (UNIT *uptr, uint8 *buf, t_mtrlnt bc, TAPE_PCALLBACK callback)$/;"	f
sim_tape_wrtmk	sim_tape.c	/^t_stat sim_tape_wrtmk (UNIT *uptr)$/;"	f
sim_tape_wrtmk_a	sim_tape.c	/^t_stat sim_tape_wrtmk_a (UNIT *uptr, TAPE_PCALLBACK callback)$/;"	f
sim_throt_cancel	sim_timer.c	/^void sim_throt_cancel (void)$/;"	f
sim_throt_cps	sim_timer.c	/^static double sim_throt_cps;$/;"	v	file:
sim_throt_delay	sim_timer.c	/^static uint32 sim_throt_delay = 3;$/;"	v	file:
sim_throt_drift_pct	sim_timer.c	/^static uint32 sim_throt_drift_pct = SIM_THROT_DRIFT_PCT_DFLT;$/;"	v	file:
sim_throt_inst_start	sim_timer.c	/^static double sim_throt_inst_start;$/;"	v	file:
sim_throt_ms_start	sim_timer.c	/^static uint32 sim_throt_ms_start = 0;$/;"	v	file:
sim_throt_ms_stop	sim_timer.c	/^static uint32 sim_throt_ms_stop = 0;$/;"	v	file:
sim_throt_peak_cps	sim_timer.c	/^static double sim_throt_peak_cps;$/;"	v	file:
sim_throt_sched	sim_timer.c	/^void sim_throt_sched (void)$/;"	f
sim_throt_sleep_time	sim_timer.c	/^static uint32 sim_throt_sleep_time = 0;$/;"	v	file:
sim_throt_state	sim_timer.c	/^static uint32 sim_throt_state = SIM_THROT_STATE_INIT;$/;"	v	file:
sim_throt_svc	sim_timer.c	/^t_stat sim_throt_svc (UNIT *uptr)$/;"	f
sim_throt_type	sim_timer.c	/^static uint32 sim_throt_type = 0;$/;"	v	file:
sim_throt_val	sim_timer.c	/^static uint32 sim_throt_val = 0;$/;"	v	file:
sim_throt_wait	sim_timer.c	/^static int32 sim_throt_wait = 0;$/;"	v	file:
sim_throttle_description	sim_timer.c	/^static const char *sim_throttle_description (DEVICE *dptr)$/;"	f	file:
sim_throttle_dev	sim_timer.c	/^DEVICE sim_throttle_dev = {$/;"	v
sim_throttle_reg	sim_timer.c	/^REG sim_throttle_reg[] = {$/;"	v
sim_throttle_unit	sim_timer.c	/^UNIT sim_throttle_unit;                                 \/* one for throttle *\/$/;"	v
sim_time	scp.c	/^static double sim_time;$/;"	v	file:
sim_time_at_sim_prompt	sim_timer.c	/^double sim_time_at_sim_prompt =  0;                 \/* time spent processing commands from sim> prompt *\/$/;"	v
sim_timenow_double	sim_timer.c	/^double sim_timenow_double (void)$/;"	f
sim_timer_activate	sim_timer.c	/^t_stat sim_timer_activate (UNIT *uptr, int32 interval)$/;"	f
sim_timer_activate_after	sim_timer.c	/^t_stat sim_timer_activate_after (UNIT *uptr, double usec_delay)$/;"	f
sim_timer_activate_time_usecs	sim_timer.c	/^double sim_timer_activate_time_usecs (UNIT *uptr)$/;"	f
sim_timer_cancel	sim_timer.c	/^t_bool sim_timer_cancel (UNIT *uptr)$/;"	f
sim_timer_change_asynch	sim_timer.c	/^t_stat sim_timer_change_asynch (void)$/;"	f
sim_timer_clock_reset	sim_timer.c	/^static t_stat sim_timer_clock_reset (DEVICE *dptr)$/;"	f	file:
sim_timer_clock_tick_svc	sim_timer.c	/^static t_stat sim_timer_clock_tick_svc (UNIT *uptr)$/;"	f	file:
sim_timer_debug	sim_timer.c	/^DEBTAB sim_timer_debug[] = {$/;"	v
sim_timer_description	sim_timer.c	/^static const char *sim_timer_description (DEVICE *dptr)$/;"	f	file:
sim_timer_dev	sim_timer.c	/^DEVICE sim_timer_dev = {$/;"	v
sim_timer_exit	sim_timer.c	/^void sim_timer_exit (void)$/;"	f
sim_timer_idle_capable	sim_timer.c	/^t_bool sim_timer_idle_capable (uint32 *host_ms_sleep_1, uint32 *host_tick_ms)$/;"	f
sim_timer_init	sim_timer.c	/^t_bool sim_timer_init (void)$/;"	f
sim_timer_inst_per_sec	sim_timer.c	/^double sim_timer_inst_per_sec (void)$/;"	f
sim_timer_is_active	sim_timer.c	/^t_bool sim_timer_is_active (UNIT *uptr)$/;"	f
sim_timer_lock	scp.c	/^pthread_mutex_t sim_timer_lock     = PTHREAD_MUTEX_INITIALIZER;$/;"	v
sim_timer_mod	sim_timer.c	/^MTAB sim_timer_mod[] = {$/;"	v
sim_timer_precalibrate_execution_rate	sim_timer.c	/^void sim_timer_precalibrate_execution_rate (void)$/;"	f
sim_timer_reg	sim_timer.c	/^REG sim_timer_reg[] = {$/;"	v
sim_timer_set_async	sim_timer.c	/^t_stat sim_timer_set_async (int32 flag, CONST char *cptr)$/;"	f
sim_timer_set_catchup	sim_timer.c	/^t_stat sim_timer_set_catchup (int32 flag, CONST char *cptr)$/;"	f
sim_timer_set_idle_pct	sim_timer.c	/^t_stat sim_timer_set_idle_pct (int32 flag, CONST char *cptr)$/;"	f
sim_timer_set_stop	sim_timer.c	/^t_stat sim_timer_set_stop (int32 flag, CONST char *cptr)$/;"	f
sim_timer_show_catchup	sim_timer.c	/^t_stat sim_timer_show_catchup (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
sim_timer_startup_cond	sim_timer.c	/^pthread_cond_t      sim_timer_startup_cond;$/;"	v
sim_timer_stop_svc	sim_timer.c	/^t_stat sim_timer_stop_svc (UNIT *uptr)$/;"	f
sim_timer_stop_time	sim_timer.c	/^static double sim_timer_stop_time = 0;$/;"	v	file:
sim_timer_thread	sim_timer.c	/^pthread_t           sim_timer_thread;           \/* Wall Clock Timing Thread Id *\/$/;"	v
sim_timer_thread_running	sim_timer.c	/^t_bool              sim_timer_thread_running = FALSE;$/;"	v
sim_timer_tick_svc	sim_timer.c	/^t_stat sim_timer_tick_svc (UNIT *uptr)$/;"	f
sim_timer_units	sim_timer.c	/^UNIT sim_timer_units[SIM_NTIMERS+1];\/* Clock assist units                         *\/$/;"	v
sim_timer_wake	scp.c	/^pthread_cond_t sim_timer_wake      = PTHREAD_COND_INITIALIZER;$/;"	v
sim_timespec_compare	sim_timer.c	/^static int sim_timespec_compare (struct timespec *a, struct timespec *b)$/;"	f	file:
sim_timespec_diff	sim_timer.c	/^sim_timespec_diff (struct timespec *diff, struct timespec *min, struct timespec *sub)$/;"	f
sim_tmxr_poll_cond	scp.c	/^pthread_cond_t sim_tmxr_poll_cond  = PTHREAD_COND_INITIALIZER;$/;"	v
sim_tmxr_poll_cond	sim_tmxr.c	/^pthread_cond_t      sim_tmxr_poll_cond;$/;"	v
sim_tmxr_poll_count	scp.c	/^int32 sim_tmxr_poll_count;$/;"	v
sim_tmxr_poll_count	sim_tmxr.c	/^int32               sim_tmxr_poll_count = 0;$/;"	v
sim_tmxr_poll_lock	scp.c	/^pthread_mutex_t sim_tmxr_poll_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
sim_tmxr_poll_lock	sim_tmxr.c	/^pthread_mutex_t     sim_tmxr_poll_lock;$/;"	v
sim_tmxr_poll_running	sim_tmxr.c	/^t_bool              sim_tmxr_poll_running = FALSE;$/;"	v
sim_tmxr_poll_thread	sim_tmxr.c	/^pthread_t           sim_tmxr_poll_thread;          \/* Polling Thread Id *\/$/;"	v
sim_tmxr_serial_poll_thread	sim_tmxr.c	/^pthread_t           sim_tmxr_serial_poll_thread;   \/* Serial Polling Thread Id *\/$/;"	v
sim_tmxr_serial_startup_cond	sim_tmxr.c	/^pthread_cond_t      sim_tmxr_serial_startup_cond;$/;"	v
sim_tmxr_startup_cond	sim_tmxr.c	/^pthread_cond_t      sim_tmxr_startup_cond;$/;"	v
sim_tmxr_test_lnorder	sim_tmxr.c	/^static t_stat sim_tmxr_test_lnorder (TMXR *tmxr)$/;"	f	file:
sim_toffset_64	sim_fio.c	/^t_bool sim_toffset_64;              \/* Large File (>2GB) file I\/O Support available *\/$/;"	v
sim_tolower	sim_fio.c	/^int sim_tolower (int c)$/;"	f
sim_toupper	sim_fio.c	/^int sim_toupper (int c)$/;"	f
sim_trim_endspc	sim_fio.c	/^char *sim_trim_endspc (char *cptr)$/;"	f
sim_tt_inpcvt	sim_console.c	/^int32 sim_tt_inpcvt (int32 c, uint32 mode)$/;"	f
sim_tt_outcvt	sim_console.c	/^int32 sim_tt_outcvt (int32 c, uint32 mode)$/;"	f
sim_tt_pchar	sim_console.c	/^int32 sim_tt_pchar = 0x00002780;$/;"	v
sim_tt_set_mode	sim_console.c	/^t_stat sim_tt_set_mode (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
sim_tt_set_parity	sim_console.c	/^t_stat sim_tt_set_parity (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
sim_tt_settabs	sim_console.c	/^t_stat sim_tt_settabs (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
sim_tt_show_modepar	sim_console.c	/^t_stat sim_tt_show_modepar (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
sim_tt_showtabs	sim_console.c	/^t_stat sim_tt_showtabs (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
sim_ttclose	sim_console.c	/^t_stat sim_ttclose (void)$/;"	f
sim_ttcmd	sim_console.c	/^t_stat sim_ttcmd (void)$/;"	f
sim_ttinit	sim_console.c	/^t_stat sim_ttinit (void)$/;"	f
sim_ttisatty	sim_console.c	/^t_bool sim_ttisatty (void)$/;"	f
sim_ttrun	sim_console.c	/^t_stat sim_ttrun (void)$/;"	f
sim_type_entry	scp.c	/^static void sim_type_entry (const char *directory, $/;"	f	file:
sim_type_file_offset	scp.c	/^static long sim_type_file_offset;$/;"	v	file:
sim_type_line_count	scp.c	/^static long sim_type_line_count;$/;"	v	file:
sim_uname	scp.c	/^const char *sim_uname (UNIT *uptr)$/;"	f
sim_vax_snprintf	sim_fio.c	/^int sim_vax_snprintf(char *buf, size_t buf_size, const char *fmt, ...)$/;"	f
sim_vhd_disk_clearerr	sim_disk.c	/^static t_stat sim_vhd_disk_clearerr (UNIT *uptr)$/;"	f	file:
sim_vhd_disk_close	sim_disk.c	/^static int sim_vhd_disk_close (FILE *f)$/;"	f	file:
sim_vhd_disk_create	sim_disk.c	/^static FILE *sim_vhd_disk_create (const char *szVHDPath, t_offset desiredsize)$/;"	f	file:
sim_vhd_disk_create_diff	sim_disk.c	/^static FILE *sim_vhd_disk_create_diff (const char *szVHDPath, const char *szParentVHDPath)$/;"	f	file:
sim_vhd_disk_flush	sim_disk.c	/^static void sim_vhd_disk_flush (FILE *f)$/;"	f	file:
sim_vhd_disk_get_dtype	sim_disk.c	/^static const char *sim_vhd_disk_get_dtype (FILE *f, uint32 *SectorSize, uint32 *xfer_element_size, char sim_name[64], time_t *creation_time)$/;"	f	file:
sim_vhd_disk_implemented	sim_disk.c	/^static t_stat sim_vhd_disk_implemented (void)$/;"	f	file:
sim_vhd_disk_merge	sim_disk.c	/^static FILE *sim_vhd_disk_merge (const char *szVHDPath, char **ParentVHD)$/;"	f	file:
sim_vhd_disk_open	sim_disk.c	/^static FILE *sim_vhd_disk_open (const char *szVHDPath, const char *DesiredAccess)$/;"	f	file:
sim_vhd_disk_open	sim_disk.c	/^static FILE *sim_vhd_disk_open (const char *vhdfilename, const char *openmode)$/;"	f	file:
sim_vhd_disk_rdsect	sim_disk.c	/^static t_stat sim_vhd_disk_rdsect (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectsread, t_seccnt sects)$/;"	f	file:
sim_vhd_disk_set_dtype	sim_disk.c	/^static t_stat sim_vhd_disk_set_dtype (FILE *f, const char *dtype)$/;"	f	file:
sim_vhd_disk_set_dtype	sim_disk.c	/^static t_stat sim_vhd_disk_set_dtype (FILE *f, const char *dtype, uint32 SectorSize, uint32 xfer_element_size)$/;"	f	file:
sim_vhd_disk_size	sim_disk.c	/^static t_offset sim_vhd_disk_size (FILE *f)$/;"	f	file:
sim_vhd_disk_wrsect	sim_disk.c	/^static t_stat sim_vhd_disk_wrsect (UNIT *uptr, t_lba lba, uint8 *buf, t_seccnt *sectswritten, t_seccnt sects)$/;"	f	file:
sim_vm_cmd	scp.c	/^CTAB *sim_vm_cmd = NULL;$/;"	v
sim_vm_fprint_addr	scp.c	/^void (*sim_vm_fprint_addr) (FILE *st, DEVICE *dptr, t_addr addr) = NULL;$/;"	v
sim_vm_fprint_stopped	scp.c	/^t_bool (*sim_vm_fprint_stopped) (FILE *st, t_stat reason) = NULL;$/;"	v
sim_vm_initial_ips	sim_timer.c	/^int32 sim_vm_initial_ips = SIM_INITIAL_IPS;$/;"	v
sim_vm_interval_units	scp.c	/^const char *sim_vm_interval_units = "instructions";     \/* Simulator can change to "cycles" as needed *\/$/;"	v
sim_vm_is_subroutine_call	scp.c	/^t_bool (*sim_vm_is_subroutine_call) (t_addr **ret_addrs) = NULL;$/;"	v
sim_vm_parse_addr	scp.c	/^t_addr (*sim_vm_parse_addr) (DEVICE *dptr, CONST char *cptr, CONST char **tptr) = NULL;$/;"	v
sim_vm_pc_value	scp.c	/^t_value (*sim_vm_pc_value) (void) = NULL;$/;"	v
sim_vm_post	scp.c	/^void (*sim_vm_post) (t_bool from_scp) = NULL;$/;"	v
sim_vm_read	scp.c	/^char* (*sim_vm_read) (char *ptr, int32 size, FILE *stream) = NULL;$/;"	v
sim_vm_reg_update	scp.c	/^void (*sim_vm_reg_update) (REG *rptr, uint32 idx, t_value prev_val, t_value new_val) = NULL;$/;"	v
sim_vm_release	scp.c	/^const char *sim_vm_release = NULL;$/;"	v
sim_vm_release_message	scp.c	/^const char *sim_vm_release_message = NULL;$/;"	v
sim_vm_sprint_addr	scp.c	/^void (*sim_vm_sprint_addr) (char *buf, DEVICE *dptr, t_addr addr) = NULL;$/;"	v
sim_vm_step_unit	scp.c	/^const char *sim_vm_step_unit = "instruction";           \/* Simulator can change *\/$/;"	v
sim_wallclock_entry	sim_timer.c	/^UNIT * volatile sim_wallclock_entry = NULL;$/;"	v
sim_wallclock_queue	sim_timer.c	/^UNIT * volatile sim_wallclock_queue = QUEUE_LIST_END;$/;"	v
sim_write_serial	sim_serial.c	/^int32 sim_write_serial (SERHANDLE port, char *buffer, int32 count)$/;"	f
sim_write_sock	sim_sock.c	/^int sim_write_sock (SOCKET sock, char *msg, int nbytes)$/;"	f
sim_write_sock	sim_sock.c	/^int sim_write_sock (SOCKET sock, const char *msg, int nbytes)$/;"	f
simh_disk_footer	sim_disk.c	/^struct simh_disk_footer {$/;"	s	file:
simh_help	scp.c	/^static char *simh_help = NULL;  \/* First invocation of HELP command appends the help pieces *\/$/;"	v	file:
simh_help1	scp.c	/^static const char simh_help1[] =$/;"	v	file:
simh_help2	scp.c	/^static const char simh_help2[] =$/;"	v	file:
simulation_time	sim_frontpanel.c	/^    unsigned long long      simulation_time;$/;"	m	struct:PANEL	file:
simulation_time_base	sim_frontpanel.c	/^    unsigned long long      simulation_time_base;$/;"	m	struct:PANEL	file:
simulator_version	sim_frontpanel.c	/^    char                    *simulator_version;$/;"	m	struct:PANEL	file:
single_mode	sim_console.c	/^    t_bool          single_mode;$/;"	m	struct:REMOTE	file:
sipaddr	PDP10/kl10_nia.c	/^    in_addr_T           sipaddr;$/;"	m	struct:arp_hdr	file:
sipaddr	PDP10/kx10_imp.c	/^    in_addr_T           sipaddr;$/;"	m	struct:arp_hdr	file:
size	PDP10/kx10_dp.c	/^    int32       size;                                   \/* #blocks *\/$/;"	m	struct:drvtyp	file:
size	PDP10/kx10_rc.c	/^    int32       size;                                   \/* #blocks *\/$/;"	m	struct:drvtyp	file:
size	PDP10/kx10_rp.c	/^    int32       size;                                   \/* #blocks *\/$/;"	m	struct:drvtyp	file:
size	PDP10/kx10_rs.c	/^    int32       size;                                   \/* #blocks *\/$/;"	m	struct:drvtyp	file:
size	scp.c	/^    int size;$/;"	m	struct:Stack	file:
size	scp.c	/^    size_t size;$/;"	m	struct:MFILE	file:
size	sim_card.c	/^   int                   size;                \/* Size of last card read *\/$/;"	m	struct:_card_buffer	file:
size	sim_defs.h	/^    int32               size;                           \/* count of match rules *\/$/;"	m	struct:EXPECT
size	sim_defs.h	/^    size_t              size;                        \/* size *\/$/;"	m	struct:MEMFILE
size	sim_defs.h	/^    uint32              size;                           \/* match string size *\/$/;"	m	struct:EXPTAB
size	sim_frontpanel.c	/^    size_t size;$/;"	m	struct:__anon22	file:
size	sim_tape.c	/^    uint32 size;$/;"	m	struct:TAPE_RECORD	file:
size	sim_tmxr.h	/^    int32               size;$/;"	m	struct:loopbuf
size_colors	display/sim_ws.c	/^static uint32 ncolors = 0, size_colors = 0;$/;"	v	file:
size_map	scp.c	/^const size_t size_map[] = { sizeof (int8),$/;"	v
skip_crlf_line_endings	sim_tape.c	/^    int                 skip_crlf_line_endings;$/;"	m	struct:ansi_tape_parameters	file:
skip_lf_line_endings	sim_tape.c	/^    int                 skip_lf_line_endings;$/;"	m	struct:ansi_tape_parameters	file:
skip_start	display/vt11.c	/^static unsigned char skip_start = 0;    \/* set between vis. char.\/arc strokes *\/$/;"	v	file:
slave_attach	PDP10/pdp6_slave.c	/^static t_stat slave_attach (UNIT *uptr, CONST char *cptr)$/;"	f	file:
slave_attach_help	PDP10/pdp6_slave.c	/^static t_stat slave_attach_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f	file:
slave_debug	PDP10/pdp6_slave.c	/^static DEBTAB slave_debug[] = {$/;"	v	file:
slave_desc	PDP10/pdp6_slave.c	/^static TMXR slave_desc = { 1, 0, 0, &slave_ldsc };      \/* mux descriptor *\/$/;"	v	file:
slave_description	PDP10/pdp6_slave.c	/^static const char *slave_description (DEVICE *dptr)$/;"	f	file:
slave_detach	PDP10/pdp6_slave.c	/^static t_stat slave_detach (UNIT *uptr)$/;"	f	file:
slave_dev	PDP10/pdp6_slave.c	/^DEVICE slave_dev = {$/;"	v
slave_devio	PDP10/pdp6_slave.c	/^t_stat slave_devio(uint32 dev, uint64 *data)$/;"	f
slave_ldsc	PDP10/pdp6_slave.c	/^static TMLN slave_ldsc;                                 \/* line descriptor *\/$/;"	v	file:
slave_mod	PDP10/pdp6_slave.c	/^static MTAB slave_mod[] = {$/;"	v	file:
slave_reg	PDP10/pdp6_slave.c	/^static REG slave_reg[] = {$/;"	v	file:
slave_reset	PDP10/pdp6_slave.c	/^static t_stat slave_reset (DEVICE *dptr)$/;"	f	file:
slave_svc	PDP10/pdp6_slave.c	/^static t_stat slave_svc (UNIT *uptr)$/;"	f	file:
slave_unit	PDP10/pdp6_slave.c	/^UNIT slave_unit[1] = {$/;"	v
slave_valid	PDP10/pdp6_slave.c	/^static uint8  slave_valid[040000];$/;"	v	file:
sleep	sim_frontpanel.c	67;"	d	file:
sleep1Samples	sim_timer.c	246;"	d	file:
sleep_cmd	scp.c	/^t_stat sleep_cmd (int32 flag, CONST char *cptr)$/;"	f
slirp	slirp/mbuf.h	/^        Slirp *slirp;$/;"	m	struct:mbuf
slirp	slirp/socket.h	/^  Slirp *slirp;                    \/* managing slirp instance *\/$/;"	m	struct:socket
slirp	slirp/tftp.h	/^    Slirp *slirp;$/;"	m	struct:tftp_session
slirp	slirp_glue/sim_slirp.c	/^    Slirp *slirp;$/;"	m	struct:sim_slirp	file:
slirp_add_exec	slirp/slirp.c	/^int slirp_add_exec(Slirp *slirp, int do_pty, const void *args,$/;"	f
slirp_add_hostfwd	slirp/slirp.c	/^int slirp_add_hostfwd(Slirp *slirp, int is_udp, struct in_addr host_addr,$/;"	f
slirp_bootp_load	slirp/slirp.c	/^static void slirp_bootp_load(QEMUFile *f, Slirp *slirp)$/;"	f	file:
slirp_bootp_save	slirp/slirp.c	/^static void slirp_bootp_save(QEMUFile *f, Slirp *slirp)$/;"	f	file:
slirp_cleanup	slirp/slirp.c	/^void slirp_cleanup(Slirp *slirp)$/;"	f
slirp_connection_info	slirp/misc.c	/^void slirp_connection_info(Slirp *slirp, Monitor *mon)$/;"	f
slirp_dbit	slirp_glue/sim_slirp.c	/^uint32 slirp_dbit;$/;"	v
slirp_debug	slirp/misc.c	/^int slirp_debug =$/;"	v
slirp_dptr	slirp_glue/sim_slirp.c	/^DEVICE *slirp_dptr;$/;"	v
slirp_find_ctl_socket	slirp/slirp.c	/^slirp_find_ctl_socket(Slirp *slirp, struct in_addr guest_addr, int guest_port)$/;"	f	file:
slirp_init	slirp/slirp.c	/^Slirp *slirp_init(int restricted, struct in_addr vnetwork,$/;"	f
slirp_init_once	slirp/slirp.c	/^static void slirp_init_once(void)$/;"	f	file:
slirp_input	slirp/slirp.c	/^void slirp_input(Slirp *slirp, const uint8_t *pkt, int pkt_len)$/;"	f
slirp_output	slirp_glue/sim_slirp.c	/^void slirp_output (void *opaque, const uint8_t *pkt, int pkt_len)$/;"	f
slirp_pollfds_fill	slirp/slirp.c	/^void slirp_pollfds_fill(GArray *pollfds, uint32_t *timeout)$/;"	f
slirp_pollfds_poll	slirp/slirp.c	/^void slirp_pollfds_poll(GArray *pollfds, int select_error)$/;"	f
slirp_remove_hostfwd	slirp/slirp.c	/^int slirp_remove_hostfwd(Slirp *slirp, int is_udp, struct in_addr host_addr,$/;"	f
slirp_sbuf_load	slirp/slirp.c	/^static int slirp_sbuf_load(QEMUFile *f, struct sbuf *sbuf)$/;"	f	file:
slirp_sbuf_save	slirp/slirp.c	/^static void slirp_sbuf_save(QEMUFile *f, struct sbuf *sbuf)$/;"	f	file:
slirp_send	slirp/slirp.c	/^ssize_t slirp_send(struct socket *so, const void *buf, size_t len, int flags)$/;"	f
slirp_socket_can_recv	slirp/slirp.c	/^size_t slirp_socket_can_recv(Slirp *slirp, struct in_addr guest_addr,$/;"	f
slirp_socket_load	slirp/slirp.c	/^static int slirp_socket_load(QEMUFile *f, struct socket *so)$/;"	f	file:
slirp_socket_recv	slirp/slirp.c	/^void slirp_socket_recv(Slirp *slirp, struct in_addr guest_addr, int guest_port,$/;"	f
slirp_socket_save	slirp/slirp.c	/^static void slirp_socket_save(QEMUFile *f, struct socket *so)$/;"	f	file:
slirp_state_load	slirp/slirp.c	/^static int slirp_state_load(QEMUFile *f, void *opaque, int version_id)$/;"	f	file:
slirp_state_save	slirp/slirp.c	/^static void slirp_state_save(QEMUFile *f, void *opaque)$/;"	f	file:
slirp_tcp_load	slirp/slirp.c	/^static void slirp_tcp_load(QEMUFile *f, struct tcpcb *tp)$/;"	f	file:
slirp_tcp_save	slirp/slirp.c	/^static void slirp_tcp_save(QEMUFile *f, struct tcpcb *tp)$/;"	f	file:
slirp_update_timeout	slirp/slirp.c	/^static void slirp_update_timeout(uint32_t *timeout)$/;"	f	file:
slirp_write_request	slirp_glue/sim_slirp.c	/^struct slirp_write_request {$/;"	s	file:
small_user	PDP10/kx10_cpu.c	/^int     small_user;                           \/* Small user flag *\/$/;"	v
smp_reg_count	sim_console.c	/^    uint32          smp_reg_count;          \/* sample register count *\/$/;"	m	struct:REMOTE	file:
smp_regs	sim_console.c	/^    BITSAMPLE_REG   *smp_regs;              \/* registers being sampled *\/$/;"	m	struct:REMOTE	file:
smp_sample_dither_pct	sim_console.c	/^    int             smp_sample_dither_pct;  \/* dithering of cycles interval *\/$/;"	m	struct:REMOTE	file:
smp_sample_interval	sim_console.c	/^    int             smp_sample_interval;    \/* cycles between samples *\/$/;"	m	struct:REMOTE	file:
sname	PDP10/kx10_imp.c	/^    uint8             sname[DHCP_SNAME_LEN];$/;"	m	struct:dhcp	file:
snd_buff	PDP10/kl10_nia.c	/^    ETH_PACK          snd_buff;                \/* Buffer for sending packet *\/$/;"	m	struct:nia_device	file:
snd_cwnd	slirp/tcp_var.h	/^        uint32_t snd_cwnd;              \/* congestion-controlled window *\/$/;"	m	struct:tcpcb
snd_max	slirp/tcp_var.h	/^        tcp_seq snd_max;                \/* highest sequence number sent;$/;"	m	struct:tcpcb
snd_nxt	slirp/tcp_var.h	/^        tcp_seq snd_nxt;                \/* send next *\/$/;"	m	struct:tcpcb
snd_scale	slirp/tcp_var.h	/^        u_char  snd_scale;              \/* window scaling for send window *\/$/;"	m	struct:tcpcb
snd_ssthresh	slirp/tcp_var.h	/^        uint32_t snd_ssthresh;          \/* snd_cwnd size threshold for$/;"	m	struct:tcpcb
snd_una	slirp/tcp_var.h	/^        tcp_seq snd_una;                \/* send unacknowledged *\/$/;"	m	struct:tcpcb
snd_up	slirp/tcp_var.h	/^        tcp_seq snd_up;                 \/* send urgent pointer *\/$/;"	m	struct:tcpcb
snd_wl1	slirp/tcp_var.h	/^        tcp_seq snd_wl1;                \/* window update seg seq number *\/$/;"	m	struct:tcpcb
snd_wl2	slirp/tcp_var.h	/^        tcp_seq snd_wl2;                \/* window update seg ack number *\/$/;"	m	struct:tcpcb
snd_wnd	slirp/tcp_var.h	/^        uint32_t snd_wnd;               \/* send window *\/$/;"	m	struct:tcpcb
snprintf	sim_BuildROMs.c	90;"	d	file:
snprintf	sim_defs.h	117;"	d
snprintf	sim_defs.h	121;"	d
snprintf	slirp_glue/config-host.h	27;"	d
so_emu	slirp/socket.h	/^  uint8_t       so_emu;         \/* Is the socket emulated? *\/$/;"	m	struct:socket
so_expire	slirp/socket.h	/^  u_int so_expire;              \/* When the socket will expire *\/$/;"	m	struct:socket
so_faddr	slirp/socket.h	/^  struct in_addr so_faddr;         \/* foreign host table entry *\/$/;"	m	struct:socket	typeref:struct:socket::in_addr
so_flag	display/vt11.c	/^static unsigned char so_flag = 0;       \/* 1 bit: illegal char. in SO mode *\/$/;"	v	file:
so_fport	slirp/socket.h	/^  uint16_t so_fport;               \/* foreign port *\/$/;"	m	struct:socket
so_iptos	slirp/socket.h	/^  uint8_t       so_iptos;       \/* Type of service *\/$/;"	m	struct:socket
so_laddr	slirp/socket.h	/^  struct in_addr so_laddr;         \/* local host table entry *\/$/;"	m	struct:socket	typeref:struct:socket::in_addr
so_lport	slirp/socket.h	/^  uint16_t so_lport;               \/* local port *\/$/;"	m	struct:socket
so_m	slirp/socket.h	/^  struct mbuf *so_m;               \/* Pointer to the original SYN packet,$/;"	m	struct:socket	typeref:struct:socket::mbuf
so_next	slirp/socket.h	/^  struct socket *so_next,*so_prev;      \/* For a linked list of sockets *\/$/;"	m	struct:socket	typeref:struct:socket::socket
so_nqueued	slirp/socket.h	/^  int   so_nqueued;             \/* Number of packets queued in a row$/;"	m	struct:socket
so_prev	slirp/socket.h	/^  struct socket *so_next,*so_prev;      \/* For a linked list of sockets *\/$/;"	m	struct:socket	typeref:struct:socket::
so_queued	slirp/socket.h	/^  int   so_queued;              \/* Number of packets queued from this socket *\/$/;"	m	struct:socket
so_rcv	slirp/socket.h	/^  struct sbuf so_rcv;           \/* Receive buffer *\/$/;"	m	struct:socket	typeref:struct:socket::sbuf
so_snd	slirp/socket.h	/^  struct sbuf so_snd;           \/* Send buffer *\/$/;"	m	struct:socket	typeref:struct:socket::sbuf
so_state	slirp/socket.h	/^  int   so_state;               \/* internal state flags SS_*, below *\/$/;"	m	struct:socket
so_tcpcb	slirp/socket.h	/^  struct        tcpcb *so_tcpcb;        \/* pointer to TCP protocol control block *\/$/;"	m	struct:socket	typeref:struct:socket::tcpcb
so_ti	slirp/socket.h	/^  struct tcpiphdr *so_ti;          \/* Pointer to the original ti within$/;"	m	struct:socket	typeref:struct:socket::tcpiphdr
so_type	slirp/socket.h	/^  u_char        so_type;                \/* Type of socket, UDP or TCP *\/$/;"	m	struct:socket
so_urgc	slirp/socket.h	/^  int so_urgc;$/;"	m	struct:socket
sock	sim_frontpanel.c	/^    SOCKET                  sock;$/;"	m	struct:PANEL	file:
sock	sim_tmxr.h	/^    SOCKET              sock;                           \/* connection socket *\/$/;"	m	struct:tmln
sock_errors	sim_sock.c	/^    } sock_errors[] = {$/;"	v	typeref:struct:sock_errors	file:
sock_errors	sim_sock.c	/^static struct sock_errors {$/;"	s	file:
sockaddr_storage	sim_sock.h	105;"	d
socket	slirp/socket.h	/^struct socket {$/;"	s
socket_error	slirp_glue/qemu/sockets.h	10;"	d
socket_error	slirp_glue/qemu/sockets.h	27;"	d
socket_set_fast_reuse	slirp_glue/glib_qemu_stubs.c	/^int socket_set_fast_reuse(int fd)$/;"	f
socket_set_nodelay	slirp_glue/glib_qemu_stubs.c	/^int socket_set_nodelay(int fd)$/;"	f
socket_strerror	slirp_glue/glib_qemu_stubs.c	/^char *socket_strerror(int errnum)$/;"	f
socklen_t	sim_sock.c	/^typedef size_t socklen_t;$/;"	t	file:
socreate	slirp/socket.c	/^socreate(Slirp *slirp)$/;"	f
sofcantrcvmore	slirp/socket.c	/^sofcantrcvmore(struct socket *so)$/;"	f	file:
sofcantsendmore	slirp/socket.c	/^sofcantsendmore(struct socket *so)$/;"	f	file:
sofree	slirp/socket.c	/^sofree(struct socket *so)$/;"	f
sofwdrain	slirp/socket.c	/^sofwdrain(struct socket *so)$/;"	f
soisfconnected	slirp/socket.c	/^soisfconnected(struct socket *so)$/;"	f
soisfconnecting	slirp/socket.c	/^soisfconnecting(struct socket *so)$/;"	f
solookup	slirp/socket.c	/^solookup(struct socket *head, struct in_addr laddr, u_int lport,$/;"	f
sopreprbuf	slirp/socket.c	/^size_t sopreprbuf(struct socket *so, struct iovec *iov, int *np)$/;"	f
soread	slirp/socket.c	/^soread(struct socket *so)$/;"	f
soreadbuf	slirp/socket.c	/^int soreadbuf(struct socket *so, const char *buf, size_t size)$/;"	f
sorecvfrom	slirp/socket.c	/^sorecvfrom(struct socket *so)$/;"	f
sorecvoob	slirp/socket.c	/^sorecvoob(struct socket *so)$/;"	f
sosendoob	slirp/socket.c	/^sosendoob(struct socket *so)$/;"	f
sosendto	slirp/socket.c	/^sosendto(struct socket *so, struct mbuf *m)$/;"	f
sototcpcb	slirp/tcp_var.h	129;"	d
source_ip	sim_ether.c	/^  uint32 source_ip;       \/* Source Address *\/$/;"	m	struct:IPHeader	file:
source_port	sim_ether.c	/^  uint16 source_port;$/;"	m	struct:TCPHeader	file:
source_port	sim_ether.c	/^  uint16 source_port;$/;"	m	struct:UDPHeader	file:
sowrite	slirp/socket.c	/^sowrite(struct socket *so)$/;"	f
sp	display/vt11.c	/^static struct frame *sp = &stack[8];    \/* -> selected stack frame, or TOS *\/$/;"	v	typeref:struct:frame	file:
spacewar_switches	display/display.c	/^unsigned long spacewar_switches = 0;$/;"	v
spare	PDP10/kl10_dn.c	/^    uint16      spare;     \/* Dev code *\/$/;"	m	struct:_dn_queue	file:
spare	PDP10/kl10_fe.c	/^    uint16      spare;     \/* Dev code *\/$/;"	m	struct:_dte_queue	file:
spawn_cmd	scp.c	/^t_stat spawn_cmd (int32 flag, CONST char *cptr)$/;"	f
special_ethaddr	slirp/slirp.c	/^static const uint8_t special_ethaddr[ETH_ALEN] = {$/;"	v	file:
speed	sim_tmxr.c	/^    uint32 speed;$/;"	m	struct:status_msg_t	file:
sport	PDP10/kx10_imp.c	/^    uint16            sport;                   \/* Port to fix *\/$/;"	m	struct:imp_map	file:
sprint_capac	scp.c	/^const char *sprint_capac (DEVICE *dptr, UNIT *uptr)$/;"	f
sprint_val	scp.c	/^t_stat sprint_val (char *buffer, t_value val, uint32 radix,$/;"	f
spt	PDP10/kx10_cpu.c	/^uint64 spt;$/;"	v
spt	PDP10/kx10_cpu.c	283;"	d	file:
srand	scp.h	174;"	d
src	PDP10/kl10_nia.c	/^    ETH_MAC    src;$/;"	m	struct:nia_eth_hdr	file:
src	PDP10/kx10_imp.c	/^    ETH_MAC    src;$/;"	m	struct:imp_eth_hdr	file:
ssh_break	scp.c	/^t_stat ssh_break (FILE *st, const char *cptr, int32 flg)$/;"	f
ssh_break_one	scp.c	/^t_stat ssh_break_one (FILE *st, int32 flg, t_addr lo, int32 cnt, CONST char *aptr)$/;"	f
ssize_t	slirp_glue/qemu/win32/inttypes.h	/^typedef __int32 ssize_t;$/;"	t
ssize_t	slirp_glue/qemu/win32/inttypes.h	/^typedef __int64 ssize_t;$/;"	t
sstroke	display/vt11.c	/^static const unsigned char *sstroke[128] = { NULL };    \/* init. at run time *\/$/;"	v	file:
stack	display/vt11.c	/^        } stack[9] = { { 0, 0, CHAR, 0, 0, 0, 0, 0, SOLID, 0, 0, 0, 0,$/;"	v	typeref:struct:frame	file:
stack_counter	scp.c	/^static int stack_counter = 0; \/* number of stacks current allocated *\/$/;"	v	file:
stack_over	display/vt11.c	/^static unsigned char stack_over = 0;    \/* 1 bit: "push" with full stack *\/$/;"	v	file:
stack_sel	display/vt11.c	/^static unsigned char stack_sel = 8<<2;  \/* 8 levels, 4 PDP-11 words per level *\/$/;"	v	file:
stack_under	display/vt11.c	/^static unsigned char stack_under = 0;   \/* 1 bit: "pop" with empty stack *\/$/;"	v	file:
standard	sim_tape.c	/^    char standard;              \/* 1,3 or 4  *\/$/;"	m	struct:VOL1	file:
start	display/vttest.c	/^static uint16 start;                    \/* initial DPC for section of d.file *\/$/;"	v	file:
start_sector	sim_imd.h	/^    uint8 start_sector;$/;"	m	struct:__anon25
startup_cond	sim_disk.c	/^    pthread_cond_t      startup_cond;$/;"	m	struct:disk_context	file:
startup_cond	sim_tape.c	/^    pthread_cond_t      startup_cond;$/;"	m	struct:tape_context	file:
startup_done	sim_frontpanel.c	/^    pthread_cond_t          startup_done;$/;"	m	struct:PANEL	file:
stat	scp.c	/^    t_stat stat;$/;"	m	struct:__anon5	file:
stat	scp.c	/^    t_stat stat;$/;"	m	struct:__anon6	file:
stat	scp.c	/^    t_stat stat;$/;"	m	struct:__anon7	file:
stat	sim_console.c	/^    unsigned int stat;$/;"	m	struct:__anon9	file:
stat	sim_disk.c	/^    t_stat stat;$/;"	m	struct:__anon21	file:
stat	sim_serial.c	/^    unsigned int stat;$/;"	m	struct:__anon27	file:
stat2	sim_console.c	/^    unsigned int stat2; } SENSE_BUF;$/;"	m	struct:__anon9	file:
stat2	sim_serial.c	/^    unsigned int stat2; } SENSE_BUF;$/;"	m	struct:__anon27	file:
state	PDP10/ka10_pmp.c	/^     uint8              state;   \/* Current state *\/$/;"	m	struct:pmp_t	file:
state	sim_video.h	/^    uint32 state;                                         \/* key state change *\/$/;"	m	struct:key_event
static_inst	display/win32.c	/^static HINSTANCE static_inst;$/;"	v	file:
static_wh	display/win32.c	/^static HWND static_wh;$/;"	v	file:
stats	PDP10/kx10_imp.c	/^    struct imp_stats  stats;$/;"	m	struct:imp_device	typeref:struct:imp_device::imp_stats	file:
status	PDP10/ka10_imx.c	/^static uint64 status = IMX_ASSIGNED;$/;"	v	file:
status	PDP10/ka10_mty.c	/^static uint64 status = 0;$/;"	v	file:
status	PDP10/ka10_stk.c	/^static uint64 status = 0;$/;"	v	file:
status	PDP10/ka10_tk10.c	/^static uint64 status = 0;$/;"	v	file:
status	PDP10/kl10_nia.c	/^    uint64            status;                  \/* Status of device. *\/$/;"	m	struct:nia_device	file:
status	PDP10/kx10_defs.h	/^      uint32         status;     \/* DF10 status word *\/$/;"	m	struct:df10
status	PDP10/kx10_defs.h	/^      uint32         status;     \/* DF10 status word *\/$/;"	m	struct:rh_if
status	PDP10/kx10_defs.h	/^      uint32         status;     \/* Status word *\/$/;"	m	struct:rh_if
status	display/ng.c	/^static uint16 status = 0;$/;"	v	file:
status	display/type340.c	/^    ty340word status;           \/* see ST340_XXX in type340.h *\/$/;"	m	struct:type340	file:
status	sim_console.c	/^    unsigned short status;$/;"	m	struct:__anon10	file:
status	sim_ether.h	/^  int     status;                                       \/* transmit\/receive status *\/$/;"	m	struct:eth_packet
status	sim_scsi.h	/^    uint32 status;$/;"	m	struct:scsi_bus_t
status	sim_serial.c	/^    unsigned short status;$/;"	m	struct:__anon28	file:
status	sim_tmxr.c	/^    struct status_msg_t status;     \/* Last received status message *\/$/;"	m	struct:framer_data	typeref:struct:framer_data::status_msg_t	file:
status	sim_tmxr.c	/^    unsigned short status;$/;"	m	struct:__anon31	file:
status_cnt	sim_tmxr.c	/^    int status_cnt;                 \/* Count of status messages seen *\/$/;"	m	struct:framer_data	file:
status_msg_t	sim_tmxr.c	/^struct status_msg_t$/;"	s	file:
stcr	PDP10/kx10_defs.h	/^      uint32         stcr;       \/* RH20 Count *\/$/;"	m	struct:rh_if
std_error	sim_console.c	/^static HANDLE std_error;$/;"	v	file:
std_input	sim_console.c	/^static HANDLE std_input;$/;"	v	file:
std_output	sim_console.c	/^static HANDLE std_output;$/;"	v	file:
stdnul	scp.c	/^FILE *stdnul;$/;"	v
step_svc	scp.c	/^t_stat step_svc (UNIT *uptr)$/;"	f
stk_description	PDP10/ka10_stk.c	/^const char *stk_description (DEVICE *dptr)$/;"	f
stk_dev	PDP10/ka10_stk.c	/^DEVICE              stk_dev = {$/;"	v
stk_devio	PDP10/ka10_stk.c	/^t_stat stk_devio(uint32 dev, uint64 *data)$/;"	f
stk_dib	PDP10/ka10_stk.c	/^DIB stk_dib = {STK_DEVNUM, 1, &stk_devio, NULL};$/;"	v
stk_keyboard	PDP10/ka10_stk.c	/^static int stk_keyboard (SIM_KEY_EVENT *kev)$/;"	f	file:
stk_keys	PDP10/ka10_stk.c	/^static int stk_keys (SIM_KEY_EVENT *kev)$/;"	f	file:
stk_mod	PDP10/ka10_stk.c	/^MTAB stk_mod[] = {$/;"	v
stk_modifiers	PDP10/ka10_stk.c	/^static int stk_modifiers (SIM_KEY_EVENT *kev)$/;"	f	file:
stk_reset	PDP10/ka10_stk.c	/^static t_stat stk_reset (DEVICE *dptr)$/;"	f	file:
stk_svc	PDP10/ka10_stk.c	/^static t_stat stk_svc (UNIT *uptr)$/;"	f	file:
stk_unit	PDP10/ka10_stk.c	/^UNIT                stk_unit[] = {$/;"	v
stop	display/ng.c	/^void stop (void)$/;"	f
stop_cpu	scp.c	/^volatile t_bool stop_cpu = FALSE;$/;"	v
stop_intr_ena	display/vt11.c	485;"	d	file:
stopbits	sim_serial.c	/^    uint32 stopbits;                                    \/* 0\/1\/2 stop bits (0 implies 1.5) *\/$/;"	m	struct:serial_config	file:
stopped	display/vt11.c	/^static unsigned char stopped = 1;       \/* display processor frozen *\/$/;"	v	file:
storage_sector_size	sim_disk.c	/^    uint32              storage_sector_size;\/* Sector size of the containing storage *\/$/;"	m	struct:disk_context	file:
store	display/ng.c	/^static int store (int a, uint16 x)$/;"	f	file:
store_byte	PDP10/kx10_cpu.c	/^store_byte(int n, uint64 data, int cnt)$/;"	f
store_disk_footer	sim_disk.c	/^static t_stat store_disk_footer (UNIT *uptr, const char *dtype)$/;"	f	file:
str_size	sim_defs.h	/^    size_t              str_size;                       \/* structure size *\/$/;"	m	struct:REG
strcasecmp	sim_fio.h	183;"	d
strcasecmp	slirp_glue/config-host.h	29;"	d
strerror	slirp/misc.c	/^strerror(error)$/;"	f
strerror	slirp_glue/qemu/sockets.h	13;"	d
string	scp.c	/^    const char *string;$/;"	m	struct:Operator	file:
string_function	scp.c	/^                string_function;$/;"	m	struct:Operator	file:
strlcat	sim_fio.h	177;"	d
strlcpy	sim_fio.h	174;"	d
strncasecmp	sim_fio.h	180;"	d
stroke	display/vt11.c	/^static const unsigned char stroke[] = {$/;"	v	file:
stroking	display/vt11.c	/^static unsigned char stroking = 0;      \/* set when drawing VS60 char strokes *\/$/;"	v	file:
strtotsv	scp.c	/^t_svalue strtotsv (CONST char *inptr, CONST char **endptr, uint32 radix)$/;"	f
strtotv	scp.c	/^t_value strtotv (CONST char *inptr, CONST char **endptr, uint32 radix)$/;"	f
strtoull	sim_frontpanel.c	69;"	d	file:
success_attach_args	sim_tape.c	/^    const char *success_attach_args;$/;"	m	struct:classify_test	file:
surf	PDP10/kx10_dp.c	/^    int32       surf;                                   \/* surfaces *\/$/;"	m	struct:drvtyp	file:
surf	PDP10/kx10_rp.c	/^    int32       surf;                                   \/* surfaces *\/$/;"	m	struct:drvtyp	file:
surf	PDP10/kx10_rs.c	/^    int32       surf;                                   \/* surfaces *\/$/;"	m	struct:drvtyp	file:
surface	display/sim_ws.c	/^static uint32 *surface = NULL;$/;"	v	file:
switches	sim_defs.h	/^    int32               switches;                       \/* flags *\/$/;"	m	struct:EXPTAB
sync_period	display/ng.c	/^static unsigned char sync_period = 0;$/;"	v	file:
sync_period	display/vt11.c	/^static unsigned char sync_period = 0;   \/* frame sync period (msec) *\/$/;"	v	file:
sys$assign	sim_console.c	3286;"	d	file:
sys$assign	sim_serial.c	1388;"	d	file:
sys$dassgn	sim_console.c	3288;"	d	file:
sys$dassgn	sim_serial.c	1391;"	d	file:
sys$device_scan	sim_serial.c	1392;"	d	file:
sys$getdviw	sim_serial.c	1393;"	d	file:
sys$gettim	sim_timer.c	385;"	d	file:
sys$qio	sim_serial.c	1389;"	d	file:
sys$qiow	sim_console.c	3287;"	d	file:
sys$qiow	sim_serial.c	1390;"	d	file:
sys$setimr	sim_timer.c	386;"	d	file:
sys$waitfr	sim_timer.c	388;"	d	file:
system_code	sim_tape.c	/^    char system_code[13];       \/* *\/$/;"	m	struct:HDR1	file:
system_code	sim_tape.c	/^    const char          *system_code;           \/* *\/$/;"	m	struct:ansi_tape_parameters	file:
sz	PDP10/kl10_dn.c	/^    uint16      sz;        \/* Byte size *\/$/;"	m	struct:_dn_queue	file:
sz	PDP10/kl10_fe.c	/^    uint16      sz;        \/* Byte size *\/$/;"	m	struct:_dte_queue	file:
t2	display/test.c	/^t2(void) {$/;"	f
t20_page	PDP10/kx10_cpu.c	/^int     t20_page;                             \/* Tops 20 paging selected *\/$/;"	v
t3	display/test.c	/^t3(void) {$/;"	f
t_addr	PDP10/pidp10panel.c	/^typedef u_int64_t t_addr;$/;"	t	file:
t_addr	sim_defs.h	/^typedef t_uint64        t_addr;$/;"	t
t_addr	sim_defs.h	/^typedef uint32          t_addr;$/;"	t
t_awshdr	sim_tape.h	/^    } t_awshdr;$/;"	t	typeref:struct:__anon30
t_awslnt	sim_tape.h	/^typedef uint16          t_awslnt;                       \/* magtape rec lnt *\/$/;"	t
t_bool	sim_defs.h	/^typedef int             t_bool;                         \/* boolean *\/$/;"	t
t_cdstat	sim_card.h	/^typedef int t_cdstat;$/;"	t
t_dupacks	slirp/tcp_var.h	/^        short   t_dupacks;              \/* consecutive dup acks recd *\/$/;"	m	struct:tcpcb
t_flags	slirp/tcp_var.h	/^        u_short t_flags;$/;"	m	struct:tcpcb
t_force	slirp/tcp_var.h	/^        char    t_force;                \/* 1 if forcing out a byte *\/$/;"	m	struct:tcpcb
t_idle	slirp/tcp_var.h	/^        short   t_idle;                 \/* inactivity time *\/$/;"	m	struct:tcpcb
t_int64	sim_defs.h	/^typedef signed __int64          t_int64;$/;"	t
t_int64	sim_defs.h	/^typedef signed long             t_int64;$/;"	t
t_int64	sim_defs.h	/^typedef signed long long        t_int64;$/;"	t
t_int64	sim_defs.h	240;"	d
t_iobc	slirp/tcp_var.h	/^        char    t_iobc;                 \/* input character *\/$/;"	m	struct:tcpcb
t_lba	sim_disk.h	/^typedef uint32          t_lba;                          \/* disk logical block address *\/$/;"	t
t_level	display/display.c	/^    double t_level;         \/* seconds to decay to level *\/$/;"	m	struct:phosphor	file:
t_maxseg	slirp/tcp_var.h	/^        u_short t_maxseg;               \/* maximum segment size *\/$/;"	m	struct:tcpcb
t_mtrlnt	sim_tape.h	/^typedef uint32          t_mtrlnt;                       \/* magtape rec lnt *\/$/;"	t
t_offset	sim_fio.h	/^typedef int32        t_offset;$/;"	t
t_offset	sim_fio.h	/^typedef t_int64        t_offset;$/;"	t
t_oobflags	slirp/tcp_var.h	/^        char    t_oobflags;             \/* have some *\/$/;"	m	struct:tcpcb
t_rtseq	slirp/tcp_var.h	/^        tcp_seq t_rtseq;                \/* sequence number being timed *\/$/;"	m	struct:tcpcb
t_rtt	slirp/tcp_var.h	/^        short   t_rtt;                  \/* round trip time *\/$/;"	m	struct:tcpcb
t_rttmin	slirp/tcp_var.h	/^        u_short t_rttmin;               \/* minimum rtt allowed *\/$/;"	m	struct:tcpcb
t_rttvar	slirp/tcp_var.h	/^        short   t_rttvar;               \/* variance in round-trip time *\/$/;"	m	struct:tcpcb
t_rxtcur	slirp/tcp_var.h	/^        short   t_rxtcur;               \/* current retransmit value *\/$/;"	m	struct:tcpcb
t_rxtshift	slirp/tcp_var.h	/^        short   t_rxtshift;             \/* log(2) of rexmt exp. backoff *\/$/;"	m	struct:tcpcb
t_seccnt	sim_disk.h	/^typedef uint32          t_seccnt;                       \/* disk sector count *\/$/;"	t
t_socket	slirp/tcp_var.h	/^        struct  socket *t_socket;               \/* back pointer to socket *\/$/;"	m	struct:tcpcb	typeref:struct:tcpcb::socket
t_softerror	slirp/tcp_var.h	/^        short   t_softerror;            \/* possible error not yet reported *\/$/;"	m	struct:tcpcb
t_srtt	slirp/tcp_var.h	/^        short   t_srtt;                 \/* smoothed round-trip time *\/$/;"	m	struct:tcpcb
t_stat	sim_defs.h	/^typedef int             t_stat;                         \/* status *\/$/;"	t
t_state	slirp/tcp_var.h	/^        short   t_state;                \/* state of this connection *\/$/;"	m	struct:tcpcb
t_svalue	sim_defs.h	/^typedef int32           t_svalue;$/;"	t
t_svalue	sim_defs.h	/^typedef t_int64         t_svalue;                       \/* signed value *\/$/;"	t
t_template	slirp/tcp_var.h	/^        struct  tcpiphdr t_template;    \/* static skeletal packet for xmit *\/$/;"	m	struct:tcpcb	typeref:struct:tcpcb::tcpiphdr
t_timer	slirp/tcp_var.h	/^        short   t_timer[TCPT_NTIMERS];  \/* tcp timers *\/$/;"	m	struct:tcpcb
t_tpclnt	sim_tape.h	/^typedef uint16          t_tpclnt;                       \/* magtape rec lnt *\/$/;"	t
t_uint64	sim_defs.h	/^typedef unsigned __int64        t_uint64;$/;"	t
t_uint64	sim_defs.h	/^typedef unsigned long           t_uint64;$/;"	t
t_uint64	sim_defs.h	/^typedef unsigned long long      t_uint64;$/;"	t
t_uint64	sim_defs.h	241;"	d
t_value	sim_defs.h	/^typedef t_uint64        t_value;                        \/* value *\/$/;"	t
t_value	sim_defs.h	/^typedef uint32          t_value;$/;"	t
table	slirp/slirp.h	/^    struct arphdr table[ARP_TABLE_SIZE];$/;"	m	struct:ArpTable	typeref:struct:ArpTable::arphdr
tail	sim_ether.h	/^  int                 tail;$/;"	m	struct:eth_queue
tail	sim_video.c	/^    int32 tail;$/;"	m	struct:__anon33	file:
tail	sim_video.c	/^    int32 tail;$/;"	m	struct:__anon34	file:
tape_classify_file_contents	sim_tape.c	/^static int tape_classify_file_contents (FILE *f, size_t *max_record_size, t_bool *lf_line_endings, t_bool *crlf_line_endings)$/;"	f	file:
tape_context	sim_tape.c	/^struct tape_context {$/;"	s	file:
tape_ctx	sim_tape.c	168;"	d	file:
tape_debug	sim_tape.c	/^static DEBTAB tape_debug[] = {$/;"	v	file:
tape_eom	sim_defs.h	/^    t_addr              tape_eom;                       \/* Tape specific info *\/$/;"	m	struct:UNIT
tape_erase_fwd	sim_tape.c	/^static t_stat tape_erase_fwd (UNIT *uptr, t_mtrlnt gap_size)$/;"	f	file:
tape_erase_rev	sim_tape.c	/^static t_stat tape_erase_rev (UNIT *uptr, t_mtrlnt gap_size)$/;"	f	file:
tape_open_and_check_file	sim_tape.c	/^static FILE *tape_open_and_check_file (const char *filename)$/;"	f	file:
tar_cmd	scp.c	/^t_stat tar_cmd (int32 flag, CONST char *cptr)$/;"	f
target	sim_scsi.h	/^    int32 target;                                       \/* current target *\/$/;"	m	struct:scsi_bus_t
tcb	slirp/slirp.h	/^    struct socket tcb;$/;"	m	struct:Slirp	typeref:struct:Slirp::socket
tcp	PDP10/kl10_nia.c	/^struct tcp {$/;"	s	file:
tcp	PDP10/kx10_imp.c	/^struct tcp {$/;"	s	file:
tcp_attach	slirp/tcp_subr.c	/^tcp_attach(struct socket *so)$/;"	f
tcp_backoff	slirp/tcp_timer.c	/^const int tcp_backoff[TCP_MAXRXTSHIFT + 1] =$/;"	v
tcp_canceltimers	slirp/tcp_timer.c	/^tcp_canceltimers(struct tcpcb *tp)$/;"	f
tcp_cleanup	slirp/tcp_subr.c	/^void tcp_cleanup(Slirp *slirp)$/;"	f
tcp_close	slirp/tcp_subr.c	/^tcp_close(struct tcpcb *tp)$/;"	f
tcp_connect	slirp/tcp_subr.c	/^void tcp_connect(struct socket *inso)$/;"	f
tcp_ctl	slirp/tcp_subr.c	/^int tcp_ctl(struct socket *so)$/;"	f
tcp_dooptions	slirp/tcp_input.c	/^tcp_dooptions(struct tcpcb *tp, u_char *cp, int cnt, struct tcpiphdr *ti)$/;"	f	file:
tcp_dport	PDP10/kl10_nia.c	/^    uint16          tcp_dport;          \/* Destination port *\/$/;"	m	struct:tcp	file:
tcp_dport	PDP10/kx10_imp.c	/^    uint16          tcp_dport;          \/* Destination port *\/$/;"	m	struct:tcp	file:
tcp_drop	slirp/tcp_subr.c	/^struct tcpcb *tcp_drop(struct tcpcb *tp, int err)$/;"	f
tcp_emu	slirp/tcp_subr.c	/^tcp_emu(struct socket *so, struct mbuf *m)$/;"	f
tcp_fasttimo	slirp/tcp_timer.c	/^tcp_fasttimo(Slirp *slirp)$/;"	f
tcp_fconnect	slirp/tcp_subr.c	/^int tcp_fconnect(struct socket *so)$/;"	f
tcp_init	slirp/tcp_subr.c	/^tcp_init(Slirp *slirp)$/;"	f
tcp_input	slirp/tcp_input.c	/^tcp_input(struct mbuf *m, int iphlen, struct socket *inso)$/;"	f
tcp_iss	slirp/slirp.h	/^    tcp_seq tcp_iss;        \/* tcp initial send seq # *\/$/;"	m	struct:Slirp
tcp_last_so	slirp/slirp.h	/^    struct socket *tcp_last_so;$/;"	m	struct:Slirp	typeref:struct:Slirp::socket
tcp_listen	slirp/socket.c	/^tcp_listen(Slirp *slirp, uint32_t haddr, u_int hport, uint32_t laddr,$/;"	f
tcp_mss	slirp/tcp_input.c	/^tcp_mss(struct tcpcb *tp, u_int offer)$/;"	f
tcp_newtcpcb	slirp/tcp_subr.c	/^tcp_newtcpcb(struct socket *so)$/;"	f
tcp_now	slirp/slirp.h	/^    uint32_t tcp_now;       \/* for RFC 1323 timestamps *\/$/;"	m	struct:Slirp
tcp_outflags	slirp/tcp_output.c	/^static const u_char  tcp_outflags[TCP_NSTATES] = {$/;"	v	file:
tcp_output	slirp/tcp_output.c	/^tcp_output(struct tcpcb *tp)$/;"	f
tcp_pulloutofband	slirp/tcp_input.c	/^tcp_pulloutofband(so, ti, m)$/;"	f
tcp_rcvseqinit	slirp/tcp.h	168;"	d
tcp_reass	slirp/tcp_input.c	/^tcp_reass(register struct tcpcb *tp, register struct tcpiphdr *ti,$/;"	f	file:
tcp_respond	slirp/tcp_subr.c	/^tcp_respond(struct tcpcb *tp, struct tcpiphdr *ti, struct mbuf *m,$/;"	f
tcp_sendseqinit	slirp/tcp.h	171;"	d
tcp_seq	slirp/tcp.h	/^typedef uint32_t tcp_seq;$/;"	t
tcp_setpersist	slirp/tcp_output.c	/^tcp_setpersist(struct tcpcb *tp)$/;"	f
tcp_slowtimo	slirp/tcp_timer.c	/^tcp_slowtimo(Slirp *slirp)$/;"	f
tcp_sockclosed	slirp/tcp_subr.c	/^tcp_sockclosed(struct tcpcb *tp)$/;"	f
tcp_sport	PDP10/kl10_nia.c	/^    uint16          tcp_sport;          \/* Source port *\/$/;"	m	struct:tcp	file:
tcp_sport	PDP10/kx10_imp.c	/^    uint16          tcp_sport;          \/* Source port *\/$/;"	m	struct:tcp	file:
tcp_template	slirp/tcp_subr.c	/^tcp_template(struct tcpcb *tp)$/;"	f
tcp_timers	slirp/tcp_timer.c	/^tcp_timers(register struct tcpcb *tp, int timer)$/;"	f	file:
tcp_tos	slirp/tcp_subr.c	/^tcp_tos(struct socket *so)$/;"	f
tcp_xmit_timer	slirp/tcp_input.c	/^tcp_xmit_timer(register struct tcpcb *tp, int rtt)$/;"	f	file:
tcpcb	slirp/tcp_var.h	/^struct tcpcb {$/;"	s
tcpemu	slirp/tcp_subr.c	/^static struct emu_t *tcpemu = NULL;$/;"	v	typeref:struct:emu_t	file:
tcpfrag_list_empty	slirp/tcpip.h	66;"	d
tcpfrag_list_end	slirp/tcpip.h	65;"	d
tcpfrag_list_first	slirp/tcpip.h	64;"	d
tcphdr	slirp/tcp.h	/^struct tcphdr {$/;"	s
tcphdr	slirp/tcp.h	48;"	d
tcpiphdr	slirp/tcpip.h	/^struct tcpiphdr {$/;"	s
tcpiphdr2qlink	slirp/tcpip.h	60;"	d
tcpiphdr_2	slirp/tcpip.h	/^struct tcpiphdr_2 {$/;"	s
tcpiphdr_next	slirp/tcpip.h	62;"	d
tcpiphdr_prev	slirp/tcpip.h	63;"	d
tcptos	slirp/tcp_subr.c	/^static const struct tos_t tcptos[] = {$/;"	v	typeref:struct:tos_t	file:
tcpudp	slirp_glue/sim_slirp.c	/^static const char *tcpudp[] = {$/;"	v	file:
tcu_description	PDP10/ks10_tcu.c	/^const char *tcu_description (DEVICE *dptr)$/;"	f
tcu_dev	PDP10/ks10_tcu.c	/^DEVICE tcu_dev = {$/;"	v
tcu_dib	PDP10/ks10_tcu.c	/^DIB tcu_dib = { 0760770, 07, 0, 0, 3, &tcu_read, &tcu_write, NULL, 0, 0 };$/;"	v
tcu_help	PDP10/ks10_tcu.c	/^t_stat tcu_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
tcu_mod	PDP10/ks10_tcu.c	/^MTAB tcu_mod[] = {$/;"	v
tcu_read	PDP10/ks10_tcu.c	/^tcu_read(DEVICE *dptr, t_addr addr, uint16 *data, int32 access)$/;"	f
tcu_unit	PDP10/ks10_tcu.c	/^UNIT tcu_unit = {UDATA (NULL, UNIT_IDLE+UNIT_DISABLE, 0)};$/;"	v
tcu_write	PDP10/ks10_tcu.c	/^tcu_write(DEVICE *dptr, t_addr addr, uint16 data, int32 access)$/;"	f
telnet_sent_opts	sim_tmxr.h	/^    uint8               *telnet_sent_opts;              \/* Telnet Options which we have sent a DON'T\/WON'T *\/$/;"	m	struct:tmln
temp_config	sim_frontpanel.c	/^    char                    *temp_config;$/;"	m	struct:PANEL	file:
temp_ledstatus	PDP10/pidp10panel.c	/^static u_int16_t temp_ledstatus[8] = { 0x00 };$/;"	v	file:
ten11_attach	PDP10/ka10_ten11.c	/^static t_stat ten11_attach (UNIT *uptr, CONST char *cptr)$/;"	f	file:
ten11_attach_help	PDP10/ka10_ten11.c	/^static t_stat ten11_attach_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f	file:
ten11_base	PDP10/ka10_ten11.c	/^t_addr ten11_base = 03000000;$/;"	v
ten11_debug	PDP10/ka10_ten11.c	/^static DEBTAB ten11_debug[] = {$/;"	v	file:
ten11_desc	PDP10/ka10_ten11.c	/^static TMXR ten11_desc = { 1, 0, 0, &ten11_ldsc };      \/* mux descriptor *\/$/;"	v	file:
ten11_description	PDP10/ka10_ten11.c	/^static const char *ten11_description (DEVICE *dptr)$/;"	f	file:
ten11_detach	PDP10/ka10_ten11.c	/^static t_stat ten11_detach (UNIT *uptr)$/;"	f	file:
ten11_dev	PDP10/ka10_ten11.c	/^DEVICE ten11_dev = {$/;"	v
ten11_end	PDP10/ka10_ten11.c	/^t_addr ten11_end  = 04000000;$/;"	v
ten11_ldsc	PDP10/ka10_ten11.c	/^static TMLN ten11_ldsc;                                 \/* line descriptor *\/$/;"	v	file:
ten11_mod	PDP10/ka10_ten11.c	/^static MTAB ten11_mod[] = {$/;"	v	file:
ten11_pager	PDP10/ka10_ten11.c	/^static uint64 ten11_pager[256];$/;"	v	file:
ten11_read	PDP10/ka10_ten11.c	/^int ten11_read (t_addr addr, uint64 *data)$/;"	f
ten11_reg	PDP10/ka10_ten11.c	/^static REG ten11_reg[] = {$/;"	v	file:
ten11_reset	PDP10/ka10_ten11.c	/^static t_stat ten11_reset (DEVICE *dptr)$/;"	f	file:
ten11_set_base	PDP10/ka10_ten11.c	/^static t_stat ten11_set_base (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f	file:
ten11_show_base	PDP10/ka10_ten11.c	/^static t_stat ten11_show_base (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f	file:
ten11_svc	PDP10/ka10_ten11.c	/^static t_stat ten11_svc (UNIT *uptr)$/;"	f	file:
ten11_unit	PDP10/ka10_ten11.c	/^UNIT ten11_unit[1] = {$/;"	v
ten11_write	PDP10/ka10_ten11.c	/^int ten11_write (t_addr addr, uint64 data)$/;"	f
test_data	scp.c	/^    struct function_test_data test_data[10];$/;"	m	struct:parse_function_test	typeref:struct:parse_function_test::function_test_data	file:
test_lib_cmd	scp.c	/^t_stat test_lib_cmd (int32 flag, CONST char *cptr)$/;"	f
test_register_validation	scp.c	/^static t_stat test_register_validation (void)$/;"	f	file:
test_scp_event_sequencing	scp.c	/^static t_stat test_scp_event_sequencing (void)$/;"	f	file:
test_scp_parsing	scp.c	/^static t_stat test_scp_parsing (void)$/;"	f	file:
test_search	scp.c	/^int32 test_search (t_value *values, SCHTAB *schptr)$/;"	f
test_switches	display/test.c	/^static unsigned long test_switches = 0;$/;"	v	file:
testdata	sim_tape.c	/^    const char *testdata;$/;"	m	struct:classify_test	file:
testname	sim_tape.c	/^    const char *testname;$/;"	m	struct:classify_test	file:
text	scp.c	/^    char          *text;$/;"	m	struct:topic	file:
text	sim_sock.c	/^    const char *text;$/;"	m	struct:sock_errors	file:
tftp_handle_ack	slirp/tftp.c	/^static void tftp_handle_ack(Slirp *slirp, struct tftp_t *tp, int pktlen)$/;"	f	file:
tftp_handle_error	slirp/tftp.c	/^static void tftp_handle_error(Slirp *slirp, struct tftp_t *tp, int pktlen)$/;"	f	file:
tftp_handle_rrq	slirp/tftp.c	/^static void tftp_handle_rrq(Slirp *slirp, struct tftp_t *tp, int pktlen)$/;"	f	file:
tftp_input	slirp/tftp.c	/^void tftp_input(struct mbuf *m)$/;"	f
tftp_path	slirp_glue/sim_slirp.c	/^    char *tftp_path;$/;"	m	struct:sim_slirp	file:
tftp_prefix	slirp/slirp.h	/^    char *tftp_prefix;$/;"	m	struct:Slirp
tftp_read_data	slirp/tftp.c	/^static int tftp_read_data(struct tftp_session *spt, uint32_t block_nr,$/;"	f	file:
tftp_send_error	slirp/tftp.c	/^static void tftp_send_error(struct tftp_session *spt,$/;"	f	file:
tftp_send_next_block	slirp/tftp.c	/^static void tftp_send_next_block(struct tftp_session *spt,$/;"	f	file:
tftp_send_oack	slirp/tftp.c	/^static int tftp_send_oack(struct tftp_session *spt,$/;"	f	file:
tftp_session	slirp/tftp.h	/^struct tftp_session {$/;"	s
tftp_session_allocate	slirp/tftp.c	/^static int tftp_session_allocate(Slirp *slirp, struct tftp_t *tp)$/;"	f	file:
tftp_session_find	slirp/tftp.c	/^static int tftp_session_find(Slirp *slirp, struct tftp_t *tp)$/;"	f	file:
tftp_session_in_use	slirp/tftp.c	/^static inline int tftp_session_in_use(struct tftp_session *spt)$/;"	f	file:
tftp_session_terminate	slirp/tftp.c	/^static void tftp_session_terminate(struct tftp_session *spt)$/;"	f	file:
tftp_session_update	slirp/tftp.c	/^static inline void tftp_session_update(struct tftp_session *spt)$/;"	f	file:
tftp_sessions	slirp/slirp.h	/^    struct tftp_session tftp_sessions[TFTP_SESSIONS_MAX];$/;"	m	struct:Slirp	typeref:struct:Slirp::tftp_session
tftp_t	slirp/tftp.h	/^struct tftp_t {$/;"	s
th_ack	slirp/tcp.h	/^        tcp_seq th_ack;                 \/* acknowledgement number *\/$/;"	m	struct:tcphdr
th_dport	slirp/tcp.h	/^        uint16_t th_dport;              \/* destination port *\/$/;"	m	struct:tcphdr
th_flags	slirp/tcp.h	/^        uint8_t th_flags;$/;"	m	struct:tcphdr
th_off	slirp/tcp.h	/^                th_off:4;               \/* data offset *\/$/;"	m	struct:tcphdr
th_off	slirp/tcp.h	/^        uint8_t th_off:4,               \/* data offset *\/$/;"	m	struct:tcphdr
th_seq	slirp/tcp.h	/^        tcp_seq th_seq;                 \/* sequence number *\/$/;"	m	struct:tcphdr
th_sport	slirp/tcp.h	/^        uint16_t th_sport;              \/* source port *\/$/;"	m	struct:tcphdr
th_sum	slirp/tcp.h	/^        uint16_t th_sum;                \/* checksum *\/$/;"	m	struct:tcphdr
th_urp	slirp/tcp.h	/^        uint16_t th_urp;                \/* urgent pointer *\/$/;"	m	struct:tcphdr
th_win	slirp/tcp.h	/^        uint16_t th_win;                \/* window *\/$/;"	m	struct:tcphdr
th_x2	slirp/tcp.h	/^                th_x2:4;                \/* (unused) *\/$/;"	m	struct:tcphdr
th_x2	slirp/tcp.h	/^        uint8_t th_x2:4,                \/* (unused) *\/$/;"	m	struct:tcphdr
throttle_burst	sim_ether.h	/^  uint32        throttle_burst;                         \/* packets passed with throttle_time which trigger throttling *\/$/;"	m	struct:eth_device
throttle_count	sim_ether.h	/^  uint32        throttle_count;                         \/* Total Throttle Delays *\/$/;"	m	struct:eth_device
throttle_delay	sim_ether.h	/^  uint32        throttle_delay;                         \/* ms to delay when throttling.  0 disables throttling *\/$/;"	m	struct:eth_device
throttle_events	sim_ether.h	/^  uint32        throttle_events;                        \/* keeps track of packet arrival values *\/$/;"	m	struct:eth_device
throttle_mask	sim_ether.h	/^  uint32        throttle_mask;                          \/* match test for threshold detection (1 << throttle_burst) - 1 *\/$/;"	m	struct:eth_device
throttle_packet_time	sim_ether.h	/^  uint32        throttle_packet_time;                   \/* time last packet was transmitted *\/$/;"	m	struct:eth_device
throttle_time	sim_ether.h	/^  uint32        throttle_time;                          \/* ms burst time window *\/$/;"	m	struct:eth_device
ti_ack	slirp/tcpip.h	52;"	d
ti_dport	slirp/tcpip.h	50;"	d
ti_dst	slirp/tcpip.h	48;"	d
ti_flags	slirp/tcpip.h	55;"	d
ti_i	slirp/tcpip.h	/^        struct  ipovly ti_i;            \/* overlaid ip structure *\/$/;"	m	struct:tcpiphdr	typeref:struct:tcpiphdr::ipovly
ti_len	slirp/tcpip.h	46;"	d
ti_mbuf	slirp/tcpip.h	43;"	d
ti_off	slirp/tcpip.h	54;"	d
ti_pr	slirp/tcpip.h	45;"	d
ti_seq	slirp/tcpip.h	51;"	d
ti_sport	slirp/tcpip.h	49;"	d
ti_src	slirp/tcpip.h	47;"	d
ti_sum	slirp/tcpip.h	57;"	d
ti_t	slirp/tcpip.h	/^        struct  tcphdr ti_t;            \/* tcp header *\/$/;"	m	struct:tcpiphdr	typeref:struct:tcpiphdr::tcphdr
ti_urp	slirp/tcpip.h	58;"	d
ti_win	slirp/tcpip.h	56;"	d
ti_x1	slirp/tcpip.h	44;"	d
ti_x2	slirp/tcpip.h	53;"	d
ticks	sim_timer.c	/^    uint32 ticks;                   \/* ticks *\/$/;"	m	struct:RTC	file:
tim_high	PDP10/kx10_cpu.c	/^uint64  tim_high;                             \/* High order timer word *\/$/;"	v
tim_irq	PDP10/kx10_cpu.c	/^tim_irq(uint32 dev, t_addr addr)$/;"	f
tim_low	PDP10/kx10_cpu.c	/^uint64  tim_low;                              \/* Low order timer word *\/$/;"	v
tim_per	PDP10/kx10_cpu.c	/^int     tim_per;                              \/* Timer period *\/$/;"	v
tim_srv	PDP10/kx10_cpu.c	/^tim_srv(UNIT * uptr)$/;"	f
tim_val	PDP10/kx10_cpu.c	/^int     tim_val;                              \/* Current timer value *\/$/;"	v
time	sim_defs.h	/^    int32               time;                           \/* time out *\/$/;"	m	struct:UNIT
time_fasttimo	slirp/slirp.h	/^    u_int time_fasttimo;$/;"	m	struct:Slirp
time_fired	sim_defs.h	/^    double              time_fired[SIM_BKPT_N_SPC];     \/* instruction count when match occurred *\/$/;"	m	struct:BRKTAB
time_out	display/ng.c	/^static unsigned char time_out = 0;$/;"	v	file:
time_out	display/vt11.c	/^static unsigned char time_out = 0;      \/* 1 bit: timeout has occurred *\/$/;"	v	file:
timer_flg	PDP10/kx10_cpu.c	/^static int      timer_irq, timer_flg;$/;"	v	file:
timer_irq	PDP10/kx10_cpu.c	/^static int      timer_irq, timer_flg;$/;"	v	file:
timer_unit	sim_timer.c	/^    UNIT *timer_unit;               \/* points to related clock assist unit (sim_timer_units) *\/$/;"	m	struct:RTC	file:
timers	sim_timer.c	/^static TIMECAPS timers;$/;"	v	file:
timespec	sim_frontpanel.c	/^struct timespec {$/;"	s	file:
timespec	sim_timer.h	/^struct timespec {$/;"	s
timestamp	slirp/tftp.h	/^    int timestamp;$/;"	m	struct:tftp_session
title	scp.c	/^    char          *title;$/;"	m	struct:topic	file:
tk10_attach	PDP10/ka10_tk10.c	/^static t_stat tk10_attach (UNIT *uptr, CONST char *cptr)$/;"	f	file:
tk10_desc	PDP10/ka10_tk10.c	/^TMXR tk10_desc = { TK10_LINES, 0, 0, tk10_ldsc };$/;"	v
tk10_description	PDP10/ka10_tk10.c	/^static const char *tk10_description (DEVICE *dptr)$/;"	f	file:
tk10_detach	PDP10/ka10_tk10.c	/^static t_stat tk10_detach (UNIT *uptr)$/;"	f	file:
tk10_dev	PDP10/ka10_tk10.c	/^DEVICE tk10_dev = {$/;"	v
tk10_devio	PDP10/ka10_tk10.c	/^static t_stat tk10_devio(uint32 dev, uint64 *data)$/;"	f	file:
tk10_dib	PDP10/ka10_tk10.c	/^DIB tk10_dib = {TK10_DEVNUM, 1, &tk10_devio, NULL};$/;"	v
tk10_help	PDP10/ka10_tk10.c	/^static t_stat tk10_help (FILE *st, DEVICE *dptr, UNIT *uptr,$/;"	f	file:
tk10_ldsc	PDP10/ka10_tk10.c	/^TMLN tk10_ldsc[TK10_LINES] = { 0 };$/;"	v
tk10_mod	PDP10/ka10_tk10.c	/^MTAB tk10_mod[] = {$/;"	v
tk10_reset	PDP10/ka10_tk10.c	/^static t_stat tk10_reset (DEVICE *dptr)$/;"	f	file:
tk10_svc	PDP10/ka10_tk10.c	/^static t_stat tk10_svc (UNIT *uptr)$/;"	f	file:
tk10_unit	PDP10/ka10_tk10.c	/^UNIT                tk10_unit[] = {$/;"	v
tmln	sim_tmxr.h	/^struct tmln {$/;"	s
tmxr	sim_defs.h	/^    void                *tmxr;                          \/* TMXR linkage *\/$/;"	m	struct:UNIT
tmxr	sim_tmxr.h	/^struct tmxr {$/;"	s
tmxr_activate	sim_tmxr.c	/^t_stat tmxr_activate (UNIT *uptr, int32 interval)$/;"	f
tmxr_activate_abs	sim_tmxr.c	/^t_stat tmxr_activate_abs (UNIT *uptr, int32 interval)$/;"	f
tmxr_activate_after	sim_tmxr.c	/^t_stat tmxr_activate_after (UNIT *uptr, uint32 usecs_walltime)$/;"	f
tmxr_activate_after_abs	sim_tmxr.c	/^t_stat tmxr_activate_after_abs (UNIT *uptr, uint32 usecs_walltime)$/;"	f
tmxr_add_debug	sim_tmxr.c	/^t_stat tmxr_add_debug (DEVICE *dptr)$/;"	f
tmxr_add_to_open_list	sim_tmxr.c	/^static void tmxr_add_to_open_list (TMXR* mux)$/;"	f	file:
tmxr_attach	sim_tmxr.h	350;"	d
tmxr_attach	sim_tmxr.h	352;"	d
tmxr_attach_ex	sim_tmxr.c	/^t_stat tmxr_attach_ex (TMXR *mp, UNIT *uptr, CONST char *cptr, t_bool async)$/;"	f
tmxr_attach_help	sim_tmxr.c	/^t_stat tmxr_attach_help(FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
tmxr_buf_debug_char	sim_tmxr.c	/^static void tmxr_buf_debug_char (char value)$/;"	f	file:
tmxr_buf_debug_string	sim_tmxr.c	/^static void tmxr_buf_debug_string (const char *string)$/;"	f	file:
tmxr_buf_debug_telnet_option	sim_tmxr.c	/^static void tmxr_buf_debug_telnet_option (u_char chr)$/;"	f	file:
tmxr_buf_debug_telnet_options	sim_tmxr.c	/^static int tmxr_buf_debug_telnet_options (u_char *buf, int bufsize)$/;"	f	file:
tmxr_change_async	sim_tmxr.c	/^t_stat tmxr_change_async (void)$/;"	f
tmxr_clear_line_port_speed_control	sim_tmxr.c	/^t_stat tmxr_clear_line_port_speed_control (TMXR *mp, int line)$/;"	f
tmxr_clear_modem_control_passthru	sim_tmxr.c	/^t_stat tmxr_clear_modem_control_passthru (TMXR *mp)$/;"	f
tmxr_clear_modem_control_passthru_state	sim_tmxr.c	/^static t_stat tmxr_clear_modem_control_passthru_state (TMXR *mp, t_bool state)$/;"	f	file:
tmxr_clear_nomessage	sim_tmxr.c	/^t_stat tmxr_clear_nomessage (TMXR *mp)$/;"	f
tmxr_clear_notelnet	sim_tmxr.c	/^t_stat tmxr_clear_notelnet (TMXR *mp)$/;"	f
tmxr_clear_port_speed_control	sim_tmxr.c	/^t_stat tmxr_clear_port_speed_control (TMXR *mp)$/;"	f
tmxr_clock_coschedule	sim_tmxr.c	/^t_stat tmxr_clock_coschedule (UNIT *uptr, int32 interval)$/;"	f
tmxr_clock_coschedule_abs	sim_tmxr.c	/^t_stat tmxr_clock_coschedule_abs (UNIT *uptr, int32 interval)$/;"	f
tmxr_clock_coschedule_tmr	sim_tmxr.c	/^t_stat tmxr_clock_coschedule_tmr (UNIT *uptr, int32 tmr, int32 ticks)$/;"	f
tmxr_clock_coschedule_tmr_abs	sim_tmxr.c	/^t_stat tmxr_clock_coschedule_tmr_abs (UNIT *uptr, int32 tmr, int32 ticks)$/;"	f
tmxr_close_ln	sim_tmxr.c	/^t_stat tmxr_close_ln (TMLN *lp)$/;"	f
tmxr_close_master	sim_tmxr.c	/^t_stat tmxr_close_master (TMXR *mp)$/;"	f
tmxr_connection_poll_interval	sim_tmxr.c	/^t_stat tmxr_connection_poll_interval (TMXR *mp, uint32 seconds)$/;"	f
tmxr_debug	sim_tmxr.c	/^static DEBTAB tmxr_debug[] = {$/;"	v	file:
tmxr_debug	sim_tmxr.h	336;"	d
tmxr_debug_buf	sim_tmxr.c	/^static char *tmxr_debug_buf = NULL;$/;"	v	file:
tmxr_debug_buf_size	sim_tmxr.c	/^static size_t tmxr_debug_buf_size = 0;$/;"	v	file:
tmxr_debug_buf_used	sim_tmxr.c	/^static size_t tmxr_debug_buf_used = 0;$/;"	v	file:
tmxr_debug_connect	sim_tmxr.h	341;"	d
tmxr_debug_connect_line	sim_tmxr.h	342;"	d
tmxr_debug_msg	sim_tmxr.h	337;"	d
tmxr_debug_return	sim_tmxr.h	338;"	d
tmxr_debug_trace	sim_tmxr.h	339;"	d
tmxr_debug_trace_line	sim_tmxr.h	340;"	d
tmxr_dep	sim_tmxr.c	/^t_stat tmxr_dep (t_value val, t_addr addr, UNIT *uptr, int32 sw)$/;"	f
tmxr_detach	sim_tmxr.c	/^t_stat tmxr_detach (TMXR *mp, UNIT *uptr)$/;"	f
tmxr_detach_ln	sim_tmxr.c	/^t_stat tmxr_detach_ln (TMLN *lp)$/;"	f
tmxr_dscln	sim_tmxr.c	/^t_stat tmxr_dscln (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
tmxr_ex	sim_tmxr.c	/^t_stat tmxr_ex (t_value *vptr, t_addr addr, UNIT *uptr, int32 sw)$/;"	f
tmxr_expect_line_name	sim_tmxr.c	/^const char *tmxr_expect_line_name (const EXPECT *exp)$/;"	f
tmxr_fconns	sim_tmxr.c	/^void tmxr_fconns (FILE *st, const TMLN *lp, int32 ln)$/;"	f
tmxr_find_ldsc	sim_tmxr.c	/^static TMLN *tmxr_find_ldsc (UNIT *uptr, int32 val, const TMXR *mp)$/;"	f	file:
tmxr_flush_log_files	sim_tmxr.c	/^t_stat tmxr_flush_log_files (void)$/;"	f
tmxr_framer_read	sim_tmxr.c	/^static int  tmxr_framer_read (TMLN *line, char *buf, int nbytes)$/;"	f	file:
tmxr_framer_write	sim_tmxr.c	/^static int tmxr_framer_write (TMLN *line, const char *buf, int32 length)$/;"	f	file:
tmxr_fstats	sim_tmxr.c	/^void tmxr_fstats (FILE *st, const TMLN *lp, int32 ln)$/;"	f
tmxr_get_ldsc	sim_tmxr.c	/^static TMLN *tmxr_get_ldsc (UNIT *uptr, const char *cptr, TMXR *mp, t_stat *status)$/;"	f	file:
tmxr_get_line_halfduplex	sim_tmxr.c	/^t_bool tmxr_get_line_halfduplex (TMLN *lp)$/;"	f
tmxr_get_line_loopback	sim_tmxr.c	/^t_bool tmxr_get_line_loopback (TMLN *lp)$/;"	f
tmxr_get_packet_ln	sim_tmxr.c	/^t_stat tmxr_get_packet_ln (TMLN *lp, const uint8 **pbuf, size_t *psize)$/;"	f
tmxr_get_packet_ln_ex	sim_tmxr.c	/^t_stat tmxr_get_packet_ln_ex (TMLN *lp, const uint8 **pbuf, size_t *psize, uint8 frame_byte)$/;"	f
tmxr_getc_ln	sim_tmxr.c	/^int32 tmxr_getc_ln (TMLN *lp)$/;"	f
tmxr_init_line	sim_tmxr.c	/^static void tmxr_init_line (TMLN *lp)$/;"	f	file:
tmxr_input_pending_ln	sim_tmxr.c	/^int32 tmxr_input_pending_ln (TMLN *lp)$/;"	f
tmxr_line_attach_string	sim_tmxr.c	/^char *tmxr_line_attach_string(TMLN *lp)$/;"	f
tmxr_linemsg	sim_tmxr.c	/^void tmxr_linemsg (TMLN *lp, const char *msg)$/;"	f
tmxr_linemsgf	sim_tmxr.c	/^void tmxr_linemsgf (TMLN *lp, const char *fmt, ...)$/;"	f
tmxr_linemsgvf	sim_tmxr.c	/^void tmxr_linemsgvf (TMLN *lp, const char *fmt, va_list arglist)$/;"	f
tmxr_locate_line	sim_tmxr.c	/^t_stat tmxr_locate_line (const char *cptr, TMLN **lp)$/;"	f
tmxr_locate_line_expect	sim_tmxr.c	/^t_stat tmxr_locate_line_expect (const char *cptr, EXPECT **exp)$/;"	f
tmxr_locate_line_send	sim_tmxr.c	/^t_stat tmxr_locate_line_send (const char *cptr, SEND **snd)$/;"	f
tmxr_modem_bits	sim_tmxr.c	/^static BITFIELD tmxr_modem_bits[] = {$/;"	v	file:
tmxr_msg	sim_tmxr.c	/^void tmxr_msg (SOCKET sock, const char *msg)$/;"	f
tmxr_mux_attach_string	sim_tmxr.c	/^static char *tmxr_mux_attach_string(char *old, TMXR *mp)$/;"	f	file:
tmxr_open_device_count	sim_tmxr.c	/^static int tmxr_open_device_count = 0;$/;"	v	file:
tmxr_open_devices	sim_tmxr.c	/^static TMXR **tmxr_open_devices = NULL;$/;"	v	file:
tmxr_open_master	sim_tmxr.c	/^t_stat tmxr_open_master (TMXR *mp, CONST char *cptr)$/;"	f
tmxr_poll	PDP10/kx10_cpu.c	/^int32   tmxr_poll = 10000;$/;"	v
tmxr_poll_conn	sim_tmxr.c	/^int32 tmxr_poll_conn (TMXR *mp)$/;"	f
tmxr_poll_rx	sim_tmxr.c	/^void tmxr_poll_rx (TMXR *mp)$/;"	f
tmxr_poll_tx	sim_tmxr.c	/^void tmxr_poll_tx (TMXR *mp)$/;"	f
tmxr_put_packet_ln	sim_tmxr.c	/^t_stat tmxr_put_packet_ln (TMLN *lp, const uint8 *buf, size_t size)$/;"	f
tmxr_put_packet_ln_ex	sim_tmxr.c	/^t_stat tmxr_put_packet_ln_ex (TMLN *lp, const uint8 *buf, size_t size, uint8 frame_byte)$/;"	f
tmxr_putc_ln	sim_tmxr.c	/^t_stat tmxr_putc_ln (TMLN *lp, int32 chr)$/;"	f
tmxr_read	sim_tmxr.c	/^static int32 tmxr_read (TMLN *lp, int32 length)$/;"	f	file:
tmxr_report_connection	sim_tmxr.c	/^static void tmxr_report_connection (TMXR *mp, TMLN *lp)$/;"	f	file:
tmxr_report_disconnection	sim_tmxr.c	/^static void tmxr_report_disconnection (TMLN *lp)$/;"	f	file:
tmxr_reset_ln	sim_tmxr.c	/^t_stat tmxr_reset_ln (TMLN *lp)$/;"	f
tmxr_reset_ln_ex	sim_tmxr.c	/^static t_stat tmxr_reset_ln_ex (TMLN *lp, t_bool closeserial)$/;"	f	file:
tmxr_rmvrc	sim_tmxr.c	/^static void tmxr_rmvrc (TMLN *lp, int32 p)$/;"	f	file:
tmxr_rqln	sim_tmxr.c	/^int32 tmxr_rqln (const TMLN *lp)$/;"	f
tmxr_rqln_bare	sim_tmxr.c	/^static int32 tmxr_rqln_bare (const TMLN *lp, t_bool speed)$/;"	f	file:
tmxr_send_buffered_data	sim_tmxr.c	/^int32 tmxr_send_buffered_data (TMLN *lp)$/;"	f
tmxr_send_line_name	sim_tmxr.c	/^const char *tmxr_send_line_name (const SEND *snd)$/;"	f
tmxr_set_config_line	sim_tmxr.c	/^t_stat tmxr_set_config_line (TMLN *lp, CONST char *config)$/;"	f
tmxr_set_console_units	sim_tmxr.c	/^t_stat tmxr_set_console_units (UNIT *rxuptr, UNIT *txuptr)$/;"	f
tmxr_set_get_modem_bits	sim_tmxr.c	/^t_stat tmxr_set_get_modem_bits (TMLN *lp, int32 bits_to_set, int32 bits_to_clear, int32 *status_bits)$/;"	f
tmxr_set_line_halfduplex	sim_tmxr.c	/^t_stat tmxr_set_line_halfduplex (TMLN *lp, t_bool enable_halfduplex)$/;"	f
tmxr_set_line_loopback	sim_tmxr.c	/^t_stat tmxr_set_line_loopback (TMLN *lp, t_bool enable_loopback)$/;"	f
tmxr_set_line_modem_control	sim_tmxr.c	/^t_stat tmxr_set_line_modem_control (TMLN *lp, t_bool enab_disab)$/;"	f
tmxr_set_line_output_unit	sim_tmxr.c	/^t_stat tmxr_set_line_output_unit (TMXR *mp, int line, UNIT *uptr_poll)$/;"	f
tmxr_set_line_port_speed_control	sim_tmxr.c	/^t_stat tmxr_set_line_port_speed_control (TMXR *mp, int line)$/;"	f
tmxr_set_line_speed	sim_tmxr.c	/^t_stat tmxr_set_line_speed (TMLN *lp, CONST char *speed)$/;"	f
tmxr_set_line_unit	sim_tmxr.c	/^t_stat tmxr_set_line_unit (TMXR *mp, int line, UNIT *uptr_poll)$/;"	f
tmxr_set_lnorder	sim_tmxr.c	/^t_stat tmxr_set_lnorder (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
tmxr_set_log	sim_tmxr.c	/^t_stat tmxr_set_log (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
tmxr_set_modem_control_passthru	sim_tmxr.c	/^t_stat tmxr_set_modem_control_passthru (TMXR *mp)$/;"	f
tmxr_set_nolog	sim_tmxr.c	/^t_stat tmxr_set_nolog (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
tmxr_set_nomessage	sim_tmxr.c	/^t_stat tmxr_set_nomessage (TMXR *mp)$/;"	f
tmxr_set_nomessage_state	sim_tmxr.c	/^static t_stat tmxr_set_nomessage_state (TMXR *mp, t_bool state)$/;"	f	file:
tmxr_set_notelnet	sim_tmxr.c	/^t_stat tmxr_set_notelnet (TMXR *mp)$/;"	f
tmxr_set_notelnet_state	sim_tmxr.c	/^static t_stat tmxr_set_notelnet_state (TMXR *mp, t_bool state)$/;"	f	file:
tmxr_set_port_speed_control	sim_tmxr.c	/^t_stat tmxr_set_port_speed_control (TMXR *mp)$/;"	f
tmxr_setup_framer	sim_tmxr.c	/^static void tmxr_setup_framer(TMLN *line, ETH_PACK *packet, int len)$/;"	f	file:
tmxr_show_cstat	sim_tmxr.c	/^t_stat tmxr_show_cstat (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
tmxr_show_lines	sim_tmxr.c	/^t_stat tmxr_show_lines (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
tmxr_show_lnorder	sim_tmxr.c	/^t_stat tmxr_show_lnorder (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
tmxr_show_log	sim_tmxr.c	/^t_stat tmxr_show_log (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
tmxr_show_open_device	sim_tmxr.c	/^t_stat tmxr_show_open_device (FILE* st, TMXR *mp)$/;"	f
tmxr_show_open_devices	sim_tmxr.c	/^t_stat tmxr_show_open_devices (FILE* st, DEVICE *dptr, UNIT* uptr, int32 val, CONST char* cptr)$/;"	f
tmxr_show_summ	sim_tmxr.c	/^t_stat tmxr_show_summ (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
tmxr_show_sync	sim_tmxr.c	/^t_stat tmxr_show_sync (FILE* st, UNIT* uptr, int32 val, CONST void *desc)$/;"	f
tmxr_show_sync_devices	sim_tmxr.c	/^t_stat tmxr_show_sync_devices (FILE* st, DEVICE *dptr, UNIT* uptr, int32 val, CONST char *desc)$/;"	f
tmxr_shutdown	sim_tmxr.c	/^t_stat tmxr_shutdown (void)$/;"	f
tmxr_sock_test	sim_tmxr.c	/^t_stat tmxr_sock_test (DEVICE *dptr, const char *cptr)$/;"	f
tmxr_start_framer	sim_tmxr.c	/^void tmxr_start_framer (TMLN *line, int dmc_mode)$/;"	f
tmxr_start_poll	sim_tmxr.c	/^t_stat tmxr_start_poll (void)$/;"	f
tmxr_startup	sim_tmxr.c	/^t_stat tmxr_startup (void)$/;"	f
tmxr_stop_framer	sim_tmxr.c	/^void tmxr_stop_framer (TMLN *line)$/;"	f
tmxr_stop_poll	sim_tmxr.c	/^t_stat tmxr_stop_poll (void)$/;"	f
tmxr_tpbusyln	sim_tmxr.c	/^t_bool tmxr_tpbusyln (const TMLN *lp)$/;"	f
tmxr_tpqln	sim_tmxr.c	/^int32 tmxr_tpqln (const TMLN *lp)$/;"	f
tmxr_tqln	sim_tmxr.c	/^int32 tmxr_tqln (const TMLN *lp)$/;"	f
tmxr_txdone_ln	sim_tmxr.c	/^int32 tmxr_txdone_ln (TMLN *lp)$/;"	f
tmxr_write	sim_tmxr.c	/^static int32 tmxr_write (TMLN *lp, int32 length)$/;"	f	file:
tn_chars	sim_tmxr.c	/^    } tn_chars[] =$/;"	v	typeref:struct:__anon32	file:
to_ansi_a	sim_tape.c	/^static void to_ansi_a (char *out, const char *in, size_t size)$/;"	f	file:
tolower	sim_fio.h	166;"	d
tolower	sim_fio.h	168;"	d
top_Stack	scp.c	/^static t_bool top_Stack (Stack * this_Stack, char *data, Operator **op)$/;"	f	file:
topic	scp.c	/^typedef struct topic {$/;"	s	file:
tos	sim_ether.c	/^  uint8 tos;              \/* Type of service *\/$/;"	m	struct:IPHeader	file:
tos	slirp/misc.h	/^    uint8_t tos;$/;"	m	struct:emu_t
tos	slirp/misc.h	/^    uint8_t tos;$/;"	m	struct:tos_t
tos_t	slirp/misc.h	/^struct tos_t {$/;"	s
tot	sim_console.c	/^    int             tot;            \/* total of all values *\/$/;"	m	struct:BITSAMPLE	file:
total_len	sim_ether.c	/^  uint16 total_len;       \/* Length of the packet in dwords *\/$/;"	m	struct:IPHeader	file:
total_sectors	sim_disk.c	/^    t_lba total_sectors;$/;"	m	struct:disk_test_coverage	file:
toupper	sim_fio.h	162;"	d
toupper	sim_fio.h	164;"	d
tp_block_nr	slirp/tftp.h	/^      uint16_t tp_block_nr;$/;"	m	struct:tftp_t::__anon37::__anon38
tp_buf	slirp/tftp.h	/^      uint8_t tp_buf[512];$/;"	m	struct:tftp_t::__anon37::__anon38
tp_buf	slirp/tftp.h	/^    char tp_buf[512 + 2];$/;"	m	union:tftp_t::__anon37
tp_data	slirp/tftp.h	/^    } tp_data;$/;"	m	union:tftp_t::__anon37	typeref:struct:tftp_t::__anon37::__anon38
tp_error	slirp/tftp.h	/^    } tp_error;$/;"	m	union:tftp_t::__anon37	typeref:struct:tftp_t::__anon37::__anon39
tp_error_code	slirp/tftp.h	/^      uint16_t tp_error_code;$/;"	m	struct:tftp_t::__anon37::__anon39
tp_msg	slirp/tftp.h	/^      uint8_t tp_msg[512];$/;"	m	struct:tftp_t::__anon37::__anon39
tp_op	slirp/tftp.h	/^  uint16_t tp_op;$/;"	m	struct:tftp_t
tpos	PDP10/ka10_pmp.c	/^     uint16             tpos;    \/* Track position *\/$/;"	m	struct:pmp_t	file:
track	sim_imd.h	/^    TRACK_INFO track[MAX_CYL][MAX_HEAD];$/;"	m	struct:__anon26
trackWrite	sim_imd.c	/^t_stat trackWrite(DISK_INFO *myDisk,$/;"	f
tracksize	PDP10/ka10_pmp.c	/^       uint32   tracksize;     \/* size of track *\/$/;"	m	struct:pmp_header	file:
transaction	PDP10/ka10_auxcpu.c	/^static int transaction (unsigned char *request, unsigned char *response)$/;"	f	file:
transaction	PDP10/ka10_ten11.c	/^static int transaction (unsigned char *request, unsigned char *response)$/;"	f	file:
translate	PDP10/ka10_stk.c	/^static int translate[] = {$/;"	v	file:
translate_dnssearch	slirp/dnssearch.c	/^int translate_dnssearch(Slirp *s, const char **names)$/;"	f
transmit_packet_errors	sim_ether.h	/^  uint32        transmit_packet_errors;                 \/* Total Send Packet Errors *\/$/;"	m	struct:eth_device
trap_flag	PDP10/kx10_cpu.c	/^int     trap_flag;                            \/* In trap cycle *\/$/;"	v
treg16	scp.c	/^uint16 treg16;$/;"	v
treg32	scp.c	/^uint32 treg32;$/;"	v
treg8	scp.c	/^uint8 treg8;$/;"	v
tregval	scp.c	/^t_value tregval;$/;"	v
true	slirp_glue/qemu/win32/stdbool.h	4;"	d
ts_recent	slirp/tcp_var.h	/^        uint32_t        ts_recent;              \/* timestamp echo data *\/$/;"	m	struct:tcpcb
ts_recent_age	slirp/tcp_var.h	/^        uint32_t        ts_recent_age;          \/* when last updated *\/$/;"	m	struct:tcpcb
tsize	PDP10/ka10_pmp.c	/^     uint32             tsize;   \/* Size of one track include rounding *\/$/;"	m	struct:pmp_t	file:
tsta	sim_tmxr.h	/^    int32               tsta;                           \/* Telnet state *\/$/;"	m	struct:tmln
tstart	PDP10/ka10_pmp.c	/^     uint32             tstart;  \/* Location of start of track *\/$/;"	m	struct:pmp_t	file:
tt2500_cycle	display/tt2500.c	/^int tt2500_cycle(int us, int slowdown)$/;"	f
tt2500_init	display/tt2500.c	/^int tt2500_init(void *dev, int debug)$/;"	f
tt2500_line	display/tt2500.c	/^tt2500_line (int x1, int y1, int x2, int y2, int i)$/;"	f
tt2500_point	display/tt2500.c	/^static void tt2500_point (int x, int y, int i)$/;"	f	file:
ttl	display/display.c	/^    unsigned char ttl;          \/* zero means off, not linked in *\/$/;"	m	struct:point	file:
ttl	sim_ether.c	/^  uint8 ttl;              \/* Time to live *\/$/;"	m	struct:IPHeader	file:
tty_attach	PDP10/kl10_fe.c	/^t_stat tty_attach (UNIT *uptr, CONST char *cptr)$/;"	f
tty_chan	sim_console.c	/^uint32 tty_chan = 0;$/;"	v
tty_connect	PDP10/kl10_fe.c	/^int32    tty_connect[NUM_LINES_TTY];$/;"	v
tty_desc	PDP10/kl10_fe.c	/^TMXR     tty_desc = { NUM_LINES_TTY, 0, 0, tty_ldsc };$/;"	v
tty_description	PDP10/kl10_fe.c	/^const char *tty_description (DEVICE *dptr)$/;"	f
tty_detach	PDP10/kl10_fe.c	/^t_stat tty_detach (UNIT *uptr)$/;"	f
tty_dev	PDP10/kl10_fe.c	/^DEVICE tty_dev = {$/;"	v
tty_done	PDP10/kl10_fe.c	/^int32    tty_done[NUM_LINES_TTY];$/;"	v
tty_enable	PDP10/kl10_fe.c	/^int      tty_enable = 0;$/;"	v
tty_help	PDP10/kl10_fe.c	/^t_stat tty_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
tty_in	PDP10/kl10_fe.c	/^struct _buffer tty_out[NUM_LINES_TTY], tty_in[NUM_LINES_TTY];$/;"	v	typeref:struct:
tty_ldsc	PDP10/kl10_fe.c	/^TMLN     tty_ldsc[NUM_LINES_TTY] = { 0 };            \/* Line descriptors *\/$/;"	v
tty_mod	PDP10/kl10_fe.c	/^MTAB tty_mod[] = {$/;"	v
tty_out	PDP10/kl10_fe.c	/^struct _buffer tty_out[NUM_LINES_TTY], tty_in[NUM_LINES_TTY];$/;"	v	typeref:struct:_buffer
tty_reg	PDP10/kl10_fe.c	/^REG tty_reg[] = {$/;"	v
tty_reset	PDP10/kl10_fe.c	/^t_stat tty_reset (DEVICE *dptr)$/;"	f
tty_set_log	PDP10/kl10_fe.c	/^t_stat tty_set_log (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
tty_set_mode	PDP10/kl10_fe.c	/^t_stat tty_set_mode (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
tty_set_mode	PDP10/ks10_cty.c	/^t_stat tty_set_mode (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
tty_set_mode	PDP10/kx10_cty.c	/^t_stat tty_set_mode (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
tty_set_nolog	PDP10/kl10_fe.c	/^t_stat tty_set_nolog (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
tty_setnl	PDP10/kl10_fe.c	/^t_stat tty_setnl (UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
tty_show_log	PDP10/kl10_fe.c	/^t_stat tty_show_log (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
tty_unit	PDP10/kl10_fe.c	/^UNIT tty_unit[] = {$/;"	v
ttyi_svc	PDP10/kl10_fe.c	/^t_stat ttyi_svc (UNIT *uptr)$/;"	f
ttyo_svc	PDP10/kl10_fe.c	/^t_stat ttyo_svc (UNIT *uptr)$/;"	f
tu_attach	PDP10/kx10_tu.c	/^tu_attach(UNIT * uptr, CONST char *file)$/;"	f
tu_boot	PDP10/kx10_tu.c	/^tu_boot(int32 unit_num, DEVICE * dptr)$/;"	f
tu_boot_buffer	PDP10/kx10_tu.c	/^static uint64 tu_boot_buffer;$/;"	v	file:
tu_buf	PDP10/kx10_tu.c	/^uint8         tu_buf[NUM_DEVS_TU][TU_NUMFR];$/;"	v
tu_description	PDP10/kx10_tu.c	/^const char *tu_description (DEVICE *dptr)$/;"	f
tu_detach	PDP10/kx10_tu.c	/^tu_detach(UNIT * uptr)$/;"	f
tu_devs	PDP10/kx10_tu.c	/^DEVICE *tu_devs[] = {$/;"	v
tu_dib	PDP10/kx10_tu.c	/^DIB tu_dib[NUM_DEVS_TU] = {$/;"	v
tu_dib	PDP10/kx10_tu.c	/^DIB tu_dib[] = {$/;"	v
tu_error	PDP10/kx10_tu.c	/^void tu_error(UNIT * uptr, t_stat r)$/;"	f
tu_help	PDP10/kx10_tu.c	/^t_stat tu_help (FILE *st, DEVICE *dptr, UNIT *uptr, int32 flag, const char *cptr)$/;"	f
tu_mod	PDP10/kx10_tu.c	/^MTAB                tu_mod[] = {$/;"	v
tu_read	PDP10/kx10_tu.c	/^tu_read(DEVICE *dptr, struct rh_if *rhc, int reg, uint32 *data) {$/;"	f
tu_read_word	PDP10/kx10_tu.c	/^void tu_read_word(UNIT *uptr) {$/;"	f
tu_reset	PDP10/kx10_tu.c	/^tu_reset(DEVICE * dptr)$/;"	f
tu_rh	PDP10/kx10_tu.c	/^struct rh_if   tu_rh[NUM_DEVS_TU] = {$/;"	v	typeref:struct:rh_if
tu_rh	PDP10/kx10_tu.c	/^struct rh_if  tu_rh[NUM_DEVS_TU] = {$/;"	v	typeref:struct:rh_if
tu_srv	PDP10/kx10_tu.c	/^t_stat tu_srv(UNIT * uptr)$/;"	f
tu_unit	PDP10/kx10_tu.c	/^UNIT                tu_unit[] = {$/;"	v
tu_write	PDP10/kx10_tu.c	/^tu_write(DEVICE *dptr, struct rh_if *rhc, int reg, uint32 data) {$/;"	f
tua_dev	PDP10/kx10_tu.c	/^DEVICE              tua_dev = {$/;"	v
tua_reg	PDP10/kx10_tu.c	/^REG                 tua_reg[] = {$/;"	v
tv_buttons	PDP10/ka10_tv.c	/^static uint64 tv_buttons (void)$/;"	f	file:
tv_description	PDP10/ka10_tv.c	/^const char *tv_description (DEVICE *dptr)$/;"	f
tv_dev	PDP10/ka10_tv.c	/^DEVICE tv_dev = {$/;"	v
tv_devio	PDP10/ka10_tv.c	/^t_stat tv_devio(uint32 dev, uint64 *data)$/;"	f
tv_dib	PDP10/ka10_tv.c	/^DIB tv_dib = { TV_DEVNUM, 1, &tv_devio, NULL };$/;"	v
tv_joy_button	PDP10/ka10_tv.c	/^static void tv_joy_button(int which, int button, int state)$/;"	f	file:
tv_joy_motion	PDP10/ka10_tv.c	/^static void tv_joy_motion(int which, int axis, int value)$/;"	f	file:
tv_nsec	sim_frontpanel.c	/^    long   tv_nsec;$/;"	m	struct:timespec	file:
tv_nsec	sim_timer.h	/^    long   tv_nsec;$/;"	m	struct:timespec
tv_reset	PDP10/ka10_tv.c	/^static t_stat tv_reset (DEVICE *dptr)$/;"	f	file:
tv_sec	sim_frontpanel.c	/^    long   tv_sec;$/;"	m	struct:timespec	file:
tv_sec	sim_timer.h	/^    time_t tv_sec;$/;"	m	struct:timespec
tv_sec	slirp_glue/qemu/sysemu/os-win32.h	/^    long tv_sec;$/;"	m	struct:__anon42
tv_usec	slirp_glue/qemu/sysemu/os-win32.h	/^    long tv_usec;$/;"	m	struct:__anon42
tvs	display/carbon.c	/^    struct timeval tvs[2];$/;"	m	struct:elapsed_state	typeref:struct:elapsed_state::timeval	file:
tvs	display/x11.c	/^    struct timeval tvs[2];$/;"	m	struct:elapsed_state	typeref:struct:elapsed_state::timeval	file:
tx	PDP10/ks10_kmc.c	/^    WB     tx;$/;"	m	struct:dupstate	file:
tx_buffer	PDP10/ka10_ch10.c	/^static uint8 tx_buffer[512+100];$/;"	v	file:
tx_buffer	PDP10/ks10_ch11.c	/^static uint8 tx_buffer[512+100];$/;"	v	file:
tx_count	PDP10/ka10_ch10.c	/^static int tx_count;$/;"	v	file:
tx_count	PDP10/ks10_ch11.c	/^static int tx_count;$/;"	v	file:
tx_enable	PDP10/kx10_dc.c	/^uint32   tx_enable, rx_rdy;                       \/* Flags *\/$/;"	v
tx_units	PDP10/ks10_kmc.c	/^static UNIT tx_units[MAX_ACTIVE][KMC_UNITS]; \/* Line 0 is primary unit.  txup references *\/$/;"	v	file:
txavail	PDP10/ks10_kmc.c	/^    int32  txavail;$/;"	m	struct:dupstate	file:
txb	sim_tmxr.h	/^    char                *txb;                           \/* xmt buffer *\/$/;"	m	struct:tmln
txbfd	sim_tmxr.h	/^    int32               txbfd;                          \/* xmt buffered flag *\/$/;"	m	struct:tmln
txbpi	sim_tmxr.h	/^    int32               txbpi;                          \/* xmt buf insert *\/$/;"	m	struct:tmln
txbpr	sim_tmxr.h	/^    int32               txbpr;                          \/* xmt buf remove *\/$/;"	m	struct:tmln
txbps	sim_tmxr.h	/^    uint32              txbps;                          \/* xmt bps speed (0 - unlimited) *\/$/;"	m	struct:tmln
txbsz	sim_tmxr.h	/^    int32               txbsz;                          \/* xmt buffer size *\/$/;"	m	struct:tmln
txbytes	sim_tmxr.c	/^    uint32 txbytes;$/;"	m	struct:status_msg_t	file:
txcnt	sim_tmxr.h	/^    int32               txcnt;                          \/* xmt count *\/$/;"	m	struct:tmln
txcount	sim_tmxr.h	/^    int32               txcount;                        \/* count of transmit bytes *\/$/;"	m	struct:tmxr
txdeltausecs	sim_tmxr.h	/^    uint32              txdeltausecs;                   \/* xmt inter character min time (usecs) *\/$/;"	m	struct:tmln
txdone	sim_tmxr.h	/^    t_bool              txdone;                         \/* sent data complete indicator - private *\/$/;"	m	struct:tmln
txdrp	sim_tmxr.h	/^    int32               txdrp;                          \/* xmt drop count *\/$/;"	m	struct:tmln
txframes	sim_tmxr.c	/^    uint32 txframes;$/;"	m	struct:status_msg_t	file:
txlog	sim_tmxr.h	/^    FILE                *txlog;                         \/* xmt log file *\/$/;"	m	struct:tmln
txlogname	sim_tmxr.h	/^    char                *txlogname;                     \/* xmt log file name *\/$/;"	m	struct:tmln
txlogref	sim_tmxr.h	/^    FILEREF             *txlogref;                      \/* xmt log file reference *\/$/;"	m	struct:tmln
txmlen	PDP10/ks10_kmc.c	/^    size_t  txmsize, txslen, txmlen;$/;"	m	struct:dupstate	file:
txmsg	PDP10/ks10_kmc.c	/^    uint8  *txmsg;$/;"	m	struct:dupstate	file:
txmsize	PDP10/ks10_kmc.c	/^    size_t  txmsize, txslen, txmlen;$/;"	m	struct:dupstate	file:
txnexttime	sim_tmxr.h	/^    double              txnexttime;                     \/* min time for next transmit character *\/$/;"	m	struct:tmln
txpb	sim_tmxr.h	/^    uint8               *txpb;                          \/* xmt packet buffer *\/$/;"	m	struct:tmln
txpbsize	sim_tmxr.h	/^    uint32              txpbsize;                       \/* xmt packet buffer size *\/$/;"	m	struct:tmln
txpcnt	sim_tmxr.h	/^    int32               txpcnt;                         \/* xmt packet count *\/$/;"	m	struct:tmln
txppoffset	sim_tmxr.h	/^    uint32              txppoffset;                     \/* xmt packet buffer offset *\/$/;"	m	struct:tmln
txppsize	sim_tmxr.h	/^    uint32              txppsize;                       \/* xmt packet packet size *\/$/;"	m	struct:tmln
txqh	PDP10/ks10_kmc.c	/^    QH     txqh;                                \/* Transmit queue from host *\/$/;"	m	struct:dupstate	file:
txslen	PDP10/ks10_kmc.c	/^    size_t  txmsize, txslen, txmlen;$/;"	m	struct:dupstate	file:
txspeed	sim_tmxr.c	/^    uint32 txspeed;$/;"	m	struct:status_msg_t	file:
txstall	sim_tmxr.h	/^    int32               txstall;                        \/* xmt stall count *\/$/;"	m	struct:tmln
txstate	PDP10/ks10_kmc.c	/^    uint32 txstate;$/;"	m	struct:dupstate	file:
ty340_clear	display/type340.c	/^ty340_clear(ty340word flags)$/;"	f
ty340_close	display/type340.c	/^ty340_close(void)$/;"	f
ty340_cond_int	display/tst340.c	/^ty340_cond_int(ty340word status) {$/;"	f
ty340_cycle	display/type340.c	/^ty340_cycle(void)$/;"	f
ty340_fetch	PDP10/kx10_dpy.c	/^ty340_fetch(ty340word addr)$/;"	f
ty340_fetch	display/tst340.c	/^ty340_fetch(ty340word addr) {$/;"	f
ty340_get_asr	display/type340.c	/^ty340_get_asr(void)$/;"	f
ty340_get_dac	display/type340.c	/^ty340_get_dac(void)$/;"	f
ty340_instruction	display/type340.c	/^ty340_instruction(ty340word inst)$/;"	f
ty340_lp_int	PDP10/kx10_dpy.c	/^ty340_lp_int(ty340word x, ty340word y)$/;"	f
ty340_lp_int	display/tst340.c	/^ty340_lp_int(ty340word x, ty340word y) {$/;"	f
ty340_reset	display/type340.c	/^ty340_reset(void *dptr)$/;"	f
ty340_rfd	PDP10/kx10_dpy.c	/^ty340_rfd(void) {                       \/* request for data *\/$/;"	f
ty340_rfd	display/tst340.c	/^ty340_rfd(void) {                       \/* request for data *\/$/;"	f
ty340_sense	display/type340.c	/^ty340_sense(ty340word flags)$/;"	f
ty340_set_dac	display/type340.c	/^ty340_set_dac(ty340word addr)$/;"	f
ty340_status	display/type340.c	/^ty340_status(void)$/;"	f
ty340_store	PDP10/kx10_dpy.c	/^ty340_store(ty340word addr, ty340word value)$/;"	f
ty340_store	display/tst340.c	/^ty340_store(ty340word addr, ty340word value) {$/;"	f
ty340word	display/type340.h	/^typedef unsigned int ty340word;$/;"	t
ty342_set_grid	display/type340.c	/^ty342_set_grid(int w, int h)$/;"	f
typ	sim_defs.h	/^    uint32              typ;                            \/* mask of types *\/$/;"	m	struct:BRKTAB
type	PDP10/kl10_nia.c	/^    uint16     type;$/;"	m	struct:nia_eth_hdr	file:
type	PDP10/kl10_nia.c	/^    uint8           type;               \/* Type of packet *\/$/;"	m	struct:icmp	file:
type	PDP10/kx10_imp.c	/^    uint16     type;$/;"	m	struct:imp_eth_hdr	file:
type	PDP10/kx10_imp.c	/^    uint8           type;               \/* Type of packet *\/$/;"	m	struct:icmp	file:
type	display/display.c	/^    enum display_type type;$/;"	m	struct:display	typeref:enum:display::display_type	file:
type	sim_ether.c	/^  uint8 type;          \/* ICMP packet type *\/$/;"	m	struct:ICMPHeader	file:
type	sim_ether.h	/^  int                 type;                             \/* receive (0=setup, 1=loopback, 2=normal) *\/$/;"	m	struct:eth_item
type	sim_tape.c	/^    char type[3];               \/* HDR  *\/$/;"	m	struct:HDR2	file:
type	sim_tape.c	/^    char type[3];               \/* HDR  *\/$/;"	m	struct:HDR3	file:
type	sim_tape.c	/^    char type[3];               \/* HDR  *\/$/;"	m	struct:HDR4	file:
type	sim_tape.c	/^    char type[3];               \/* HDR|EOF|EOV  *\/$/;"	m	struct:HDR1	file:
type	sim_tape.c	/^    char type[3];               \/* VOL  *\/$/;"	m	struct:VOL1	file:
type340	display/type340.c	/^static struct type340 {$/;"	s	file:
type_cmd	scp.c	/^t_stat type_cmd (int32 flg, CONST char *cptr)$/;"	f
type_ctx	sim_defs.h	/^    void                *type_ctx;                      \/* Device Type\/Library Context *\/$/;"	m	struct:DEVICE
u3	sim_defs.h	/^    int32               u3;                             \/* device specific *\/$/;"	m	struct:UNIT
u340	display/type340.c	/^} u340[TY340_UNITS];$/;"	v	typeref:struct:type340	file:
u4	sim_defs.h	/^    int32               u4;                             \/* device specific *\/$/;"	m	struct:UNIT
u5	sim_defs.h	/^    int32               u5;                             \/* device specific *\/$/;"	m	struct:UNIT
u6	sim_defs.h	/^    int32               u6;                             \/* device specific *\/$/;"	m	struct:UNIT
u_int32_t	slirp_glue/qemu/win32/stdint.h	/^typedef unsigned int        u_int32_t;$/;"	t
u_tlb	PDP10/kx10_cpu.c	/^uint32  u_tlb[546];                           \/* User TLB *\/$/;"	v
ub_lid	sim_disk.c	/^    uint16  ub_lid;$/;"	m	struct:_RSTS_UFDBLOCKETTE	file:
ub_lppn	sim_disk.c	/^    uint16  ub_lppn;$/;"	m	struct:_RSTS_UFDBLOCKETTE	file:
ub_mbm1	sim_disk.c	/^    uint16  ub_mbm1;$/;"	m	struct:_RSTS_UFDBLOCKETTE	file:
ub_ptr	PDP10/kx10_cpu.c	/^t_addr  ub_ptr;                               \/* User base pointer *\/$/;"	v
ub_reserved1	sim_disk.c	/^    uint16  ub_reserved1;$/;"	m	struct:_RSTS_UFDBLOCKETTE	file:
ub_reserved2	sim_disk.c	/^    uint16  ub_reserved2;$/;"	m	struct:_RSTS_UFDBLOCKETTE	file:
ub_reserved3	sim_disk.c	/^    uint16  ub_reserved3;$/;"	m	struct:_RSTS_UFDBLOCKETTE	file:
ub_reserved4	sim_disk.c	/^    uint16  ub_reserved4;$/;"	m	struct:_RSTS_UFDBLOCKETTE	file:
ub_ulnk	sim_disk.c	/^    uint16  ub_ulnk;$/;"	m	struct:_RSTS_UFDBLOCKETTE	file:
uba_addr	PDP10/kx10_defs.h	/^    uint32              uba_addr;                       \/* device address, includes adaptor *\/$/;"	m	struct:pdp_dib
uba_br	PDP10/kx10_defs.h	/^    uint16              uba_br;                         \/* Unibus IRQ level *\/$/;"	m	struct:pdp_dib
uba_clr_irq	PDP10/ks10_uba.c	/^uba_clr_irq(DIB *idev, int vect)$/;"	f
uba_ctl	PDP10/kx10_defs.h	/^    uint16              uba_ctl;                        \/* Unibus controller number *\/$/;"	m	struct:pdp_dib
uba_device	PDP10/ks10_uba.c	/^int     uba_device[16] = { -1, 0, -1, 1, -1, -1, -1, -1,$/;"	v
uba_get_vect	PDP10/ks10_uba.c	/^uba_get_vect(t_addr addr, int lvl, int dev)$/;"	f
uba_irq_ctlr	PDP10/ks10_uba.c	/^int     uba_irq_ctlr[128];$/;"	v
uba_irq_pend	PDP10/kx10_defs.h	/^    uint8               uba_irq_pend;                   \/* Device has pending *\/$/;"	m	struct:pdp_dib
uba_map	PDP10/ks10_uba.c	/^uint32  uba_map[2][64];$/;"	v
uba_mask	PDP10/kx10_defs.h	/^    uint32              uba_mask;                       \/* Compare mask *\/$/;"	m	struct:pdp_dib
uba_read	PDP10/ks10_uba.c	/^uba_read(t_addr addr, int ctl, uint64 *data, int access)$/;"	f
uba_read_npr	PDP10/ks10_uba.c	/^uba_read_npr(t_addr addr, uint16 ctl, uint64 *data)$/;"	f
uba_read_npr_byte	PDP10/ks10_uba.c	/^uba_read_npr_byte(t_addr addr, uint16 ctl, uint8 *data)$/;"	f
uba_read_npr_word	PDP10/ks10_uba.c	/^uba_read_npr_word(t_addr addr, uint16 ctl, uint16 *data)$/;"	f
uba_reset	PDP10/ks10_uba.c	/^uba_reset()$/;"	f
uba_rh_read	PDP10/kx10_rh.c	/^uba_rh_read(DEVICE *dptr, t_addr addr, uint16 *data, int32 access) {$/;"	f
uba_rh_write	PDP10/kx10_rh.c	/^uba_rh_write(DEVICE *dptr, t_addr addr, uint16 data, int32 access) {$/;"	f
uba_set_addr	PDP10/ks10_uba.c	/^uba_set_addr(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
uba_set_br	PDP10/ks10_uba.c	/^uba_set_br(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
uba_set_ctl	PDP10/ks10_uba.c	/^uba_set_ctl(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
uba_set_irq	PDP10/ks10_uba.c	/^uba_set_irq(DIB *dibp, int vect)$/;"	f
uba_set_parity	PDP10/ks10_uba.c	/^uba_set_parity(uint16 ctl)$/;"	f
uba_set_vect	PDP10/ks10_uba.c	/^uba_set_vect(UNIT *uptr, int32 val, CONST char *cptr, void *desc)$/;"	f
uba_show_addr	PDP10/ks10_uba.c	/^uba_show_addr (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
uba_show_br	PDP10/ks10_uba.c	/^uba_show_br (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
uba_show_ctl	PDP10/ks10_uba.c	/^uba_show_ctl (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
uba_show_vect	PDP10/ks10_uba.c	/^uba_show_vect (FILE *st, UNIT *uptr, int32 val, CONST void *desc)$/;"	f
uba_status	PDP10/ks10_uba.c	/^uint32  uba_status[2];$/;"	v
uba_vect	PDP10/kx10_defs.h	/^    uint16              uba_vect;                       \/* Floating IRQ vector *\/$/;"	m	struct:pdp_dib
uba_write	PDP10/ks10_uba.c	/^uba_write(t_addr addr, int ctl, uint64 data, int access)$/;"	f
uba_write_npr	PDP10/ks10_uba.c	/^uba_write_npr(t_addr addr, uint16 ctl, uint64 data)$/;"	f
uba_write_npr_byte	PDP10/ks10_uba.c	/^uba_write_npr_byte(t_addr addr, uint16 ctl, uint8 data)$/;"	f
uba_write_npr_word	PDP10/ks10_uba.c	/^uba_write_npr_word(t_addr addr, uint16 ctl, uint16 data)$/;"	f
ucode	PDP10/ks10_kmc.c	433;"	d	file:
udb	slirp/slirp.h	/^    struct socket udb;$/;"	m	struct:Slirp	typeref:struct:Slirp::socket
udp	PDP10/kl10_nia.c	/^struct udp {$/;"	s	file:
udp	PDP10/kx10_imp.c	/^struct udp {$/;"	s	file:
udp	slirp/bootp.h	/^    struct udphdr udp;$/;"	m	struct:bootp_t	typeref:struct:bootp_t::udphdr
udp	slirp/tftp.h	/^  struct udphdr udp;$/;"	m	struct:tftp_t	typeref:struct:tftp_t::udphdr
udp_attach	slirp/udp.c	/^udp_attach(struct socket *so)$/;"	f
udp_cleanup	slirp/udp.c	/^void udp_cleanup(Slirp *slirp)$/;"	f
udp_detach	slirp/udp.c	/^udp_detach(struct socket *so)$/;"	f
udp_dport	PDP10/kl10_nia.c	/^    uint16          udp_dport;          \/* Destination port *\/$/;"	m	struct:udp	file:
udp_dport	PDP10/kx10_imp.c	/^    uint16          udp_dport;          \/* Destination port *\/$/;"	m	struct:udp	file:
udp_hdr	PDP10/kl10_nia.c	/^struct udp_hdr {$/;"	s	file:
udp_hdr	PDP10/kx10_imp.c	/^struct udp_hdr {$/;"	s	file:
udp_init	slirp/udp.c	/^udp_init(Slirp *slirp)$/;"	f
udp_input	slirp/udp.c	/^udp_input(register struct mbuf *m, int iphlen)$/;"	f
udp_last_so	slirp/slirp.h	/^    struct socket *udp_last_so;$/;"	m	struct:Slirp	typeref:struct:Slirp::socket
udp_listen	slirp/udp.c	/^udp_listen(Slirp *slirp, uint32_t haddr, u_int hport, uint32_t laddr,$/;"	f
udp_output	slirp/udp.c	/^int udp_output(struct socket *so, struct mbuf *m,$/;"	f
udp_output2	slirp/udp.c	/^int udp_output2(struct socket *so, struct mbuf *m,$/;"	f
udp_sport	PDP10/kl10_nia.c	/^    uint16          udp_sport;          \/* Source port *\/$/;"	m	struct:udp	file:
udp_sport	PDP10/kx10_imp.c	/^    uint16          udp_sport;          \/* Source port *\/$/;"	m	struct:udp	file:
udp_tos	slirp/udp.c	/^udp_tos(struct socket *so)$/;"	f	file:
udphdr	slirp/udp.h	/^struct udphdr {$/;"	s
udpiphdr	slirp/udp.h	/^struct udpiphdr {$/;"	s
udptos	slirp/udp.c	/^static const struct tos_t udptos[] = {$/;"	v	typeref:struct:tos_t	file:
uflags	sim_disk.c	/^    int32               uflags;                         \/* unit flags *\/$/;"	m	struct:sim_disk_fmt	file:
uflags	sim_tape.c	/^    int32               uflags;                         \/* unit flags *\/$/;"	m	struct:sim_tape_fmt	file:
uh_dport	slirp/udp.h	/^    uint16_t uh_dport;          \/* destination port *\/$/;"	m	struct:udphdr
uh_sport	slirp/udp.h	/^    uint16_t uh_sport;          \/* source port *\/$/;"	m	struct:udphdr
uh_sum	slirp/udp.h	/^    uint16_t uh_sum;            \/* udp checksum *\/$/;"	m	struct:udphdr
uh_ulen	slirp/udp.h	/^    int16_t  uh_ulen;           \/* udp length *\/$/;"	m	struct:udphdr
ui_dport	slirp/udp.h	64;"	d
ui_dst	slirp/udp.h	62;"	d
ui_i	slirp/udp.h	/^                struct  ipovly ui_i;            \/* overlaid ip structure *\/$/;"	m	struct:udpiphdr	typeref:struct:udpiphdr::ipovly
ui_len	slirp/udp.h	60;"	d
ui_mbuf	slirp/udp.h	57;"	d
ui_pr	slirp/udp.h	59;"	d
ui_sport	slirp/udp.h	63;"	d
ui_src	slirp/udp.h	61;"	d
ui_sum	slirp/udp.h	66;"	d
ui_u	slirp/udp.h	/^                struct  udphdr ui_u;            \/* udp header *\/$/;"	m	struct:udpiphdr	typeref:struct:udpiphdr::udphdr
ui_ulen	slirp/udp.h	65;"	d
ui_x1	slirp/udp.h	58;"	d
uint16	display/ng.h	/^typedef unsigned short uint16;$/;"	t
uint16	display/vt11.h	/^typedef unsigned short uint16;$/;"	t
uint16	sim_defs.h	/^typedef uint16_t        uint16;$/;"	t
uint16	sim_defs.h	/^typedef unsigned __int16 uint16;$/;"	t
uint16_t	slirp_glue/qemu/win32/stdint.h	/^typedef unsigned short      uint16_t;$/;"	t
uint32	display/ng.h	/^typedef unsigned int uint32;$/;"	t
uint32	display/vt11.h	/^typedef unsigned int uint32;$/;"	t
uint32	sim_defs.h	/^typedef uint32_t        uint32;$/;"	t
uint32	sim_defs.h	/^typedef unsigned __int32 uint32;$/;"	t
uint32_t	slirp_glue/qemu/win32/stdint.h	/^typedef unsigned int        uint32_t;$/;"	t
uint64	PDP10/kx10_defs.h	/^typedef t_uint64     uint64;$/;"	t
uint64	PDP10/pidp10panel.c	/^typedef u_int64_t uint64;$/;"	t	file:
uint64	PDP10/pidp10panel.c	/^typedef uint64_t uint64;$/;"	t	file:
uint64	scp.c	/^typedef t_uint64 uint64;$/;"	t	file:
uint64	sim_disk.c	/^typedef t_uint64    uint64;$/;"	t	file:
uint64_t	slirp_glue/qemu/win32/stdint.h	/^typedef unsigned long long  uint64_t;$/;"	t
uint8	sim_defs.h	/^typedef uint8_t         uint8;$/;"	t
uint8	sim_defs.h	/^typedef unsigned __int8  uint8;$/;"	t
uint8_t	slirp_glue/qemu/win32/stdint.h	/^typedef unsigned char       uint8_t;$/;"	t
uint_fast16_t	slirp_glue/qemu/osdep.h	/^typedef unsigned int            uint_fast16_t;$/;"	t
uint_fast8_t	slirp_glue/qemu/osdep.h	/^typedef unsigned char           uint_fast8_t;$/;"	t
ultrix_disklabel	sim_disk.c	/^    } ultrix_disklabel;$/;"	t	typeref:struct:ultrix_disklabel	file:
ultrix_disklabel	sim_disk.c	/^typedef struct ultrix_disklabel {$/;"	s	file:
un_reserved1	sim_disk.c	/^    uint16  un_reserved1;$/;"	m	struct:_RSTS_UNAME	file:
un_reserved2	sim_disk.c	/^    uint16  un_reserved2;$/;"	m	struct:_RSTS_UNAME	file:
un_uaa	sim_disk.c	/^    uint16  un_uaa;$/;"	m	struct:_RSTS_UNAME	file:
un_uacnt	sim_disk.c	/^    uint16  un_uacnt;$/;"	m	struct:_RSTS_UNAME	file:
un_uar	sim_disk.c	/^    uint16  un_uar;$/;"	m	struct:_RSTS_UNAME	file:
un_ulnk	sim_disk.c	/^    uint16  un_ulnk;$/;"	m	struct:_RSTS_UNAME	file:
un_unam	sim_disk.c	/^    uint16  un_unam;$/;"	m	struct:_RSTS_UNAME	file:
un_ustat	sim_disk.c	/^    uint16  un_ustat;$/;"	m	struct:_RSTS_UNAME	file:
uname	sim_defs.h	/^    char                *uname;                         \/* Unit name *\/$/;"	m	struct:UNIT
unary	scp.c	/^    int         unary;$/;"	m	struct:Operator	file:
unit_htime	PDP10/ks10_kmc.c	510;"	d	file:
unit_kmc	PDP10/ks10_kmc.c	508;"	d	file:
unit_line	PDP10/ks10_kmc.c	509;"	d	file:
unit_name_len	scp.c	/^static size_t unit_name_len;$/;"	v	file:
units	sim_defs.h	/^    UNIT                *units;                         \/* units *\/$/;"	m	struct:DEVICE
unk_hdr	PDP10/kl10_nia.c	/^    t_addr            unk_hdr;                 \/* Unknown protocol free queue *\/$/;"	m	struct:nia_device	file:
unk_len	PDP10/kl10_nia.c	/^    int               unk_len;                 \/* Length of Unknown entries *\/$/;"	m	struct:nia_device	file:
unmap_peripheral	PDP10/pidp10panel.c	/^void unmap_peripheral(struct bcm2835_peripheral *p)$/;"	f
unregister_savevm	slirp_glue/config-host.h	38;"	d
unsetenv	scp.c	/^int unsetenv(const char *envname)$/;"	f	file:
unused	sim_tape.c	/^    char unused[11];$/;"	m	struct:HDR4	file:
unused	slirp/bootp.h	/^    uint16_t unused;$/;"	m	struct:bootp_t
up7	sim_defs.h	/^    void                *up7;                           \/* device specific *\/$/;"	m	struct:UNIT
up8	sim_defs.h	/^    void                *up8;                           \/* device specific *\/$/;"	m	struct:UNIT
upc	PDP10/ks10_kmc.c	425;"	d	file:
updateAB	PDP10/pidp10panel.c	/^void updateAB(int AB)$/;"	f
updateCursor	sim_console.c	/^static void updateCursor(void) {$/;"	f	file:
updateIOB_PIR	PDP10/pidp10panel.c	/^void updateIOB_PIR(int data)$/;"	f
updateIR	PDP10/pidp10panel.c	/^void updateIR(int IR)$/;"	f
updateMI	PDP10/pidp10panel.c	/^void updateMI(uint64 data)$/;"	f
updateMI_MEM	PDP10/pidp10panel.c	/^void updateMI_MEM(int data)$/;"	f
updateMI_PROG	PDP10/pidp10panel.c	/^void updateMI_PROG(int data)$/;"	f
updateMSTOP	PDP10/pidp10panel.c	/^void updateMSTOP(int data)$/;"	f
updatePC	PDP10/pidp10panel.c	/^void updatePC(int PC)$/;"	f
updatePIE	PDP10/pidp10panel.c	/^void updatePIE(int data)$/;"	f
updatePION	PDP10/pidp10panel.c	/^void updatePION(int data)$/;"	f
updatePIP	PDP10/pidp10panel.c	/^void updatePIP(int data)$/;"	f
updatePIR	PDP10/pidp10panel.c	/^void updatePIR(int data)$/;"	f
updatePOWER	PDP10/pidp10panel.c	/^void updatePOWER(int data)$/;"	f
updatePSTOP	PDP10/pidp10panel.c	/^void updatePSTOP(int data)$/;"	f
updateRUN	PDP10/pidp10panel.c	/^void updateRUN(int data)$/;"	f
updateUSER	PDP10/pidp10panel.c	/^void updateUSER(int data)$/;"	f
updateWindow	display/carbon.c	/^static pascal OSStatus updateWindow (   EventHandlerCallRef     handlerRef,$/;"	f	file:
update_disk_footer	sim_disk.c	/^static t_stat update_disk_footer (UNIT *uptr)$/;"	f	file:
update_times	PDP10/kx10_cpu.c	/^update_times(int tim)$/;"	f
uptr	sim_console.c	/^    UNIT            *uptr;                  \/* remote console unit *\/$/;"	m	struct:REMOTE	file:
uptr	sim_console.c	/^    UNIT            *uptr;          \/* Unit Register is related to *\/$/;"	m	struct:BITSAMPLE_REG	file:
uptr	sim_disk.c	/^    UNIT        *uptr;$/;"	m	struct:_rstsContext	file:
uptr	sim_tmxr.h	/^    UNIT                *uptr;                          \/* input polling unit (default to mp->uptr) *\/$/;"	m	struct:tmln
uptr	sim_tmxr.h	/^    UNIT                *uptr;                          \/* polling unit (connection) *\/$/;"	m	struct:tmxr
urgent	PDP10/kl10_nia.c	/^    uint16          urgent;             \/* Urgent pointer *\/$/;"	m	struct:tcp	file:
urgent	PDP10/kx10_imp.c	/^    uint16          urgent;             \/* Urgent pointer *\/$/;"	m	struct:tcp	file:
urgent	sim_ether.c	/^  uint16 urgent;$/;"	m	struct:TCPHeader	file:
us10	sim_defs.h	/^    uint16              us10;                           \/* device specific *\/$/;"	m	struct:UNIT
us9	sim_defs.h	/^    uint16              us9;                            \/* device specific *\/$/;"	m	struct:UNIT
usecs_between_callbacks	sim_frontpanel.c	/^    int                     usecs_between_callbacks;$/;"	m	struct:PANEL	file:
usecs_remaining	sim_defs.h	/^    double              usecs_remaining;                \/* time balance for long delays *\/$/;"	m	struct:UNIT
used	sim_ether.h	/^  uint32  used;                                         \/* bytes processed (used in packet chaining) *\/$/;"	m	struct:eth_packet
user_addr_cmp	PDP10/kx10_cpu.c	/^int     user_addr_cmp;                        \/* User address compare flag *\/$/;"	v
user_base_reg	PDP10/kx10_cpu.c	/^int     user_base_reg;                        \/* User base register *\/$/;"	v
user_io	PDP10/kx10_cpu.c	/^int     user_io;                              \/* User IO flag *\/$/;"	v
user_limit	PDP10/kx10_cpu.c	/^int     user_limit;                           \/* User limit register *\/$/;"	v
utf_code	PDP10/kx10_lp.c	/^uint16 utf_code[32] = {$/;"	v
utimbuf	sim_BuildROMs.c	88;"	d	file:
utime	sim_BuildROMs.c	89;"	d	file:
uuid_gen	sim_disk.c	/^uuid_gen (void *uuidaddr)$/;"	f	file:
uuo_cycle	PDP10/kx10_cpu.c	/^int     uuo_cycle;                            \/* Uuo cycle in progress *\/$/;"	v
uver	PDP10/kl10_nia.c	/^    uint32            uver[4];                 \/* Version information *\/$/;"	m	struct:nia_device	file:
valid	sim_defs.h	/^    t_stat              (*valid)(UNIT *up, int32 v, CONST char *cp, void *dp);$/;"	m	struct:MTAB
validate_test	scp.c	/^static DEVICE validate_test = {$/;"	v	file:
validate_units	scp.c	/^static UNIT validate_units[3];$/;"	v	file:
validation_test	scp.c	/^static struct validation_test {$/;"	s	file:
validations	scp.c	/^    } validations[] = {$/;"	v	typeref:struct:validation_test	file:
vals	sim_console.c	/^    int             *vals;          \/* values *\/$/;"	m	struct:BITSAMPLE	file:
valspec	sim_tmxr.c	/^    int32 valspec;$/;"	m	struct:lnorder_test	file:
value	scp.c	/^    char *value;$/;"	m	struct:deleted_env_var	file:
value	sim_sock.c	/^    int value;$/;"	m	struct:sock_errors	file:
value	sim_tmxr.c	/^    u_char value;$/;"	m	struct:__anon32	file:
valuenames	sim_defs.h	/^    const char      **valuenames;                       \/* map of values to strings *\/$/;"	m	struct:BITFIELD
vbc	sim_tape.c	/^    uint32              vbc;$/;"	m	struct:tape_context	file:
vdhcp_start	slirp_glue/sim_slirp.c	/^    struct in_addr vdhcp_start;$/;"	m	struct:sim_slirp	typeref:struct:sim_slirp::in_addr	file:
vdhcp_startaddr	slirp/slirp.h	/^    struct in_addr vdhcp_startaddr;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
vdnssearch	slirp/slirp.h	/^    uint8_t *vdnssearch;$/;"	m	struct:Slirp
vdnssearch_len	slirp/slirp.h	/^    size_t vdnssearch_len;$/;"	m	struct:Slirp
vector	display/type340.c	/^vector(int i, int sy, int dy, int sx, int dx)$/;"	f
vector2	display/vt11.c	2183;"	d	file:
vector3	display/vt11.c	/^vector3(int i, int32 dx, int32 dy, int32 dz)   \/* unscaled display-file units *\/$/;"	f	file:
vector_scale	display/vt11.c	328;"	d	file:
verbosedebugmask	sim_imd.h	/^    uint32 verbosedebugmask;$/;"	m	struct:__anon26
verhlen	sim_ether.c	/^  uint8 verhlen;          \/* Version & Header Length in dwords *\/$/;"	m	struct:IPHeader	file:
version	sim_tmxr.c	/^    char version[64];$/;"	m	struct:status_msg_t	file:
version_number	sim_tape.c	/^    char version_number[2];     \/* 00 *\/$/;"	m	struct:HDR1	file:
vgateway	slirp_glue/sim_slirp.c	/^    struct in_addr vgateway;$/;"	m	struct:sim_slirp	typeref:struct:sim_slirp::in_addr	file:
vhost_addr	slirp/slirp.h	/^    struct in_addr vhost_addr;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
vid_active	sim_video.c	/^int vid_active = 0;$/;"	v
vid_active_window	sim_video.c	/^t_bool vid_active_window;$/;"	m	struct:VID_DISPLAY	file:
vid_audio_callback	sim_video.c	/^static void vid_audio_callback(void *ctx, Uint8 *stream, int length)$/;"	f	file:
vid_beep	sim_video.c	/^void vid_beep (void)$/;"	f
vid_beep_cleanup	sim_video.c	/^static void vid_beep_cleanup (void)$/;"	f	file:
vid_beep_data	sim_video.c	/^static int16 *vid_beep_data;$/;"	v	file:
vid_beep_duration	sim_video.c	/^static int vid_beep_duration;$/;"	v	file:
vid_beep_event	sim_video.c	/^void vid_beep_event (void)$/;"	f
vid_beep_offset	sim_video.c	/^static int vid_beep_offset;$/;"	v	file:
vid_beep_samples	sim_video.c	/^static int vid_beep_samples;$/;"	v	file:
vid_beep_setup	sim_video.c	/^static void vid_beep_setup (int duration_ms, int tone_frequency)$/;"	f	file:
vid_blending	sim_video.c	/^t_bool vid_blending;$/;"	m	struct:VID_DISPLAY	file:
vid_close	sim_video.c	/^t_stat vid_close (void)$/;"	f
vid_close_all	sim_video.c	/^t_stat vid_close_all (void)$/;"	f
vid_close_window	sim_video.c	/^t_stat vid_close_window (VID_DISPLAY *vptr)$/;"	f
vid_controller_button	sim_video.c	/^void vid_controller_button (SDL_ControllerButtonEvent *event)$/;"	f
vid_controller_motion	sim_video.c	/^void vid_controller_motion (SDL_ControllerAxisEvent *event)$/;"	f
vid_controllers_cleanup	sim_video.c	/^static void vid_controllers_cleanup (void)$/;"	f	file:
vid_controllers_setup	sim_video.c	/^static void vid_controllers_setup (DEVICE *dev)$/;"	f	file:
vid_create_window	sim_video.c	/^static int vid_create_window (VID_DISPLAY *vptr)$/;"	f	file:
vid_create_window	sim_video.c	/^static t_stat vid_create_window (VID_DISPLAY *vptr)$/;"	f	file:
vid_cursor	sim_video.c	/^SDL_Cursor *vid_cursor;                                 \/* current cursor *\/$/;"	m	struct:VID_DISPLAY	file:
vid_cursor_visible	sim_video.c	/^t_bool vid_cursor_visible;                              \/* cursor visibility state *\/$/;"	m	struct:VID_DISPLAY	file:
vid_cursor_x	sim_video.c	/^int32 vid_cursor_x;$/;"	v
vid_cursor_y	sim_video.c	/^int32 vid_cursor_y;$/;"	v
vid_data_last	sim_video.c	/^uint32 *vid_data_last;$/;"	m	struct:VID_DISPLAY	file:
vid_destroy	sim_video.c	/^static void vid_destroy (VID_DISPLAY *vptr)$/;"	f	file:
vid_dev	sim_video.c	/^DEVICE *vid_dev;$/;"	m	struct:VID_DISPLAY	file:
vid_display_kb_event_process	display/sim_ws.c	/^int (*vid_display_kb_event_process)(SIM_KEY_EVENT *kev) = NULL;$/;"	v
vid_dname	sim_video.c	/^static const char *vid_dname (DEVICE *dev)$/;"	f	file:
vid_draw	sim_video.c	/^void vid_draw (int32 x, int32 y, int32 w, int32 h, uint32 *buf)$/;"	f
vid_draw_mutex	sim_video.c	/^SDL_mutex *vid_draw_mutex;                              \/* window update mutex *\/$/;"	m	struct:VID_DISPLAY	file:
vid_draw_region	sim_video.c	/^void vid_draw_region (VID_DISPLAY *vptr, SDL_UserEvent *event)$/;"	f
vid_draw_window	sim_video.c	/^void vid_draw_window (VID_DISPLAY *vptr, int32 x, int32 y, int32 w, int32 h, uint32 *buf)$/;"	f
vid_dst_last	sim_video.c	/^SDL_Rect *vid_dst_last;$/;"	m	struct:VID_DISPLAY	file:
vid_first	sim_video.c	/^static VID_DISPLAY vid_first;$/;"	v	file:
vid_flags	sim_video.c	/^int32 vid_flags;                                        \/* Open Flags *\/$/;"	m	struct:VID_DISPLAY	file:
vid_format	sim_video.c	/^SDL_PixelFormat *vid_format;$/;"	m	struct:VID_DISPLAY	file:
vid_gamepad_inited	sim_video.c	/^static int vid_gamepad_inited = 0;$/;"	v	file:
vid_gamepad_ok	sim_video.c	/^static int vid_gamepad_ok = 0; \/* Or else just joysticks. *\/$/;"	v	file:
vid_get_event_window	sim_video.c	/^static VID_DISPLAY *vid_get_event_window (SDL_Event *ev, Uint32 windowID)$/;"	f	file:
vid_height	sim_video.c	/^int32 vid_height;$/;"	m	struct:VID_DISPLAY	file:
vid_init_window	sim_video.c	/^static t_stat vid_init_window (VID_DISPLAY *vptr, DEVICE *dptr, const char *title, uint32 width, uint32 height, int flags)$/;"	f	file:
vid_is_fullscreen	sim_video.c	/^t_bool vid_is_fullscreen (void)$/;"	f
vid_is_fullscreen_window	sim_video.c	/^t_bool vid_is_fullscreen_window (VID_DISPLAY *vptr)$/;"	f
vid_joy_button	sim_video.c	/^void vid_joy_button (SDL_JoyButtonEvent *event)$/;"	f
vid_joy_motion	sim_video.c	/^void vid_joy_motion (SDL_JoyAxisEvent *event)$/;"	f
vid_key	sim_video.c	/^void vid_key (SDL_KeyboardEvent *event)$/;"	f
vid_key_events	sim_video.c	/^KEY_EVENT_QUEUE vid_key_events;                         \/* keyboard events *\/$/;"	v
vid_key_name	sim_video.c	/^const char *vid_key_name (uint32 key)$/;"	f
vid_key_state	sim_video.c	/^t_bool vid_key_state[SDL_NUM_SCANCODES];$/;"	m	struct:VID_DISPLAY	file:
vid_main_thread_handle	sim_video.c	/^static SDL_Thread *vid_main_thread_handle;$/;"	v	file:
vid_map_key	sim_video.c	/^int vid_map_key (int key)$/;"	f
vid_map_rgb	sim_video.c	/^uint32 vid_map_rgb (uint8 r, uint8 g, uint8 b)$/;"	f
vid_map_rgb_window	sim_video.c	/^uint32 vid_map_rgb_window (VID_DISPLAY *vptr, uint8 r, uint8 g, uint8 b)$/;"	f
vid_map_rgba_window	sim_video.c	/^uint32 vid_map_rgba_window (VID_DISPLAY *vptr, uint8 r, uint8 g, uint8 b, uint8 a)$/;"	f
vid_mouse_b1	sim_video.c	/^t_bool vid_mouse_b1 = FALSE;$/;"	v
vid_mouse_b2	sim_video.c	/^t_bool vid_mouse_b2 = FALSE;$/;"	v
vid_mouse_b3	sim_video.c	/^t_bool vid_mouse_b3 = FALSE;$/;"	v
vid_mouse_button	sim_video.c	/^void vid_mouse_button (SDL_MouseButtonEvent *event)$/;"	f
vid_mouse_captured	sim_video.c	/^t_bool vid_mouse_captured;$/;"	m	struct:VID_DISPLAY	file:
vid_mouse_events	sim_video.c	/^MOUSE_EVENT_QUEUE vid_mouse_events;                     \/* mouse events *\/$/;"	v
vid_mouse_move	sim_video.c	/^void vid_mouse_move (SDL_MouseMotionEvent *event)$/;"	f
vid_new_window	sim_video.c	/^static int vid_new_window (VID_DISPLAY *vptr)$/;"	f	file:
vid_open	sim_video.c	/^t_stat vid_open (DEVICE *dptr, const char *title, uint32 width, uint32 height, int flags)$/;"	f
vid_open_window	sim_video.c	/^t_stat vid_open_window (VID_DISPLAY **vptr, DEVICE *dptr, const char *title, uint32 width, uint32 height, int flags)$/;"	f
vid_poll_kb	sim_video.c	/^t_stat vid_poll_kb (SIM_KEY_EVENT *ev)$/;"	f
vid_poll_mouse	sim_video.c	/^t_stat vid_poll_mouse (SIM_MOUSE_EVENT *ev)$/;"	f
vid_quit_callback	sim_video.c	/^static VID_QUIT_CALLBACK vid_quit_callback = NULL;$/;"	v	file:
vid_ready	sim_video.c	/^t_bool vid_ready;$/;"	m	struct:VID_DISPLAY	file:
vid_refresh	sim_video.c	/^void vid_refresh (void)$/;"	f
vid_refresh_window	sim_video.c	/^void vid_refresh_window (VID_DISPLAY *vptr)$/;"	f
vid_register_gamepad_button_callback	sim_video.c	/^t_stat vid_register_gamepad_button_callback (VID_GAMEPAD_CALLBACK callback)$/;"	f
vid_register_gamepad_motion_callback	sim_video.c	/^t_stat vid_register_gamepad_motion_callback (VID_GAMEPAD_CALLBACK callback)$/;"	f
vid_register_quit_callback	sim_video.c	/^t_stat vid_register_quit_callback (VID_QUIT_CALLBACK callback)$/;"	f
vid_release_key	sim_video.c	/^char vid_release_key[64] = "Ctrl-Right-Shift";$/;"	v
vid_renderer	sim_video.c	/^SDL_Renderer *vid_renderer;$/;"	m	struct:VID_DISPLAY	file:
vid_screenshot	sim_video.c	/^t_stat vid_screenshot (const char *filename)$/;"	f
vid_screenshot_event	sim_video.c	/^void vid_screenshot_event (void)$/;"	f
vid_set_alpha_mode	sim_video.c	/^t_stat vid_set_alpha_mode (VID_DISPLAY *vptr, int mode)$/;"	f
vid_set_cursor	sim_video.c	/^t_stat vid_set_cursor (t_bool visible, uint32 width, uint32 height, uint8 *data, uint8 *mask, uint32 hot_x, uint32 hot_y)$/;"	f
vid_set_cursor_position	sim_video.c	/^void vid_set_cursor_position (int32 x, int32 y)$/;"	f
vid_set_cursor_position_window	sim_video.c	/^void vid_set_cursor_position_window (VID_DISPLAY *vptr, int32 x, int32 y)$/;"	f
vid_set_cursor_window	sim_video.c	/^t_stat vid_set_cursor_window (VID_DISPLAY *vptr, t_bool visible, uint32 width, uint32 height, uint8 *data, uint8 *mask, uint32 hot_x, uint32 hot_y)$/;"	f
vid_set_fullscreen	sim_video.c	/^t_stat vid_set_fullscreen (t_bool flag)$/;"	f
vid_set_fullscreen_window	sim_video.c	/^t_stat vid_set_fullscreen_window (VID_DISPLAY *vptr, t_bool flag)$/;"	f
vid_set_release_key	sim_video.c	/^t_stat vid_set_release_key (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f
vid_show	sim_video.c	/^t_stat vid_show (FILE* st, DEVICE *dptr,  UNIT* uptr, int32 val, CONST char* desc)$/;"	f
vid_show_release_key	sim_video.c	/^t_stat vid_show_release_key (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f
vid_show_video	sim_video.c	/^t_stat vid_show_video (FILE* st, UNIT* uptr, int32 val, CONST void* desc)$/;"	f
vid_show_video_event	sim_video.c	/^void vid_show_video_event (void)$/;"	f
vid_stretch	sim_video.c	/^static void vid_stretch(VID_DISPLAY *vptr, SDL_Rect *r)$/;"	f	file:
vid_texture	sim_video.c	/^SDL_Texture *vid_texture;                               \/* video buffer in GPU *\/$/;"	m	struct:VID_DISPLAY	file:
vid_thread	sim_video.c	/^int vid_thread (void *arg)$/;"	f
vid_thread_handle	sim_video.c	/^SDL_Thread *vid_thread_handle = NULL;                   \/* event thread handle *\/$/;"	v
vid_title	sim_video.c	/^char vid_title[128];$/;"	m	struct:VID_DISPLAY	file:
vid_update	sim_video.c	/^void vid_update (VID_DISPLAY *vptr)$/;"	f
vid_update_cursor	sim_video.c	/^void vid_update_cursor (VID_DISPLAY *vptr, SDL_Cursor *cursor, t_bool visible)$/;"	f
vid_version	sim_video.c	/^const char *vid_version (void)$/;"	f
vid_version	sim_video.c	/^const char *vid_version(void)$/;"	f
vid_video_events	sim_video.c	/^int vid_video_events (VID_DISPLAY *vptr0)$/;"	f
vid_warp_position	sim_video.c	/^void vid_warp_position (VID_DISPLAY *vptr)$/;"	f
vid_width	sim_video.c	/^int32 vid_width;$/;"	m	struct:VID_DISPLAY	file:
vid_window	sim_video.c	/^SDL_Window *vid_window;                                 \/* window handle *\/$/;"	m	struct:VID_DISPLAY	file:
vid_windowID	sim_video.c	/^uint32 vid_windowID;$/;"	m	struct:VID_DISPLAY	file:
vnameserver	slirp_glue/sim_slirp.c	/^    struct in_addr vnameserver;$/;"	m	struct:sim_slirp	typeref:struct:sim_slirp::in_addr	file:
vnameserver_addr	slirp/slirp.h	/^    struct in_addr vnameserver_addr;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
vnetmask	slirp_glue/sim_slirp.c	/^    struct in_addr vnetmask;$/;"	m	struct:sim_slirp	typeref:struct:sim_slirp::in_addr	file:
vnetwork	slirp_glue/sim_slirp.c	/^    struct in_addr vnetwork;$/;"	m	struct:sim_slirp	typeref:struct:sim_slirp::in_addr	file:
vnetwork_addr	slirp/slirp.h	/^    struct in_addr vnetwork_addr;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
vnetwork_mask	slirp/slirp.h	/^    struct in_addr vnetwork_mask;$/;"	m	struct:Slirp	typeref:struct:Slirp::in_addr
vol1	sim_tape.c	/^    VOL1 vol1;$/;"	m	struct:MEMORY_TAPE	file:
vol1_standard	sim_tape.c	/^    char                vol1_standard;          \/* 3 or 4 *\/$/;"	m	struct:ansi_tape_parameters	file:
vptr	sim_video.h	/^    VID_DISPLAY *vptr;                                    \/* which display *\/$/;"	m	struct:key_event
vptr	sim_video.h	/^    VID_DISPLAY *vptr;                                    \/* which display *\/$/;"	m	struct:mouse_event
vsnprintf	sim_defs.h	270;"	d
vsnprintf	sim_frontpanel.c	2567;"	d	file:
vt11_csp_h	display/vt11.c	/^int32 vt11_csp_h = VT11_CSP_H;          \/* vertical character spacing *\/$/;"	v
vt11_csp_w	display/vt11.c	/^int32 vt11_csp_w = VT11_CSP_W;          \/* horizontal character spacing *\/$/;"	v
vt11_cycle	display/vt11.c	/^vt11_cycle(int us, int slowdown)$/;"	f
vt11_dbit	display/vt11.c	/^static int vt11_dbit;$/;"	v	file:
vt11_debug	display/vt11.c	/^int vt11_debug;$/;"	v
vt11_display	display/vt11.c	/^enum display_type vt11_display = DISPLAY_TYPE;  \/* DIS_VR{14,17,48} *\/$/;"	v	typeref:enum:display_type
vt11_dptr	display/vt11.c	/^static void *vt11_dptr;$/;"	v	file:
vt11_get_anr	display/vt11.c	/^vt11_get_anr(void)$/;"	f
vt11_get_dpc	display/vt11.c	/^vt11_get_dpc(void)$/;"	f
vt11_get_mpr	display/vt11.c	/^vt11_get_mpr(void)$/;"	f
vt11_get_nr	display/vt11.c	/^vt11_get_nr(void)$/;"	f
vt11_get_rr	display/vt11.c	/^vt11_get_rr(void)$/;"	f
vt11_get_sar	display/vt11.c	/^vt11_get_sar(void)$/;"	f
vt11_get_scr	display/vt11.c	/^vt11_get_scr(void)$/;"	f
vt11_get_sdr	display/vt11.c	/^vt11_get_sdr(void)$/;"	f
vt11_get_spr	display/vt11.c	/^vt11_get_spr(void)$/;"	f
vt11_get_str	display/vt11.c	/^vt11_get_str(void)$/;"	f
vt11_get_xor	display/vt11.c	/^vt11_get_xor(void)$/;"	f
vt11_get_xpr	display/vt11.c	/^vt11_get_xpr(void)$/;"	f
vt11_get_yor	display/vt11.c	/^vt11_get_yor(void)$/;"	f
vt11_get_ypr	display/vt11.c	/^vt11_get_ypr(void)$/;"	f
vt11_get_zor	display/vt11.c	/^vt11_get_zor(void)$/;"	f
vt11_get_zpr	display/vt11.c	/^vt11_get_zpr(void)$/;"	f
vt11_init	display/vt11.c	/^unsigned char vt11_init = 0;    \/* set after display_init() called *\/$/;"	v
vt11_reset	display/vt11.c	/^vt11_reset(void *dev, int debug)$/;"	f
vt11_scale	display/vt11.c	/^int vt11_scale = PIX_SCALE;     \/* RES_{FULL,HALF,QUARTER,EIGHTH} *\/$/;"	v
vt11_set_anr	display/vt11.c	/^vt11_set_anr(uint16 d)$/;"	f
vt11_set_dpc	display/vt11.c	/^vt11_set_dpc(uint16 d)$/;"	f
vt11_set_mpr	display/vt11.c	/^vt11_set_mpr(uint16 d)$/;"	f
vt11_set_nr	display/vt11.c	/^vt11_set_nr(uint16 d)$/;"	f
vt11_set_rr	display/vt11.c	/^vt11_set_rr(uint16 d)$/;"	f
vt11_set_sar	display/vt11.c	/^vt11_set_sar(uint16 d)$/;"	f
vt11_set_scr	display/vt11.c	/^vt11_set_scr(uint16 d)$/;"	f
vt11_set_sdr	display/vt11.c	/^vt11_set_sdr(uint16 d)$/;"	f
vt11_set_spr	display/vt11.c	/^vt11_set_spr(uint16 d)$/;"	f
vt11_set_str	display/vt11.c	/^vt11_set_str(uint16 d)$/;"	f
vt11_set_xor	display/vt11.c	/^vt11_set_xor(uint16 d)$/;"	f
vt11_set_xpr	display/vt11.c	/^vt11_set_xpr(uint16 d)$/;"	f
vt11_set_yor	display/vt11.c	/^vt11_set_yor(uint16 d)$/;"	f
vt11_set_ypr	display/vt11.c	/^vt11_set_ypr(uint16 d)$/;"	f
vt11_set_zor	display/vt11.c	/^vt11_set_zor(uint16 d)$/;"	f
vt11_set_zpr	display/vt11.c	/^vt11_set_zpr(uint16 d)$/;"	f
vt11word	display/vt11.h	/^typedef uint16 vt11word;$/;"	t
vt_char_intr	display/vttest.c	/^vt_char_intr(void) {$/;"	f
vt_fetch	display/vttest.c	/^vt_fetch(uint32 addr, vt11word *w) {$/;"	f
vt_lpen_intr	display/vttest.c	/^vt_lpen_intr(void) {$/;"	f
vt_name_intr	display/vttest.c	/^vt_name_intr(void) {$/;"	f
vt_stop_intr	display/vttest.c	/^vt_stop_intr(void) {$/;"	f
vtime	sim_timer.c	/^    uint32 vtime;                   \/* virtual time (usecs) *\/$/;"	m	struct:RTC	file:
wait	sim_defs.h	/^    int32               wait;                           \/* wait *\/$/;"	m	struct:UNIT
waits_code	PDP10/kx10_lp.c	/^uint16 waits_code[32] = {$/;"	v
watch_stop	PDP10/kx10_cpu.c	/^int     watch_stop;                           \/* Stop at memory watch point *\/$/;"	v
wbitmap	sim_disk.c	/^    uint32 *wbitmap;$/;"	m	struct:disk_test_coverage	file:
wcallback	PDP10/kl10_nia.c	/^    ETH_PCALLBACK     wcallback;               \/* write callback routine *\/$/;"	m	struct:nia_device	file:
wcallback	PDP10/kx10_imp.c	/^    ETH_PCALLBACK     wcallback;               \/* write callback routine *\/$/;"	m	struct:imp_device	file:
wcnsls_description	PDP10/kx10_dpy.c	/^const char *wcnsls_description (DEVICE *dptr)$/;"	f
wcnsls_dev	PDP10/kx10_dpy.c	/^DEVICE wcnsls_dev = {$/;"	v
wcnsls_devio	PDP10/kx10_dpy.c	/^t_stat wcnsls_devio(uint32 dev, uint64 *data) {$/;"	f
wcnsls_dib	PDP10/kx10_dpy.c	/^DIB wcnsls_dib[] = {$/;"	v
wcnsls_mod	PDP10/kx10_dpy.c	/^MTAB wcnsls_mod[] = {$/;"	v
wcnsls_reg	PDP10/kx10_dpy.c	/^REG wcnsls_reg[] = {$/;"	v
wcnsls_reset	PDP10/kx10_dpy.c	/^wcnsls_reset (DEVICE *dptr)$/;"	f
wcnsls_svc	PDP10/kx10_dpy.c	/^t_stat wcnsls_svc (UNIT *uptr)$/;"	f
wcnsls_unit	PDP10/kx10_dpy.c	/^UNIT wcnsls_unit[] = {$/;"	v
wcr	PDP10/kx10_defs.h	/^      uint32         wcr;        \/* CUrrent word count *\/$/;"	m	struct:df10
wcr	PDP10/kx10_defs.h	/^      uint32         wcr;        \/* Current word count *\/$/;"	m	struct:rh_if
wcr	PDP10/kx10_defs.h	/^      uint32         wcr;$/;"	m	struct:rh_if
wd_seg	PDP10/kx10_rc.c	/^    int32       wd_seg;                                 \/* Number of words per segment *\/$/;"	m	struct:drvtyp	file:
wf_update	display/vttest.c	/^wf_update(int first_time) {$/;"	f	file:
whiteGC	display/x11.c	/^static GC whiteGC;              \/* gc with white foreground *\/$/;"	v	file:
white_brush	display/win32.c	/^static HBRUSH white_brush;$/;"	v	file:
whteColor	display/carbon.c	/^static RGBColor                 whteColor = { 0xFFFF, 0xFFFF, 0xFFFF };$/;"	v	file:
width	display/sim_ws.c	/^    int width;$/;"	m	struct:cursor	file:
width	display/type340.c	/^    unsigned char width;        \/* character grid width *\/$/;"	m	struct:type340	file:
width	sim_console.c	/^    uint32          width;          \/* number of bits to sample *\/$/;"	m	struct:BITSAMPLE_REG	file:
width	sim_defs.h	/^    uint32              width;                          \/* width *\/$/;"	m	struct:REG
width	sim_defs.h	/^    uint32          width;                              \/* width *\/$/;"	m	struct:BITFIELD
width_mask	scp.c	/^const t_value width_mask[] = { 0,$/;"	v
window	PDP10/kl10_nia.c	/^    uint16          window;             \/* Window size *\/$/;"	m	struct:tcp	file:
window	PDP10/kx10_imp.c	/^    uint16          window;             \/* Window size *\/$/;"	m	struct:tcp	file:
window	sim_ether.c	/^  uint16 window;$/;"	m	struct:TCPHeader	file:
window_name	display/sim_ws.c	/^static const char *window_name;$/;"	v	file:
window_name	display/win32.c	/^static const char *window_name;$/;"	v	file:
winsock_cleanup	slirp/slirp.c	/^static void winsock_cleanup(void)$/;"	f	file:
word_number	display/vt11.c	/^static int word_number = -2;            \/* tracks multiple data words *\/$/;"	v	file:
words	display/tst340.c	/^int words[] = {$/;"	v
workblock	PDP10/ks10_kmc.c	/^ struct workblock {$/;"	s	file:
wr_eor	PDP10/kx10_mt.c	/^uint8           wr_eor;$/;"	v
wr_io	PDP10/kx10_defs.h	/^    t_stat              (*wr_io)(DEVICE *dptr, t_addr addr, uint16 data, int32 access);$/;"	m	struct:pdp_dib
write_buffer_lock	slirp_glue/sim_slirp.c	/^    pthread_mutex_t write_buffer_lock;$/;"	m	struct:sim_slirp	file:
write_buffers	sim_ether.h	/^  ETH_WRITE_REQUEST *write_buffers;$/;"	m	struct:eth_device
write_buffers	slirp_glue/sim_slirp.c	/^    struct slirp_write_request *write_buffers;$/;"	m	struct:sim_slirp	typeref:struct:sim_slirp::slirp_write_request	file:
write_callback	sim_ether.h	/^  ETH_PCALLBACK write_callback;                         \/* write callback function *\/$/;"	m	struct:eth_device
write_count	sim_disk.c	/^    uint32              write_count;        \/* Number of write operations performed *\/$/;"	m	struct:disk_context	file:
write_iosb	sim_serial.c	/^    IOSB write_iosb;$/;"	m	struct:SERPORT	file:
write_queue_peak	sim_ether.h	/^  int write_queue_peak;$/;"	m	struct:eth_device
write_requests	sim_ether.h	/^  ETH_WRITE_REQUEST *write_requests;$/;"	m	struct:eth_device
write_requests	slirp_glue/sim_slirp.c	/^    struct slirp_write_request *write_requests;$/;"	m	struct:sim_slirp	typeref:struct:sim_slirp::slirp_write_request	file:
write_status	sim_ether.h	/^  t_stat write_status;$/;"	m	struct:eth_device
write_word	PDP10/ka10_ten11.c	/^static int write_word (t_addr addr, uint16 data)$/;"	f	file:
writer_cond	sim_ether.h	/^  pthread_cond_t      writer_cond;$/;"	m	struct:eth_device
writer_lock	sim_ether.h	/^  pthread_mutex_t     writer_lock;$/;"	m	struct:eth_device
writer_thread	sim_ether.h	/^  pthread_t     writer_thread;                          \/* Writer Thread Id *\/$/;"	m	struct:eth_device
ws_beep	display/carbon.c	/^void ws_beep (void)$/;"	f
ws_beep	display/sim_ws.c	/^ws_beep(void) {$/;"	f
ws_beep	display/win32.c	/^ws_beep(void) {$/;"	f
ws_beep	display/x11.c	/^ws_beep(void)$/;"	f
ws_color_black	display/carbon.c	/^void *ws_color_black (void)$/;"	f
ws_color_black	display/sim_ws.c	/^ws_color_black(void)$/;"	f
ws_color_black	display/win32.c	/^ws_color_black(void)$/;"	f
ws_color_black	display/x11.c	/^ws_color_black(void)$/;"	f
ws_color_rgb	display/carbon.c	/^void *ws_color_rgb (    int     r,$/;"	f
ws_color_rgb	display/sim_ws.c	/^ws_color_rgb(int r, int g, int b)$/;"	f
ws_color_rgb	display/win32.c	/^ws_color_rgb(int r, int g, int b)$/;"	f
ws_color_rgb	display/x11.c	/^ws_color_rgb(int r, int g, int b)$/;"	f
ws_color_white	display/carbon.c	/^void *ws_color_white (void)$/;"	f
ws_color_white	display/sim_ws.c	/^ws_color_white(void)$/;"	f
ws_color_white	display/win32.c	/^ws_color_white(void)$/;"	f
ws_color_white	display/x11.c	/^ws_color_white(void)$/;"	f
ws_create_cursor	display/sim_ws.c	/^static CURSOR *ws_create_cursor(const char *image[])$/;"	f	file:
ws_display_point	display/carbon.c	/^void ws_display_point ( int     x,$/;"	f
ws_display_point	display/sim_ws.c	/^ws_display_point(int x, int y, void *color)$/;"	f
ws_display_point	display/win32.c	/^ws_display_point(int x, int y, void *color)$/;"	f
ws_display_point	display/x11.c	/^ws_display_point(int x, int y, void *color)$/;"	f
ws_free_cursor	display/sim_ws.c	/^static void ws_free_cursor (CURSOR *cursor)$/;"	f	file:
ws_init	display/carbon.c	/^int ws_init (   const char *crtname,    \/* crt type name *\/$/;"	f
ws_init	display/sim_ws.c	/^ws_init(const char *name, int xp, int yp, int colors, void *dptr)$/;"	f
ws_init	display/win32.c	/^ws_init(const char *name, int xp, int yp, int colors, void *dptr)$/;"	f
ws_init	display/x11.c	/^ws_init(const char *crtname,    \/* crt type name *\/$/;"	f
ws_init2	display/win32.c	/^ws_init2(void) {$/;"	f	file:
ws_loop	display/win32.c	/^ws_loop(void (*func)(void *), void *arg)$/;"	f
ws_loop	display/x11.c	/^ws_loop(void (*func)(void *), void *arg)$/;"	f
ws_lp_x	display/carbon.c	/^int ws_lp_x = -1;$/;"	v
ws_lp_x	display/sim_ws.c	/^int ws_lp_x = -1;$/;"	v
ws_lp_x	display/win32.c	/^int ws_lp_x = -1;$/;"	v
ws_lp_x	display/x11.c	/^int ws_lp_x = -1;$/;"	v
ws_lp_y	display/carbon.c	/^int ws_lp_y = -1;$/;"	v
ws_lp_y	display/sim_ws.c	/^int ws_lp_y = -1;$/;"	v
ws_lp_y	display/win32.c	/^int ws_lp_y = -1;$/;"	v
ws_lp_y	display/x11.c	/^int ws_lp_y = -1;$/;"	v
ws_palette	display/sim_ws.c	/^static uint32 ws_palette[2];                            \/* Monochrome palette *\/$/;"	v	file:
ws_poll	display/carbon.c	/^int ws_poll (   int     *valp,$/;"	f
ws_poll	display/sim_ws.c	/^ws_poll(int *valp, int maxus)$/;"	f
ws_poll	display/win32.c	/^ws_poll(int *valp, int maxus)$/;"	f
ws_poll	display/x11.c	/^ws_poll(int *valp, int maxusec)$/;"	f
ws_shutdown	display/carbon.c	/^void ws_shutdown (void)$/;"	f
ws_shutdown	display/sim_ws.c	/^ws_shutdown(void)$/;"	f
ws_shutdown	display/win32.c	/^void ws_shutdown (void)$/;"	f
ws_shutdown	display/x11.c	/^void ws_shutdown (void)$/;"	f
ws_sync	display/carbon.c	/^void ws_sync (void)$/;"	f
ws_sync	display/sim_ws.c	/^ws_sync(void) {$/;"	f
ws_sync	display/win32.c	/^ws_sync(void) {$/;"	f
ws_sync	display/x11.c	/^ws_sync(void)$/;"	f
ws_thread_init	display/win32.c	/^ws_thread_init(void)$/;"	f	file:
wsetbits	sim_disk.c	/^    uint32 wsetbits;$/;"	m	struct:disk_test_coverage	file:
x	display/ng.c	/^static int x[8];$/;"	v	file:
x	slirp/tftp.h	/^  } x;$/;"	m	struct:tftp_t	typeref:union:tftp_t::__anon37
xBSD	sim_ether.h	79;"	d
x_collect_cmd	sim_console.c	/^static t_stat x_collect_cmd (int32 flag, CONST char *cptr)$/;"	f	file:
x_continue_cmd	sim_console.c	/^static t_stat x_continue_cmd (int32 flag, CONST char *cptr)$/;"	f	file:
x_edge	display/vt11.c	/^static int x_edge;                      \/* 1023 or VR48_WIDTH-1, depending *\/$/;"	v	file:
x_execute_cmd	sim_console.c	/^static t_stat x_execute_cmd (int32 flag, CONST char *cptr)$/;"	f	file:
x_help_cmd	sim_console.c	/^static t_stat x_help_cmd (int32 flag, CONST char *cptr)$/;"	f	file:
x_pos	sim_video.h	/^    int32 x_pos;                                          \/* X axis position *\/$/;"	m	struct:mouse_event
x_rel	sim_video.h	/^    int32 x_rel;                                          \/* X axis relative motion *\/$/;"	m	struct:mouse_event
x_repeat_cmd	sim_console.c	/^static t_stat x_repeat_cmd (int32 flag, CONST char *cptr)$/;"	f	file:
x_run_cmd	sim_console.c	/^static t_stat x_run_cmd (int32 flag, CONST char *cptr)$/;"	f	file:
x_sampleout_cmd	sim_console.c	/^static t_stat x_sampleout_cmd (int32 flag, CONST char *cptr)$/;"	f	file:
x_step_cmd	sim_console.c	/^static t_stat x_step_cmd (int32 flag, CONST char *cptr)$/;"	f	file:
xchg	slirp/tcp_subr.c	143;"	d	file:
xchg	slirp/tcp_subr.c	146;"	d	file:
xct_flag	PDP10/kx10_cpu.c	/^int     xct_flag;                             \/* XCT flags *\/$/;"	v
xfer_drive	PDP10/kx10_defs.h	/^      int            xfer_drive; \/* Current transfering drive *\/$/;"	m	struct:rh_if
xfer_element_size	sim_disk.c	/^    uint32              xfer_element_size;  \/* Disk Bus Transfer size (1 - byte, 2 - word, 4 - longword) *\/$/;"	m	struct:disk_context	file:
xid	PDP10/kx10_imp.c	/^    uint32            xid;                     \/* id number *\/$/;"	m	struct:dhcp	file:
xline	display/display.c	/^xline (int x, int y, int x2, int dx, int dy, int level)$/;"	f	file:
xline	display/imlac.c	/^xline (int x, int y, int x2, int dx, int dy)$/;"	f	file:
xline	display/tt2500.c	/^xline (int x, int y, int x2, int dx, int dy, int i)$/;"	f	file:
xmit	PDP10/kx10_imp.c	/^    int               xmit;                    \/* transmitted packets *\/$/;"	m	struct:imp_stats	file:
xmode	display/tst340.c	/^xmode(int word)$/;"	f	file:
xmte	sim_tmxr.h	/^    int32               xmte;                           \/* xmt enable *\/$/;"	m	struct:tmln
xoff	display/vt11.c	/^static int32            xoff = 0;       \/* X offset register * PSCALEF *\/$/;"	v	file:
xoffset	display/x11.c	/^static int xoffset, yoffset;$/;"	v	file:
xpixels	display/carbon.c	/^static int                      xpixels, ypixels;$/;"	v	file:
xpixels	display/display.c	/^static int xpixels, ypixels;$/;"	v	file:
xpixels	display/sim_ws.c	/^static int xpixels, ypixels;$/;"	v	file:
xpixels	display/win32.c	/^static int xpixels, ypixels;$/;"	v	file:
xpixels	display/x11.c	/^static int xpixels, ypixels;$/;"	v	file:
xpoints	display/display.c	/^    short xpoints, ypoints;$/;"	m	struct:display	file:
xpoints	display/display.c	/^static int xpoints, ypoints;$/;"	v	file:
xpos	display/type340.c	/^    signed short xpos, ypos;    \/* 10 bits, signed (for OOB checks) *\/$/;"	m	struct:type340	file:
xpos	display/vt11.c	/^static int32         xpos = 0;          \/* X position register * PSCALEF *\/$/;"	v	file:
y	display/ng.c	/^static int y[8];$/;"	v	file:
y2k_date_bug	sim_tape.c	/^    t_bool              y2k_date_bug;$/;"	m	struct:ansi_tape_parameters	file:
y_edge	display/vt11.c	/^static int y_edge;                      \/* 767 or 1023, depending on display *\/$/;"	v	file:
y_pos	sim_video.h	/^    int32 y_pos;                                          \/* Y axis position *\/$/;"	m	struct:mouse_event
y_rel	sim_video.h	/^    int32 y_rel;                                          \/* Y axis relative motion *\/$/;"	m	struct:mouse_event
yiaddr	PDP10/kx10_imp.c	/^    in_addr_T         yiaddr;                  \/* Your IP address *\/$/;"	m	struct:dhcp	file:
yline	display/display.c	/^yline (int x, int y, int y2, int dx, int dy, int level)$/;"	f	file:
yline	display/imlac.c	/^yline (int x, int y, int y2, int dx, int dy)$/;"	f	file:
yline	display/tt2500.c	/^yline (int x, int y, int y2, int dx, int dy, int i)$/;"	f	file:
yoff	display/vt11.c	/^static int32            yoff = 0;       \/* Y offset register * PSCALEF *\/$/;"	v	file:
yoffset	display/x11.c	/^static int xoffset, yoffset;$/;"	v	file:
ypixels	display/carbon.c	/^static int                      xpixels, ypixels;$/;"	v	file:
ypixels	display/display.c	/^static int xpixels, ypixels;$/;"	v	file:
ypixels	display/sim_ws.c	/^static int xpixels, ypixels;$/;"	v	file:
ypixels	display/win32.c	/^static int xpixels, ypixels;$/;"	v	file:
ypixels	display/x11.c	/^static int xpixels, ypixels;$/;"	v	file:
ypoints	display/display.c	/^    short xpoints, ypoints;$/;"	m	struct:display	file:
ypoints	display/display.c	/^static int xpoints, ypoints;$/;"	v	file:
ypos	display/type340.c	/^    signed short xpos, ypos;    \/* 10 bits, signed (for OOB checks) *\/$/;"	m	struct:type340	file:
ypos	display/vt11.c	/^static int32         ypos = 0;          \/* Y position register * PSCALEF *\/$/;"	v	file:
zero	PDP10/kl10_nia.c	/^    uint8           zero;$/;"	m	struct:udp_hdr	file:
zero	PDP10/kx10_imp.c	/^    uint8           zero;$/;"	m	struct:udp_hdr	file:
zero_record_length	sim_tape.c	/^    t_bool              zero_record_length;$/;"	m	struct:ansi_tape_parameters	file:
zoff	display/vt11.c	/^static int32            zoff = 0;       \/* Z offset register * PSCALEF *\/$/;"	v	file:
zpos	display/vt11.c	/^static int32 zpos = 0;                  \/* (Z "position" reg. * 4) * PSCALEF *\/$/;"	v	file:
